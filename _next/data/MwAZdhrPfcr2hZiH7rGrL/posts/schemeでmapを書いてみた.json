{"pageProps":{"title":"schemeでmapを書いてみた","published":"2015/10/21","tags":["scheme"],"content":"<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>の問題 2.37をやろうとしたところ，この本で定義した一つのリストのみに対応したmapではなく<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のリストに対応したmapが必要だったので自分で書いてみました．<br>\n　</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foldr op init lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      init\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>foldr op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> op <span class=\"synSpecial\">.</span> lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>map1 op lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>op x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'()</span> lst<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>map1 op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>rest lst<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">((</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span> rest<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)))</span> rest<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span>map1 <span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                  <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (map + '(1 2 3) '(4 5 6))\n</span><span class=\"code-line\">(5 7 9)</span></code></pre>\n<p>うまく動いてくれてるようです．<br>\n可変長引数を省略した時にはrestに空リストが入るので(null? rest)で分岐することにしました．</p>","slug":"schemeでmapを書いてみた","rawContent":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>の問題 2.37をやろうとしたところ，この本で定義した一つのリストのみに対応したmapではなく<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のリストに対応したmapが必要だったので自分で書いてみました．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foldr op init lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      init\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>foldr op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> op <span class=\"synSpecial\">.</span> lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>map1 op lst<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>op x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'()</span> lst<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>map1 op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>rest lst<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                      <span class=\"synSpecial\">((</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span> rest<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)))</span> rest<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span>map1 <span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (map + &#39;(1 2 3) &#39;(4 5 6))\n(5 7 9)</pre>\n\n\n<p>うまく動いてくれてるようです．<br/>\n可変長引数を省略した時にはrestに空リストが入るので(null? rest)で分岐することにしました．</p>\n\n"},"__N_SSG":true}