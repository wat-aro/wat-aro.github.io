{"pageProps":{"title":"プログラミングGauche 19.7 簡易な例外機構のまとめ","published":"2015/09/25","tags":["scheme","gauche"],"content":"<p>マクロと<code>call/cc</code>を使った<code>catch</code>と<code>throw</code>の実装の解説を備忘録として残します．<br>\n　</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; 簡易例外機構</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> catch\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally follow ...<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>signals-backup <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">call/cc</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>k<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>sig k<span class=\"synSpecial\">)</span> <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                            body ...<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> signals-backup<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       follow ...\n</span><span class=\"code-line\">       val<span class=\"synSpecial\">)]</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">))]))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> throw\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">[(</span>_ sig val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> <span class=\"synSpecial\">'</span>sig <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span> val<span class=\"synSpecial\">)]))</span>\n</span></code></pre>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; サンプルコード</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div n d<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> d <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>throw DivedeZeroError\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>print <span class=\"synError\">#`</span><span class=\"synConstant\">\"ERROR: Divide Zero Error Occured...\\n divide ,n by ZERO!\\n--------------------\"</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n d<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>percentage a b<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>DivedeZeroError\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>print <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>div a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">100.0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">\"%\"</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>finally\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>print <span class=\"synConstant\">\"follow ...\"</span><span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>　<br>\n　<br>\n処理の流れを説明します．<br>\n<code>*signal*</code>の初期値を<code>signals-backup</code>に束縛します．<br>\nその後<code>*signal*</code>には<code>(set! *signal* ...)</code>の行で<code>car</code>にシグナル，<code>cdr</code>に継続を渡すk，というペアのリストが束縛されます．<br>\n<code>((sig . k))</code>という形になります．<br>\nサンプルコードでは<code>((DivisedZeroError . k))</code>が入ります．<br>\nその後<code>body</code>が実行されます．<br>\nサンプルコードでは<code>percentage</code>の最初の<code>print</code>行．<br>\nここで<code>div</code>が呼ばれます．<br>\n<code>(= d 0)</code>のが真の時に<code>throw</code>が呼ばれます．<br>\n<code>(cdr (assq 'sig *signals*))</code>が評価され継続を表す<code>k</code>が返され，<code>(k val)</code>で<code>throw</code>の<code>print</code> 行を実行し，戻り値が<code>catch</code>のvalに束縛されます．<br>\n（※　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>でkeenさん(@blackenedgold)さんから，継続を渡す<code>k</code>ではなく，継続を表す<code>k</code>と教えていただいたので訂正しました．）<br>\nここではまってたのですが，<code>(= d 0)</code>なのにシグナルが違っていた場合は<code>(cdr #f)</code>となりエラーが返ります.<br>\nシグナルを間違えるなって話ですね．<br>\n<code>(= d 0)</code>が<code>#f</code>の時は<code>(/ n d)</code>が実行され値が返ります．<br>\n　<br>\n<code>catch</code>に返ってくると<code>*signals*</code>にシグナルの初期値を戻します．<br>\nそして<code>finally ...</code>を実行します．<br>\n最後にvalに束縛した値を返して終了です．\nここでは<code>percentage</code>は<code>print</code>してるので<code>#&#x3C;undef></code>が返ります．<br>\n　<br>\nこうして一つ一つ追えばそんなに難しくないですね．<br>\nでも理解するのに時間かかりました．．．<br>\n最後に実行例紹介して終わります．<br>\n　　<br>\n　</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (percentage 1 40)\n</span><span class=\"code-line\">2.5%\n</span><span class=\"code-line\">follow ...\n</span><span class=\"code-line\">#&#x3C;undef>\n</span><span class=\"code-line\">gosh> (percentage 10 0)\n</span><span class=\"code-line\">ERROR: Divide Zero Error Occured...\n</span><span class=\"code-line\"> divide 10 by ZERO!\n</span><span class=\"code-line\">--------------------\n</span><span class=\"code-line\">follow ...\n</span><span class=\"code-line\">#&#x3C;undef></span></code></pre>\n<p>　<br>\nマクロもcall/ccも難しい</p>","slug":"プログラミングGauche 19.7 簡易な例外機構のまとめ","rawContent":"\n<p>マクロと<code>call/cc</code>を使った<code>catch</code>と<code>throw</code>の実装の解説を備忘録として残します．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 簡易例外機構</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">'())</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> catch\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally follow ...<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>signals-backup <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">call/cc</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>k<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>sig k<span class=\"synSpecial\">)</span> <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span>\n                            body ...<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> signals-backup<span class=\"synSpecial\">)</span>\n       follow ...\n       val<span class=\"synSpecial\">)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">))]))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> throw\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">[(</span>_ sig val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> <span class=\"synSpecial\">'</span>sig <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span> val<span class=\"synSpecial\">)]))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; サンプルコード</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div n d<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> d <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>throw DivedeZeroError\n             <span class=\"synSpecial\">(</span>print <span class=\"synError\">#`</span><span class=\"synConstant\">&quot;ERROR: Divide Zero Error Occured...\\n divide ,n by ZERO!\\n--------------------&quot;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n d<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>percentage a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>DivedeZeroError\n          <span class=\"synSpecial\">(</span>print <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>div a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">100.0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>finally\n          <span class=\"synSpecial\">(</span>print <span class=\"synConstant\">&quot;follow ...&quot;</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n処理の流れを説明します．<br/>\n<code>*signal*</code>の初期値を<code>signals-backup</code>に束縛します．<br/>\nその後<code>*signal*</code>には<code>(set! *signal* ...)</code>の行で<code>car</code>にシグナル，<code>cdr</code>に継続を渡すk，というペアのリストが束縛されます．<br/>\n<code>((sig . k))</code>という形になります．<br/>\nサンプルコードでは<code>((DivisedZeroError . k))</code>が入ります．<br/>\nその後<code>body</code>が実行されます．<br/>\nサンプルコードでは<code>percentage</code>の最初の<code>print</code>行．<br/>\nここで<code>div</code>が呼ばれます．<br/>\n<code>(= d 0)</code>のが真の時に<code>throw</code>が呼ばれます．<br/>\n<code>(cdr (assq 'sig *signals*))</code>が評価され継続を表す<code>k</code>が返され，<code>(k val)</code>で<code>throw</code>の<code>print</code> 行を実行し，戻り値が<code>catch</code>のvalに束縛されます．<br/>\n（※　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>でkeenさん(@blackenedgold)さんから，継続を渡す<code>k</code>ではなく，継続を表す<code>k</code>と教えていただいたので訂正しました．）<br/>\nここではまってたのですが，<code>(= d 0)</code>なのにシグナルが違っていた場合は<code>(cdr #f)</code>となりエラーが返ります.<br/>\nシグナルを間違えるなって話ですね．<br/>\n<code>(= d 0)</code>が<code>#f</code>の時は<code>(/ n d)</code>が実行され値が返ります．<br/>\n　<br/>\n<code>catch</code>に返ってくると<code>*signals*</code>にシグナルの初期値を戻します．<br/>\nそして<code>finally ...</code>を実行します．<br/>\n最後にvalに束縛した値を返して終了です．\nここでは<code>percentage</code>は<code>print</code>してるので<code>#&lt;undef&gt;</code>が返ります．<br/>\n　<br/>\nこうして一つ一つ追えばそんなに難しくないですね．<br/>\nでも理解するのに時間かかりました．．．<br/>\n最後に実行例紹介して終わります．<br/>\n　　<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (percentage 1 40)\n2.5%\nfollow ...\n#&lt;undef&gt;\ngosh&gt; (percentage 10 0)\nERROR: Divide Zero Error Occured...\n divide 10 by ZERO!\n--------------------\nfollow ...\n#&lt;undef&gt;</pre>\n\n\n<p>　<br/>\nマクロもcall/ccも難しい</p>\n\n"},"__N_SSG":true}