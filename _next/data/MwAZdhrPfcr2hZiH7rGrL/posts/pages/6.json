{"pageProps":{"posts":[{"data":{"title":"SICP 問題 5.02","published":"2016/01/22","tags":["scheme","SICP"]},"content":"\n<p>5.01の反復的な階乗計算機をレジスト計算機言語使って記述する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>controller\n factorial\n   <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign product <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign counter <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n test-b\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label factorial-done<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign t <span class=\"synSpecial\">(</span>op mul<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg counter<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign u <span class=\"synSpecial\">(</span>op sum<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign product <span class=\"synSpecial\">(</span>reg t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign counter <span class=\"synSpecial\">(</span>reg u<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label test<span class=\"synSpecial\">))</span>\n factorial-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>基本的に制御器の流れ通り．<br/>\nreadする方法がわからないので多分こんな感じでしょうってやっつけ</p>\n\n","slug":"SICP 問題 5.02"},{"data":{"title":"SICP 問題 5.01","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160122154245\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160122/20160122154245.jpg\" alt=\"f:id:wat-aro:20160122154245j:image\" title=\"f:id:wat-aro:20160122154245j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 5.01"},{"data":{"title":"SICP 問題 4.77","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>簡略化して．<br/>\n(and (not A) B C)を(and B C (not A))に並び替えてからqevalしていく．<br/>\n入れ子になっていた場合もqevalでまたcojoinに送られるので対処出来る．<br/>\nただ問題文通りだと，必要な変数を満たす表明が現れたらすぐにnotを実行しなければいけないが，それは難しかったので妥協．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new <span class=\"synSpecial\">(</span>bring-filter-behind conjuncts<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? new<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts new<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct new<span class=\"synSpecial\">)</span>\n                      frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>filter? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>not<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lisp-value<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>bring-filter-behind conjuncts<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>conjuncts conjuncts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>infront <span class=\"synSpecial\">'())</span> <span class=\"synSpecial\">(</span>behind <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> conjuncts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> infront behind<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>filter? <span class=\"synSpecial\">(</span>type first<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>iter rest infront <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> behind first<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                   <span class=\"synSpecial\">(</span>iter rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> infront first<span class=\"synSpecial\">)</span> behind<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>4.78と4.79はパス．</p>\n\n","slug":"SICP 問題 4.77"},{"data":{"title":"SICP 問題 4.76","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>本文中のandはひとつ目の質問を満たす表明に対して次の質問を満たす表明をデータベースから探してくる．<br/>\nそれを２つの質問をそれぞれ満たすストリームをまず作り，<br/>\n矛盾がないようにそれらを組み合わせるconjoin特殊形式を実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? conjuncts<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>conjoin-frame-stream first rest<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-frame-stream fs1 fs2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-filter\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n   <span class=\"synSpecial\">(</span>stream-flatmap\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-map\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>conjoin-consistent frame1 frame2<span class=\"synSpecial\">))</span>\n       fs2<span class=\"synSpecial\">))</span>\n    fs1<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; f2をフレームと考え，f1のvarがf2にあるかを調べる．</span>\n<span class=\"synComment\">;; f2にあってf1のvarの値と同じならOK．違えばfailed.なければf2を拡張する．</span>\n<span class=\"synComment\">;; 上記手順はexend-if-possibleがやる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-consistent f1 f2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> f1<span class=\"synSpecial\">)</span> f2\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>extend-frame2 <span class=\"synSpecial\">(</span>extend-if-possible <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> f1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> f1<span class=\"synSpecial\">)</span> f2<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> extend-frame2 <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">'</span>failed\n            <span class=\"synSpecial\">(</span>conjoin-consistent <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> f1<span class=\"synSpecial\">)</span> extend-frame2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 本文で定義されたextend-if-possible</span>\n<span class=\"synComment\">;; (? x)が値を指していればその値を返す．(? y)となっていれば，さらにその値を探す．</span>\n<span class=\"synComment\">;; varもvalも(? x)同じものを指していればfailedが返る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-possible var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;フレームからvarに対応するvalを探して束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>binding\n           <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> val frame<span class=\"synSpecial\">))</span>\n          <span class=\"synComment\">;; 上のletで探してきたvalもまた(? y)という形だった場合は更にフレームから探してくる．</span>\n          <span class=\"synSpecial\">((</span>var? val<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame val frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synSpecial\">(</span>unify-match var <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;見つからなければフレームを拡張</span>\n          <span class=\"synSpecial\">((</span>depends-on? val var frame<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;valとvarが同じく(? x)だった場合はfailed</span>\n           <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.76"},{"data":{"title":"SICP 問題 4.75","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>指定した質問を満足する項目がデータベースに一つしかないときに成功する特殊形式uniqueの実装．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; streamの個数を調べる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-length s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>stream s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>count <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n        count\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unique-query exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>uniquely-asserted contents frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>unique-query contents<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>stream-null? result<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>stream-length result<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n            result\n            the-empty-stream<span class=\"synSpecial\">)))</span>\n    frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>unique <span class=\"synSpecial\">'</span>qeval uniquely-asserted<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job ?x <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?x ?j<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job ?anyone ?j<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Aull DeWitt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration secretary<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Aull DeWitt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration secretary<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Cratchet Robert<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting scrivener<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Cratchet Robert<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting scrivener<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Scrooge Eben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting chief accountant<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Scrooge Eben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting chief accountant<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Warbucks Oliver<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration big wheel<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Warbucks Oliver<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration big wheel<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Reasoner Louis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer programmer trainee<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Reasoner Louis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer programmer trainee<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Tweakit Lem E<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer technician<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Tweakit Lem E<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer technician<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.75"},{"data":{"title":"SICP 問題 4.74","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; negate, lisp-value, singleton-streamはflatten-streamを変更して直列にしても問題ないのではという問題</span>\n<span class=\"synComment\">;; 元のflatten-stream</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>flatten-stream stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>flatten-stream <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; a 差し込みを使わないsimple-flattenの実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simbple-stream-flatmap proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>simple-flatten <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-flatten stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map stream-car\n              <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)))</span>\n                             stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; negate, lisp-valueはsinbleton-streamを取るので交互にしても直列にしても結果は変わらない．</span>\n<span class=\"synComment\">;; find-assertionsの場合はfetch-assertionsで対応する表明を集めてきているので同じく変わらない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.74"},{"data":{"title":"SICP 問題 4.73","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>flatten-streamが明示的にdelayを使うのはなぜか．<br/>\n　<br/>\nflatten-streamはストリームのストリームを引数にとる．<br/>\n4.71と同じく引数のストリームの中に無限ストリームがあると評価が終わらずになにも印字されないため．</p>\n\n","slug":"SICP 問題 4.73"},{"data":{"title":"SICP 問題 4.72","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>stream-appendだと最初のストリームが無限ストリームだった場合に次のストリームが評価されなくなる．\nなのでinterleaveにして交互に先頭の要素を評価することで，どちらかもしくは両方が無限ストリームの時に対応できるようにする．</p>\n\n","slug":"SICP 問題 4.72"},{"data":{"title":"SICP 問題 4.71","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文中のsimple-query</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">))))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 本文中のdisjoin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                       frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; Louis Reasonerが提案したsimple-query</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">)))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Louis Reasonerが提案したdisjoin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                frame-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; Louis Readonerの提案したものだとinterleaveの二つ目のストリームが遅延されていないので</span>\n<span class=\"synComment\">;; 評価が終わるまで印字されない．</span>\n<span class=\"synComment\">;; 仮にruleのほうで無限ループに陥った時に，delayする場合は一つ一つの評価結果を印字しながらループし</span>\n<span class=\"synComment\">;; delayがない場合は何も印字せずに無限ループする．</span>\n<span class=\"synComment\">;; 本文でも出てきたmarriedを使って試してみる．</span>\n\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; delayありの場合</span>\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n...\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; delayなしの場合</span>\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n\n\n</pre>\n\n\n<p>;;; Query result:\nの表示も出てこない</p>\n\n","slug":"SICP 問題 4.71"},{"data":{"title":"SICP 4.4.4 質問システムの実装","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>なかなか処理の流れがわからなかったのでコメントを多めにつけてみた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 駆動ループ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; Query input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; Query result:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>query-driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>       <span class=\"synComment\">;最初の印字</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>q <span class=\"synSpecial\">(</span>query-syntax-process <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>assertion-to-be-added? q<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>add-rule-or-assertion! <span class=\"synSpecial\">(</span>add-assertion-body q<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;Assertion added to data base.&quot;</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>query-driver-loop<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> output-prompt<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>display-stream\n            <span class=\"synComment\">;; このstream-mapで回答のストリームが作られる．</span>\n            <span class=\"synSpecial\">(</span>stream-map\n             <span class=\"synComment\">;; フレームを取り，変数を具体化したもともとの質問のコピーからなるストリームを作る</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>instantiate q frame\n                            <span class=\"synComment\">;; unbound-handlerに渡す部分．</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>v f<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>contract-question-mark v<span class=\"synSpecial\">))))</span>\n             <span class=\"synComment\">;; 質問を満たすフレームのストリーム</span>\n             <span class=\"synSpecial\">(</span>qeval q <span class=\"synSpecial\">(</span>singleton-stream <span class=\"synSpecial\">'()))))</span>\n           <span class=\"synSpecial\">(</span>query-driver-loop<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; qevalで作られたストリームのフレームをとqを取る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>instantiate <span class=\"synIdentifier\">exp</span> frame unbound-var-handler<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>copy <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>var? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synComment\">;; binding-in-frameで(? x)と対応した((? x) Aull DeWitt)のような形で取り出す．</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame <span class=\"synIdentifier\">exp</span> frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synComment\">;; 取り出した((? x) Aull DeWitt)を(Aull DeWitt)にしてcopyに渡す．</span>\n                 <span class=\"synSpecial\">(</span>copy <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">))</span>\n                 <span class=\"synComment\">;; (? 5 x)を?x-5に変える</span>\n                 <span class=\"synSpecial\">(</span>unbound-var-handler <span class=\"synIdentifier\">exp</span> frame<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>copy <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>copy <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;リストの形は維持したままcarとcdrをcopyする</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>copy <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 評価機</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>qeval query frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>qproc <span class=\"synSpecial\">(</span>get <span class=\"synSpecial\">(</span>type query<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>qeval<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;queryがandかorから始まるかのチェック</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> qproc\n        <span class=\"synSpecial\">(</span>qproc <span class=\"synSpecial\">(</span>contents query<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span> <span class=\"synComment\">;and, orで始まる場合</span>\n        <span class=\"synSpecial\">(</span>simple-query query frame-stream<span class=\"synSpecial\">))))</span>  <span class=\"synComment\">;それ以外</span>\n\n<span class=\"synComment\">;; 単純質問</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synComment\">;; carがnullならcdrをforceするappend.find-assertionsでマッチするassertionがなければcdrへ．</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">))))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 合成質問</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? conjuncts<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">)</span>\n                      frame-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                       frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>or <span class=\"synSpecial\">'</span>qeval disjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; フィルタ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negate operands frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>negated-query operands<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">)</span>\n         the-empty-stream<span class=\"synSpecial\">))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>not <span class=\"synSpecial\">'</span>qeval negate<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lisp-value call frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>execute <span class=\"synSpecial\">(</span>instantiate call\n                               frame\n                               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>v f<span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown pat var -- LISP-VALUE&quot;</span> v<span class=\"synSpecial\">))))</span>\n         <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">)</span>\n         the-empty-stream<span class=\"synSpecial\">))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>lisp-value <span class=\"synSpecial\">'</span>qeval lisp-value<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> user-initial-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>args <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>always-true ignore frame-stream<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>always-true <span class=\"synSpecial\">'</span>qeval always-true<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; パターンマッチにより表明を見つける</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-assertions pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>datum<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>check-an-assertion datum pattern frame<span class=\"synSpecial\">))</span>\n                  <span class=\"synComment\">;; patternの先頭を見て，それにマッチするassertionをストリームで返す．</span>\n                  <span class=\"synSpecial\">(</span>fetch-assertions pattern frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>check-an-assertion assertion query-pat query-frame<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;;パターンマッチされ，failedになったフレームか，拡張されたフレームが入っている．</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>match-result\n         <span class=\"synSpecial\">(</span>pattern-match query-pat assertion query-frame<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> match-result <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n        the-empty-stream                <span class=\"synComment\">;failedなら空のストリームを返す</span>\n        <span class=\"synSpecial\">(</span>singleton-stream match-result<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;フレームなら空ストリームとcons-streamしたストリームを返す</span>\n\n<span class=\"synComment\">;; パターンとデータが同じならフレームを返し，パターンが(? x)ならextendするか既にある値を返す．</span>\n<span class=\"synComment\">;; マッチしなければそのフレームをfailedにする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pattern-match pat dat frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> pat dat<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>var? pat<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;patternが(? x)のような形なら</span>\n         <span class=\"synSpecial\">(</span>extend-if-consistent pat dat frame<span class=\"synSpecial\">))</span> <span class=\"synComment\">;ここで値となって戻るか，拡張されて戻る</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> pat<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> dat<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pat<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> dat<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> dat<span class=\"synSpecial\">)</span>\n                                       frame<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; varは(? x)のような形で渡される．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-consistent var dat frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;assocでframeにvarがあるか探す</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n        <span class=\"synComment\">;; frameにすでにvarがあればそのvalueを返してパターンマッチにかける</span>\n        <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> dat frame<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; なければフレームを拡張する．</span>\n        <span class=\"synSpecial\">(</span>extend var dat frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 規則とユニフィケーション</span>\n<span class=\"synComment\">;; stream-flatmapはstream-carのストリームをマップしてからstream-cdrにいく</span>\n<span class=\"synComment\">;; interleave-delayedもしているのでcarがnullならばstream-cdrのcarを評価する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-rules pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rule<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>apply-a-rule rule pattern frame<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>fetch-rules pattern frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;patternで使っているルールを引っ張ってくる</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-a-rule rule query-pattern query-frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>clean-rule <span class=\"synSpecial\">(</span>rename-variables-in rule<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;(? x)を(? id x)にしてclean-ruleに束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>unify-result\n           <span class=\"synSpecial\">(</span>unify-match query-pattern\n                        <span class=\"synSpecial\">(</span>conclusion clean-rule<span class=\"synSpecial\">)</span>\n                        query-frame<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> unify-result <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          the-empty-stream\n          <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>rule-body clean-rule<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>singleton-stream unify-result<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; ruleの中で(? x)となっている部分をすべて(? id x)にして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rename-variables-in rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rule-application-id <span class=\"synSpecial\">(</span>new-rule-application-id<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;rule-counterに１足してidに保存</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>var? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n             <span class=\"synComment\">;; (? x)=&gt;(? id x)</span>\n             <span class=\"synSpecial\">(</span>make-new-variable <span class=\"synIdentifier\">exp</span> rule-application-id<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>tree-walk rule<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; pattern-matchとほぼ同じ．</span>\n<span class=\"synComment\">;; ユニファイの場合はフレームに入っている値が(? x)の形の場合もあるのでそれに対応</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unify-match p1 p2 frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> p1 p2<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>var? p1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>extend-if-possible p1 p2 frame<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>var? p2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>extend-if-possible p2 p1 frame<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> p1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> p2<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> p1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> p2<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p1<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p2<span class=\"synSpecial\">)</span>\n                                   frame<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; (? x)が値を指していればその値を返す．(? y)となっていれば，さらにその値を探す．</span>\n<span class=\"synComment\">;; varもvalも(? x)同じものを指していればfailedが返る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-possible var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;フレームからvarに対応するvalを探して束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>binding\n           <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> val frame<span class=\"synSpecial\">))</span>\n          <span class=\"synComment\">;; 上のletで探してきたvalもまた(? y)という形だった場合は更にフレームから探してくる．</span>\n          <span class=\"synSpecial\">((</span>var? val<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame val frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synSpecial\">(</span>unify-match var <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;見つからなければフレームを拡張</span>\n          <span class=\"synSpecial\">((</span>depends-on? val var frame<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;valとvarが同じく(? x)だった場合はfailed</span>\n           <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synComment\">;; vatとexpが同じ(? x)の場合は#tを返す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>depends-on? <span class=\"synIdentifier\">exp</span> var frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk e<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>var? e<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;(? id x)という形</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">equal?</span> var e<span class=\"synSpecial\">)</span>           <span class=\"synComment\">;varもeも(? x)と同じだった場合</span>\n               <span class=\"synConstant\">#t</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>b <span class=\"synSpecial\">(</span>binding-in-frame e frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;eの値を更にフレームから探してくる</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> b\n                     <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span>binding-value b<span class=\"synSpecial\">))</span>\n                     <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> e<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> e<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> e<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>tree-walk <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; データベース</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> THE-ASSERTIONS the-empty-stream<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; patternの先頭に合うassertionをストリームにして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fetch-assertions pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>use-index? pattern<span class=\"synSpecial\">)</span>              <span class=\"synComment\">;patternの先頭がsymbolならtrue</span>\n      <span class=\"synComment\">;; (job ?x ?y)ならjobから始まるデータベースの表明すべてを取ってきてストリームにして返す</span>\n      <span class=\"synSpecial\">(</span>get-indexed-assertions pattern<span class=\"synSpecial\">)</span>\n      <span class=\"synComment\">;; データベースのTHE-ASSERTIONSを返す</span>\n      <span class=\"synSpecial\">(</span>get-all-assertions<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-all-assertions<span class=\"synSpecial\">)</span> THE-ASSERTIONS<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; patternの先頭にマッチするassertionを取ってきてストリームにして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-indexed-assertions pattern<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>get-stream <span class=\"synSpecial\">(</span>index-key-of pattern<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assertion-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 表の中からkey1 key2に対応するものを探す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-stream key1 key2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s <span class=\"synSpecial\">(</span>get key1 key2<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> s s the-empty-stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> THE-RULES the-empty-stream<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fetch-rules pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>use-index? pattern<span class=\"synSpecial\">)</span>              <span class=\"synComment\">;patternの先頭がsymbolならtrue</span>\n      <span class=\"synComment\">;; patternと先頭の要素が同じruleと先頭が?のruleがstream-appendされて返ってくる．</span>\n      <span class=\"synSpecial\">(</span>get-indexed-rules pattern<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>get-all-rules<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-all-rules<span class=\"synSpecial\">)</span> THE-RULES<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; patternと先頭の要素が同じruleと先頭の要素が?のruleがstream-appendされる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-indexed-rules pattern<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-append\n   <span class=\"synSpecial\">(</span>get-stream <span class=\"synSpecial\">(</span>index-key-of pattern<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>rule-stream<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>get-stream <span class=\"synSpecial\">'</span>? <span class=\"synSpecial\">'</span>rule-stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; ruleならadd-rule!へ．ruleでなければadd-assertionへ．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-rule-or-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>rule? assertion<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>add-rule! assertion<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-assertions THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n          <span class=\"synSpecial\">(</span>cons-stream assertion old-assertions<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-rule! rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-rule-in-index rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-rules THE-RULES<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-RULES <span class=\"synSpecial\">(</span>cons-stream rule old-rules<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>indexable? assertion<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key <span class=\"synSpecial\">(</span>index-key-of assertion<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>current-assertion-stream\n               <span class=\"synSpecial\">(</span>get-stream key <span class=\"synSpecial\">'</span>assertion-stream<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>put key\n               <span class=\"synSpecial\">'</span>assertion-stream\n               <span class=\"synSpecial\">(</span>cons-stream assertion\n                            current-assertion-stream<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; ruleは(rule (some thing else))という形なので(conclusion rule)で(some thing else)という形にしてpatternに束縛する</span>\n<span class=\"synComment\">;; indexiableならrule-streamにkeyを登録する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>store-rule-in-index rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pattern <span class=\"synSpecial\">(</span>conclusion rule<span class=\"synSpecial\">)))</span>    <span class=\"synComment\">;rule本体をpatternに束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>indexable? pattern<span class=\"synSpecial\">)</span>            <span class=\"synComment\">;symbol or ?xのような形で#t</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key <span class=\"synSpecial\">(</span>index-key-of pattern<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;(? key)なら?,(key)ならkeyをkeyに束縛</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>current-rule-stream\n                 <span class=\"synSpecial\">(</span>get-stream key <span class=\"synSpecial\">'</span>rule-stream<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;'rule-streamの中からkeyのストリームを探す</span>\n            <span class=\"synSpecial\">(</span>put key\n                 <span class=\"synSpecial\">'</span>rule-stream\n                 <span class=\"synSpecial\">(</span>cons-stream rule\n                              current-rule-stream<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; symbolか?xのような形ならtrueを返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>indexable? pat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>constant-symbol? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>var? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; リストの先頭が?か調べ，?なら?を．違っていれば先頭の要素をそのまま帰す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>index-key-of pat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>var? key<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>? key<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>use-index? pat<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; (symbol? (car pat))</span>\n  <span class=\"synSpecial\">(</span>constant-symbol? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; ストリーム演算</span>\n\n\n<span class=\"synComment\">;; carがnullならcdrをforceするstream-append</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-append-delayed s1 delayed-s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-s2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>cons-stream\n       <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>stream-append-delayed <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> delayed-s2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>interleave-delayed s1 delayed-s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-s2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>cons-stream\n       <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>interleave-delayed <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-s2<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; stream-mapをした後にflatten-streamにかけられる．</span>\n<span class=\"synComment\">;; そこでstream-nullなら空ストリームが返る．</span>\n<span class=\"synComment\">;; そこからcdrをdelayしてinterleave-delayedに送られる．</span>\n<span class=\"synComment\">;; carがnullならcdrはforceされる．</span>\n<span class=\"synComment\">;; nullでなければ第一引数のcarをcons-streamし，</span>\n<span class=\"synComment\">;; delayed-s2,(cdr s2)をintegerleave-delayedで交互にconsしていく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-flatmap proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>flatten-stream <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>flatten-stream stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>flatten-stream <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>singleton-stream x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream x the-empty-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問の構文手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression TYPE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contents <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression CONTENTS&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; リストの先頭がassert!か判定する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assertion-to-be-added? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assert!<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; assert!のbody部を返す．(assert! (some thing else))</span>\n<span class=\"synComment\">;; (contents exp)でcdrを返し，そのcarを返すので(some thing else)になる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>contents <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-conjunction? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-conjunct exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-conjuncts exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-disjunction? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-disjunct exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-disjuncts exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negated-query exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>predicate exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>args exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rule? statement<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? statement <span class=\"synSpecial\">'</span>rule<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conclusion rule<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> rule<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rule-body rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> rule<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">'(</span>always-true<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> rule<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>query-syntax-process <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>map-over-symbols expand-question-mark <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; すべての?xとなっているシンボルを(? x)という形に変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>map-over-symbols proc <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>map-over-symbols proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>map-over-symbols proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proc <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; symbolの先頭の文字が?なら(? x)に変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-question-mark symbol<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>chars <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> symbol<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string=?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">substring</span> chars <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;?&quot;</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>?\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-&gt;symbol</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">substring</span> chars <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-length</span> chars<span class=\"synSpecial\">))))</span>\n        symbol<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>var? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>?<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>constant-symbol? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rule-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; rule-counterを1増やして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>new-rule-application-id<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> rule-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> rule-counter<span class=\"synSpecial\">))</span>\n  rule-counter<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; (? x)=&gt;(? id x)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-variable var rule-application-id<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> rule-application-id <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> var<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; (? 5 x)のような形なら&quot;?x-5&quot;にしてから?x-5にする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contract-question-mark variable<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-&gt;symbol</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-append</span> <span class=\"synConstant\">&quot;?&quot;</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> variable<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> variable<span class=\"synSpecial\">))</span>\n                                     <span class=\"synConstant\">&quot;-&quot;</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number-&gt;string</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> variable<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> variable<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; フレームと束縛</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-binding variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variable value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-variable binding<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> binding<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> binding<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; フレームからvariableに対応したvalueを取り出す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-in-frame variable frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> variable frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend variable value frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-binding variable value<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 4.4.4 質問システムの実装"},{"data":{"title":"継続を使ってフィボナッチ数列を求める","published":"2016/01/19","tags":["scheme"]},"content":"\n<p>call/ccの使い方はよくわかってないので自分で継続を渡します．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fib/cc n <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib/cc n func<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>func <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>func <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>func <span class=\"synSpecial\">(</span>fib/cc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> func<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>fib/cc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> func<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>テスト．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> fib <span class=\"synSpecial\">(</span>iota <span class=\"synConstant\">20</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">13</span> <span class=\"synConstant\">21</span> <span class=\"synConstant\">34</span> <span class=\"synConstant\">55</span> <span class=\"synConstant\">89</span> <span class=\"synConstant\">144</span> <span class=\"synConstant\">233</span> <span class=\"synConstant\">377</span> <span class=\"synConstant\">610</span> <span class=\"synConstant\">987</span> <span class=\"synConstant\">1597</span> <span class=\"synConstant\">2584</span> <span class=\"synConstant\">4181</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"継続を使ってフィボナッチ数列を求める"},{"data":{"title":"SICP 4.4.4 extend-if-consistentのエラー","published":"2016/01/19","tags":["scheme","SICP","gauche"]},"content":"\n<p>4.4.4の論理型プログラミングの実装を評価すると以下のエラーが出ます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synConstant\">***</span> ERROR: Compile Error: cannot <span class=\"synIdentifier\">find</span> <span class=\"synConstant\">&quot;var&quot;</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/site/lib&quot;</span> <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib&quot;</span> <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche/site/lib&quot;</span> <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche/0.9/lib&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">&quot;(standard input)&quot;</span>:1:<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-consistent var da ...\n\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n<p>これがextend-if-consistentのコードです．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-consistent var dat frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n        <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> dat frame<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>extend var dat frame<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>何も問題ないように思えます．\ndefineなのになぜvarを探しているのかわかりません．<br/>\n散々迷って，このコードのvarを１つずつ変更していったところ，<br/>\n最後の行のextendの次のvarを探しているようでした．<br/>\nelse節なのになぜこんなところが評価されているんだと思いながらも，<br/>\nこの評価機のextendの定義を先に評価したところ，extend-if-consistentの評価も通りました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>のextendを調べてみると以下で見つかりました．</p>\n\n<p><a href=\"http://practical-scheme.net/gauche/man/gauche-refj_34.html\">Gauche &#x30E6;&#x30FC;&#x30B6;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9;: 4.13 &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;</a></p>\n\n<p>モジュールの継承で使われるので優先的に評価されているのでしょう．<br/>\nなのでこの部分は本文中のextendの定義を先に評価してから書くようにします．</p>\n\n","slug":"SICP 4.4.4 extend-if-consistentのエラー"},{"data":{"title":"SICP 問題 4.70","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n<p>本文中のadd-assertion!とadd-rules!のletの目的は何か．\n問題文のadd-assertion!ではダメな理由を述べよ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文中のadd-assertion!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-assertions THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n          <span class=\"synSpecial\">(</span>cons-stream assertion old-assertions<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 問題文のadd-assertion!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n        <span class=\"synSpecial\">(</span>cons-stream assertion THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>cons-streamはcarは評価し，cdrはdelayしてconsしている．<br/>\nそのため，問題文のadd-assertion!ではset!した時にassertionは評価されているが，THE-ASSERTIONSは評価されていない．   <br/>\nそれがTHE-ASSERTIONSに代入されるのでもともとのTHE-ASSERTIONSにアクセスできなくなる．  <br/>\nそれを防ぐために本文中のadd-assertion!とadd-rule!ではset!する前にletで古い値を保存している．</p>\n\n","slug":"SICP 問題 4.70"},{"data":{"title":"SICP 問題 4.69","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n<p>((great great grandson) adam Irad)のような質問ができるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>greatson-end ?x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-to-form ?u <span class=\"synSpecial\">(</span>grandson<span class=\"synSpecial\">)</span> ?x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">((</span>grandson<span class=\"synSpecial\">)</span> ?x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>grandson ?x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">((</span>great <span class=\"synSpecial\">.</span> ?rel<span class=\"synSpecial\">)</span> ?x ?y<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>greatson-end ?rel<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>son-of ?x ?z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>?rel ?z ?y<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.69"},{"data":{"title":"SICP 問題 4.68","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-reverse lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>lst lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>append-to-form <span class=\"synSpecial\">()</span> ?y ?y<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>append-to-form <span class=\"synSpecial\">(</span>?u <span class=\"synSpecial\">.</span> ?v<span class=\"synSpecial\">)</span> ?y <span class=\"synSpecial\">(</span>?u <span class=\"synSpecial\">.</span> ?z<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>append-to-form ?v ?y ?z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">))</span><span class=\"synError\">は当然成り立つ．</span>\n<span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> <span class=\"synError\">?zの関係で考える．</span>\n<span class=\"synError\">?zの末尾は</span><span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> something <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n<span class=\"synError\">somethingは残った?yをreverseしたものなので</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> ?y something<span class=\"synSpecial\">)</span>\n<span class=\"synError\">規則として書いてみると</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>append-to-form ?something ?x ?z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> ?y ?something<span class=\"synSpecial\">)))</span>\n\n<span class=\"synError\">実際にリストを入れて確かめてみる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n<span class=\"synError\">まず，appendで</span><span class=\"synSpecial\">(</span>append-to-form ?something <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span><span class=\"synError\">となる．</span>\n<span class=\"synError\">次の行で</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?something<span class=\"synSpecial\">)</span>\n<span class=\"synError\">appendに進み</span><span class=\"synSpecial\">(</span>append-to-form ?something2 <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> ?something<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?something2<span class=\"synSpecial\">)</span>\n<span class=\"synError\">appendにいき</span><span class=\"synSpecial\">(</span>append-to-form ?something3 <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> ?something2<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?something3<span class=\"synSpecial\">)</span>\n<span class=\"synError\">ひとつ目の定義から</span>\n?something3 <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>append-to-form ?something3 <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> ?something2<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n?something2 <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>append-to-form ?something2 <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> ?something<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n?something <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>append-to-form ?something <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n?z <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synError\">これでうまくいくはず．</span>\n\n<span class=\"synError\">次は逆を考えてみる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>append-to-form ?something ?x ?z<span class=\"synSpecial\">))</span>\n<span class=\"synError\">候補は</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))(</span>append-to-form <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synError\">ここで?x</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">()</span><span class=\"synError\">とすると</span>\n<span class=\"synError\">?somethingは</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> ?y <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synError\">ここで?z</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span><span class=\"synError\">と同じになるので無限ループになる．</span>\n<span class=\"synError\">他のルートから進んでもかならずこのパターンもチェックするので無限ループは避けられない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.68"},{"data":{"title":"SICP 問題 4.67","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n<p>フレームに質問の履歴をつけていく．  <br/>\n入力ストリームと出力ストリームの間で同じ質問(4.64でいう(outranked-by ?staff-person Boss)のような)があれば<br/>\nループしていると判断して処理を中止するようにする．</p>\n\n","slug":"SICP 問題 4.67"},{"data":{"title":"SICP 問題 4.66","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n<p>重複したものをアキュムレートしてしまうのでこのままでは使えないことがわかった．<br/>\n重複を削除するように変更すればよい．</p>\n\n","slug":"SICP 問題 4.66"},{"data":{"title":"SICP 問題 4.65","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>wheel ?person<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>supervisor ?middle-manager ?person<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>supervisor ?x ?middle-manager<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>wheelはまず?personにデータベースの先頭から人を束縛して，and以下を満たすかを試していく．<br/>\nなので<br/>\nBen -> Oliver -> X<br/>\nalyssa -> Ben -> Oliver<br/>\nFect -> Ben -> Oliver<br/>\nLem -> Ben -> Oliver<br/>\nLouis -> Alyssa Ben<br/>\nOliver -> X<br/>\nEben -> Oliver -> X<br/>\nRobert -> Eben -> Oliver<br/>\nDewitt -> Oliver -> X<br/>\nとなり，Wawrbucks Oliverが４回出力される．</p>\n\n","slug":"SICP 問題 4.65"},{"data":{"title":"SICP 問題 4.64","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>outranked-by ?staff-person ?boss<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>supervisor ?staff-person ?boss<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>outranked-by ?middle-manager ?boss<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>supervisor ?staff-person ?middle-manager<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>outranked-by <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> ?who<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>まずoutranked-byの?staff-personにBitdiddle Benが束縛される．<br/>\n次に(supervisor ?staff-person ?boss)でBitdiddle Benの上司が?bossに束縛される．これを仮にAとする．<br/>\nそしてoutranked-byが?bossがAとして?middle-managerを探す．※<br/>\nここから二周目．<br/>\nsupervisor行で?bossをAとして部下Bが?staff-personに束縛される．<br/>\nandのoutranked-byで?bossをAとして?middle-managerを探す．<br/>\n※印をつけたところ同じところを探し始めているのでここで無限ループに陥る．<br/>\n正しいoutranked-byは以下の通り．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>outranked-by ?staff-person ?boss<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>supervisor ?staff-person ?boss<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>supervisor ?staff-person ?middle-manager<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>outranked-by ?middle-manager ?boss<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.64"},{"data":{"title":"SICP 問題 4.63","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n<p>SはGの孫であるという規則の形式化</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?son son-of ?dad<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>son ?dad ?son<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>wife ?dad ?mam<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>son ?mam ?son<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?grandson grandson-of ?granddad<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>?parent son-of ?grandson<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>?grandson son-of ?parent<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.63"}],"page":6},"__N_SSG":true}