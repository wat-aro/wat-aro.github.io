{"pageProps":{"posts":[{"data":{"title":"define-curryを書いてみた","published":"2016/01/06","tags":["scheme"]},"content":"\n<p>カリー化や部分適用の話が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>で流れてきたのでマクロの練習として書いてみました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; lambda式を引数に取り，カリー化されたlambda式を返す</span>\n<span class=\"synComment\">;; いらなかった</span>\n<span class=\"synComment\">;; (define-syntax curry</span>\n<span class=\"synComment\">;;   (syntax-rules (lambda) ;; 修正</span>\n<span class=\"synComment\">;;     [(_ (lambda (arg) body ...))</span>\n<span class=\"synComment\">;;      (lambda (arg) body ...)]</span>\n<span class=\"synComment\">;;     [(_ (lambda (first rest ...) body ...))</span>\n<span class=\"synComment\">;;      (lambda (first) (curry (lambda (rest ...) body ...)))]))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> lambda-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">()</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> body ...<span class=\"synSpecial\">)]</span> <span class=\"synComment\">;; 修正：引数が０個の手続きに対応</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>first rest ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>func <span class=\"synSpecial\">(</span>case-lambda\n                     <span class=\"synSpecial\">[()</span> func<span class=\"synSpecial\">]</span>\n                     <span class=\"synSpecial\">[(</span>arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">))</span> arg<span class=\"synSpecial\">)]</span>\n                     <span class=\"synSpecial\">[</span>args <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> args<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))])))</span>\n       func<span class=\"synSpecial\">)]))</span> <span class=\"synComment\">;;このfuncがなくてもなぜか動く．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> define-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synComment\">;; lambda-curryが0引数に対応したのでいらない</span>\n    <span class=\"synComment\">;; [(_ (func-name) body ...)</span>\n    <span class=\"synComment\">;;  (define (func-name) body ...)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>func-name args ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> func-name <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>args ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">))]</span>\n    <span class=\"synSpecial\">[(</span>_ var val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> var val<span class=\"synSpecial\">)]))</span>\n</pre>\n\n\n<p>　<br/>\n清書</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> lambda-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">()</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> b0 b1 ...<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">(</span>first rest ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>func <span class=\"synSpecial\">(</span>case-lambda\n                     <span class=\"synSpecial\">(()</span> func<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">((</span>arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">))</span> arg<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>args <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> args<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))))))</span>\n       func<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;このfuncがなくてもなぜか動く．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> define-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">(</span>func-name args ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> func-name <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>args ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>_ var val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> var val<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">)))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> g <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b c<span class=\"synSpecial\">)))</span>\ng\ngosh&gt; <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synError\">#&lt;undef&gt;</span>\ngosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">)))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synError\">#&lt;undef&gt;</span>\ngosh&gt; <span class=\"synSpecial\">(</span>define-curry <span class=\"synSpecial\">(</span>f a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\ngosh&gt; <span class=\"synSpecial\">((</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>define-curry <span class=\"synSpecial\">(</span>g a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b c<span class=\"synSpecial\">))</span>\ng\ngosh&gt; <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\ngosh&gt; <span class=\"synSpecial\">((</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\ngosh&gt; <span class=\"synSpecial\">(((</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">((</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">((</span>g <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\n</pre>\n\n\n<p>修正1\n<blockquote class=\"twitter-tweet\" lang=\"HASH(0xa7a3470)\"><p lang=\"ja\" dir=\"ltr\">curry の定義は (syntax-rules (lambda) ...) にしないと (curry (foo (x) x)) とかでも動いてしましそう&#10;<a href=\"https://t.co/DUJHFogOQg\">https://t.co/DUJHFogOQg</a></p>&mdash; でこれき (@dico_leque) <a href=\"https://twitter.com/dico_leque/status/684596402043813888\">January 6, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n　<br/>\n　<br/>\n修正2</p>\n\n<p><blockquote class=\"twitter-tweet\" lang=\"HASH(0xa7a3470)\"><p lang=\"ja\" dir=\"ltr\">引数がゼロ個の手続きはこのマクロでは作れないな。&#10;(lambda-curry () (* 1 2)) みたいなの。&#10;それができたからといって使いどころもないけど。</p>&mdash; 齊藤敦志 (@SaitoAtsushi) <a href=\"https://twitter.com/SaitoAtsushi/status/684595362833694720\">January 6, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synError\">#f&gt;</span>\ngosh&gt; <span class=\"synSpecial\">((</span>lambda-curry <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n<span class=\"synConstant\">3</span>\n</pre>\n\n\n<p>　<br/>\n修正3\n<blockquote class=\"twitter-tweet\" lang=\"HASH(0xa7a3470)\"><p lang=\"ja\" dir=\"ltr\">lambda-curryのletrecは要らない気がする。define-curryの最初のパターンもlambda-curryが0引数対応したなら要らない気がする。 <a href=\"https://t.co/h4ClDCC5ev\">https://t.co/h4ClDCC5ev</a></p>&mdash; Kei (@tk_riple) <a href=\"https://twitter.com/tk_riple/status/684665486274093056\">January 6, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">)))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">((</span>f <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3/4</span>\ngosh&gt; <span class=\"synSpecial\">(</span>define-curry <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\n</pre>\n\n\n","slug":"define-curryを書いてみた"},{"data":{"title":"SICP 問題 4.26","published":"2016/01/03","tags":["scheme","SICP"]},"content":"\n<p>unlessを特殊形式で定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>unless? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>unless-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-condition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-usual-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-exceptional-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>unless<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>unless-condition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>unless-exceptional-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>unless-usual-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>unlessが特殊形式だと困る理由はここで\n<iframe src=\"http://wat-aro.hatenablog.com/embed/2016/01/09/123933\" title=\"特殊形式は高階手続きと一緒に使うことができない - I affirm myself\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://wat-aro.hatenablog.com/entry/2016/01/09/123933\">wat-aro.hatenablog.com</a></cite></p>\n\n","slug":"SICP 問題 4.26"},{"data":{"title":"SICP 問題 4.25","published":"2016/01/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 作用的順序のschemeで本文中のunlessを使用してfactorialを定義した時，  </span>\n<span class=\"synSpecial\">``(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)``</span><span class=\"synError\">を評価しようとすると何が起きるか.</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless condition usual-value exceptional-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> condition exceptional-value usual-value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>unless <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 作用的順序なのでまず引数を評価しようとする．</span>\n<span class=\"synSpecial\">(</span>unless <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; を評価する時に(factorial (- n 1))の部分でループになる．</span>\n\n<span class=\"synComment\">;; 正規順序の言語では引数は必要になった時に初めて評価されるのでこの問題は起こらない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.25"},{"data":{"title":"SICP 問題 4.24","published":"2016/01/01","tags":["scheme","SICP"]},"content":"\n<p>driver-loopにtimeマクロをしかけて計測する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> input the-global-environment<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter a b count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n count<span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを使って計算する．<br/>\n最初のeval</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">100000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (eval input the-global-environment))</span>\n<span class=\"synComment\">; real   1.846</span>\n<span class=\"synComment\">; user   2.010</span>\n<span class=\"synComment\">; sys    0.010</span>\n</pre>\n\n\n<p>解析と評価を分けたeval</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">100000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (eval input the-global-environment))</span>\n<span class=\"synComment\">; real   1.095</span>\n<span class=\"synComment\">; user   1.140</span>\n<span class=\"synComment\">; sys    0.010</span>\n</pre>\n\n\n<p>最初のevalのほうが評価のたびに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>をする分遅くなっている．</p>\n\n","slug":"SICP 問題 4.24"},{"data":{"title":"SICP 問題 4.23","published":"2015/12/31","tags":["scheme","SICP"]},"content":"\n<p>本文中のanalyze-sequenceと問題文のanalyze-sequenceの比較．<br/>\nリーダーマクロを使って実行する．<br/>\n本文のanalyze-sequence</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-sequence exps<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequentially proc1 proc2<span class=\"synSpecial\">)</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>proc1 env<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>proc2 env<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop first-proc rest-procs<span class=\"synSpecial\">)</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span>\n           first-proc\n           <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest-procs<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest-procs<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>procs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze exps<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> procs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Empty sequence: ANALYZE&quot;</span><span class=\"synSpecial\">)</span>\n        <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>Alyssa P.Hacker版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-sequence exps<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">)</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>execute-sequence <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>procs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze exps<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> procs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Empty sequence -- ANALYZE&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><code>(analyze-sequcence '(+ 1 1))</code>を実行した結果<br/>\n本文版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3192:<span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3185:<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span> first-proc <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-p ...\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-application analyze-application<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-application analyze-application<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-application analyze-application<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>Alyssa版　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3215:<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>本文版は<code>(解析された (+ 1 1))</code>を返す．\nAlyssa版は<br/>\n<code>(lambda (env) (execute-sequence (解析された (+ 1 1) env))</code>を返す．\n　　　　<br/>\n次に<code>(analyze-sequence '((+ 1 1) (+ 2 2)))</code>を実行する．</p>\n\n<p>本文版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">2</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3258:<span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3251:<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span> first-proc <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-p ...\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3247:<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proc1 env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proc2 env<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3251:<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span> first-proc <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-p ...\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>Alyssa版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">2</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3269:<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>本文版は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(lambda (env) ((解析された (+ 1 1)) env) ((解析された (+ 2 2)) env))</pre>\n\n\n<p>を返す．<br/>\n　<br/>\nAlyssa版は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(execute-sequence ((解析された (+ 1 1)) (解析された (+ 2 2))) env)</pre>\n\n\n<p>を返す．<br/>\n　<br/>\n本文版は並びが解析されenvを受け取って評価するlambdaが返される．\nAlyssa版では並びが解析されていない．execute-sequenceが解析の外で並びを表している．<br/>\n解析と評価を分けるという趣旨に反するのでこれではいけない．</p>\n\n","slug":"SICP 問題 4.23"},{"data":{"title":"SICP 問題 4.22","published":"2015/12/29","tags":["scheme","SICP"]},"content":"\n<p>letを使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; make-procedureのbodyのところについていたscan-out-definesのせいでエラー．</span>\n<span class=\"synComment\">;; make-proceduren渡される時点でbodyはanalyzeした後のclosureになっているので</span>\n<span class=\"synComment\">;; analyze-lambdaの中で内部定義をletに吐き出す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters body env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>vars <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>bproc <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-procedure vars bproc env<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.22"},{"data":{"title":"SICP 問題 4.21","published":"2015/12/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synError\">以下の式が階乗を計算すること確かめた後，フィボナッチ数を計算する手続きを作る．</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n         <span class=\"synConstant\">1</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n               <span class=\"synConstant\">1</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n       <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; フィボナッチ数</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))))))</span>\n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 確認用の手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-map-list n start proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span>iota n start <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>make-map-list <span class=\"synConstant\">10</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">13</span> <span class=\"synConstant\">21</span> <span class=\"synConstant\">34</span> <span class=\"synConstant\">55</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; b</span>\n<span class=\"synError\">以下の式をaと同じように内部定義もletrecも使わずに定義する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 答え</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span> x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ev? od? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span>od? od? ev? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>od? ev? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span>ev? ev? od? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\n</pre>\n\n\n<p>問題文と引数の順序が違っていたので書き直し．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span> x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ev? od? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span>od? ev? od? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ev? od? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span>ev? ev? od? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\n</pre>\n\n\n","slug":"SICP 問題 4.21"},{"data":{"title":"SICP 問題 4.20","published":"2015/12/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synComment\">;; letrecをlet式に変換すし，導出された式として実装する．</span>\n\n<span class=\"synComment\">;; eval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;letrecを追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 選択子</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>fact\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synConstant\">1</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>fact <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n        <span class=\"synSpecial\">(</span>fact <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; 環境図はパス</span>\n\n<span class=\"synComment\">;; Louiの言うことを素直に書いてみると以下の通りになる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n    body ...<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; これだと相互再帰部分でeven?を評価するときにはまだodd?が評価されていないためエラーになる．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.20"},{"data":{"title":"SICP 問題 4.19","published":"2015/12/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a x<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> a <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを同時定義する方法．<br/>\ndelayとforceを使えばできそうだけどと考えました．<br/>\n内部定義が変数を定義しているときは値をdelayで包んで，<br/>\nって考えたんですけど，評価する段階で今の実装じゃ無理だと思い諦めました．<br/>\nその後<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%B0%A4%EB\">ググる</a>と下でも同じような考察が．</p>\n\n<p><a href=\"http://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E5%86%85%E9%83%A8define%E3%81%AE%E8%A9%95%E4%BE%A1%E9%A0%86\">http://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E5%86%85%E9%83%A8define%E3%81%AE%E8%A9%95%E4%BE%A1%E9%A0%86</a></p>\n\n","slug":"SICP 問題 4.19"},{"data":{"title":"SICP4章　真理値のせいではまった．","published":"2015/12/25","tags":["SICP","scheme"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n      y\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>これが動かなかったんですよ．<br/>\nはじめはeval-sequenceで(first-exp exp)をevalしていなかったとかそういうのだったんですけど，<br/>\nどうしても動かなくて．<br/>\ndebug printでも(null? x)が#fになってるのになぜかyが返ってくるんです．</p>\n\n<p>eval-ifはtrue?で真偽が決まります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true true initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false false initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>散々迷ってここが原因だとわかりました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>では#tや#fじゃなくてtrue,falseになっています．<br/>\n他のコードも統一するために</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>としていたのが裏目にでました．<br/>\nここで作ったdebug printで#fとなっていてもこの評価器はtrueを返しているというややこしいことになっていました．<br/>\neval-ifも間違っていない．選択子も正しくできている．<br/>\nnull?も問題ない．(null? x)のxはきちんと'(a b c)に束縛されている．<br/>\n可能性を全部潰してやっとここに行き着きました．<br/>\n全部を#tと#fに統一してやっと解決しました．<br/>\nこれは辛かった．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span><span class=\"synConstant\">#t</span> <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>超循環評価器はこういう時厳しいですね．</p>\n\n","slug":"SICP4章　真理値のせいではまった．"},{"data":{"title":"SICP 問題 4.18","published":"2015/12/25","tags":["scheme","SICP"]},"content":"\n<p>本文中の変形であればうごく．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>\n<span class=\"synComment\">;; ３章で定義した手続きとマクロ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> int\n    <span class=\"synSpecial\">(</span>cons-stream initial-value\n                 <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream integrand dt<span class=\"synSpecial\">)</span>\n                              int<span class=\"synSpecial\">)))</span>\n  int<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>solve f y0 dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dy <span class=\"synSpecial\">(</span>stream-map f y<span class=\"synSpecial\">))</span>\n  y<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 問題文の通りに変形すると，</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>y <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>dy <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>b <span class=\"synSpecial\">(</span>stream-map f y<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> y a<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> dy b<span class=\"synSpecial\">))</span>\n    y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; まずはじめのletでyとvは``*unassigned*``に束縛される．</span>\n<span class=\"synComment\">;; 次にaを束縛する．(integral ..)が評価される．dyはまだ*unassigned*だが，initial-valueだけcosされ，のこりの評価は遅れる．(delay dy)となっているのでdyもまだ評価されない．</span>\n<span class=\"synComment\">;; 次にbを束縛する．(stream-map f y)を評価しようとするがこの時yはまだ'*unassigned*なのでエラー．</span>\n\n<span class=\"synComment\">;; 本文中の変換をすると，</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>y <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>dy <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> dy <span class=\"synSpecial\">(</span>stream-map f y<span class=\"synSpecial\">))</span>\n    y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; まずはじめに最初の式と同じようにyとdyを束縛する．</span>\n<span class=\"synComment\">;; 次にyに(integral (delay dy) y0 dt)を代入する．</span>\n<span class=\"synComment\">;; (integral ..)が評価される．dyはまだ*unassigned*だが，initial-valueだけcosされ，のこりの評価は遅れる．</span>\n<span class=\"synComment\">;; (delay dy)となっているのでdyもまだ評価されない．</span>\n<span class=\"synComment\">;; 次にdyに(stream-map f y)を代入する．この時点でyの値は(integral (delay dy) y0 dt).</span>\n<span class=\"synComment\">;; stream-mapもはじめに必要なのはyの先頭の要素だけで，それはinitial-valueになっている．</span>\n<span class=\"synComment\">;; その相互に呼び出しあいながらストリームが作られる．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.18"},{"data":{"title":"SICP 問題 4.17","published":"2015/12/25","tags":["scheme","SICP"]},"content":"\n<p>lambdaを評価すると新しくフレームが作られます．<br/>\nこれを防ぐためにletで<em>unassignment</em>を束縛するのではなくdefineで内部定義します．<br/>\ndefine-variable!はフレームに新たな変数を追加する手続きなので余計なフレームは作られません．<br/>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151225194001\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151225/20151225194001.jpg\" alt=\"f:id:wat-aro:20151225194001j:image\" title=\"f:id:wat-aro:20151225194001j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>scheme\n(define (scan-out-defines body)\n  (define (split-def-body proc-body)\n    (let iter ((proc-body proc-body)\n               (def &#39;())\n               (body &#39;()))\n      (cond ((null? proc-body) (cons (reverse def) (reverse body)))\n            ((definition? (car proc-body)) (iter (cdr proc-body)\n                                                 (cons (car proc-body) def)\n                                                 body))\n            (else (iter (cdr proc-body)\n                        def\n                        (cons (car proc-body) body))))))\n  (let* ((def-body-list (split-def-body body))\n         (def-list (car def-body-list))\n         (body-list (cdr def-body-list)))\n    (if (null? def-list)\n        body\n        (append  (map (lambda (x) (make-definition (definition-variable x) &#39;&#39;*unassigned*))\n                    def-list)\n                 (map (lambda (x) (list &#39;set! (definition-variable x)\n                                        (definition-value x)))\n                      def-list)\n                 body-list))))</pre>\n\n\n","slug":"SICP 問題 4.17"},{"data":{"title":"varとvalを間違えてはまった話","published":"2015/12/23","tags":["scheme","SICP"]},"content":"\n<p>ちょっとしたミスにかなり時間取られました．<br/>\nスコープがどうなってるか調べようと色々手続き作ろうしていたらよくわからないエラーが出てしまい．<br/>\nはじめはappって名前のlambda式をdefineするとエラーが出るっていうよくわからない症状で．<br/>\n途中でmy-applyからのエラーだとわかり，その後，何度か環境を評価し直したりしていて，\n同じ変数名でdefineした時に正しくvalueが環境に保存されていないことに気付きました．<br/>\n下に書いたようにvarとvalの違いが原因でした．<br/>\nこれのせいで二時間くらい取られました．<br/>\n環境の中を覗いても，何が期待した状態なのかをなかなか読み取れなかったのも時間がかかった原因の一つですね．<br/>\n自分のために残しておきます．<br/>\nでもまだこの段階で気付けてよかったです．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> target var<span class=\"synSpecial\">)</span>  <span class=\"synComment\">;;ここのvarが間違い</span>\n          <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> target val<span class=\"synSpecial\">)</span> <span class=\"synComment\">;; valに修正</span>\n          <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"varとvalを間違えてはまった話"},{"data":{"title":"SICP 問題 4.16","published":"2015/12/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>env-loop var env <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unassigned variable&quot;</span> var<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>target target<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines proc<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; 選択子</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>body-list def-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; lambda式の本体を受け取って，内部でdefineを使ってる式と使ってない式のリストを返す</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body-list<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body-list proc-body-list<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body-list<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body-list<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body-list<span class=\"synSpecial\">)</span> def <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body-list<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synComment\">;; 本体</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body <span class=\"synSpecial\">(</span>lambda-body proc<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">))</span>\n        proc\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span>lambda-parameters proc<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set!\n                                                       <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                       <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                     <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">))</span>\n                                <span class=\"synSpecial\">(</span>body-list def-body-list<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">'(</span>lambda <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>define u e1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>define v e2<span class=\"synSpecial\">)</span>\n                           e3<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>u <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>v <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">set!</span> u e1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> v e2<span class=\"synSpecial\">)</span> e3<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; c</span>\n<span class=\"synComment\">;; どちらに組み込んだでも同じが，procedure-bodyは二箇所で呼ばれているので一箇所でしか呼ばれていないmake-procedureに組み込んだ方が良い．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.16"},{"data":{"title":"SICP 問題 4.15","published":"2015/12/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 引数の手続きpとオブジェクトaについて，式(p a)停止するかどうかを正確に判断するような手続きhalts?</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>run-forever<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>run-forever<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>halts? p p<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>run-forever<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>halted<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>try try<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; まずこれが停止すると仮定する．すると(halts? try try)はtrueを返し，then節(run-forever)を実行するので停止しない．</span>\n<span class=\"synComment\">;; 次にこれが停止しないと仮定する．(halts? try try)がfalseなのでelse節'haltsが実行されるので停止する．</span>\n<span class=\"synComment\">;; 矛盾するのでhalts?は定義できない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.15"},{"data":{"title":"SICP 問題 4.14","published":"2015/12/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; M-EVAL中の手続きは先頭に'procedureがついたリスト．</span>\n<span class=\"synComment\">;; 基層のLispのmapを使うとただのリストとして受け取ってしまうためにうまくいかない．</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>map <span class=\"synIdentifier\">map</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true true initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false false initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; M-EVAL input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>c <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>d <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n<span class=\"synConstant\">***</span> ERROR: invalid application: <span class=\"synSpecial\">((</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> input the-global-environment<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">961</span> of <span class=\"synConstant\">&quot;/Users/home/work/scheme/SICP/4.1.scm&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; M-EVAL input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; M-EVAL value</span>\nok\n\n<span class=\"synComment\">;;; M-EVAL input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>c <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>d <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-EVAL value</span>\n<span class=\"synSpecial\">(</span>a b c d<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 4.14"},{"data":{"title":"SICP 問題 4.13","published":"2015/12/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan var vars vals proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>proc var vars vals<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)</span> proc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 束縛された変数を解放するmake-unbound!</span>\n<span class=\"synComment\">;; first-frameだけでに限定しないと</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-unbound! var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span>\n                                                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> vars <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">))</span>\n                                                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> vals <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">))</span>\n                                                             <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          target\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.13"},{"data":{"title":"SICP 問題 4.12","published":"2015/12/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; scanとenv-loopを抜き出す．</span>\n<span class=\"synComment\">;; 見つかった時の手続きをprocで渡す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan var vars vals proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>proc var vars vals<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)</span> proc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop var env proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">#f</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>scan var\n                         <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                         proc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> val <span class=\"synSpecial\">(</span>env-loop var <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> proc<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>env-loop var env <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> target<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>env-loop var env <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span>\n                                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n        target\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable: SET!&quot;</span> var<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 見つかればtargetにvalsが束縛される．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> target val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.12"},{"data":{"title":"SICP 問題 4.11","published":"2015/12/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; フレームを束縛のリストとして表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-binding frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-bindings frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-variable binding<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> binding<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> binding<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-binding var val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var val<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val fram<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-binding var val<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変更無し</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変更無し</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; frame-variablesとframe-valuesを作ればset-variable-value!とdefine-variable!は変更なし</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable: SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 作らない場合はassqで走査する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> var <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> target val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">))))))</span>\n<span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> var frame<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> target val<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.11"},{"data":{"title":"SICP 問題 4.10","published":"2015/12/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 後置式にする</span>\n<span class=\"synComment\">;; 全部はめんどうなのでquoteだけ．</span>\n<span class=\"synComment\">;; リストの最後の項か尋ねるlast?</span>\n<span class=\"synComment\">;; 空リストは#fを返す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last? lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">#f</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; リストの最後の項を取る選択子last</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>last? lst<span class=\"synSpecial\">)</span>\n      lst\n      <span class=\"synSpecial\">(</span>lst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; cdrの逆で最後の項を取り除いたリストを返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rid-last lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>lst lst<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;pair required, but got&quot;</span> lst<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span>last? lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> result<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; クオート式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rid-last <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; リストが指定sれた記号から始まるかどうかを確認する手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>last <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.10"}],"page":9},"__N_SSG":true}