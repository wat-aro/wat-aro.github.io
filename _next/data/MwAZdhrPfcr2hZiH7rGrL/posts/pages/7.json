{"pageProps":{"posts":[{"data":{"title":"SICP 問題 4.62","published":"2016/01/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; last-pairに該当するルールを作る</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>last-pair? <span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>last-pair? ?y ?z<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; ひとつ目の質問にマッチして</span>\n<span class=\"synComment\">;; ?x=3となるので</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; と出力されるはず．</span>\n\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> ?x<span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; まずふたつ目の質問にマッチする．</span>\n<span class=\"synComment\">;; ?y=1, ?z=(2 3).二行目で(last-pair (2 3) ?x)となる．</span>\n<span class=\"synComment\">;; 次にまた二つ目の質問にマッチ．</span>\n<span class=\"synComment\">;; ?y=2,?z=(3).二行目で(last-pair (3) ?x)</span>\n<span class=\"synComment\">;; ひとつ目の質問にマッチ．(last-pair (3) (3))</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> ?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; まず二つ目の質問にマッチする．</span>\n<span class=\"synComment\">;; ?y=2, ?z=?x, ?x=3.</span>\n<span class=\"synComment\">;; ２行目で(last-pair ?x (3))となる．</span>\n<span class=\"synComment\">;; 実装がわからないのでここから想像．</span>\n<span class=\"synComment\">;; まずひとつ目の質問を評価機は試す．</span>\n<span class=\"synComment\">;; すると(last-pair (3) (3))になる．</span>\n<span class=\"synComment\">;; 次に二つ目の質問を試す．</span>\n<span class=\"synComment\">;; すると(last-pair (?x . ?y) (3))かつ(last-pair ?y (3))</span>\n<span class=\"synComment\">;; なのでどの組み合わせを試しても成り立つ．</span>\n<span class=\"synComment\">;; ここで無限ループになる．</span>\n<span class=\"synComment\">;; 仮にすべての組み合わせを試して，それに対して</span>\n<span class=\"synComment\">;; 二行目の質問もさらにすべての組み合わせに対して成り立つ．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.62"},{"data":{"title":"SICP 問題 4.61","published":"2016/01/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 先頭の２つの隣接関係</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?x next-to ?y in <span class=\"synSpecial\">(</span>?x ?y <span class=\"synSpecial\">.</span> ?u<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; リストのcdrの隣接関係</span>\n<span class=\"synComment\">;; (1 2 3 4 5)だとvが1,zが(2 3 4 5).２行目で，zに対してもnext-toをやると読める．</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?x next-to ?y in <span class=\"synSpecial\">(</span>?v <span class=\"synSpecial\">.</span> ?z<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>?x next-to ?y in ?z<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>?x next-to ?y in <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> next-to <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> next-to <span class=\"synConstant\">4</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>?x next-to <span class=\"synConstant\">1</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> next-to <span class=\"synConstant\">1</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> next-to <span class=\"synConstant\">1</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.61"},{"data":{"title":"SICP 問題 4.60","published":"2016/01/16","tags":["scheme","SICP"]},"content":"\n<p>最初の質問をすると近くに住む人の対になるので２つずつ表示される．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>lives-near ?person-1 ?person2<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 例</span>\n<span class=\"synSpecial\">(</span>lives-near <span class=\"synSpecial\">(</span>Hacker Alyssa P<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>Fect Cy D<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>lives-near <span class=\"synSpecial\">(</span>Fect Cy D<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>Hacker Alyssa P<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを防ぐために各人にIDを割り振る．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 例</span>\n<span class=\"synSpecial\">(</span>id <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; そしてlives-nearをidの若いほうから表示するように書き換える</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>lives-near? ?person-1 ?person-2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>address ?person-1 <span class=\"synSpecial\">(</span>?town <span class=\"synSpecial\">.</span> ?rest-1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>address ?person-2 <span class=\"synSpecial\">(</span>?town <span class=\"synSpecial\">.</span> ?rest-2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>same ?person-1 ?person-2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>id ?person1 ?id1<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>id ?person2 ?id2<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>lisp-value <span class=\"synIdentifier\">&lt;</span> ?id1 ?id2<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.60"},{"data":{"title":"SICP 問題 4.59","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>meeting accounting <span class=\"synSpecial\">(</span>Monday <span class=\"synError\">9am</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting administration <span class=\"synSpecial\">(</span>Monday <span class=\"synError\">10am</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting computer <span class=\"synSpecial\">(</span>Wednesday <span class=\"synError\">3pm</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting administration <span class=\"synSpecial\">(</span>Friday <span class=\"synError\">1pm</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting whole-company <span class=\"synSpecial\">(</span>Wednesday <span class=\"synError\">4pm</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; a 金曜の朝に今日ある会議をすべて質問する</span>\n<span class=\"synSpecial\">(</span>meeting ?all <span class=\"synSpecial\">(</span>Friday ?time<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b ある人の会議は，全社会議とその人の部門会議をすべて含む</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>meeting-time ?person ?day-and-time<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>meeting whole-company ?day-and-time<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person <span class=\"synSpecial\">(</span>?division <span class=\"synSpecial\">.</span> ?rest<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>meeting ?division ?day-and-time<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; c Alyssaが水曜に会議の時間を質問する</span>\n<span class=\"synSpecial\">(</span>meeting-time <span class=\"synSpecial\">(</span>Hacker Alyssa P<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>Wednesday ?time<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.59"},{"data":{"title":"SICP 問題 4.58","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>ある人が，自分の勤める部署に勤める監督者がいない場合，その人をbig shotであるとする規則を定義する</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>big-shot ?person<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person <span class=\"synSpecial\">(</span>?division <span class=\"synSpecial\">.</span> rest<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>supervisor ?person ?boss<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>job ?boss <span class=\"synSpecial\">(</span>?boss-division <span class=\"synSpecial\">.</span> rest2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>same ?division ?boss-division<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.58"},{"data":{"title":"SICP 問題 4.57","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; jiroの仕事をtaroができるかどうか</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>replacible ?person1 ?person2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person2 ?job2<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>job ?person1 ?job2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;person2とperosn1の仕事が同じ</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person1 ?job1<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>can-do-job ?job1 ?job2<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;person1はperson2の仕事job2もできる</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>same ?person1 ?person2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; a Cy D. Fectに代われる人すべて</span>\n<span class=\"synSpecial\">(</span>replacible ?person <span class=\"synSpecial\">(</span>Fect Cy D<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>salary ?person ?salary<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>replacible ?person ?somebody<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>salary ?somebody ?somebody-salary<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>lisp-value <span class=\"synIdentifier\">&gt;</span> ?somebody-salary ?salary<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.57"},{"data":{"title":"SICP 問題 4.56","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 合成質問を形成する</span>\n<span class=\"synComment\">;; a Ben Bitdiddleが監督している人すべての名前とその住所</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>supervisor ?x <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>address ?x ?y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b Ben Bitdiddleより給料が少ない人と，Ben Bitdiddleの給料</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>salary <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> ?Ben-amount<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>salary ?person ?amount<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>lisp-value <span class=\"synIdentifier\">&gt;</span> ?Ben-amount ?amount<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; c 計算機部門にいない人が監督している人すべてと，その監督者の名前と担当．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person ?type<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>job ?person <span class=\"synSpecial\">(</span>computer <span class=\"synSpecial\">.</span> ?rest<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>supervisor ?person ?supervisor<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.56"},{"data":{"title":"SICP 問題 4.55","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>データベースへの単純質問を示せ</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a Ben Bitiddleに監督されているすべての人々</span>\n<span class=\"synSpecial\">(</span>supervisor ?x <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b 経理部門のすべての人々の名前と担当</span>\n<span class=\"synSpecial\">(</span>job ?x <span class=\"synSpecial\">(</span>accounting <span class=\"synSpecial\">.</span> ?type<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; c Slumervilleに住む人すべての名前と住所</span>\n<span class=\"synSpecial\">(</span>address ?x <span class=\"synSpecial\">(</span>Slumerville <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.55"},{"data":{"title":"SICP 問題 4.54","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>requireを特殊形式で実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>require? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>require<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>require-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>require? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-require <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if-fail? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if-fail <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-require <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>require-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>pproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred-value fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>true? pred-value<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>fail2<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok fail2<span class=\"synSpecial\">)))</span>\n             fail<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>an-element-of items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; There are no more values of</span>\n<span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.54"},{"data":{"title":"SICP 問題 4.53","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>permanent-set!でpairsに成功する組み合わせを束縛するが，<br/>\n(amb)で必ず失敗するので全ての成功する組み合わせをpairsに束縛する．<br/>\n失敗継続が呼ばれ，if-failの第二引数のpairsが評価される．<br/>\nこの時permanent-set!で束縛されているのでバックトラックで戻らず，今まで代入した成功パターンすべてが表示される．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span>  <span class=\"synSpecial\">((</span>pairs <span class=\"synSpecial\">'()))</span>\n  <span class=\"synSpecial\">(</span>if-fail <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>p <span class=\"synSpecial\">(</span>prime-sum-pair <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">20</span> <span class=\"synConstant\">35</span> <span class=\"synConstant\">110</span><span class=\"synSpecial\">))))</span>\n             <span class=\"synSpecial\">(</span>permanent-set! pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> p pairs<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>amb<span class=\"synSpecial\">))</span>\n           pairs<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">8</span> <span class=\"synConstant\">35</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">110</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.53"},{"data":{"title":"SICP 問題 4.52","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>利用者が失敗を捉えることができるif-failを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if-fail? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if-fail <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-fail? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if-fail<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-if-fail <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>fail-proc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>proc env succeed\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n              <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>user-print <span class=\"synSpecial\">(</span>fail-proc env succeed fail<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>if-fail <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> x<span class=\"synSpecial\">))</span>\n           x<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">'</span>all-odd<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">'</span>all-odd\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>if-fail <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> x<span class=\"synSpecial\">))</span>\n           x<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">'</span>all-odd<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">8</span>\n</pre>\n\n\n","slug":"SICP 問題 4.52"},{"data":{"title":"SICP 問題 4.51","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>バックトラックで戻らないpermanent-set!の実装</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; permanent-set!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>vproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>vproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val fail2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok\n                          fail2<span class=\"synSpecial\">))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>permanent-set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>permanent-set! count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x y<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y count<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a c <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>b a <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>permanent-set!のかわりにset!を使うと</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x y<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y count<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a c <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>b a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>バックトラックで代入が元に戻るのでカウントが増えていかなくなる．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.51"},{"data":{"title":"SICP 問題 4.50","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>ランダムな順に探すrambを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use srfi-27<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>random-car lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> lst <span class=\"synSpecial\">(</span>random-integer <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rember item lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>rember item <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-next choices<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> choices<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fail<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> choices<span class=\"synSpecial\">)</span> env succeed <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                                         <span class=\"synSpecial\">(</span>try-next <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> choices<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">(</span>try-next cprocs<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-next choices<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> choices<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fail<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>random-car choices<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>first env succeed <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                                   <span class=\"synSpecial\">(</span>try-next <span class=\"synSpecial\">(</span>rember first choices<span class=\"synSpecial\">)))))))</span>\n      <span class=\"synSpecial\">(</span>try-next cprocs<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>ramb<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>ramb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">4</span>\n</pre>\n\n\n","slug":"SICP 問題 4.50"},{"data":{"title":"SICP 4.3 amb評価器","published":"2016/01/14","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; eval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ambeval <span class=\"synIdentifier\">exp</span> env succeed fail<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env succeed fail<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>amb<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>succeed <span class=\"synIdentifier\">exp</span> fail<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>qval <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>succeed qval fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n             fail<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>vproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>vproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-value <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                            <span class=\"synSpecial\">(</span>set-variable-value! var\n                                                 old-value\n                                                 env<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>fail2<span class=\"synSpecial\">)))))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>vproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>vproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok fail2<span class=\"synSpecial\">))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; (succeed (analyze exp) fail)という形になる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>cproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>aproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>pproc env\n             <span class=\"synComment\">;; pred-valueを得るための</span>\n             <span class=\"synComment\">;; 術後の評価の成功継続</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred-value fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? pred-value<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>cproc env succeed fail2<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>aproc env succeed fail2<span class=\"synSpecial\">)))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>vars <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>bproc <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span>make-procedure vars bproc env<span class=\"synSpecial\">)</span>\n               fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 本文のanalyze-sequence</span>\n<span class=\"synComment\">;; loopからsequentiallyの流れ．</span>\n<span class=\"synComment\">;; (lambda (env) (p1 env) (p2 env))</span>\n<span class=\"synComment\">;; (lambda (ENV) ((lambda (env) (p1 env) (p2 env)) ENV) (p3 env))</span>\n<span class=\"synComment\">;; (lambda (ENV) (p1 ENV) (p2 ENV) (p3 ENV))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-sequence exps<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequentially a b<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>a env\n         <span class=\"synComment\">;; aを呼び出すときの成功継続</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a-value fail2<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>b env succeed fail2<span class=\"synSpecial\">))</span>\n         <span class=\"synComment\">;; aを呼び出すときの失敗継続</span>\n         fail<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop first-proc rest-procs<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span>\n        first-proc\n        <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest-procs<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest-procs<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>procs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze exps<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> procs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Empty sequence: ANALYZE&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>aprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>pproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>get-args aprocs\n                         env\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>args fail3<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>execute-application\n                            proc args succeed fail3<span class=\"synSpecial\">))</span>\n                         fail2<span class=\"synSpecial\">))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-args aprocs env succeed fail<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> aprocs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'()</span> fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> aprocs<span class=\"synSpecial\">)</span> env\n       <span class=\"synComment\">;; このaprocの成功継続</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>arg fail2<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>get-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> aprocs<span class=\"synSpecial\">)</span>\n                   env\n                   <span class=\"synComment\">;; get-argsの再帰呼び出しの成功継続</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>args fail3<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> arg args<span class=\"synSpecial\">)</span>\n                              fail3<span class=\"synSpecial\">))</span>\n                   fail2<span class=\"synSpecial\">))</span>\n       fail<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute-application proc args succeed fail<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n                  fail<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? proc<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">((</span>procedure-body proc<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>procedure-parameters proc<span class=\"synSpecial\">)</span>\n                             args\n                             <span class=\"synSpecial\">(</span>procedure-environment proc<span class=\"synSpecial\">))</span>\n         succeed\n         fail<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synConstant\">&quot;Unknown procedure type -- EXECUTE-APPLICATION&quot;</span> proc<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-next choices<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> choices<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fail<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> choices<span class=\"synSpecial\">)</span> env succeed <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                                         <span class=\"synSpecial\">(</span>try-next <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> choices<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">(</span>try-next cprocs<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; 自己評価式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">string?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変数</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; クオート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>define<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮パラメタ</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;本体</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; (define (def-body-list proc-body)</span>\n<span class=\"synComment\">;;   (let iter ((proc-body proc-body)</span>\n<span class=\"synComment\">;;              (def '())</span>\n<span class=\"synComment\">;;              (body '()))</span>\n<span class=\"synComment\">;;     (cond ((null? proc-body) (cons (reverse def) (reverse body)))</span>\n<span class=\"synComment\">;;           ((definition? (car proc-body)) (iter (cdr proc-body)</span>\n<span class=\"synComment\">;;                                                (cons (car proc-body) def)</span>\n<span class=\"synComment\">;;                                                body))</span>\n<span class=\"synComment\">;;           (else (iter (cdr proc-body)</span>\n<span class=\"synComment\">;;                       def</span>\n<span class=\"synComment\">;;                       (cons (car proc-body) body))))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                                 body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                        def\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body body<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>def-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>body-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> def-list<span class=\"synSpecial\">)</span>\n        body\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                             def-list<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                       <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                     def-list<span class=\"synSpecial\">)</span>\n                                body-list<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; if</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-if predicate consequent alternative<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if predicate consequent alternative<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; begin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>begin<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-exp aseq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequence-&gt;exp seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">)</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>begin seq<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; 任意の合成式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-operands? ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-operand ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-operands ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 派生式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>cond<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-else-clause? clause<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>else<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clause<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-actions clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clause<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last -- COND-&gt;IF&quot;</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>action <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if predicate\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; named-let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 術後のテスト</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 手続きの表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters body env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-procedure? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>procedure<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-parameters p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-body p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-environment p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 環境に対する操作</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-environment <span class=\"synSpecial\">'())</span>\n\n<span class=\"synComment\">;; フレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> val <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変数を値に対応づける新しいフレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span> var<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable -- SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 環境</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>list <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>not <span class=\"synIdentifier\">not</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>primitive<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> apply-in-underlying-scheme <span class=\"synIdentifier\">apply</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; Amb-Eval input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; Amb-Eval value:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>internal-loop try-again<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> input <span class=\"synSpecial\">'</span>try-again<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>try-again<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;;;; Starting a new problem &quot;</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>ambeval input\n                     the-global-environment\n                     <span class=\"synComment\">;; ambeval 成功</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val next-alternative<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>user-print val<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>internal-loop next-alternative<span class=\"synSpecial\">))</span>\n                     <span class=\"synComment\">;; ambeval 失敗</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                       <span class=\"synSpecial\">(</span>announce-output <span class=\"synConstant\">&quot;;;; There are no more values of&quot;</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>user-print input<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)))))))</span>\n  <span class=\"synSpecial\">(</span>internal-loop\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;;;; There is no current problem&quot;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>announce-output <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>user-print object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>compound-procedure? object<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure\n                     <span class=\"synSpecial\">(</span>procedure-parameters object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>procedure-body object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">'</span><span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> object<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 4.3 amb評価器"},{"data":{"title":"SICP 問題 4.49","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%B8%C0%B8%EC\">自然言語</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>用プログラムを少し改造するだけで文章の生成ができる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>an-element-of items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-word word-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> word-list<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> word-list<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>generate-sentence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>parse-sentence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.49"},{"data":{"title":"SICP 問題 4.48","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p>adjectiveのみ追加する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 冠詞の解析をparse-article-phraseにしてそこでmaybe-extendに進めばadjectiveも解析されるようにする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-simple-noun-phrase<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>simple-noun-phrase\n        <span class=\"synSpecial\">(</span>parse-article-phrase<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>parse-word nouns<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-article-phrase<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>maybe-extend article-phrase<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>amb article-phrase\n         <span class=\"synSpecial\">(</span>maybe-extend <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>article-phrase\n                             article-phrase\n                             <span class=\"synSpecial\">(</span>parse-adjective-phrase<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>maybe-extend <span class=\"synSpecial\">(</span>parse articles<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.48"},{"data":{"title":"SICP 問題 4.47","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-verb-phrase<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span>parse-word verbs<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>verb-phrase\n             <span class=\"synSpecial\">(</span>parse-verb-phrase<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>parse-prepositional-phrase<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><code>(parse '(the student with the cat sleeps in the class))</code>これを例に考える．<br/>\nverbが問題なのでsleeps in the classだけに絞る．\nこれは</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>verb-phrase\n <span class=\"synSpecial\">(</span>verb sleeps<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>prep-phrase <span class=\"synSpecial\">(</span>prep in<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>simple-noun-phrase\n               <span class=\"synSpecial\">(</span>article the<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>noun class<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>となってほしい．<br/>\nまず(parse-word verbs)が評価され<em>unparsed</em>はcdrがset!されて(list verb sleeps)が返る．<br/>\n<em>unparsed</em>はまだ残っているので(parse input)の(require (null? <em>unparsed</em>))で失敗して次にいく．<br/>\n次はparse-verb-phraseなのでまた(parse-word verbs)を評価する．  <br/>\nしかし，<em>unparsed</em>に入っているのはinなので失敗する．<br/>\nそうするとambの次の要素にいくのでまたparse-verb-phraseを評価する．<br/>\n同じく失敗する．このまま無限ループに入って終了しない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (parse input)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse input<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*unparsed*</span> input<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>sent <span class=\"synSpecial\">(</span>parse-sentence<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synConstant\">*unparsed*</span><span class=\"synSpecial\">))</span>\n    sent<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.47"},{"data":{"title":"SICP 問題 4.46","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>器が右から左に非<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>を評価する時<br/>\nperse-noun-phrase中の</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>amb noun-phrase\n     <span class=\"synSpecial\">(</span>maybe-extend <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>noun-phrase noun-phrase\n                         <span class=\"synSpecial\">(</span>parse-prepositional-phrase<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>で，maybe-extendが先に評価されてしまう．<br/>\nすると，実際に名詞が先にきた場合はmaybe-extendは失敗する．<br/>\n次のnoun-phraseで成功して処理が終わる．<br/>\n名詞の後ろに前置詞がきてる場合はそこの解析は行われない．<br/>\n　<br/>\nそのためamb評価器は左から右へ評価していく必要が有る．</p>\n\n","slug":"SICP 問題 4.46"},{"data":{"title":"SICP 問題 4.45","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p>The professor lectures to the student in the class with the cat.</p>\n\n<p>これの５通りの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>結果を示す．\nまずはprofessor に in the class とwith the cat が掛かっている場合．\n次はprofessorにwith the cat , student にin the classがかかっている場合．\n次はstudentにin the classとwith the catがかかっている場合．\n次はprofessorにin the classがかかって，そのclassにwith the catがかかっている場合．\n最後はstudentにin the classがかかり，classにwith the catがかかっている場合．</p>\n\n","slug":"SICP 問題 4.45"},{"data":{"title":"OS X Yosemiteにswank-gaucheのインストール","published":"2016/01/13","tags":["emacs","gauche","scheme"]},"content":"\n<p>きっかけは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>．\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/wat_aro\">@wat_aro</a> どの処理系使ってるかわからないですが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>のswank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>みたいに対応されてたりしませんか？</p>&mdash; <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/lisp\">lisp</a>ドラッグ常習者 (@rayfill) <a href=\"https://twitter.com/rayfill/status/686955833373032449\">2016, 1月 12</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>早速インストール．\nREADMEに</p>\n\n<blockquote><ul>\n<li>設定方法</li>\n</ul>\n\n\n<p>`dot<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/.emacs\">.emacs</a>'の内容を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/.emacs\">.emacs</a>にコピーしてswank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>へのパスの情報を設定します。\n以下の二つの変数を設定してください。</p>\n\n<p> swank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-path:\n swank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>.scmが格納されているディレクトリへのパス</p>\n\n<p> swank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-source-path:\n <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>のソースを持っていて、かつ、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>済の場合、ソースのトップディレク\n トリへのパスを設定して下さい。マニュアルに定義されているオペレータの\n 引数の名前がルックアップ出来るようになります。</p></blockquote>\n\n<p>とあるので</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synComment\">;; swank-gaucheを使うためのSLIME設定</span>\n<span class=\"synComment\">;;</span>\n<span class=\"synComment\">;;(push &quot;&lt;path-to-slime-dir&gt;&quot; load-path)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">slime</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>slime-setup\n <span class=\"synSpecial\">'(</span>slime-fancy\n   slime-scheme<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; swank-gauche.scmが格納されているディレクトリへのパスを設定して下さい。</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> swank-gauche-path <span class=\"synConstant\">&quot;/usr/local/Cellar/swank-gauche-master&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; Gaucheのソースを持っていて、かつ、コンパイル済の場合、ソースのトップ</span>\n<span class=\"synComment\">;; ディレクトリへのパスを設定して下さい。Gaucheのマニュアルに記載されている</span>\n<span class=\"synComment\">;; オペレータの引数名がルックアップ出来るようになります。</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> swank-gauche-gauche-source-path <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/Gauche&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">push</span> swank-gauche-path load-path<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">swank-gauche</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> slime-lisp-implementations\n      <span class=\"synSpecial\">'((</span>gauche <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;gosh&quot;</span><span class=\"synSpecial\">)</span> :init gauche-init :coding-system utf-8-unix<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; バッファのモジュールを決定するための設定</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> slime-find-buffer-package-function <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">find-gauche-package</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; c-p-c補完に設定</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> slime-complete-symbol-function <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">slime-complete-symbol*</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; web上のGaucheリファレンスマニュアルを引く設定</span>\n<span class=\"synSpecial\">(</span>define-key slime-mode-map <span class=\"synSpecial\">(</span>kbd <span class=\"synConstant\">&quot;C-c C-d H&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">gauche-ref-lookup</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>って感じにコピペ&amp;二箇所変数設定．<br/>\nslimeは既に導入しているので&lt;path-to slime-directory>は省略．  　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>のソースはどこにおけばいいのかわからなかったので<code>/usr/local/Cellar/gauche/</code>にgit clone．<br/>\n　<br/>\nいざ，<code>M-x gauche</code></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(begin (add-load-path &#34;/usr/local/Cellar/swank-gauche-master&#34;)\n(require &#34;swank-gauche&#34;) (with-module swank-gauche \n(load-gauche-operator-args &#34;/usr/local/Cellar/gauche/Gauche&#34;) (start-swank &#34;/var/folders/lf/bt7rfh5s1wxgfnmwhx755vtw0000gn/T/slime.2035&#34;)))\n\n*** SYSTEM-ERROR: couldn&#39;t open input file: \n&#34;/usr/local/Cellar/gauche/Gauche/doc/gauche-refe.texi&#34;: No such file or directory\nStack Trace:\n_______________________________________\n  0  (grep &#34;^@defun|^@defmac|^@defspec|^@deffn&#34; gauche-refe-path (lambd\n        At line 558 of &#34;/usr/local/Cellar/swank-gauche-master/swank-gauche.scm&#34;\n  1  (load-gauche-operator-args &#34;/usr/local/Cellar/gauche/Gauche&#34;)\n        At line 1 of &#34;(standard input)&#34;\n\nProcess inferior-lisp exited abnormally with code 70</pre>\n\n\n<p>エラーですね．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>のソースのファイル名を見てみると，<code>Gauche/doc/gauche-ref.texi</code>となっていました．<br/>\nswank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>.scmの該当箇所を修正．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>load-gauche-operator-args gauche-source-path<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>when <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>elisp-false? gauche-source-path<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>load-operator-args <span class=\"synError\">#`</span><span class=\"synConstant\">&quot;,|gauche-source-path|/doc/gauche-ref.texi&quot;</span><span class=\"synSpecial\">)))</span>\n<span class=\"synComment\">;; (load-operator-args #`&quot;,|gauche-source-path|/doc/gauche-refe.texi&quot;) &lt;=変更前</span>\n</pre>\n\n\n<p>これで無事に動いた．</p>\n\n","slug":"OS X Yosemiteにswank-gaucheのインストール"}],"page":7},"__N_SSG":true}