{"pageProps":{"posts":[{"data":{"title":"SICP 問題 2.26","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.26"},{"data":{"title":"SICP 問題 2.24","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n<p><img class=\"hatena-fotolife\" title=\"f:id:wat-aro:20151019214403j:image\" src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151019/20151019214403.jpg\" alt=\"f:id:wat-aro:20151019214403j:image\" /></p>\n","slug":"SICP 問題 2.24"},{"data":{"title":"SICP 問題 2.23","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n   <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n    <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (for-each (lambda (x) (newline) (display x))\n                (list 57 321 88))\n\n57\n321\n88done</pre>\n\n\n","slug":"SICP 問題 2.23"},{"data":{"title":"SICP 問題 2.22","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter things answer<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> things<span class=\"synSpecial\">)</span>\n        answer\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> things<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> things<span class=\"synSpecial\">))</span>\n                    answer<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter items nil<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; iter内でのconsで(square (car things))とanswerを引数として取っている．</span>\n<span class=\"synComment\">;; この場，次のcdrでconsされるのは(square (car (cdr things))) と((square (car things)) answer)．</span>\n<span class=\"synComment\">;; ここで順番が逆になっている．</span>\n<span class=\"synComment\">;; このまま続けていくと欲しかったリストの逆順が返される．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter things answer<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> things<span class=\"synSpecial\">)</span>\n        answer\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> things<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> answer\n                    <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> things<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>iter items nil<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; 始めのconsで作られるのは(() . 1)．</span>\n<span class=\"synComment\">;; 次の繰り返しでconsすると((() . 1) . 2)ができる．</span>\n<span class=\"synComment\">;; 始めのconsで作られたドット対を要素としたドット対ができる．</span>\n<span class=\"synComment\">;; これを繰り返すのでうまくいかない．</span>\n</pre>\n\n\n","slug":"SICP 問題 2.22"},{"data":{"title":"SICP 問題 2.21","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n      nil\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>square-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n       items<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.21"},{"data":{"title":"SICP 問題 2.20","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-parity x <span class=\"synSpecial\">.</span> y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur lis pred?<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">((</span>pred? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> pred?<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> pred?<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">(</span>recur y <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> x<span class=\"synSpecial\">)</span>\n                       <span class=\"synIdentifier\">odd?</span>\n                       <span class=\"synIdentifier\">even?</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (same-parity 1 2 3 4 5 6 7)\n(1 3 5 7)\ngosh&gt; (same-parity 2 3 4 5 6 7)\n(2 4 6)</pre>\n\n\n<p>　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%B0%A4%EB\">ググる</a>といろんなやり方でみんな解いてますね．</p>\n\n","slug":"SICP 問題 2.20"},{"data":{"title":"SICP 問題 2.19","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cc amount coin-values<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> amount <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> amount <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>no-more? coin-values<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>cc amount\n                <span class=\"synSpecial\">(</span>except-first-denomination coin-values<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>cc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> amount\n                   <span class=\"synSpecial\">(</span>first-denomination coin-values<span class=\"synSpecial\">))</span>\n                coin-values<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> first-denomination <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> except-first-denomination <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> no-more? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>coins-valueの順番は答えに関係ない．<br/>\nlist内のすべての組み合わせを行っているためである．<br/>\nただし，降順にしたほうが繰り返しが少なくなるため効率がよくなる．<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define us-coins (list 50 25 10 5 1))\nus-coins\ngosh&gt; (cc 100 us-coins)\n292\ngosh&gt; (cc 100 (list 25 50 10 5 1))\n292\ngosh&gt; (cc 100 (list 25 10 5 1 50))\n292\ngosh&gt; (cc 51 (list 25 10 5 1 50))\n50\ngosh&gt; (cc 51 us-coins)\n50</pre>\n\n\n","slug":"SICP 問題 2.19"},{"data":{"title":"SICP 問題 2.18","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter items nil<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.18"},{"data":{"title":"SICP 問題 2.17","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-pair items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))</span>\n      items\n      <span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.17"},{"data":{"title":"SICP 問題 2.15","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par1 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>div-interval <span class=\"synSpecial\">(</span>mul-interval r1 r2<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>add-interval r1 r2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par2 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span>make-interval <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>div-interval one\n                  <span class=\"synSpecial\">(</span>add-interval <span class=\"synSpecial\">(</span>div-interval one r1<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span>div-interval one r2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n<code>par1</code>には不確かな数(r1,r2)が４回出てきている．　<br/>\n<code>par2</code>には不確かな数が２回．　<br/>\nそのため<code>par2</code>のほうが誤差が小さい．<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define r1 (make-center-percent 5 5))\nr1\ngosh&gt; (define r2 (make-center-percent 20 5))\nr2\ngosh&gt; (define p1 (par1 r1 r2))\np1\ngosh&gt; (define p2 (par2 r1 r2))\nP2\ngosh&gt; (center p1)\n4.040100250626566\ngosh&gt; (percent p1)\n14.900744416873444\ngosh&gt; (center p2)\n4.0\ngosh&gt; (percent p2)\n4.999999999999999</pre>\n\n\n","slug":"SICP 問題 2.15"},{"data":{"title":"SICP 問題 2.14","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par1 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>div-interval <span class=\"synSpecial\">(</span>mul-interval r1 r2<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>add-interval r1 r2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par2 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span>make-interval <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>div-interval one\n                  <span class=\"synSpecial\">(</span>add-interval <span class=\"synSpecial\">(</span>div-interval one r1<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span>div-interval one r2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define small (make-center-percent 10 1.0))\nsmall\ngosh&gt; small\n(9.9 . 10.1)\ngosh&gt; (define lerge (make-center-percent 20.0 20))\nlerge\ngosh&gt; lerge\n(16.0 . 24.0)\ngosh&gt; (par1 small lerge)\n(4.645161290322581 . 9.359073359073358)\ngosh&gt; (par2 small lerge)\n(6.115830115830116 . 7.108504398826979)</pre>\n\n\n","slug":"SICP 問題 2.14"},{"data":{"title":"SICP 問題 2.12","published":"2015/10/13","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-center-width c w<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> c w<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> c w<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>center i<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>lower-bound i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>upper-bound i<span class=\"synSpecial\">))</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>width i<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>upper-bound i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lower-bound i<span class=\"synSpecial\">))</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-center-percent c p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-interval c <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> c <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> w <span class=\"synConstant\">100</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>percent i<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>width i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>center i<span class=\"synSpecial\">))</span> <span class=\"synConstant\">100</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.12"},{"data":{"title":"SICP 問題 2.11","published":"2015/10/13","tags":["scheme","SICP"]},"content":"\n<p>(define (div-interval x y)\n  (let <a href=\"#f-162e29d7\" name=\"fn-162e29d7\" title=\"lowx (lower-bound x\">*1</a>\n        (upx (upper-bound x))\n        (lowy (lower-bound y))\n        (upy (upper-bound y)))\n    (cond <a href=\"#f-d05df02c\" name=\"fn-d05df02c\" title=\"> lowx 0)        ;;xは正\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval ( lowx lowy)\n                                 ( upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval ( upx upy)\n                                 ( lowx lowy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval ( upx lowy)\n                                 ( upx upy)))))\n          ((&lt; upx 0) ;;xは負\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval ( upx upy)\n                                 ( lowx lowy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval ( lowx lowy)\n                                 ( upx upy)))\n                 (else ;;yは０を跨ぐ\n                  (maek-interval ( upx upy)\n                                 ( upx lowy)))))\n          (else ;;xは０を跨ぐ\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval ( lowx upy)\n                                 ( upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval ( upx upy)\n                                 ( lowx upy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval (if (&lt; ( lowx loxy) ( upx upy\">*2</a>\n                                     (<em> upx upy)\n                                     (</em> lowx lowy))\n                                 (if (&lt; (<em> lowx upy) (</em> upx lowy))\n                                     (<em> lowx upy)\n                                     (</em> upx lowy)))))))))</p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-162e29d7\" name=\"f-162e29d7\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">lowx (lower-bound x</span></p>\n<p class=\"footnote\"><a href=\"#fn-d05df02c\" name=\"f-d05df02c\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">> lowx 0)        ;;xは正\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval (<em> lowx lowy)\n                                 (</em> upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval (<em> upx upy)\n                                 (</em> lowx lowy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval (<em> upx lowy)\n                                 (</em> upx upy)))))\n          ((&lt; upx 0) ;;xは負\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval (<em> upx upy)\n                                 (</em> lowx lowy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval (<em> lowx lowy)\n                                 (</em> upx upy)))\n                 (else ;;yは０を跨ぐ\n                  (maek-interval (<em> upx upy)\n                                 (</em> upx lowy)))))\n          (else ;;xは０を跨ぐ\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval (<em> lowx upy)\n                                 (</em> upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval (<em> upx upy)\n                                 (</em> lowx upy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval (if (&lt; (<em> lowx loxy) (</em> upx upy</span></p>\n</div>\n","slug":"SICP 問題 2.11"},{"data":{"title":"SICP 問題 2.10","published":"2015/10/13","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; y が0をまたがる区間の時はエラーを返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-interval x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>upper-bound y<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;error&quot;</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>mul-interval x\n                    <span class=\"synSpecial\">(</span>make-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>upper-bound y<span class=\"synSpecial\">))</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.10"},{"data":{"title":"SICP 問題 2.8","published":"2015/10/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>upper-bound x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lower-bound x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-interval x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>upper-bound x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>upper-bound y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lower-bound x<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.8"},{"data":{"title":"SICP 問題 2.7","published":"2015/10/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-interval a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a b<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>upper-bound x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> y<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> y<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> y<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.7"},{"data":{"title":"SICP 問題 2.6","published":"2015/10/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> zero <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-1 n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">((</span>n f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>add-1 zero<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span> f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> one <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>add-1 one<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span> f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> two <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>a f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>b f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;; 始めにa,b両方にfを適用すると((lambda (f) ...) f)なので(f ... x))の形がそのまま残る．</span>\n<span class=\"synComment\">;; この時前者は(lambda (x) (f ... x)) 後者も同じく(lambda (x) (f ... x))の形になる．</span>\n<span class=\"synComment\">;; 後者にはxも適用すると(f ... x)だけになる．</span>\n<span class=\"synComment\">;; これを前者に適用すれば(f ...x)のxが(f ... x)に置き換わるので(f ... (f ... x))の形になる．</span>\n<span class=\"synComment\">;; zero や one の最初に(lambda (f) (lambda (x) ...))となっているので形を揃えて上記の手続きとなる．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> one two<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span> f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span> f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.6"},{"data":{"title":"[SICP]SICP 問題 2.1","published":"2015/10/10","tags":["scheme"]},"content":"\n<p>負の引数に対応したmake-rat</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-rat n d<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>g <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">gcd</span> n d<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n g<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>d1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> d g<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> d1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">-1</span> n1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">-1</span> d1<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> n1 d1<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"[SICP]SICP 問題 2.1"},{"data":{"title":"SICP 問題 2.5","published":"2015/10/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> <span class=\"synConstant\">2</span> a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> <span class=\"synConstant\">3</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        count\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter c <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n        count\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter c <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n始め算術演算を使えって条件を見逃してlogを使って書いたのでそれも．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>iter c<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>iter c<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.5"},{"data":{"title":"SICP 問題 2.4","published":"2015/10/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>m x y<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> z<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; (car (cons x y)) </span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">)</span> x y<span class=\"synSpecial\">)</span>\nx\n\n<span class=\"synComment\">;; cdr</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> z<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> q<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.4"}],"page":18},"__N_SSG":true}