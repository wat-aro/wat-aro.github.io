{"pageProps":{"title":"SICP 問題 5.24","published":"2016/02/02","tags":["scheme","SICP"],"content":"<p>condを派生式ではなく構文として実装する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; unevがcondの本体を保存．expはevalされる．</span>\n</span><span class=\"code-line\"> ev-cond\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assing unev <span class=\"synSpecial\">(</span>op cond-clauses<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;((p1 e1) (p2 e2) ...)の形にする．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;cond後の継続をsave</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;現在の環境をsave</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;ev-cond-loopで復元できるようにsave</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"> ev-cond-test\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevの内容がexpにコピーされる．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-null<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;(p1 e1)の形に．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond-else-clause?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>        <span class=\"synComment\">;(else e1)なら</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-else<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;ev-cond-elseへ</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-cond-loop<span class=\"synSpecial\">))</span> <span class=\"synComment\">;eval-dispatchの後ev-cond-loopに戻れるように代入</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"> ev-cond-loop\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-value<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;環境を元に戻す</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;残りのclausesへ</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"> ev-cond-else\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence->exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"> ev-cond-value\n</span><span class=\"code-line\">   <span class=\"synComment\">;; expはpredicateを評価した値になってる．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevが持っていたcond本体をexpがrestore</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synComment\">;;((p1 e1 e1' ...) (p2 e2 e2' ...) ...)という形なのでcarを取る．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>  <span class=\"synComment\">;(e1 e1' ...)にする．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence->exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"> ev-cond-null\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const cond-null-error<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>a b c d e f<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">cond-null-error\n</span></code></pre>","slug":"SICP 問題 5.24","rawContent":"\n<p>condを派生式ではなく構文として実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; unevがcondの本体を保存．expはevalされる．</span>\n ev-cond\n   <span class=\"synSpecial\">(</span>assing unev <span class=\"synSpecial\">(</span>op cond-clauses<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;((p1 e1) (p2 e2) ...)の形にする．</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;cond後の継続をsave</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;現在の環境をsave</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;ev-cond-loopで復元できるようにsave</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n\n ev-cond-test\n   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevの内容がexpにコピーされる．</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-null<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;(p1 e1)の形に．</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond-else-clause?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>        <span class=\"synComment\">;(else e1)なら</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-else<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;ev-cond-elseへ</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-cond-loop<span class=\"synSpecial\">))</span> <span class=\"synComment\">;eval-dispatchの後ev-cond-loopに戻れるように代入</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-value<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;環境を元に戻す</span>\n   <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;残りのclausesへ</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n\n\n ev-cond-else\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence-&gt;exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-value\n   <span class=\"synComment\">;; expはpredicateを評価した値になってる．</span>\n   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevが持っていたcond本体をexpがrestore</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synComment\">;;((p1 e1 e1' ...) (p2 e2 e2' ...) ...)という形なのでcarを取る．</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>  <span class=\"synComment\">;(e1 e1' ...)にする．</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence-&gt;exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-null\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const cond-null-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c d e f<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\ncond-null-error\n</pre>\n\n\n"},"__N_SSG":true}