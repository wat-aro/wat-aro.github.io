{"pageProps":{"slide":{"title":"Elm ことはじめ","published":"2019/10/28","tags":["Elm"],"slug":"getting-started-with-elm","content":"# `Elm` ことはじめ\n\n---\n\n## 自己紹介\n\n- wat-aro\n- 10%の時間では Elm でフロントエンドをやっていました\n- 関数型が好きです\n\n---\n\n## おしながき\n\n- Elm とは\n- 文法\n- TEA\n- まとめ\n\n---\n\n## Elm とは\n\n- 静的型付け Alt JS\n- A delightfull language\n- No Runtime Exception\n- Great Peerformance\n- Small Assets\n\n---\n\n### 静的型付けの Alt JS\n\nHaskell like な見た目\n\n```elm\nmap : (a -> b) -> List a -> List b\nmap f list =\n  case list of\n    [] -> []\n    (x :: xs) -> f x :: (map f xs)\n```\n\n---\n\n### 静的型付けの Alt JS\n\n強力な型推論と親切なエラーメッセージ\n\n```elm\n> 1 + \"1\"\n-- TYPE MISMATCH ----------------------------------------------------------- elm\n\nI cannot do addition with String values like this one:\n\n4|   1 + \"1\"\n         ^^^\nThe (+) operator only works with Int and Float values.\n\nHint: Switch to the (++) operator to append strings!\n```\n\n---\n\n### A delightful language\n\n公式サイトが言ってます\n\n[![Image from Gyazo](https://i.gyazo.com/772c9e8c416140a595a7ca586a66a159.png)](https://gyazo.com/772c9e8c416140a595a7ca586a66a159)\n\n---\n\n### Great Peerformance\n\n[![Image from Gyazo](https://i.gyazo.com/50ecbb1475d7b22a2495ebdc087d59af.png)](https://gyazo.com/50ecbb1475d7b22a2495ebdc087d59af)\n\n---\n\n### Small Assets\n\n[![Image from Gyazo](https://i.gyazo.com/7e580ab002610cd302a89046d9e28e0a.png)](https://gyazo.com/7e580ab002610cd302a89046d9e28e0a)\n\n---\n\n---\n\n## 文法\n\n- デフォルトカリー化\n- Haskell-like 型定義\n- パターンマッチ\n\n---\n\n### デフォルトカリー化\n\nML や Haskell のようにデフォルトでカリー化されている\n\n```elm\nadd : Int -> Int -> Int\nadd x y = x + y\n\nadd 2 3  -- 5\n\nadd2 : Int -> Int\nadd2 = add 2\n\nadd2 3 -- 5\n```\n\n---\n\n### Haskell-like 型定義\n\n- Haskell like な型定義\n- 代数的データ型\n- 型クラスはない\n\n```elm\ntype Maybe a\n  = Just a\n  | Nothing\n```\n\n型アノテーションのコロンは一つ\n\n```elm\n42 : Int\n\"Hello Elm\" : String\n```\n\n---\n\n### パターンマッチ\n\n- 型定義に沿った形でパターンマッチができる\n- 網羅性検査もされるので漏れが出ない\n- 漏れているとコンパイルエラー\n\n```elm\ntype Maybe a\n  = Just a\n  | Nothing\n```\n\n```elm\nmap : (a -> b) -> Maybe a -> Maybe b\nmap f x = case x of\n  Just a -> Maybe (f a)\n  Nothing -> Nothing\n\n```\n\n---\n\n---\n\n## The Elm Architecture(TEA)\n\n- `view`は`model`を受け取って`HTML`を作成する\n- `HTML`から`msg`を投げ、`update`が現在の`model`と`msg`から新しい`model`を作成する\n- 新しい`model`から再度`HTML`を作成する\n\n```elm\nsandbox :\n    { init : model\n    , view : model -> Html msg\n    , update : msg -> model -> model\n    }\n    -> Program () model msg\n```\n\n---\n\n### sandbox のライフサイクル\n\n![Browser.sandbox](https://guide.elm-lang.org/effects/diagrams/sandbox.svg)\n\n---\n\n### カヌンターアプリの例\n\n- `+` ボタンと `-` ボタンがあるカウンター\n- https://elm-lang.org/examples/buttons\n- モデルの初期値は 0\n- update と view はそれぞれの名前の関数\n\n```elm\nsandbox :\n    { init : model\n    , view : model -> Html msg\n    , update : msg -> model -> model\n    }\n    -> Program () model msg\n\nmain : Program () Int Msg\nmain =\n  Browser.sandbox { init = 0, update = update, view = view }\n```\n\n---\n\n### まずはメッセージの型定義から\n\n- Msg は Increment と Decrement の二つ\n- Increment が来たら model を +1 する\n- Decrement が来たら model を -1 する\n- RunTime System が update の返り値を受け取り現在のモデルを更新する\n\n```elm\ntype Msg = Increment | Decrement\n\nupdate : Msg -> Int -> Int\nupdate msg model =\n  case msg of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1\n```\n\n---\n\n### 描画に使う関数\n\n- HTML タグ のタグも関数で定義されている\n- div の第一引数は Attribute msg のリスト\n- div の第二引数は Html msg のリスト\n- onClick の引数に msg を渡すと、クリックされた時にそのメッセージを投げる\n- text は文字列の描画用の関数\n- 型変数になっている部分は型推論で解決される\n\n```elm\ndiv : List (Attribute msg) -> List (Html msg) -> Html msg\nbutton : List (Attribute msg) -> List (Html msg) -> Html msg\nonClick : msg -> Attribute msg\ntext : String -> Html msg\n```\n\n---\n\n### 描画部分\n\n- さっきの関数を使って view を構成する\n\n```elm\nview : Int -> Html Msg\nview model =\n  div []\n    [ button [ onClick Decrement ] [ text \"-\" ]\n    , div [] [ text (String.fromInt model) ]\n    , button [ onClick Increment ] [ text \"+\" ]\n    ]\n```\n\n---\n\n### 副作用を扱う例(Cat gifs)\n\n- 猫の GIF 画像をランダムに取得し描画するアプリ\n- https://elm-lang.org/examples/cat-gifs\n- `element` を使う\n\n---\n\n### Browser.element\n\n- `view`は変わらない\n- `update`の返り値が `model`から`(model, Cmd msg)`に変更\n- 外部からのイベントを扱う `subscriptions` が追加(今回は扱いません)\n\n```elm\nelement :\n    { init : flags -> ( model, Cmd msg )\n    , view : model -> Html msg\n    , update : msg -> model -> ( model, Cmd msg )\n    , subscriptions : model -> Sub msg\n    }\n    -> Program flags model msg\n```\n\n---\n\n### Cmd とは\n\n- 主に副作用を扱う(e.g. HTTP リクエスト, 乱数生成, 現在時の取得)\n- 実行した結果 `Cmd msg` を返し、その`msg`が `Runtime System` によって `update`に渡される\n\n---\n\n### 副作用を扱った場合のライフサイクル\n\n![Browser.element](https://guide.elm-lang.org/effects/diagrams/element.svg)\n\n---\n\n### Cat Gifs の Msg\n\n- 再度猫 Gif を取得する MorePlease\n- 猫 Gif の取得した結果を表す GotGif (Result Http.Error String)\n- Result error value 型は成功・失敗を表すことが出来る\n\n```elm\ntype Msg\n  = MorePlease\n  | GotGif (Result Http.Error String)\n```\n\n---\n\n### Cat Gif の Model\n\n- 猫画像取に失敗したら Failure\n- 取得中は Loading\n- 取得に成功したら Success に 猫 Gif の URL を文字列で持つ\n\n```elm\ntype Model\n  = Failure\n  | Loading\n  | Success String\n```\n\n---\n\n### Cat Gif の Initialize phase\n\n- モデルの初期値は Loading\n- getRandomCatGif で猫 Gif を取得する\n- Http.get の返り値の型が Cmd msg なので Cmd を強制される\n\n```elm\ninit : () -> (Model, Cmd Msg)\ninit _ =\n  (Loading, getRandomCatGif)\n\nget : { url : String, expect : Expect msg } -> Cmd msg\n\ngetRandomCatGif : Cmd Msg\ngetRandomCatGif =\n  Http.get\n    { url = \"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=cat\"\n    , expect = Http.expectJson GotGif gifDecoder\n    }\n```\n\n---\n\n### Cat Gif の更新 phase\n\n- MorePlease メッセージなら Loading 状態にして猫 Gif を取得しにいく\n- 取得した結果、成功していればモデルに URL を入れて描画、失敗していれば Failure 画面に\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n  case msg of\n    MorePlease ->\n      (Loading, getRandomCatGif)\n\n    GotGif result ->\n      case result of\n        Ok url ->\n          (Success url, Cmd.none)\n\n        Err _ ->\n          (Failure, Cmd.none)\n```\n\n---\n\n### Cat Gif の描画\n\n- view でもパターンマッチで状態を網羅して描画しているかが検査できる\n\n```elm\nview : Model -> Html Msg\nview model =\n  div []\n    [ h2 [] [ text \"Random Cats\" ]\n    , viewGif model\n    ]\n\nviewGif : Model -> Html Msg\nviewGif model =\n  case model of\n    Failure ->\n      div []\n        [ text \"I could not load a random cat for some reason. \"\n        , button [ onClick MorePlease ] [ text \"Try Again!\" ]\n        ]\n\n    Loading ->\n      text \"Loading...\"\n\n    Success url ->\n      div []\n        [ button [ onClick MorePlease, style \"display\" \"block\" ] [ text \"More Please!\" ]\n        , img [ src url ] []\n        ]\n```\n\n---\n\n### TEA\n\n- 副作用を扱わない場合 model, update, message, view によって構成される\n- view から message を投げ、その message に合わせて model を更新する\n- 副作用を扱う場合は update から副作用(Cmd)を実行し、Cmd からまた message を投げ update で受け取る\n- 今回は見ていないけれど、外部からの入力(時間によって発するイベントや websocket のイベントなど\\*\\*は subscription で扱う\n\n---\n\n## まとめ\n\n- Elm の基本的なところを紹介しました\n- TEA を紹介しました\n- 簡潔な型定義とパターンマッチで安全にフロントエンドが開発できるよ！\n"}},"__N_SSG":true}