{"pageProps":{"post":{"data":{"title":"SICP 問題 3.70","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; mergeを参考にして重みをつけてmerge-weightedを定義する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s2car\n                                    <span class=\"synSpecial\">(</span>merge s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span>\n                                           <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge-weighted s1 s2 weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>w1 <span class=\"synSpecial\">(</span>weight s1car<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>weight s2car<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n                   <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> w1 w2<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>cons-stream s1car\n                                 <span class=\"synSpecial\">(</span>merge-weighted <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2 weight<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                    <span class=\"synSpecial\">(</span>cons-stream s2car\n                                 <span class=\"synSpecial\">(</span>merge-weighted s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synComment\">;; pairsを参考にweighted-pairsを定義する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weighted-pairs s t weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>merge-weighted\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>weighted-pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)</span>\n    weight<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> i+j <span class=\"synSpecial\">(</span>weighted-pairs integers integers <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synError\">2i+3j+5ij</span>\n  <span class=\"synSpecial\">(</span>weighted-pairs integers integers\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 重みづけがちゃんと機能しているかを確認する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-head-weight s n weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>s s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>n n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>done\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head-weight i+j 20 (lambda (x) (+ (car x) (cadr x))))\n(1 1) : 2\n(1 2) : 3\n(2 2) : 4\n(1 3) : 4\n(2 3) : 5\n(1 4) : 5\n(3 3) : 6\n(2 4) : 6\n(1 5) : 6\n(3 4) : 7\n(2 5) : 7\n(1 6) : 7\n(4 4) : 8\n(3 5) : 8\n(2 6) : 8\n(1 7) : 8\n(4 5) : 9\n(3 6) : 9\n(2 7) : 9\n(1 8) : 9\ndone\ngosh&gt; (stream-head-weight 2i+3j+5ij 20 (lambda (x) (+ (* 2 (car x))\n                                                      (* 3 (cadr x))\n                                                      (* 5 (car x) (cadr x)))))\n(1 1) : 10\n(1 2) : 18\n(1 3) : 26\n(2 2) : 30\n(1 4) : 34\n(1 5) : 42\n(2 3) : 43\n(1 6) : 50\n(2 4) : 56\n(1 7) : 58\n(3 3) : 60\n(1 8) : 66\n(2 5) : 69\n(1 9) : 74\n(3 4) : 78\n(2 6) : 82\n(1 10) : 82\n(1 11) : 90\n(2 7) : 95\n(3 5) : 96\ndone</pre>\n\n\n","slug":"SICP 問題 3.70"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; mergeを参考にして重みをつけてmerge-weightedを定義する</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge s1 s2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&#x3C;</span> s1car s2car<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span>cons-stream s1car\n</span><span class=\"code-line\">                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">></span> s1car s2car<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span>cons-stream s2car\n</span><span class=\"code-line\">                                    <span class=\"synSpecial\">(</span>merge s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span>cons-stream s1car\n</span><span class=\"code-line\">                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                           <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)))))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge-weighted s1 s2 weight<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>w1 <span class=\"synSpecial\">(</span>weight s1car<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>weight s2car<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&#x3C;</span> w1 w2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>cons-stream s1car\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">(</span>merge-weighted <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2 weight<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>cons-stream s2car\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">(</span>merge-weighted s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)))))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; pairsを参考にweighted-pairsを定義する</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>cons-stream\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>interleave\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weighted-pairs s t weight<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>cons-stream\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>merge-weighted\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>weighted-pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    weight<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> i+j <span class=\"synSpecial\">(</span>weighted-pairs integers integers <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synError\">2i+3j+5ij</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>weighted-pairs integers integers\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; 重みづけがちゃんと機能しているかを確認する</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-head-weight s n weight<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>s s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>n n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'</span>done\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">\" : \"</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (stream-head-weight i+j 20 (lambda (x) (+ (car x) (cadr x))))\n</span><span class=\"code-line\">(1 1) : 2\n</span><span class=\"code-line\">(1 2) : 3\n</span><span class=\"code-line\">(2 2) : 4\n</span><span class=\"code-line\">(1 3) : 4\n</span><span class=\"code-line\">(2 3) : 5\n</span><span class=\"code-line\">(1 4) : 5\n</span><span class=\"code-line\">(3 3) : 6\n</span><span class=\"code-line\">(2 4) : 6\n</span><span class=\"code-line\">(1 5) : 6\n</span><span class=\"code-line\">(3 4) : 7\n</span><span class=\"code-line\">(2 5) : 7\n</span><span class=\"code-line\">(1 6) : 7\n</span><span class=\"code-line\">(4 4) : 8\n</span><span class=\"code-line\">(3 5) : 8\n</span><span class=\"code-line\">(2 6) : 8\n</span><span class=\"code-line\">(1 7) : 8\n</span><span class=\"code-line\">(4 5) : 9\n</span><span class=\"code-line\">(3 6) : 9\n</span><span class=\"code-line\">(2 7) : 9\n</span><span class=\"code-line\">(1 8) : 9\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> (stream-head-weight 2i+3j+5ij 20 (lambda (x) (+ (* 2 (car x))\n</span><span class=\"code-line\">                                                      (* 3 (cadr x))\n</span><span class=\"code-line\">                                                      (* 5 (car x) (cadr x)))))\n</span><span class=\"code-line\">(1 1) : 10\n</span><span class=\"code-line\">(1 2) : 18\n</span><span class=\"code-line\">(1 3) : 26\n</span><span class=\"code-line\">(2 2) : 30\n</span><span class=\"code-line\">(1 4) : 34\n</span><span class=\"code-line\">(1 5) : 42\n</span><span class=\"code-line\">(2 3) : 43\n</span><span class=\"code-line\">(1 6) : 50\n</span><span class=\"code-line\">(2 4) : 56\n</span><span class=\"code-line\">(1 7) : 58\n</span><span class=\"code-line\">(3 3) : 60\n</span><span class=\"code-line\">(1 8) : 66\n</span><span class=\"code-line\">(2 5) : 69\n</span><span class=\"code-line\">(1 9) : 74\n</span><span class=\"code-line\">(3 4) : 78\n</span><span class=\"code-line\">(2 6) : 82\n</span><span class=\"code-line\">(1 10) : 82\n</span><span class=\"code-line\">(1 11) : 90\n</span><span class=\"code-line\">(2 7) : 95\n</span><span class=\"code-line\">(3 5) : 96\n</span><span class=\"code-line\">done</span></code></pre>"},"__N_SSG":true}