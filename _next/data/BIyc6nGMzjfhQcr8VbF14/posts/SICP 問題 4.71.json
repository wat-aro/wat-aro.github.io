{"pageProps":{"post":{"data":{"title":"SICP 問題 4.71","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文中のsimple-query</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">))))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 本文中のdisjoin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                       frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; Louis Reasonerが提案したsimple-query</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">)))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Louis Reasonerが提案したdisjoin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                frame-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; Louis Readonerの提案したものだとinterleaveの二つ目のストリームが遅延されていないので</span>\n<span class=\"synComment\">;; 評価が終わるまで印字されない．</span>\n<span class=\"synComment\">;; 仮にruleのほうで無限ループに陥った時に，delayする場合は一つ一つの評価結果を印字しながらループし</span>\n<span class=\"synComment\">;; delayがない場合は何も印字せずに無限ループする．</span>\n<span class=\"synComment\">;; 本文でも出てきたmarriedを使って試してみる．</span>\n\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; delayありの場合</span>\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n...\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; delayなしの場合</span>\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n\n\n</pre>\n\n\n<p>;;; Query result:\nの表示も出てこない</p>\n\n","slug":"SICP 問題 4.71"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; 本文中のsimple-query</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>stream-flatmap\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>stream-append-delayed\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">   frame-stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; 本文中のdisjoin</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>interleave-delayed\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                       frame-stream<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; Louis Reasonerが提案したsimple-query</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>stream-flatmap\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>stream-append-delayed\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">   frame-stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; Louis Reasonerが提案したdisjoin</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>interleave-delayed\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                frame-stream<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; Louis Readonerの提案したものだとinterleaveの二つ目のストリームが遅延されていないので</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; 評価が終わるまで印字されない．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; 仮にruleのほうで無限ループに陥った時に，delayする場合は一つ一つの評価結果を印字しながらループし</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; delayがない場合は何も印字せずに無限ループする．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; 本文でも出てきたmarriedを使って試してみる．</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; delayありの場合</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Assertion added to data base.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Assertion added to data base.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query result:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">...\n</span></code></pre>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; delayなしの場合</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Assertion added to data base.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Assertion added to data base.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; Query input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span></code></pre>\n<p>;;; Query result:\nの表示も出てこない</p>"},"__N_SSG":true}