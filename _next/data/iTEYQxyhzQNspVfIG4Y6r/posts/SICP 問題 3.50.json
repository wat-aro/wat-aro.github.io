{"pageProps":{"post":{"title":"SICP 問題 3.50","published":"2015/12/07","tags":["scheme","SICP"],"content":"\n<p>マクロを使ってる部分は<br/>\n<a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x554F;&#x984C;3.50-3.51 - nrvct&#x306E;&#x65E5;&#x8A18;</a><br/>\nここから引用．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 次の二つは引用元から</span>\n<span class=\"synComment\">;; cons-streamは評価順序を変えたいのでマクロ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; delayもマクロ．マクロよくわかってない．</span>\n<span class=\"synComment\">;; メモ化する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-ref s n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-ref <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-for-each proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>stream-for-each proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-stream s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-for-each display-line s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> low high<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream\n       low\n       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-filter pred stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? stream<span class=\"synSpecial\">)</span> the-empty-stream<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>pred <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>stream-filter pred\n                                     <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>stream-filter pred <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n                 result<span class=\"synSpecial\">)</span>\n          result<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; 3.50</span>\n<span class=\"synComment\">;; stream-map</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n        <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.50"},"content":"<p>マクロを使ってる部分は<br>\n<a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">ストリームの実装と問題3.50-3.51 - nrvctの日記</a><br>\nここから引用．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; 次の二つは引用元から</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; cons-streamは評価順序を変えたいのでマクロ</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; delayもマクロ．マクロよくわかってない．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; メモ化する．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-ref s n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>stream-ref <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-for-each proc s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">'</span>done\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>stream-for-each proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-stream s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>stream-for-each display-line s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">></span> low high<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>cons-stream\n</span><span class=\"code-line\">       low\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-filter pred stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? stream<span class=\"synSpecial\">)</span> the-empty-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>pred <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span>stream-filter pred\n</span><span class=\"code-line\">                                     <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>stream-filter pred <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 result<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          result<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; 3.50</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; stream-map</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">)))))))</span>\n</span></code></pre>"},"__N_SSG":true}