{"pageProps":{"post":{"title":"SICP 問題 2.67","published":"2015/10/27","tags":["scheme","SICP"],"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; Huffman木</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf symbol weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>leaf symbol weight<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>leaf? object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> object<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>leaf<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbol-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-code-tree left right<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> left\n        right\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>symbols left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>symbols right<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>weight left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight right<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbols tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>symbol-leaf tree<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> tree<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>weight-leaf tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> tree<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; bitが0なら左，1なら右の枝をたどっていき，leafにたどり着くと，そのシンボルをconsして次にいく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode bits tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode-1 bits current-branch<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> bits<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-branch\n               <span class=\"synSpecial\">(</span>choose-branch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> bits<span class=\"synSpecial\">)</span> current-branch<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? next-branch<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>symbol-leaf next-branch<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> next-branch<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>decode-1 bits tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; bitが左ならleft-branch,bitが右ならright-branchを選択</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>choose-branch bit branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>left-branch branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>right-branch branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;bad bit -- CHOOSE-BRANCH&quot;</span> bit<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; weightで昇順に順序づけられた集合に要素を追加する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-set x set<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>weight x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x set<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>adjoin-set x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> set<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; pairsからweightの昇順にleafの集合を作る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf-set pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> pairs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>adjoin-set <span class=\"synSpecial\">(</span>make-leaf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pair<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> pair<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>make-leaf-set <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pairs<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define sample-tree\n        (make-code-tree (make-leaf &#39;A 4)\n                        (make-code-tree\n                         (make-leaf &#39;B 2)\n                         (make-code-tree (make-leaf &#39;D 1)\n                                         (make-leaf &#39;C 1)))))\nsample-tree\ngosh&gt; (define sample-message\n        &#39;(0 1 1 0 0 1 0 1 0 1 1 1 0))\nsample-message\ngosh&gt; (decode sample-message sample-tree)\n(A D A B B C A)</pre>\n\n\n","slug":"SICP 問題 2.67"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; Huffman木</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf symbol weight<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>leaf symbol weight<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>leaf? object<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> object<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>leaf<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbol-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-code-tree left right<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> left\n</span><span class=\"code-line\">        right\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>symbols left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>symbols right<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>weight left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight right<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> tree<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbols tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>symbol-leaf tree<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> tree<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>weight-leaf tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> tree<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; bitが0なら左，1なら右の枝をたどっていき，leafにたどり着くと，そのシンボルをconsして次にいく．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode bits tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode-1 bits current-branch<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> bits<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-branch\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>choose-branch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> bits<span class=\"synSpecial\">)</span> current-branch<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? next-branch<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>symbol-leaf next-branch<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> next-branch<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>decode-1 bits tree<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; bitが左ならleft-branch,bitが右ならright-branchを選択</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>choose-branch bit branch<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>left-branch branch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>right-branch branch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"bad bit -- CHOOSE-BRANCH\"</span> bit<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; weightで昇順に順序づけられた集合に要素を追加する</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-set x set<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&#x3C;</span> <span class=\"synSpecial\">(</span>weight x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x set<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>adjoin-set x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> set<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; pairsからweightの昇順にleafの集合を作る．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf-set pairs<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> pairs<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>adjoin-set <span class=\"synSpecial\">(</span>make-leaf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pair<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> pair<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>make-leaf-set <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pairs<span class=\"synSpecial\">))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define sample-tree\n</span><span class=\"code-line\">        (make-code-tree (make-leaf 'A 4)\n</span><span class=\"code-line\">                        (make-code-tree\n</span><span class=\"code-line\">                         (make-leaf 'B 2)\n</span><span class=\"code-line\">                         (make-code-tree (make-leaf 'D 1)\n</span><span class=\"code-line\">                                         (make-leaf 'C 1)))))\n</span><span class=\"code-line\">sample-tree\n</span><span class=\"code-line\">gosh> (define sample-message\n</span><span class=\"code-line\">        '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n</span><span class=\"code-line\">sample-message\n</span><span class=\"code-line\">gosh> (decode sample-message sample-tree)\n</span><span class=\"code-line\">(A D A B B C A)</span></code></pre>"},"__N_SSG":true}