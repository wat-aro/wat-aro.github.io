{"pageProps":{"title":"Ruby に型をつけるお気持ち","published":"2020-01-15","content":"<h1>Ruby に型をつけるお気持ち</h1>\n<p>wat-aro</p>\n<hr>\n<h2>自己紹介</h2>\n<ul>\n<li>wat-aro</li>\n<li>Haskell, Elm なんかが好き</li>\n</ul>\n<hr>\n<h2>おしながき</h2>\n<ul>\n<li>Ruby の型のおさらい</li>\n<li>ruby-signature の記法</li>\n<li>実例を通して</li>\n</ul>\n<hr>\n<h3><code>Ruby</code> の型のおさらい</h3>\n<ul>\n<li>型検査器 steep, sorbet</li>\n<li>rbi ファイルに型定義を書くがそれぞれ文法が違う</li>\n<li>Ruby 3 では型シグネチャが導入される</li>\n<li>周辺ツール群は外部ライブラリとして提供</li>\n</ul>\n<hr>\n<h3><code>Ruby</code> の型シグナチャ</h3>\n<ul>\n<li>ruby-signature</li>\n<li><a href=\"https://github.com/ruby/ruby-signature\">https://github.com/ruby/ruby-signature</a></li>\n<li>steep, sorbet にこのシグネチャを使ってもらう</li>\n</ul>\n<hr>\n<hr>\n<h2><code>ruby-signature</code> の記法</h2>\n<ul>\n<li>プリミティブな型は Class instance type で定義</li>\n<li>Interface type であるメソッドを持った型というのも定義できる</li>\n<li>Literal type, Union Type, Intersection type, Optional type で柔軟な型定義ができる</li>\n<li>ivar や メソッドの型定義も直観的</li>\n<li>型付けできないものは <code>untyped</code></li>\n</ul>\n<hr>\n<h3>プリミティブな型</h3>\n<ul>\n<li>Integer</li>\n<li>String</li>\n<li>Hash[Symbol, String]</li>\n</ul>\n<hr>\n<h3><code>Record type</code></h3>\n<ul>\n<li>Hash の型を指定</li>\n<li><code>{ id: Integer, name: String }</code></li>\n</ul>\n<hr>\n<h3><code>Interface type</code></h3>\n<p>例: each メソッドを持っている型</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">interface _Each<span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">each</span></span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> void <span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token constant\">B</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">end</span>\n</span></code></pre>\n<hr>\n<h3><code>Literal type</code></h3>\n<ul>\n<li>型の取り得る値を限定できる</li>\n<li><code>1</code> という型は Integer かつ 値を <code>1</code> に限定</li>\n<li>\"hello world\"という型や<code>:to_s</code>という型を定義可能</li>\n</ul>\n<hr>\n<h3><code>Union type</code></h3>\n<ul>\n<li>型の和を表わす</li>\n<li><code>Integer | String</code> は Integer or String</li>\n</ul>\n<hr>\n<h3><code>Intersection type</code></h3>\n<ul>\n<li>交差型</li>\n<li><code>Integer &#x26; String</code> は Integer and String</li>\n<li>Hash の合成が主な用途？</li>\n<li><code>{ id: Integer } &#x26; { name: String }</code> は <code>{ id: Integer, name: String }</code></li>\n</ul>\n<hr>\n<h3><code>Optional type</code></h3>\n<ul>\n<li>みんな大好き null 安全</li>\n<li><code>Integer?</code> で <code>Integer | nil</code></li>\n</ul>\n<hr>\n<h3>ivar やメソッドの型定義</h3>\n<ul>\n<li><code>@name: String</code> で ivar</li>\n<li><code>def to_s: () -> String</code> でメソッドを定義</li>\n</ul>\n<hr>\n<h3>所見</h3>\n<ul>\n<li>TypeScript の影響が強い\n<ul>\n<li>Literal type</li>\n<li>Intersection type</li>\n</ul>\n</li>\n<li>Interface type があればダックタイプもやりやすそう</li>\n<li>想像していたよりもリッチ</li>\n<li>any じゃなくて untyped なのはわかりやすくていい</li>\n</ul>\n<hr>\n<hr>\n<h2>実例を通して</h2>\n<p>ruby-signature はまだ StandardLibrary の片付けが終わっていないので\n適当なものに型をつけてみる</p>\n<hr>\n<h3>Abbrev モジュール</h3>\n<ul>\n<li>StandardLibrary で最初に表示されている</li>\n<li>module_function abbrev 一つだけのモジュールなので簡単</li>\n<li>まだ ruby-signature で定義されていない</li>\n</ul>\n<hr>\n<h3>Abbrev#abbrev とは</h3>\n<p><code>abbrev(words, pattern = nil)</code></p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'ruby'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=>  {\"ruby\"=>\"ruby\", \"rub\"=>\"ruby\", \"ru\"=>\"ruby\", \"r\"=>\"ruby\"}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w{ car cone }</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {\"ca\"=>\"car\", \"con\"=>\"cone\", \"co\"=>\"cone\", \"car\"=>\"car\", \"cone\"=>\"cone\"}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w{car box cone crab}</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex-literal\"><span class=\"token regex\">/b/</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {\"box\"=>\"box\", \"bo\"=>\"box\", \"b\"=>\"box\", \"crab\" => \"crab\"}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w{car box cone}</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'ca'</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {\"car\"=>\"car\", \"ca\"=>\"car\"}</span>\n</span></code></pre>\n<p>String の配列をうけとり、String を分解して key とし、元の String を value とする Hash を返す</p>\n<hr>\n<h3>まずはシンプルなケース</h3>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'ruby'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=>  {\"ruby\"=>\"ruby\", \"rub\"=>\"ruby\", \"ru\"=>\"ruby\", \"r\"=>\"ruby\"}</span>\n</span></code></pre>\n<p>これに型を付けると</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Abbrev</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">self</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>abbrev<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Hash</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">end</span>\n</span></code></pre>\n<p><code>def self?</code> は module function 用の書き方\n空配列を受け取っても空ハッシュを返すだけなので問題なし。</p>\n<hr>\n<h3>第 2 引数について</h3>\n<p>example を見ると String と Regexp を受け取ることを想定しているよう</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w{car box cone crab}</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex-literal\"><span class=\"token regex\">/b/</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {\"box\"=>\"box\", \"bo\"=>\"box\", \"b\"=>\"box\", \"crab\" => \"crab\"}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w{car box cone}</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'ca'</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {\"car\"=>\"car\", \"ca\"=>\"car\"}</span>\n</span></code></pre>\n<p>じゃあ Integer とか渡したらエラーになるのかな？</p>\n<hr>\n<h3>想定していなさそうな型の引数を渡してみる</h3>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w{12345}</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {}</span>\n</span></code></pre>\n<p>エラーにならないだと…\nこの場合って型はどうつければいいのか。\n実装を abbrev の実装を見てみると</p>\n<hr>\n<h3>abbrev の実装</h3>\n<ul>\n<li>String, Regexp 以外は <code>!~</code> を直接使っている</li>\n<li><code>Integer#!~</code> は常に true を返す</li>\n</ul>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">abbrev</span></span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">...</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">if</span> pattern<span class=\"token punctuation\">.</span>is_a<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    pattern <span class=\"token operator\">=</span> <span class=\"token regex-literal\"><span class=\"token regex\">/\\A</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\"><span class=\"token builtin\">Regexp</span><span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token regex\">/</span></span>  <span class=\"token comment\"># regard as a prefix</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">end</span>\n</span></code></pre>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">  words<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>word<span class=\"token operator\">|</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">next</span> <span class=\"token keyword\">if</span> word<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n</span><span class=\"code-line\">    word<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>downto<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>len<span class=\"token operator\">|</span>\n</span><span class=\"code-line\">      abbrev <span class=\"token operator\">=</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token operator\">..</span>len<span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">      <span class=\"token keyword\">next</span> <span class=\"token keyword\">if</span> pattern <span class=\"token operator\">&#x26;&#x26;</span> pattern <span class=\"token operator\">!~</span> abbrev\n</span><span class=\"code-line\">      <span class=\"token operator\">...</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">end</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">end</span>\n</span></code></pre>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">  words<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>word<span class=\"token operator\">|</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">next</span> <span class=\"token keyword\">if</span> pattern <span class=\"token operator\">&#x26;&#x26;</span> pattern <span class=\"token operator\">!~</span> word\n</span><span class=\"code-line\">    table<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> word\n</span><span class=\"code-line\">  <span class=\"token keyword\">end</span>\n</span><span class=\"code-line\">  table\n</span><span class=\"code-line\"><span class=\"token keyword\">end</span>\n</span></code></pre>\n<hr>\n<h3>abbrev の第 2 引数は String, Regexp 以外を考慮していない</h3>\n<ul>\n<li>String, Regexp 以外を考慮しておらず、たまたま <code>{}</code> を返すようになっているだけに見える</li>\n<li>実行時にエラーにならない場合はどう型をつければよいのか\n<ul>\n<li>Integer or Object を引数に取ることを認める</li>\n<li>String と Regexp 以外は認めない</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>このような場合にどうすればよいか</h3>\n<ul>\n<li>ドキュメントにどう書かれているか</li>\n<li>エラーでないために困る場合を想定してどう検査してほしいかを考える</li>\n</ul>\n<hr>\n<h3>ドキュメント</h3>\n<blockquote>\n<p>The optional pattern parameter is a pattern or a string.\nOnly input strings that match the pattern or start with the string are included in the output hash.</p>\n</blockquote>\n<p>pattern とは言っているけれど、それが Regexp とは限定していない。</p>\n<hr>\n<h3>エラーでないために困る場合を想定してどう検査してほしいかを考える</h3>\n<p>何かのメソッドの返り値が String や Regexp だと思っていたのに Integer だった場合</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">some_method</span></span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Integer</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">pattern <span class=\"token operator\">=</span> some_method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Abbrev<span class=\"token punctuation\">.</span>abbrev<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"12345\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">#=> {}</span>\n</span></code></pre>\n<p>Integer が来てここでエラーにならなくてもその後で不整合がおこる場合に困る。\nここを通るテストがない場合になぜ駄目なのかの調査が必要になる。\nそれよりも型検査で弾いてくれたほうが嬉しい。</p>\n<hr>\n<h3>結果</h3>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Abbrev</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">self</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>abbrev<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Regexp</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Hash</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">end</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<p>第 2 引数は String, Regexp, nil としました。\nこの定義で ruby-signature に PR を送ってマージされた。</p>\n<hr>\n<h2>まとめ</h2>\n<ul>\n<li>ruby-signature の紹介</li>\n<li>ドキュメントにない場合でもそれっぽく動く場合がある</li>\n<li>どう動いてほしいかを考えて型をつけないといけない場合がある</li>\n</ul>"},"__N_SSG":true}