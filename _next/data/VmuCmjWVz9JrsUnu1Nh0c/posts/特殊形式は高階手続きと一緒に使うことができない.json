{"pageProps":{"post":{"title":"特殊形式は高階手続きと一緒に使うことができない","published":"2016/01/09","tags":["scheme","gauche","SICP"],"content":"\n<p>手続きは引数を全て評価してoperatorに渡す．<br/>\n特殊形式は引数を全て評価するとは限らない．<br/>\nここではdefineについて見てみる．<br/>\ndefineは第１引数は評価せず，第２引数を評価した値を第１引数に束縛する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nx\n<span class=\"synConstant\">3</span>\n</pre>\n\n\n<p>次のような高階手続きでdefineを使ってみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(define (test f a b) (f a b))\n(test define x 1)\n*** ERROR: unbound variable: x\nStack Trace:\n_______________________________________\n  0  x\n\n  1  (eval expr env)\n        At line 179 of &#34;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&#34;</pre>\n\n\n<p>まずtestの引数を全て評価する．<br/>\nxを評価した時点でunboundなのでエラーが返る．<br/>\n仮にxには2が束縛されていると，どうなるか．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\nx\n<span class=\"synSpecial\">(</span>test <span class=\"synStatement\">define</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: invalid application: <span class=\"synSpecial\">(</span><span class=\"synError\">#&lt;syntax</span> define&gt; <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n<p>数字<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>の2に数字<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>の1を束縛しようとしてエラーが返る．<br/>\n変数xのまま扱うには評価しないようにしなくてはならないが，<br/>\n高階手続きはあくまで手続きなので引数を全て評価してしまう．<br/>\n他の特殊形式(ifやset!など)も同様に使えない．</p>\n\n","slug":"特殊形式は高階手続きと一緒に使うことができない"},"content":"<p>手続きは引数を全て評価してoperatorに渡す．<br>\n特殊形式は引数を全て評価するとは限らない．<br>\nここではdefineについて見てみる．<br>\ndefineは第１引数は評価せず，第２引数を評価した値を第１引数に束縛する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">3</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">x\n</span><span class=\"code-line\"><span class=\"synConstant\">3</span>\n</span></code></pre>\n<p>次のような高階手続きでdefineを使ってみる．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">(define (test f a b) (f a b))\n</span><span class=\"code-line\">(test define x 1)\n</span><span class=\"code-line\">*** ERROR: unbound variable: x\n</span><span class=\"code-line\">Stack Trace:\n</span><span class=\"code-line\">_______________________________________\n</span><span class=\"code-line\">  0  x\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  1  (eval expr env)\n</span><span class=\"code-line\">        At line 179 of \"/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm\"</span></code></pre>\n<p>まずtestの引数を全て評価する．<br>\nxを評価した時点でunboundなのでエラーが返る．<br>\n仮にxには2が束縛されていると，どうなるか．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">x\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>test <span class=\"synStatement\">define</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">***</span> ERROR: invalid application: <span class=\"synSpecial\">(</span><span class=\"synError\">#&#x3C;syntax</span> define> <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">Stack Trace:\n</span><span class=\"code-line\">_______________________________________\n</span><span class=\"code-line\">  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">\"/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm\"</span>\n</span></code></pre>\n<p>数字<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>の2に数字<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>の1を束縛しようとしてエラーが返る．<br>\n変数xのまま扱うには評価しないようにしなくてはならないが，<br>\n高階手続きはあくまで手続きなので引数を全て評価してしまう．<br>\n他の特殊形式(ifやset!など)も同様に使えない．</p>"},"__N_SSG":true}