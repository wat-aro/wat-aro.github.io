{"pageProps":{"title":"プログラミングGauche ７.４練習問題","published":"2015/09/20","tags":["scheme","gauche"],"content":"<p>可変長の引数を受け取り，リストにして返す手続き<code>list</code>を書く．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">list</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> ls\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>または</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">.</span> ls<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>実行してみる．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">(list)\n</span><span class=\"code-line\">()\n</span><span class=\"code-line\">(list 1 2 )\n</span><span class=\"code-line\">(1 2)\n</span><span class=\"code-line\">(list '(1 2) '(3 4))\n</span><span class=\"code-line\">((1 2) (3 4))</span></code></pre>\n<p>引数をそのまま返すだけ.<br>\nこれ以外の書き方ってあるのかな．</p>","slug":"プログラミングGauche ７.４練習問題","rawContent":"\n<p>可変長の引数を受け取り，リストにして返す手続き<code>list</code>を書く．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">list</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> ls\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>または</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">.</span> ls<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>実行してみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(list)\n()\n(list 1 2 )\n(1 2)\n(list &#39;(1 2) &#39;(3 4))\n((1 2) (3 4))</pre>\n\n\n<p>引数をそのまま返すだけ.<br/>\nこれ以外の書き方ってあるのかな．</p>\n\n"},"__N_SSG":true}