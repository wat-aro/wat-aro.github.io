{"pageProps":{"title":"パイプライン演算子","published":"2019-06-20","content":"<h2>パイプライン演算子</h2>\n<p>wat-aro</p>\n<hr>\n<h3>パイプライン演算子</h3>\n<p>こんな感じのやつ</p>\n<pre class=\"language-elm\"><code class=\"language-elm code-highlight\"><span class=\"code-line\">  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|></span> <span class=\"token hvariable\">List.map</span> <span class=\"token punctuation\">(</span>\\<span class=\"token hvariable\">x</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|></span> <span class=\"token hvariable\">List.foldl</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<hr>\n<h4>パイプライン演算子</h4>\n<p><code>|></code> の前の値を関数に適用する</p>\n<hr>\n<h4>パイプライン演算子</h4>\n<ul>\n<li>元は Isabela/ML あたりが発祥</li>\n<li>F# が採用</li>\n<li>OCaml が採用</li>\n<li>Elixir が F# から採用</li>\n<li>Ruby に入りそう</li>\n</ul>\n<hr>\n<hr>\n<h3>ML などにおけるパイプライン演算子のつくりかた</h3>\n<p>以下を満たせば簡単につくれる</p>\n<ul>\n<li>ユーザ定義演算子</li>\n<li>デフォルトでカリー化</li>\n</ul>\n<hr>\n<h4>Haskell でのつくり方</h4>\n<p>第一引数を第二引数に適用するだけ</p>\n<pre class=\"language-haskell\"><code class=\"language-haskell code-highlight\"><span class=\"code-line\"><span class=\"token punctuation\">(</span><span class=\"token operator\">|></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">(</span><span class=\"token operator\">|></span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span>\n</span></code></pre>\n<hr>\n<hr>\n<h3>カリー化と部分適用</h3>\n<p>以降の話に関わるのでここでおさらい</p>\n<hr>\n<h4>カリー化</h4>\n<p>複数の引数を受け取る関数を一引数の関数に変換する</p>\n<pre class=\"language-haskell\"><code class=\"language-haskell code-highlight\"><span class=\"code-line\"><span class=\"token hvariable\">uncuffyFunction</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">d</span>\n</span><span class=\"code-line\"><span class=\"token hvariable\">uncuffyFunction</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">somethingToDo</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token hvariable\">curriedFunction</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">d</span>\n</span><span class=\"code-line\"><span class=\"token hvariable\">curriedFunction</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">somethingToDo</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span>\n</span></code></pre>\n<hr>\n<h4>ES6</h4>\n<pre class=\"language-js\"><code class=\"language-js code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uncurryFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">somethigTodo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curriedFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">somethingTodo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p>curriedFunction は引数を一つとると残りの引数を <em>一つずつ取る関数</em> を返す\nuncurry な関数を curried な関数に変換するのが</p>\n<hr>\n<h3>部分適用</h3>\n<p>複数の引数を取る関数で、一部にだけ引数を適用した状態の関数を返す。</p>\n<pre class=\"language-js\"><code class=\"language-js code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">const</span> partialApplied <span class=\"token operator\">=</span> <span class=\"token function\">somethigTodo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<hr>\n<h3>なぜカリー化と部分適用の話を？</h3>\n<p>Elixir などのデフォルトでカリー化されていない言語では関数のようにパイプライン演算子を定義できない\ne.g.</p>\n<ul>\n<li>Elixir, Clojure はマクロ</li>\n<li>Ruby は言語組み込みの機構</li>\n</ul>\n<hr>\n<hr>\n<h3>Elixir のパイプライン演算子</h3>\n<p>ML 系は関数の最後の引数に値を差し込む\nElixir は最初の引数を差し込む</p>\n<hr>\n<h4>Elixir の |></h4>\n<pre class=\"language-elixir\"><code class=\"language-elixir code-highlight\"><span class=\"code-line\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|></span> <span class=\"token module class-name\">List</span><span class=\"token punctuation\">.</span>flatten\n</span><span class=\"code-line\">  <span class=\"token operator\">|></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> x <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> acc <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<hr>\n<h4>Elixir の |></h4>\n<p>カリー化されていないため AST を変換する必要がある</p>\n<hr>\n<hr>\n<h3>Ruby のパイプライン演算子</h3>\n<p>パイプラインといいつつただの優先度の低い <code>.</code></p>\n<hr>\n<h4>Ruby のパイプライン演算子</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token punctuation\">(</span><span class=\"token number\">1.</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token operator\">|</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token number\">1.</span><span class=\"token number\">.5</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token operator\">|</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>のように書ける</p>\n<hr>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<p><a href=\"https://twitter.com/hanachin_/status/1139406434846695430\"><img src=\"https://i.gyazo.com/4ecb8454c6bfc9d8470cb6c118129d21.png\" alt=\"Image from Gyazo\"></a>()</p>\n<p>これの話をしたかった</p>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span></code></pre>\n<p><code>.:</code> は Ruby 2.7 で入る演算子。\nMethod オブジェクトを取り出す。\nMethod オブジェクトはほぼ Proc オブジェクトと同じふるまい。\n詳しくはドキュメントを読んでください。</p>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span></code></pre>\n<p><code>URI.parse</code> でなく <code>URI.:parse</code> に注意。\nとりだした Method オブジェクトを <code>|></code> と <code>>></code> で合成する。\n<code>>></code> は Ruby2.6 で入った関数(Proc)合成演算子。\n<code>URI.:parse</code> で <code>URI.parse</code> の Method オブジェクトを取りだし、\n<code>>></code> によって合成している。\nつまり</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:get</span>\n</span></code></pre>\n<p><code>Net::HTTP.:get</code> で <code>Net:HTTP.get</code> の Method オブジェクトを取り出す。</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">uri <span class=\"token operator\">=</span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:get</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span></code></pre>\n<p>ここでも <code>JSON.:parse</code> で <code>JSON.parse</code> で Method オブジェクトを取り出す</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\">uri <span class=\"token operator\">=</span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">response <span class=\"token operator\">=</span> Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:get</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">></span> call\n</span></code></pre>\n<p>今までは Method オブジェクトを合成しただけなので、ここでやっと評価され、値になる。</p>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:get</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">></span> call\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">></span> fetch<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"stargazers_count\"</span></span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p><code>Hash#fetch</code> で値を取りだす</p>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"https://api.github.com/repos/ruby/ruby \"</span></span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:itself</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> Net<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:get</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token symbol\">:parse</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">></span> call\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">></span> fetch<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"stargazers_count\"</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">{</span> puts @<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>そして標準出力へ。\n<code>@1</code> は Ruby2.7 で入る予定。</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby code-highlight\"><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"hoge\"</span></span><span class=\"token punctuation\">.</span><span class=\"token keyword\">then</span> <span class=\"token punctuation\">{</span> puts @<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\"><span class=\"token string-literal\"><span class=\"token string\">\"hoge\"</span></span><span class=\"token punctuation\">.</span><span class=\"token keyword\">then</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>s<span class=\"token operator\">|</span> puts s <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<hr>\n<h4>Ruby のパイプライン演算子における応用</h4>\n<p>たーのしー</p>\n<hr>\n<hr>\n<h3>まとめ</h3>\n<p>パイプライン演算子の説明\nRuby2.7 で入る予定のパイプライン演算子とその応用の紹介\n関数合成をキメていこう</p>\n<hr>\n<h4>悲しみ</h4>\n<p><a href=\"https://twitter.com/hanachin_/status/1139406434846695430\"><img src=\"https://i.gyazo.com/47e87c4f7f7ad60bb2f657b4ebbf431b.png\" alt=\"Image from Gyazo\"></a></p>\n<hr>\n<p>もっと詳しく知りたい人は</p>\n<p><a href=\"https://mametter.hatenablog.com/entry/2019/06/15/192311\">パイプライン演算子の歴史 - まめめも</a>\n<a href=\"https://qiita.com/cedretaber/items/6a3831367439f64756ab\">第一引数版パイプライン演算子 - Qiita @cedretaber</a></p>"},"__N_SSG":true}