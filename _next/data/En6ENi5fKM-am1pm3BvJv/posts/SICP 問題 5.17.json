{"pageProps":{"post":{"data":{"title":"SICP 問題 5.17","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>トレースログにラベルネームをつける．<br/>\n　<br/>\nextract-labelsでlabelを見つけた時に('label labe-name)の形でinsts, labels両方に登録する．<br/>\nmake-new-machineでtracing-labelを作り，そこに現在のラベルを登録する．<br/>\n<a href=\"#f-c0dd7cf5\" name=\"fn-c0dd7cf5\" title=\"'label label-name\">*1</a>の実行形式はそのまま(advanced-pc pc)でpcをすすめるだけ．<br/>\n後はexecuteを調整する</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>error\n                    <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span>\n                    label-name<span class=\"synSpecial\">)</span>\n                   <span class=\"synComment\">;; ここでlabelは('label . next-inst)の形でinstsに登録</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>label next-inst<span class=\"synSpecial\">))</span> insts<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span>receive insts\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                               labels<span class=\"synSpecial\">))))</span>\n               <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                              insts<span class=\"synSpecial\">)</span>\n                   labels<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tracing-label <span class=\"synSpecial\">'</span>global<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdaar</span> insts<span class=\"synSpecial\">)))</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> tracing-label<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine\n                                  pc flag stack ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>label<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>fib-machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\ntrace-on\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)(</span>fib-done<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\ndone\n</pre>\n\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-c0dd7cf5\" name=\"f-c0dd7cf5\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">'label label-name</span></p>\n</div>\n","slug":"SICP 問題 5.17"},"content":"<p>トレースログにラベルネームをつける．<br>\n　<br>\nextract-labelsでlabelを見つけた時に('label labe-name)の形でinsts, labels両方に登録する．<br>\nmake-new-machineでtracing-labelを作り，そこに現在のラベルを登録する．<br>\n<a href=\"#f-c0dd7cf5\" name=\"fn-c0dd7cf5\" title=\"&#x27;label label-name\">*1</a>の実行形式はそのまま(advanced-pc pc)でpcをすすめるだけ．<br>\n後はexecuteを調整する</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>extract-labels\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span>error\n</span><span class=\"code-line\">                    <span class=\"synConstant\">\"The same label name is used to indicate two different location \"</span>\n</span><span class=\"code-line\">                    label-name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                   <span class=\"synComment\">;; ここでlabelは('label . next-inst)の形でinstsに登録</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>label next-inst<span class=\"synSpecial\">))</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                     <span class=\"synSpecial\">(</span>receive insts\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                               labels<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                              insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                   labels<span class=\"synSpecial\">)))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>tracing-label <span class=\"synSpecial\">'</span>global<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>register-table\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Multiply defined rgister: \"</span> name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                        register-table<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown register: \"</span> name<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdaar</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                             <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> tracing-label<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">\" : \"</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown request -- MACHINE\"</span> message<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      dispatch<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine\n</span><span class=\"code-line\">                                  pc flag stack ops<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>label<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown instruction type -- ASSEMBLE\"</span> inst<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>make-machine\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&#x3C; <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>start\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     fib-loop\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &#x3C;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     afterfib-n-1\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     afterfib-n-2\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     immediate-answer\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     fib-done\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>fib-machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">trace-on\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>start<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)(</span>fib-done<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">done\n</span></code></pre>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-c0dd7cf5\" name=\"f-c0dd7cf5\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">'label label-name</span></p>\n</div>"},"__N_SSG":true}