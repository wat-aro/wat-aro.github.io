{"pageProps":{"post":{"title":"SICP 問題 5.08","published":"2016/01/23","tags":["scheme","SICP"],"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>start\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label here<span class=\"synSpecial\">))</span>\nhere\n <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\nhere\n <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\nthere\n</pre>\n\n\n<p>この時thereに達した時のaの値は何かという問題．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n                          <span class=\"synComment\">;; symbolであればlabel</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n                              <span class=\"synComment\">;; (receive insts labels)なのでsymbolならlabelsにcons</span>\n                              <span class=\"synComment\">;; falseならinstsにcons</span>\n                              <span class=\"synSpecial\">(</span>receive insts\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                                        labels<span class=\"synSpecial\">))</span>\n                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                                             insts<span class=\"synSpecial\">)</span>\n                                  labels<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n         pc flag stack ps<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-label-entry label-name insts<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label-name insts<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-label labels label-name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> label-name labels<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> val<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Undefined label -- ASSEMBLE&quot;</span> label-name<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>からlabelsは順番を保持してlabelsに登録されていく．\nlookup-labelではassocが使われているので先頭に近いものが先に選ばれる．<br/>\nそのため(goto (label here))で向かうのは最初のhere.\naには3が入っている．<br/>\n　<br/>\nこれを同じラベルを違う場所に登録しようとするとエラーとなるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n                          <span class=\"synComment\">;; symbolであればlabel</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;labelsに既に登録されていればここでtrueが返る</span>\n                                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span> label-name<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>receive insts\n                                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                                            labels<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                                             insts<span class=\"synSpecial\">)</span>\n                                  labels<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.08"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">start\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label here<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">here\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">here\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">there\n</span></code></pre>\n<p>この時thereに達した時のaの値は何かという問題．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                          <span class=\"synComment\">;; symbolであればlabel</span>\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                              <span class=\"synComment\">;; (receive insts labels)なのでsymbolならlabelsにcons</span>\n</span><span class=\"code-line\">                              <span class=\"synComment\">;; falseならinstsにcons</span>\n</span><span class=\"code-line\">                              <span class=\"synSpecial\">(</span>receive insts\n</span><span class=\"code-line\">                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                        labels<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                             insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                  labels<span class=\"synSpecial\">)))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n</span><span class=\"code-line\">        inst\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>make-execution-procedure\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n</span><span class=\"code-line\">         pc flag stack ps<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">     insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-label-entry label-name insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label-name insts<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-label labels label-name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> label-name labels<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Undefined label -- ASSEMBLE\"</span> label-name<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>からlabelsは順番を保持してlabelsに登録されていく．\nlookup-labelではassocが使われているので先頭に近いものが先に選ばれる．<br>\nそのため(goto (label here))で向かうのは最初のhere.\naには3が入っている．<br>\n　<br>\nこれを同じラベルを違う場所に登録しようとするとエラーとなるようにする．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                          <span class=\"synComment\">;; symbolであればlabel</span>\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;labelsに既に登録されていればここでtrueが返る</span>\n</span><span class=\"code-line\">                                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"The same label name is used to indicate two different location \"</span> label-name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                  <span class=\"synSpecial\">(</span>receive insts\n</span><span class=\"code-line\">                                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                            labels<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                             insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                  labels<span class=\"synSpecial\">)))))))</span>\n</span></code></pre>"},"__N_SSG":true}