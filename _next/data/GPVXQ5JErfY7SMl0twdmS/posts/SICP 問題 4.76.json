{"pageProps":{"post":{"title":"SICP 問題 4.76","published":"2016/01/21","tags":["scheme","SICP"],"content":"\n<p>本文中のandはひとつ目の質問を満たす表明に対して次の質問を満たす表明をデータベースから探してくる．<br/>\nそれを２つの質問をそれぞれ満たすストリームをまず作り，<br/>\n矛盾がないようにそれらを組み合わせるconjoin特殊形式を実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? conjuncts<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>conjoin-frame-stream first rest<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-frame-stream fs1 fs2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-filter\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n   <span class=\"synSpecial\">(</span>stream-flatmap\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-map\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>conjoin-consistent frame1 frame2<span class=\"synSpecial\">))</span>\n       fs2<span class=\"synSpecial\">))</span>\n    fs1<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; f2をフレームと考え，f1のvarがf2にあるかを調べる．</span>\n<span class=\"synComment\">;; f2にあってf1のvarの値と同じならOK．違えばfailed.なければf2を拡張する．</span>\n<span class=\"synComment\">;; 上記手順はexend-if-possibleがやる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-consistent f1 f2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> f1<span class=\"synSpecial\">)</span> f2\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>extend-frame2 <span class=\"synSpecial\">(</span>extend-if-possible <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> f1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> f1<span class=\"synSpecial\">)</span> f2<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> extend-frame2 <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">'</span>failed\n            <span class=\"synSpecial\">(</span>conjoin-consistent <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> f1<span class=\"synSpecial\">)</span> extend-frame2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 本文で定義されたextend-if-possible</span>\n<span class=\"synComment\">;; (? x)が値を指していればその値を返す．(? y)となっていれば，さらにその値を探す．</span>\n<span class=\"synComment\">;; varもvalも(? x)同じものを指していればfailedが返る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-possible var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;フレームからvarに対応するvalを探して束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>binding\n           <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> val frame<span class=\"synSpecial\">))</span>\n          <span class=\"synComment\">;; 上のletで探してきたvalもまた(? y)という形だった場合は更にフレームから探してくる．</span>\n          <span class=\"synSpecial\">((</span>var? val<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame val frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synSpecial\">(</span>unify-match var <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;見つからなければフレームを拡張</span>\n          <span class=\"synSpecial\">((</span>depends-on? val var frame<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;valとvarが同じく(? x)だった場合はfailed</span>\n           <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.76"},"content":"<p>本文中のandはひとつ目の質問を満たす表明に対して次の質問を満たす表明をデータベースから探してくる．<br>\nそれを２つの質問をそれぞれ満たすストリームをまず作り，<br>\n矛盾がないようにそれらを組み合わせるconjoin特殊形式を実装する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? conjuncts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      frame-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>conjoin-frame-stream first rest<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-frame-stream fs1 fs2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>stream-filter\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span>stream-flatmap\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>stream-map\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>conjoin-consistent frame1 frame2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       fs2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    fs1<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; f2をフレームと考え，f1のvarがf2にあるかを調べる．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; f2にあってf1のvarの値と同じならOK．違えばfailed.なければf2を拡張する．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; 上記手順はexend-if-possibleがやる．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-consistent f1 f2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> f1<span class=\"synSpecial\">)</span> f2\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>extend-frame2 <span class=\"synSpecial\">(</span>extend-if-possible <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> f1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> f1<span class=\"synSpecial\">)</span> f2<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> extend-frame2 <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">'</span>failed\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>conjoin-consistent <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> f1<span class=\"synSpecial\">)</span> extend-frame2<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; 本文で定義されたextend-if-possible</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; (? x)が値を指していればその値を返す．(? y)となっていれば，さらにその値を探す．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; varもvalも(? x)同じものを指していればfailedが返る．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-possible var val frame<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;フレームからvarに対応するvalを探して束縛</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>binding\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> val frame<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synComment\">;; 上のletで探してきたvalもまた(? y)という形だった場合は更にフレームから探してくる．</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">((</span>var? val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame val frame<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>unify-match var <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;見つからなければフレームを拡張</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">((</span>depends-on? val var frame<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;valとvarが同じく(? x)だった場合はfailed</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">)))))</span>\n</span></code></pre>"},"__N_SSG":true}