{"pageProps":{"post":{"title":"SICP 問題 2.37","published":"2015/10/21","tags":["scheme","SICP"],"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dot-product v w<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">*</span> v w<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-vector m v<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>dot-product x v<span class=\"synSpecial\">))</span> m<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>transpose mat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate-n <span class=\"synIdentifier\">cons</span> nil mat<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-matrix m n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cols <span class=\"synSpecial\">(</span>transpose n<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>matrix-*-vector cols x<span class=\"synSpecial\">))</span>\n         m<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (matrix-*-vector &#39;((1 2)\n                        (3 4))\n                      &#39;(5 6))\n(17 39)\ngosh&gt; (dot-product &#39;(1 2) &#39;(3 4))\n11\ngosh&gt; (matrix-*-vector &#39;((1 2)\n                        (3 4))\n                      &#39;(5 6))\n(17 39)\ngosh&gt; (matrix-*-matrix &#39;((1 2 3)\n                         (4 5 6))\n                       &#39;((7 10)\n                         (8 11)\n                         (9 12)))\n((50 68) (122 167))</pre>\n\n\n","slug":"SICP 問題 2.37"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dot-product v w<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">*</span> v w<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-vector m v<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>dot-product x v<span class=\"synSpecial\">))</span> m<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>transpose mat<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>accumulate-n <span class=\"synIdentifier\">cons</span> nil mat<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-matrix m n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cols <span class=\"synSpecial\">(</span>transpose n<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>matrix-*-vector cols x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">         m<span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (matrix-*-vector '((1 2)\n</span><span class=\"code-line\">                        (3 4))\n</span><span class=\"code-line\">                      '(5 6))\n</span><span class=\"code-line\">(17 39)\n</span><span class=\"code-line\">gosh> (dot-product '(1 2) '(3 4))\n</span><span class=\"code-line\">11\n</span><span class=\"code-line\">gosh> (matrix-*-vector '((1 2)\n</span><span class=\"code-line\">                        (3 4))\n</span><span class=\"code-line\">                      '(5 6))\n</span><span class=\"code-line\">(17 39)\n</span><span class=\"code-line\">gosh> (matrix-*-matrix '((1 2 3)\n</span><span class=\"code-line\">                         (4 5 6))\n</span><span class=\"code-line\">                       '((7 10)\n</span><span class=\"code-line\">                         (8 11)\n</span><span class=\"code-line\">                         (9 12)))\n</span><span class=\"code-line\">((50 68) (122 167))</span></code></pre>"},"__N_SSG":true}