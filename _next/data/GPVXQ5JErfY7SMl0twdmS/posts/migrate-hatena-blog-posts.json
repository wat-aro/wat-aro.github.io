{"pageProps":{"post":{"title":"はてなブログの記事を Next.js 製ブログにインポート","published":"2022/06/15","tags":["Rust","Next.js","TypeScript"],"content":"\n[旧ブログ](https://wat-aro.hatenablog.com/) の記事の移行が終わりました。\nRust のパーサコンビネータ [nom](https://github.com/Geal/nom) の使いかたに慣れるため [JSON parser](https://github.com/wat-aro/wson) を作ったりと寄り道が激しかったです。\n\nはてなブログから記事をエクスポートすると [Movable Type](https://www.sixapart.jp/movabletype/) で書かれた txt ファイルをダウンロードできます。\nこれを変換して markdown で書いているこのサイトでインポートできるようにしたい。\n[Movable Type のフォーマット](https://www.sixapart.jp/movabletype/manual/3.3/f_import_format/) にちゃんと対応するのは大変なので必要なところだけ対応した。\n\n## movable_type_to_markdown\n\n作った移行ツールがこちら https://github.com/wat-aro/movable_type_to_markdown\n使ったことがなかったので [clap](https://github.com/clap-rs/clap) や [anyhow](https://github.com/dtolnay/anyhow) を使ってみた。\nto_markdown といいつつ、実際は Movable Type ファイルに入っていた html のまま。\n最初は html からマークダウンにしようかと考えていたけれどコードブロックの `pre` タグがめんどくさすぎて断念。\n\n```shell\ncargo run MOVABLE_TYPE_FILE OUTPUT_DIRECTORY\n```\n\nで OUTPUT_DIRECTORY に変換した markdown ファイルを出力できます。\n作りはシンプルに パースして記事用のオブジェクトを作成してファイル作成。\n\n## はまりどころ 1\n\nMovable Type の複数行フィールド・セクションは `-----\\n` によって区切られている。\n本文で `-----------\\n` などが使われている箇所があったためパースできなくなってしまった。\nセパレータは行頭から開始される場合に限るため `\\n-----\\n` で判定することでなんとかなった\n\n## はまりどころ 2\n\nコードブロック以外はそのままの html でそれなりに表示されているのでそれでよしとした。\nただコードブロックはいかんともしがたく。\nこれはこちらのサイト側で対応。\nはてなブログのコードブロックの `pre` タグ直下に `code` タグを入れて children をラップすると、ハイライトされないが改行はきちんと反映されることがわかった。\nただし、markdown で書いたコードブロックを使っているため、`pre` タグのクラス名に `code` が含まれている場合にはてなブログのコードブロックだと判定するようにした。\nこのサイトは `unified` を使ってマークダウンから html に変換している。\n以下の plugin を追加することでコードブロックを表示できるようにした。\n\n```ts\nexport const rehypeHatenaCodeBlock: Plugin = () => {\n  return (tree, file) => {\n    visit(tree, 'element', (node: Element) => {\n      if (\n        node.tagName == 'pre' &&\n        node.properties?.className &&\n        Array.isArray(node.properties.className) &&\n        node.properties.className.includes('code')\n      ) {\n        const children = node.children;\n        const code = {\n          type: 'element',\n          tagName: 'code',\n          properties: {},\n          children: children,\n        } as ElementContent;\n        node.children = [code];\n      }\n      return true;\n    });\n  };\n};\n```\n\n### 今後の展望\n\n今は全件表示されているため、次はページネーションを導入するぞい。\n","slug":"migrate-hatena-blog-posts"},"content":"<p><a href=\"https://wat-aro.hatenablog.com/\">旧ブログ</a> の記事の移行が終わりました。<br>\nRust のパーサコンビネータ <a href=\"https://github.com/Geal/nom\">nom</a> の使いかたに慣れるため <a href=\"https://github.com/wat-aro/wson\">JSON parser</a> を作ったりと寄り道が激しかったです。</p>\n<p>はてなブログから記事をエクスポートすると <a href=\"https://www.sixapart.jp/movabletype/\">Movable Type</a> で書かれた txt ファイルをダウンロードできます。<br>\nこれを変換して markdown で書いているこのサイトでインポートできるようにしたい。<br>\n<a href=\"https://www.sixapart.jp/movabletype/manual/3.3/f_import_format/\">Movable Type のフォーマット</a> にちゃんと対応するのは大変なので必要なところだけ対応した。</p>\n<h2 id=\"movable_type_to_markdown\">movable_type_to_markdown</h2>\n<p>作った移行ツールがこちら <a href=\"https://github.com/wat-aro/movable_type_to_markdown\">https://github.com/wat-aro/movable_type_to_markdown</a><br>\n使ったことがなかったので <a href=\"https://github.com/clap-rs/clap\">clap</a> や <a href=\"https://github.com/dtolnay/anyhow\">anyhow</a> を使ってみた。<br>\nto_markdown といいつつ、実際は Movable Type ファイルに入っていた html のまま。<br>\n最初は html からマークダウンにしようかと考えていたけれどコードブロックの <code>pre</code> タグがめんどくさすぎて断念。</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">cargo run MOVABLE_TYPE_FILE OUTPUT_DIRECTORY\n</span></code></pre>\n<p>で OUTPUT_DIRECTORY に変換した markdown ファイルを出力できます。<br>\n作りはシンプルに パースして記事用のオブジェクトを作成してファイル作成。</p>\n<h2 id=\"はまりどころ-1\">はまりどころ 1</h2>\n<p>Movable Type の複数行フィールド・セクションは <code>-----\\n</code> によって区切られている。<br>\n本文で <code>-----------\\n</code> などが使われている箇所があったためパースできなくなってしまった。<br>\nセパレータは行頭から開始される場合に限るため <code>\\n-----\\n</code> で判定することでなんとかなった</p>\n<h2 id=\"はまりどころ-2\">はまりどころ 2</h2>\n<p>コードブロック以外はそのままの html でそれなりに表示されているのでそれでよしとした。<br>\nただコードブロックはいかんともしがたく。<br>\nこれはこちらのサイト側で対応。<br>\nはてなブログのコードブロックの <code>pre</code> タグ直下に <code>code</code> タグを入れて children をラップすると、ハイライトされないが改行はきちんと反映されることがわかった。<br>\nただし、markdown で書いたコードブロックを使っているため、<code>pre</code> タグのクラス名に <code>code</code> が含まれている場合にはてなブログのコードブロックだと判定するようにした。<br>\nこのサイトは <code>unified</code> を使ってマークダウンから html に変換している。<br>\n以下の plugin を追加することでコードブロックを表示できるようにした。</p>\n<pre class=\"language-ts\"><code class=\"language-ts code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> rehypeHatenaCodeBlock<span class=\"token operator\">:</span> <span class=\"token function-variable function\">Plugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> <span class=\"token string\">'element'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">        node<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">==</span> <span class=\"token string\">'pre'</span> <span class=\"token operator\">&#x26;&#x26;</span>\n</span><span class=\"code-line\">        node<span class=\"token punctuation\">.</span>properties<span class=\"token operator\">?.</span>className <span class=\"token operator\">&#x26;&#x26;</span>\n</span><span class=\"code-line\">        <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n</span><span class=\"code-line\">        node<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">          type<span class=\"token operator\">:</span> <span class=\"token string\">'element'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">          tagName<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">          properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">          children<span class=\"token operator\">:</span> children<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> ElementContent<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        node<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">      <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<h3 id=\"今後の展望\">今後の展望</h3>\n<p>今は全件表示されているため、次はページネーションを導入するぞい。</p>"},"__N_SSG":true}