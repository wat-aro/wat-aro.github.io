{"pageProps":{"post":{"title":"SICP 問題 5.47","published":"2016/02/10","tags":["scheme","SICP"],"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した手続きから積極制御評価器で定義した手続きを使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>primitive-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>primitive-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compiled-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compiled-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compound-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compound-branch<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; compound-branchの作成</span>\n        <span class=\"synSpecial\">(</span>after-call <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-call<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>compiled-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-call linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>primitive-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; compiled-branchへの分岐を追加</span>\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op compiled-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>compiled-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; primitiveでもcompiledでもなかったらcompoundとして処理．</span>\n       <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         compound-branch\n         <span class=\"synComment\">;; compiledと同じようにcompound-proc-applで命令を作る</span>\n         <span class=\"synSpecial\">(</span>compound-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             compiled-branch\n             <span class=\"synSpecial\">(</span>compile-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             primitive-branch\n             <span class=\"synSpecial\">(</span>end-with-linkage\n              linkage\n              <span class=\"synSpecial\">(</span>make-instruction-sequence\n               <span class=\"synSpecial\">'(</span>proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                         <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))))))))</span>\n       after-call<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; ほとんどcompile-proc-applと同じで，continueをセーブしてからcompappにジャンプする．</span>\n<span class=\"synComment\">;; compappには(label procedure-apply)が入っている．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-proc-appl target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'()</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-return <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>proc-return<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>make-instruction-sequence\n            <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n            <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-return<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">,</span>proc-return\n              <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>save continue<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;return linkage, target not val -- COMPILE&quot;</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; ec-evalの命令の先頭でcompappを初期化する．</span>\n   <span class=\"synSpecial\">'((</span>assign compapp <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span> <span class=\"synComment\">;追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label external-entry<span class=\"synSpecial\">))</span>\n     read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ntest</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>begin\n          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">10</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">12</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">22</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">4</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した定義の上書き，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>していない定義へのアクセスの両方がうまくいっている．</p>\n\n","slug":"SICP 問題 5.47"},"content":"<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した手続きから積極制御評価器で定義した手続きを使えるようにする．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>primitive-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>primitive-branch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>compiled-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compiled-branch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>compound-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compound-branch<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; compound-branchの作成</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>after-call <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-call<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>compiled-linkage\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-call linkage<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>append-instruction-sequences\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>primitive-branch<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">       <span class=\"synComment\">;; compiled-branchへの分岐を追加</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op compiled-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>compiled-branch<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">       <span class=\"synComment\">;; primitiveでもcompiledでもなかったらcompoundとして処理．</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>append-instruction-sequences\n</span><span class=\"code-line\">         compound-branch\n</span><span class=\"code-line\">         <span class=\"synComment\">;; compiledと同じようにcompound-proc-applで命令を作る</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>compound-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>append-instruction-sequences\n</span><span class=\"code-line\">             compiled-branch\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>compile-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>append-instruction-sequences\n</span><span class=\"code-line\">             primitive-branch\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>end-with-linkage\n</span><span class=\"code-line\">              linkage\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">               <span class=\"synSpecial\">'(</span>proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))))))))</span>\n</span><span class=\"code-line\">       after-call<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; ほとんどcompile-proc-applと同じで，continueをセーブしてからcompappにジャンプする．</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; compappには(label procedure-apply)が入っている．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-proc-appl target linkage<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">          <span class=\"synSpecial\">'()</span> all-regs\n</span><span class=\"code-line\">          <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-return <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>proc-return<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">            <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n</span><span class=\"code-line\">            <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-return<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">,</span>proc-return\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">          <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span> all-regs\n</span><span class=\"code-line\">          <span class=\"synSpecial\">`((</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"return linkage, target not val -- COMPILE\"</span> target<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; ec-evalの命令の先頭でcompappを初期化する．</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'((</span>assign compapp <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span> <span class=\"synComment\">;追加</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label external-entry<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     read-eval-print-loop\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>　<br>\ntest</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>compile-and-go\n</span><span class=\"code-line\">       <span class=\"synSpecial\">'(</span>begin\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">10</span><span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">12</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">22</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>compile-and-go\n</span><span class=\"code-line\">       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">2</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; EC-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">4</span>\n</span></code></pre>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した定義の上書き，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>していない定義へのアクセスの両方がうまくいっている．</p>"},"__N_SSG":true}