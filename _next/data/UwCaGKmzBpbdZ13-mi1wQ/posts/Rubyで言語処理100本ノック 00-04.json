{"pageProps":{"post":{"title":"Rubyで言語処理100本ノック 00-04","published":"2016/03/17","tags":["ruby"],"content":"\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.cl.ecei.tohoku.ac.jp%2Fnlp100%2F\" title=\"言語処理100本ノック 2015\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www.cl.ecei.tohoku.ac.jp/nlp100/\">www.cl.ecei.tohoku.ac.jp</a></cite></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>の練習のために始めました．<br/>\n4章からは難しそうなので3章まで頑張りたい．でも飽きたらやめるかも．<br/>\nコードを書く基礎が足りない気がするのでもっと書かないと．<br/>\n始めるにあって，とりあえず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> 2.2.3のStringクラスは一通り目を通してきました．<br/>\n全体的に末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>でなんとかしようとしてます．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>は末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がないって聞いたんですがどうなんですかね？\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>っぽい書き方がわからないので，Rubocop先生に出来るだけ怒られないように書いてます．</p>\n\n<h2>00</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 00 文字列を受け取り，末尾から順に表示する</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">my_reverse</span>\n    size = length\n    result = <span class=\"synSpecial\">''</span>\n    <span class=\"synStatement\">while</span> size &gt; <span class=\"synConstant\">0</span>\n      size -= <span class=\"synConstant\">1</span>\n      result &lt;&lt; <span class=\"synConstant\">self</span>[size]\n    <span class=\"synStatement\">end</span>\n    result\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synComment\"># Like tail call</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter_reverse</span>\n    iter(<span class=\"synSpecial\">''</span>, length)\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str, str_len)\n    <span class=\"synStatement\">if</span> str_len &gt; <span class=\"synConstant\">0</span>\n      iter(str + <span class=\"synConstant\">self</span>[str_len - <span class=\"synConstant\">1</span>], str_len - <span class=\"synConstant\">1</span>)\n    <span class=\"synStatement\">else</span>\n      str\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.my_reverse                <span class=\"synComment\"># =&gt; &quot;esrever&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.my_reverse                      <span class=\"synComment\"># =&gt; &quot;a&quot;</span>\n<span class=\"synSpecial\">''</span>.my_reverse                       <span class=\"synComment\"># =&gt; &quot;&quot;</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.iter_reverse          <span class=\"synComment\"># =&gt; &quot;esrever&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.iter_reverse                <span class=\"synComment\"># =&gt; &quot;a&quot;</span>\n<span class=\"synSpecial\">''</span>.iter_reverse                 <span class=\"synComment\"># =&gt; &quot;&quot;</span>\n</pre>\n\n\n<h2>01</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 01 文字列の奇数番目だけ取り出した新しい文字列を返す</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">str_odd</span>\n    iter(<span class=\"synConstant\">0</span>, <span class=\"synSpecial\">''</span>)\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(index, str)\n    <span class=\"synStatement\">if</span> index &lt; length\n      <span class=\"synStatement\">if</span> index.even?\n        iter(index + <span class=\"synConstant\">1</span>, str + <span class=\"synConstant\">self</span>[index])\n      <span class=\"synStatement\">else</span>\n        iter(index + <span class=\"synConstant\">1</span>, str)\n      <span class=\"synStatement\">end</span>\n    <span class=\"synStatement\">else</span>\n      str\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">hello</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># =&gt; &quot;hlo&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">abcde</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># =&gt; &quot;ace&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">パタトクカシーー</span><span class=\"synSpecial\">'</span>.str_odd     <span class=\"synComment\"># =&gt; &quot;パトカー&quot;</span>\n</pre>\n\n\n<h2>02</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 02 ２つの文字列を受け取り，先頭から交互に混ぜた文字列をつくる</span>\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">comb_str</span>(str1, str2)\n  iter(str1, str2, <span class=\"synSpecial\">''</span>)\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str1, str2, result)\n  <span class=\"synStatement\">if</span> str1.empty?\n    result + str2\n  <span class=\"synStatement\">elsif</span> str2.empty?\n    result + str1\n  <span class=\"synStatement\">else</span>\n    iter(str1[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], str2[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], result + str1[<span class=\"synConstant\">0</span>] + str2[<span class=\"synConstant\">0</span>])\n  <span class=\"synStatement\">end</span>\n<span class=\"synPreProc\">end</span>\n\ncomb_str(<span class=\"synSpecial\">'</span><span class=\"synConstant\">パトカー</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">タクシー</span><span class=\"synSpecial\">'</span>) <span class=\"synComment\"># =&gt; &quot;パタトクカシーー&quot;</span>\n</pre>\n\n\n<h2>03</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 03 文字列から数字のリストをつくる</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pi</span>\n    split.map(&amp;<span class=\"synConstant\">:length</span>)\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.</span><span class=\"synSpecial\">&quot;</span>.pi\n <span class=\"synComment\"># =&gt; [3, 1, 4, 1, 6, 9, 2, 7, 5, 3, 5, 8, 9, 7, 10]</span>\n</pre>\n\n\n<h2>04</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 04 文字列を受け取り，単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字</span>\n<span class=\"synComment\"># それ以外の単語は先頭に2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列を返す</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">element</span>\n    recur(split, <span class=\"synConstant\">1</span>, [])\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">helper</span>(str, i)\n    <span class=\"synStatement\">case</span> i\n    <span class=\"synStatement\">when</span> <span class=\"synConstant\">1</span>, <span class=\"synConstant\">5</span>, <span class=\"synConstant\">6</span>, <span class=\"synConstant\">7</span>, <span class=\"synConstant\">8</span>, <span class=\"synConstant\">9</span>, <span class=\"synConstant\">15</span>, <span class=\"synConstant\">16</span>, <span class=\"synConstant\">19</span>\n      [str[<span class=\"synConstant\">0</span>], i]\n    <span class=\"synStatement\">else</span>\n      [str[<span class=\"synConstant\">0</span>, <span class=\"synConstant\">2</span>], i]\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">recur</span>(arr, index, result)\n    <span class=\"synStatement\">if</span> arr.empty?\n      result\n    <span class=\"synStatement\">else</span>\n      recur(arr.drop(<span class=\"synConstant\">1</span>), index + <span class=\"synConstant\">1</span>, result.push(helper(arr[<span class=\"synConstant\">0</span>], index)))\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.</span><span class=\"synSpecial\">&quot;</span>.element\n<span class=\"synComment\"># =&gt; [[&quot;H&quot;, 1], [&quot;He&quot;, 2], [&quot;Li&quot;, 3], [&quot;Be&quot;, 4], [&quot;B&quot;, 5], [&quot;C&quot;, 6], [&quot;N&quot;, 7], [&quot;O&quot;, 8], [&quot;F&quot;, 9], [&quot;Ne&quot;, 10], [&quot;Na&quot;, 11], [&quot;Mi&quot;, 12], [&quot;Al&quot;, 13], [&quot;Si&quot;, 14], [&quot;P&quot;, 15], [&quot;S&quot;, 16], [&quot;Cl&quot;, 17], [&quot;Ar&quot;, 18], [&quot;K&quot;, 19], [&quot;Ca&quot;, 20]]</span>\n</pre>\n\n\n<p>Stringクラスを一読するのに時間がかかったので今日はこれだけ．</p>\n\n","slug":"Rubyで言語処理100本ノック 00-04"},"content":"<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.cl.ecei.tohoku.ac.jp%2Fnlp100%2F\" title=\"言語処理100本ノック 2015\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www.cl.ecei.tohoku.ac.jp/nlp100/\">www.cl.ecei.tohoku.ac.jp</a></cite></p>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>の練習のために始めました．<br>\n4章からは難しそうなので3章まで頑張りたい．でも飽きたらやめるかも．<br>\nコードを書く基礎が足りない気がするのでもっと書かないと．<br>\n始めるにあって，とりあえず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> 2.2.3のStringクラスは一通り目を通してきました．<br>\n全体的に末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>でなんとかしようとしてます．<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>は末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がないって聞いたんですがどうなんですかね？\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>っぽい書き方がわからないので，Rubocop先生に出来るだけ怒られないように書いてます．</p>\n<h2 id=\"00\">00</h2>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\"># 00 文字列を受け取り，末尾から順に表示する</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">my_reverse</span>\n</span><span class=\"code-line\">    size = length\n</span><span class=\"code-line\">    result = <span class=\"synSpecial\">''</span>\n</span><span class=\"code-line\">    <span class=\"synStatement\">while</span> size > <span class=\"synConstant\">0</span>\n</span><span class=\"code-line\">      size -= <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">      result &#x3C;&#x3C; <span class=\"synConstant\">self</span>[size]\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">    result\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\"># Like tail call</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter_reverse</span>\n</span><span class=\"code-line\">    iter(<span class=\"synSpecial\">''</span>, length)\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synStatement\">private</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str, str_len)\n</span><span class=\"code-line\">    <span class=\"synStatement\">if</span> str_len > <span class=\"synConstant\">0</span>\n</span><span class=\"code-line\">      iter(str + <span class=\"synConstant\">self</span>[str_len - <span class=\"synConstant\">1</span>], str_len - <span class=\"synConstant\">1</span>)\n</span><span class=\"code-line\">    <span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">      str\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.my_reverse                <span class=\"synComment\"># => \"esrever\"</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.my_reverse                      <span class=\"synComment\"># => \"a\"</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">''</span>.my_reverse                       <span class=\"synComment\"># => \"\"</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.iter_reverse          <span class=\"synComment\"># => \"esrever\"</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.iter_reverse                <span class=\"synComment\"># => \"a\"</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">''</span>.iter_reverse                 <span class=\"synComment\"># => \"\"</span>\n</span></code></pre>\n<h2 id=\"01\">01</h2>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\"># 01 文字列の奇数番目だけ取り出した新しい文字列を返す</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">str_odd</span>\n</span><span class=\"code-line\">    iter(<span class=\"synConstant\">0</span>, <span class=\"synSpecial\">''</span>)\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synStatement\">private</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(index, str)\n</span><span class=\"code-line\">    <span class=\"synStatement\">if</span> index &#x3C; length\n</span><span class=\"code-line\">      <span class=\"synStatement\">if</span> index.even?\n</span><span class=\"code-line\">        iter(index + <span class=\"synConstant\">1</span>, str + <span class=\"synConstant\">self</span>[index])\n</span><span class=\"code-line\">      <span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">        iter(index + <span class=\"synConstant\">1</span>, str)\n</span><span class=\"code-line\">      <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">    <span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">      str\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">hello</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># => \"hlo\"</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">abcde</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># => \"ace\"</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">'</span><span class=\"synConstant\">パタトクカシーー</span><span class=\"synSpecial\">'</span>.str_odd     <span class=\"synComment\"># => \"パトカー\"</span>\n</span></code></pre>\n<h2 id=\"02\">02</h2>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\"># 02 ２つの文字列を受け取り，先頭から交互に混ぜた文字列をつくる</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">comb_str</span>(str1, str2)\n</span><span class=\"code-line\">  iter(str1, str2, <span class=\"synSpecial\">''</span>)\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str1, str2, result)\n</span><span class=\"code-line\">  <span class=\"synStatement\">if</span> str1.empty?\n</span><span class=\"code-line\">    result + str2\n</span><span class=\"code-line\">  <span class=\"synStatement\">elsif</span> str2.empty?\n</span><span class=\"code-line\">    result + str1\n</span><span class=\"code-line\">  <span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">    iter(str1[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], str2[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], result + str1[<span class=\"synConstant\">0</span>] + str2[<span class=\"synConstant\">0</span>])\n</span><span class=\"code-line\">  <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">comb_str(<span class=\"synSpecial\">'</span><span class=\"synConstant\">パトカー</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">タクシー</span><span class=\"synSpecial\">'</span>) <span class=\"synComment\"># => \"パタトクカシーー\"</span>\n</span></code></pre>\n<h2 id=\"03\">03</h2>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\"># 03 文字列から数字のリストをつくる</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pi</span>\n</span><span class=\"code-line\">    split.map(&#x26;<span class=\"synConstant\">:length</span>)\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">\"</span><span class=\"synConstant\">Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.</span><span class=\"synSpecial\">\"</span>.pi\n</span><span class=\"code-line\"> <span class=\"synComment\"># => [3, 1, 4, 1, 6, 9, 2, 7, 5, 3, 5, 8, 9, 7, 10]</span>\n</span></code></pre>\n<h2 id=\"04\">04</h2>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\"># 04 文字列を受け取り，単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字</span>\n</span><span class=\"code-line\"><span class=\"synComment\"># それ以外の単語は先頭に2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列を返す</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">element</span>\n</span><span class=\"code-line\">    recur(split, <span class=\"synConstant\">1</span>, [])\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synStatement\">private</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">helper</span>(str, i)\n</span><span class=\"code-line\">    <span class=\"synStatement\">case</span> i\n</span><span class=\"code-line\">    <span class=\"synStatement\">when</span> <span class=\"synConstant\">1</span>, <span class=\"synConstant\">5</span>, <span class=\"synConstant\">6</span>, <span class=\"synConstant\">7</span>, <span class=\"synConstant\">8</span>, <span class=\"synConstant\">9</span>, <span class=\"synConstant\">15</span>, <span class=\"synConstant\">16</span>, <span class=\"synConstant\">19</span>\n</span><span class=\"code-line\">      [str[<span class=\"synConstant\">0</span>], i]\n</span><span class=\"code-line\">    <span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">      [str[<span class=\"synConstant\">0</span>, <span class=\"synConstant\">2</span>], i]\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">recur</span>(arr, index, result)\n</span><span class=\"code-line\">    <span class=\"synStatement\">if</span> arr.empty?\n</span><span class=\"code-line\">      result\n</span><span class=\"code-line\">    <span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">      recur(arr.drop(<span class=\"synConstant\">1</span>), index + <span class=\"synConstant\">1</span>, result.push(helper(arr[<span class=\"synConstant\">0</span>], index)))\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">\"</span><span class=\"synConstant\">Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.</span><span class=\"synSpecial\">\"</span>.element\n</span><span class=\"code-line\"><span class=\"synComment\"># => [[\"H\", 1], [\"He\", 2], [\"Li\", 3], [\"Be\", 4], [\"B\", 5], [\"C\", 6], [\"N\", 7], [\"O\", 8], [\"F\", 9], [\"Ne\", 10], [\"Na\", 11], [\"Mi\", 12], [\"Al\", 13], [\"Si\", 14], [\"P\", 15], [\"S\", 16], [\"Cl\", 17], [\"Ar\", 18], [\"K\", 19], [\"Ca\", 20]]</span>\n</span></code></pre>\n<p>Stringクラスを一読するのに時間がかかったので今日はこれだけ．</p>"},"__N_SSG":true}