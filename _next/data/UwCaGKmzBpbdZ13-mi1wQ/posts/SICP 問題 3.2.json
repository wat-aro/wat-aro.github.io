{"pageProps":{"post":{"title":"SICP 問題 3.2","published":"2015/11/05","tags":["scheme","SICP"],"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-monitored f<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>in<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>how-many-calls?<span class=\"synSpecial\">)</span> mf<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>reset-count<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> mf<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>f in<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define s (make-monitored sqrt))\ns\ngosh&gt; (s 100)\n10\ngosh&gt; (s &#39;how-many-calls?)\n1\ngosh&gt; (s &#39;reset-count)\n0\ngosh&gt; (s &#39;how-many-calls?)\n0</pre>\n\n\n","slug":"SICP 問題 3.2"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-monitored f<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>in<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>how-many-calls?<span class=\"synSpecial\">)</span> mf<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>reset-count<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> mf<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>f in<span class=\"synSpecial\">))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define s (make-monitored sqrt))\n</span><span class=\"code-line\">s\n</span><span class=\"code-line\">gosh> (s 100)\n</span><span class=\"code-line\">10\n</span><span class=\"code-line\">gosh> (s 'how-many-calls?)\n</span><span class=\"code-line\">1\n</span><span class=\"code-line\">gosh> (s 'reset-count)\n</span><span class=\"code-line\">0\n</span><span class=\"code-line\">gosh> (s 'how-many-calls?)\n</span><span class=\"code-line\">0</span></code></pre>"},"__N_SSG":true}