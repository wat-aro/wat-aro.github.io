{"pageProps":{"post":{"title":"Rustで標準入力がパイプか端末かを判定する","published":"2022/10/07","tags":[],"content":"\nパイプから標準入力に渡した場合はそのまま処理し、端末から入力する場合はプロンプトを表示したくて調べた。\n\nlibcの [ISATTY](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/isatty.3.html) を使えばよい。\n[libc](https://docs.rs/libc/latest/libc/) クレートか libc をラップした [nix](https://docs.rs/nix/latest/nix/) クレートでlibcの関数を叩ける。\nここでは Rust で使いやすいようにラップしてくれている `nix` を使う。\n`nix::unistd::isatty` は指定されたファイルディスクリプタが端末を参照する場合に `Ok(true)` を返すのでそこで判定する。\n\n```rust\nuse std::{\n    error::Error,\n    io::{self, stdout, Write},\n};\n\nuse nix::{libc::STDIN_FILENO, unistd::isatty};\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let mut buffer = String::new();\n    if let Ok(true) = isatty(STDIN_FILENO) {\n        print!(\"tty> \");\n        stdout().flush().unwrap();\n    }\n\n    let stdin = io::stdin();\n    stdin.read_line(&mut buffer)?;\n    print!(\"{}\", buffer);\n    Ok(())\n}\n```\n\nパイプから標準入力に文字列を渡すと渡した文字列がそのまま印字される。\n```shell\n$ echo Hello | cargo run\nHello\n```\n\n直接起動した際は `term> ` と印字され、文字列を入力して改行すると入力した文字が表示される。\n\n```shell\n$ cargo run\ntty> Hello\nHello\n```\n","slug":"Rustで標準入力がパイプか端末かを判定する"},"content":"<p>パイプから標準入力に渡した場合はそのまま処理し、端末から入力する場合はプロンプトを表示したくて調べた。</p>\n<p>libcの <a href=\"https://linuxjm.osdn.jp/html/LDP_man-pages/man3/isatty.3.html\">ISATTY</a> を使えばよい。<br>\n<a href=\"https://docs.rs/libc/latest/libc/\">libc</a> クレートか libc をラップした <a href=\"https://docs.rs/nix/latest/nix/\">nix</a> クレートでlibcの関数を叩ける。<br>\nここでは Rust で使いやすいようにラップしてくれている <code>nix</code> を使う。<br>\n<code>nix::unistd::isatty</code> は指定されたファイルディスクリプタが端末を参照する場合に <code>Ok(true)</code> を返すのでそこで判定する。</p>\n<pre class=\"language-rust\"><code class=\"language-rust code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token namespace\">error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">nix<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token namespace\">libc<span class=\"token punctuation\">::</span></span><span class=\"token constant\">STDIN_FILENO</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">unistd<span class=\"token punctuation\">::</span></span>isatty<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">isatty</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STDIN_FILENO</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tty> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        <span class=\"token function\">stdout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">    <span class=\"token keyword\">let</span> stdin <span class=\"token operator\">=</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    stdin<span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> buffer<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>パイプから標準入力に文字列を渡すと渡した文字列がそのまま印字される。</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token builtin class-name\">echo</span> Hello <span class=\"token operator\">|</span> cargo run\n</span><span class=\"code-line\">Hello\n</span></code></pre>\n<p>直接起動した際は <code>term> </code> と印字され、文字列を入力して改行すると入力した文字が表示される。</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ cargo run\n</span><span class=\"code-line\">tty<span class=\"token operator\">></span> Hello\n</span><span class=\"code-line\">Hello\n</span></code></pre>"},"__N_SSG":true}