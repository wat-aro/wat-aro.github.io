{"pageProps":{"post":{"data":{"title":"Rubyの正規表現でそれぞれのケースへの変換","published":"2016/03/05","tags":["ruby","正規表現"]},"content":"\n<p>今日は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>に苦しんだので練習しました。<br/>\nsnake_case、camel_Case、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Pascal\">Pascal</a>_Caseのそれぞれへの変換です。<br/>\ncapitalizeなくても書けるけど一応。<br/>\n<code>m[0].upcase + m[1..-1]</code>はちょっと汚いですしね。  <br/>\n<a href=\"http://rubular.com/\">Rubular</a>使えばテストケースが期待通りのマッチになるまで簡単に\nトライ＆エラーが出来ていいです。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_camel</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]/</span>) { |<span class=\"synIdentifier\">m</span>| m[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>].capitalize}\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_pascal</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.capitalize }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_snake</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">&quot;</span> + m.downcase }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_pascal</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.capitalize\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_snake</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">&quot;</span> + m }.downcase[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>]\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_camel</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.downcase }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n","slug":"Rubyの正規表現でそれぞれのケースへの変換"},"content":"<p>今日は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>に苦しんだので練習しました。<br>\nsnake_case、camel_Case、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Pascal\">Pascal</a>_Caseのそれぞれへの変換です。<br>\ncapitalizeなくても書けるけど一応。<br>\n<code>m[0].upcase + m[1..-1]</code>はちょっと汚いですしね。  <br>\n<a href=\"http://rubular.com/\">Rubular</a>使えばテストケースが期待通りのマッチになるまで簡単に\nトライ＆エラーが出来ていいです。</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_camel</span>\n</span><span class=\"code-line\">    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n</span><span class=\"code-line\">      match.gsub(<span class=\"synSpecial\">/</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]/</span>) { |<span class=\"synIdentifier\">m</span>| m[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>].capitalize}\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_pascal</span>\n</span><span class=\"code-line\">    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n</span><span class=\"code-line\">      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.capitalize }\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_snake</span>\n</span><span class=\"code-line\">    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n</span><span class=\"code-line\">      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">\"</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">\"</span> + m.downcase }\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_pascal</span>\n</span><span class=\"code-line\">    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n</span><span class=\"code-line\">      match.capitalize\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_snake</span>\n</span><span class=\"code-line\">    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n</span><span class=\"code-line\">      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">\"</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">\"</span> + m }.downcase[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>]\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_camel</span>\n</span><span class=\"code-line\">    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n</span><span class=\"code-line\">      match.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.downcase }\n</span><span class=\"code-line\">    <span class=\"synStatement\">end</span>\n</span><span class=\"code-line\">  <span class=\"synPreProc\">end</span>\n</span><span class=\"code-line\"><span class=\"synPreProc\">end</span>\n</span></code></pre>"},"__N_SSG":true}