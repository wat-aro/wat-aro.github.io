{"pageProps":{"title":"SICP 問題 5.13","published":"2016/01/29","tags":["scheme","SICP"],"content":"<p>make-machineで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリストを登録するのではなく，  <br>\n命令の中で初めてassignされるときに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>を登録するように変更する．<br>\nmake-machineとmake-new-machineの変更だけですむ．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; register-namesを削除</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-machine ops controller-text<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> ops<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> insts<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> insts<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> insts<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddddr</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">      machine<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; lookupで見つからなければallocateで登録．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-instruction-types <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-label-registers <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-saved-registers <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-register-sources <span class=\"synSpecial\">'()))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                     register-table<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Multiply defined rgister: \"</span> name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synComment\">;; 登録した後にそのレジスタを返す</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name reg<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                               register-table<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                   reg<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;; 見つからなければ新たに登録する．</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">'</span>done\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-types types<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>regs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-label-registers regs<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>saved<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-saved-registers saved<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-register-sources sources<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">)</span> the-instruction-types<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">)</span> the-label-registers<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">)</span> the-saved-registers<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">)</span> the-register-sources<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown request -- MACHINE\"</span> message<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">        dispatch<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>make-machine\n</span><span class=\"code-line\">   <span class=\"synComment\">;; '(n val continue)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&#x3C; <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>controller\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     fib-loop\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &#x3C;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     afterfib-n-1\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     afterfib-n-2\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     immediate-answer\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     fib-done<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">6765</span>\n</span></code></pre>","slug":"SICP 問題 5.13","rawContent":"\n<p>make-machineで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリストを登録するのではなく，  <br/>\n命令の中で初めてassignされるときに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>を登録するように変更する．<br/>\nmake-machineとmake-new-machineの変更だけですむ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; register-namesを削除</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-machine ops controller-text<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> ops<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddddr</span> insts<span class=\"synSpecial\">)))</span>\n      machine<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; lookupで見つからなければallocateで登録．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-types <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-label-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-saved-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-register-sources <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synComment\">;; 登録した後にそのレジスタを返す</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name reg<span class=\"synSpecial\">)</span>\n                               register-table<span class=\"synSpecial\">))</span>\n                   reg<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;; 見つからなければ新たに登録する．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-types types<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>regs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-label-registers regs<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>saved<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-saved-registers saved<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-register-sources sources<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">)</span> the-instruction-types<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">)</span> the-label-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">)</span> the-saved-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">)</span> the-register-sources<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synComment\">;; '(n val continue)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6765</span>\n</pre>\n\n\n"},"__N_SSG":true}