{"pageProps":{"post":{"title":"SICP 問題 5.22","published":"2016/01/31","tags":["scheme","SICP"],"content":"\n<p>appendとappend!を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシン上に実装する．<br/>\n　<br/>\nappend</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n      y\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">append</span>\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>x y val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label append-done<span class=\"synSpecial\">))</span>\n     x-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n     after-x\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n     construct\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op cons<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     append-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>　<br/>\nappend!</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append! x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>last-pair x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> append!\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>x y temp<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-cdr! <span class=\"synIdentifier\">set-cdr!</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n     x-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save temp<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n     after-loop\n       <span class=\"synSpecial\">(</span>restore temp<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-cdr!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n     append!-done <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start append!<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents append! <span class=\"synSpecial\">'</span>x<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.22"},"content":"<p>appendとappend!を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシン上に実装する．<br>\n　<br>\nappend</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      y\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">append</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>make-machine\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>x y val continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>start\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label append-done<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     x-loop\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>save x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     after-x\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     construct\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>restore x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op cons<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     append-done<span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>get-register-contents <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>　<br>\nappend!</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append! x y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>last-pair x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> append!\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>make-machine\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>x y temp<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-cdr! <span class=\"synIdentifier\">set-cdr!</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>start\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     x-loop\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>save temp<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     after-loop\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>restore temp<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-cdr!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     append!-done <span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start append!<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>get-register-contents append! <span class=\"synSpecial\">'</span>x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</span></code></pre>"},"__N_SSG":true}