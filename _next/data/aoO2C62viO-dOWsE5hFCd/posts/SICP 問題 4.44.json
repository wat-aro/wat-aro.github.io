{"pageProps":{"post":{"title":"SICP 問題 4.44","published":"2016/01/12","tags":["scheme","SICP"],"content":"\n<p>eight-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/queen\">queen</a>をamb評価器を用いて解く．<br/>\nただし，まだamb評価器は実装していないのでコードだけ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eight-queen<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cross? a b<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> b<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> b<span class=\"synSpecial\">))))</span>\n       <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>chess <span class=\"synSpecial\">(</span>iota <span class=\"synConstant\">8</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>two <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? two one<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>three <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distince <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? three x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>four <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">4</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? four x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>five <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? five x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>six <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">6</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? six x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>seven <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">7</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n                  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? seven x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>eight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">8</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n                    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span>lsit one two three four five six seven eight<span class=\"synSpecial\">)))</span>\n                    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? eight x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven<span class=\"synSpecial\">)))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven eight<span class=\"synSpecial\">)))))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.44"},"content":"<p>eight-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/queen\">queen</a>をamb評価器を用いて解く．<br>\nただし，まだamb評価器は実装していないのでコードだけ．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eight-queen<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cross? a b<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> b<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> b<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">       <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>chess <span class=\"synSpecial\">(</span>iota <span class=\"synConstant\">8</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>two <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? two one<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>three <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distince <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? three x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>four <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">4</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? four x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>five <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? five x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>six <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">6</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? six x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>seven <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">7</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? seven x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>eight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">8</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span>lsit one two three four five six seven eight<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? eight x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven eight<span class=\"synSpecial\">)))))))))))</span>\n</span></code></pre>"},"__N_SSG":true}