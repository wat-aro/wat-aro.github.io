{"pageProps":{"title":"SICP 問題 5.34","published":"2016/02/06","tags":["scheme","SICP"],"content":"<p>反復的階乗手続きを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>し，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>版との本質的な違いを示せ．<br>\n　<br>\n反復的階乗手続きの内容を説明する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>compile\n</span><span class=\"code-line\"> <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>> counter n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          product\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>* counter product<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>+ counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>して，説明をつけた．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; 手続きを構成し，本体のコードを飛び越す</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry18<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda19<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; factorialの呼び出しの開始．</span>\n</span><span class=\"code-line\">  entry18\n</span><span class=\"code-line\">  <span class=\"synComment\">;; procの環境をenvに代入</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; factorialの実引数をfactorialの引数nと対応づけて環境を拡張</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; 内部定義に進む．valを(compiled-procedure entry20 env)の形にする．</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry20<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda21<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  entry20\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; product counterをそれぞれ1に束縛した環境を作る</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>product counter<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; 手続き本体の開始</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (> counter n)の計算</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">></span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch25<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここに飛ぶ．</span>\n</span><span class=\"code-line\">  compiled-branch26\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call27<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  primitive-branch25\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (> counter n)の次</span>\n</span><span class=\"code-line\">  after-call27                          <span class=\"synComment\">;valには(> couner n)の値が入っている</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;手続き本体のenvとcontinueを復帰</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch23<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (> counter n)がtrueの時，productの値をvalに入れて，大本のcontinueへ．</span>\n</span><span class=\"code-line\">  true-branch22\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (> counter n)がfalseの時</span>\n</span><span class=\"code-line\">  false-branch23\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (+ counter 1)を計算するためにcontinue, proc, envを退避</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (+ counter 1)の計算開始</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch31<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n</span><span class=\"code-line\">  compiled-branch32\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call33<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (+ counter 1)を実際に計算</span>\n</span><span class=\"code-line\">  primitive-branch31\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call33\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>     <span class=\"synComment\">;arglに今計算した値をリストにして代入</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;大本の環境の復帰</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;(+ counter 1)の結果のリストを退避</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (* counter product)の計算開始</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch28<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n</span><span class=\"code-line\">  compiled-branch29\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call30<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; (* counter product)を実際に計算</span>\n</span><span class=\"code-line\">  primitive-branch28\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call30\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;(+ counter 1)の復帰</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;arglに((* counter product) (+ counter 1))を代入</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;iterを復帰</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;呼び出し元に返るcontinueを復元</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch34<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ジャンプしない</span>\n</span><span class=\"code-line\">  compiled-branch35\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;entry20へのラベルをvalに代入</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  primitive-branch34\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call36\n</span><span class=\"code-line\">  after-if24\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; entry18からジャンプ</span>\n</span><span class=\"code-line\">  after-lambda21\n</span><span class=\"code-line\">  <span class=\"synComment\">;; iterを(compiled-procedure entry20 env)と定義．</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"synComment\">;; ここから(iter 1 1)の処理．</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; arglは(1)になる</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl => (1 1)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;=>false</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch37<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  compiled-branch38\n</span><span class=\"code-line\">  <span class=\"synComment\">;; valにiterに対応付けられてるラベルを代入する</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synComment\">;; entry20へgoto</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  primitive-branch37\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call39\n</span><span class=\"code-line\">  after-lambda19\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>反復的階乗計算では次の繰り返しに行く前に引数の計算が行われ，環境や継続はすべて大本の状態に復元してから次の繰り返しに向かう．<br>\n前の問題で見たように<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算ではprocとenvを退避させ，さらに戻ってくる場所をcontinueによって保持し続けないといけない．<br>\nそのために繰り返しが増えるほどにスタックが深くなっていく．</p>","slug":"SICP 問題 5.34","rawContent":"\n<p>反復的階乗手続きを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>し，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>版との本質的な違いを示せ．<br/>\n　<br/>\n反復的階乗手続きの内容を説明する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>&gt; counter n<span class=\"synSpecial\">)</span>\n          product\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>* counter product<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>+ counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>して，説明をつけた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>\n  <span class=\"synComment\">;; 手続きを構成し，本体のコードを飛び越す</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry18<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda19<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; factorialの呼び出しの開始．</span>\n  entry18\n  <span class=\"synComment\">;; procの環境をenvに代入</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; factorialの実引数をfactorialの引数nと対応づけて環境を拡張</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 内部定義に進む．valを(compiled-procedure entry20 env)の形にする．</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry20<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda21<span class=\"synSpecial\">))</span>\n\n  entry20\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; product counterをそれぞれ1に束縛した環境を作る</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>product counter<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 手続き本体の開始</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)の計算</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch25<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここに飛ぶ．</span>\n  compiled-branch26\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call27<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch25\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)の次</span>\n  after-call27                          <span class=\"synComment\">;valには(&gt; couner n)の値が入っている</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;手続き本体のenvとcontinueを復帰</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch23<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)がtrueの時，productの値をvalに入れて，大本のcontinueへ．</span>\n  true-branch22\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)がfalseの時</span>\n  false-branch23\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; (+ counter 1)を計算するためにcontinue, proc, envを退避</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; (+ counter 1)の計算開始</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch31<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n  compiled-branch32\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call33<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (+ counter 1)を実際に計算</span>\n  primitive-branch31\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call33\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>     <span class=\"synComment\">;arglに今計算した値をリストにして代入</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;大本の環境の復帰</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;(+ counter 1)の結果のリストを退避</span>\n  <span class=\"synComment\">;; (* counter product)の計算開始</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch28<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n  compiled-branch29\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call30<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (* counter product)を実際に計算</span>\n  primitive-branch28\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call30\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;(+ counter 1)の復帰</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;arglに((* counter product) (+ counter 1))を代入</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;iterを復帰</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;呼び出し元に返るcontinueを復元</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch34<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ジャンプしない</span>\n  compiled-branch35\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;entry20へのラベルをvalに代入</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch34\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call36\n  after-if24\n\n  <span class=\"synComment\">;; entry18からジャンプ</span>\n  after-lambda21\n  <span class=\"synComment\">;; iterを(compiled-procedure entry20 env)と定義．</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; ここから(iter 1 1)の処理．</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; arglは(1)になる</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl =&gt; (1 1)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;=&gt;false</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch37<span class=\"synSpecial\">))</span>\n\n  compiled-branch38\n  <span class=\"synComment\">;; valにiterに対応付けられてるラベルを代入する</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; entry20へgoto</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  primitive-branch37\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call39\n  after-lambda19\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>反復的階乗計算では次の繰り返しに行く前に引数の計算が行われ，環境や継続はすべて大本の状態に復元してから次の繰り返しに向かう．<br/>\n前の問題で見たように<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算ではprocとenvを退避させ，さらに戻ってくる場所をcontinueによって保持し続けないといけない．<br/>\nそのために繰り返しが増えるほどにスタックが深くなっていく．</p>\n\n"},"__N_SSG":true}