{"pageProps":{"title":"SICP 問題 5.37","published":"2016/02/07","tags":["scheme","SICP"],"content":"<p>preservingを修正して常にsaveとrestoreをさせ，修正前と後を比較する．</p>\n<p>修正前</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;first-regが</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>needs-register? seq2 first-reg<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq2に必要なレジスタで</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>modifies-register? seq1 first-reg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;seq1が変更するレジスタなら</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>preserving\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">              <span class=\"synComment\">;; needs ここでsaveするのでfirst-regが必要になるのでlist-union</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synComment\">;; modify saveしてのseq2の前にrestoreするのでseq2から見ればfirst-reg変更無し</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">              <span class=\"synComment\">;; statements 条件を満たすfirst-regの場合はseq1をsaveとrestoreで挟む</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">             seq2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span> seq1 seq2<span class=\"synSpecial\">)))))</span>\n</span></code></pre>\n<p>必要ないsaveやrestoreは一切されない，賢いpreserving．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (compile\n</span><span class=\"code-line\">       '(define (f a b)\n</span><span class=\"code-line\">          (+ a b))\n</span><span class=\"code-line\">       'val 'next)\n</span><span class=\"code-line\">((env)\n</span><span class=\"code-line\"> (val)\n</span><span class=\"code-line\"> ((assign val (op make-compiled-procedure) (label entry34) (reg env))\n</span><span class=\"code-line\">  (goto (label after-lambda35))\n</span><span class=\"code-line\">  entry34\n</span><span class=\"code-line\">  (assign env (op compiled-procedure-env) (reg proc))\n</span><span class=\"code-line\">  (assign env (op extend-environment) (const (a b)) (reg argl) (reg env))\n</span><span class=\"code-line\">  (assign proc (op lookup-variable-value) (const +) (reg env))\n</span><span class=\"code-line\">  (assign val (op lookup-variable-value) (const a) (reg env))\n</span><span class=\"code-line\">  (assign argl (op list) (reg val))\n</span><span class=\"code-line\">  (assign val (op lookup-variable-value) (const b) (reg env))\n</span><span class=\"code-line\">  (assign val (op list) (reg val))\n</span><span class=\"code-line\">  (assign argl (op append) (reg argl) (reg val))\n</span><span class=\"code-line\">  (test (op primitive-procedure?) (reg proc))\n</span><span class=\"code-line\">  (branch (label primitive-branch36))\n</span><span class=\"code-line\">  compiled-branch37\n</span><span class=\"code-line\">  (assign val (op compiled-procedure-entry) (reg proc))\n</span><span class=\"code-line\">  (goto (reg val))\n</span><span class=\"code-line\">  primitive-branch36\n</span><span class=\"code-line\">  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))\n</span><span class=\"code-line\">  (goto (reg continue))\n</span><span class=\"code-line\">  after-call38\n</span><span class=\"code-line\">  after-lambda35\n</span><span class=\"code-line\">  (perform (op define-variable!) (const f) (reg val) (reg env))\n</span><span class=\"code-line\">  (assign val (const ok))\n</span><span class=\"code-line\">  ))</span></code></pre>\n<p>修正後</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>preserving\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-instruction-sequence\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                      <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">         seq2<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>compile\n</span><span class=\"code-line\">       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f a b<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>+ a b<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">((</span>continue env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;まずcontinueを必要とするようになっている．</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">((</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでsave continueするから</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでさらにsave continueしている．</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry41<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;ここで復帰．</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda42<span class=\"synSpecial\">))</span>         <span class=\"synComment\">;ここまでで無駄なsave 3. 無駄なrestore 1</span>\n</span><span class=\"code-line\">  entry41\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでまたsave continue</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;env</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;continue</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save p</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;save e</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save a</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore a</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore p</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch43<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  compiled-branch44\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  primitive-branch43\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call45\n</span><span class=\"code-line\">  after-lambda42\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e 最初のenv</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;最初のcontinue</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">))</span>\n</span></code></pre>","slug":"SICP 問題 5.37","rawContent":"\n<p>preservingを修正して常にsaveとrestoreをさせ，修正前と後を比較する．</p>\n\n<p>修正前</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;first-regが</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>needs-register? seq2 first-reg<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq2に必要なレジスタで</span>\n                 <span class=\"synSpecial\">(</span>modifies-register? seq1 first-reg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;seq1が変更するレジスタなら</span>\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>make-instruction-sequence\n              <span class=\"synComment\">;; needs ここでsaveするのでfirst-regが必要になるのでlist-union</span>\n              <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; modify saveしてのseq2の前にrestoreするのでseq2から見ればfirst-reg変更無し</span>\n              <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; statements 条件を満たすfirst-regの場合はseq1をsaveとrestoreで挟む</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n             seq2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span> seq1 seq2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>必要ないsaveやrestoreは一切されない，賢いpreserving．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (compile\n       &#39;(define (f a b)\n          (+ a b))\n       &#39;val &#39;next)\n((env)\n (val)\n ((assign val (op make-compiled-procedure) (label entry34) (reg env))\n  (goto (label after-lambda35))\n  entry34\n  (assign env (op compiled-procedure-env) (reg proc))\n  (assign env (op extend-environment) (const (a b)) (reg argl) (reg env))\n  (assign proc (op lookup-variable-value) (const +) (reg env))\n  (assign val (op lookup-variable-value) (const a) (reg env))\n  (assign argl (op list) (reg val))\n  (assign val (op lookup-variable-value) (const b) (reg env))\n  (assign val (op list) (reg val))\n  (assign argl (op append) (reg argl) (reg val))\n  (test (op primitive-procedure?) (reg proc))\n  (branch (label primitive-branch36))\n  compiled-branch37\n  (assign val (op compiled-procedure-entry) (reg proc))\n  (goto (reg val))\n  primitive-branch36\n  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))\n  (goto (reg continue))\n  after-call38\n  after-lambda35\n  (perform (op define-variable!) (const f) (reg val) (reg env))\n  (assign val (const ok))\n  ))</pre>\n\n\n<p>修正後</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n         seq2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f a b<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>+ a b<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>continue env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;まずcontinueを必要とするようになっている．</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでsave continueするから</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでさらにsave continueしている．</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry41<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;ここで復帰．</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda42<span class=\"synSpecial\">))</span>         <span class=\"synComment\">;ここまでで無駄なsave 3. 無駄なrestore 1</span>\n  entry41\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでまたsave continue</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;env</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;continue</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save p</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;save e</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save a</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore a</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore p</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch43<span class=\"synSpecial\">))</span>\n  compiled-branch44\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch43\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call45\n  after-lambda42\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e 最初のenv</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;最初のcontinue</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n"},"__N_SSG":true}