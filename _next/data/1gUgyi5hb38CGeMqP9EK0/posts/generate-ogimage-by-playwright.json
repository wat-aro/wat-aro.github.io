{"pageProps":{"post":{"title":"Playwright で OGP 画像を生成する","published":"2022/05/24","tags":["Next.js","TypeScript"],"content":"\nブログ記事のインポートをしたかったはずなのに json parser を作る yak shaving が楽しい。  \n次は Scheme のインタプリタを作りたくなってきた。危ない。\n\nさて、表題のとおりブログの OGP 画像を [Playwright](https://github.com/microsoft/playwright) で生成するようにした。  \nこのサイトは [Next.js](https://nextjs.org/) で作って、[GitHub Pages](https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages) でホスティングしている。  \nソースコードは[ここ](https://github.com/wat-aro/wat-aro.github.io)にある。\n\nブログ記事のタイトルと slug から OGP 画像を生成している。\n\n```ts\nimport { chromium } from 'playwright';\nimport { getHtml } from './getHtml';\n\ntype Params = {\n  title: string;\n  slug: string;\n};\n\nexport const takeScreenshot = async ({ title, slug }: Params) => {\n  const browser = await chromium.launch();\n  const context = await browser.newContext({\n    viewport: { width: 1200, height: 630 },\n  });\n  const page = await context.newPage();\n  const html = getHtml({ title });\n  await page.setContent(html, { waitUntil: 'load' });\n  await page.screenshot({\n    path: `public/og-images/${slug}.png`,\n    fullPage: true,\n  });\n  await browser.close();\n};\n```\n\n`await page.setContent(html, { waitUntil: 'load' });` の `load` を指定するのが味噌。  \nまた、`setContent` に渡す html 内で画像を使う場合は[データ URL](https://developer.mozilla.org/ja/docs/Web/HTTP/Basics_of_HTTP/Data_URLs) に base64 エンコードされた画像を渡す必要がある。  \n`setContent` には文字列を渡しているだけなためファイルパスでは Playwright は画像を特定できない。  \n後は html と css を書いたら完成。  \nこれくらいの用途だと Playwright でも Puppeteer でも変わらないね。\n\nまだまだサイトに実装しないといけないことが盛り沢山なのでがんばるぞい\n","slug":"generate-ogimage-by-playwright"},"content":"<p>ブログ記事のインポートをしたかったはずなのに json parser を作る yak shaving が楽しい。<br>\n次は Scheme のインタプリタを作りたくなってきた。危ない。</p>\n<p>さて、表題のとおりブログの OGP 画像を <a href=\"https://github.com/microsoft/playwright\">Playwright</a> で生成するようにした。<br>\nこのサイトは <a href=\"https://nextjs.org/\">Next.js</a> で作って、<a href=\"https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages\">GitHub Pages</a> でホスティングしている。<br>\nソースコードは<a href=\"https://github.com/wat-aro/wat-aro.github.io\">ここ</a>にある。</p>\n<p>ブログ記事のタイトルと slug から OGP 画像を生成している。</p>\n<pre class=\"language-ts\"><code class=\"language-ts code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chromium <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'playwright'</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getHtml <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./getHtml'</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Params</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  slug<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">takeScreenshot</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> slug <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Params<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chromium<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    viewport<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">630</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> waitUntil<span class=\"token operator\">:</span> <span class=\"token string\">'load'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">public/og-images/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.png</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    fullPage<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p><code>await page.setContent(html, { waitUntil: 'load' });</code> の <code>load</code> を指定するのが味噌。<br>\nまた、<code>setContent</code> に渡す html 内で画像を使う場合は<a href=\"https://developer.mozilla.org/ja/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\">データ URL</a> に base64 エンコードされた画像を渡す必要がある。<br>\n<code>setContent</code> には文字列を渡しているだけなためファイルパスでは Playwright は画像を特定できない。<br>\n後は html と css を書いたら完成。<br>\nこれくらいの用途だと Playwright でも Puppeteer でも変わらないね。</p>\n<p>まだまだサイトに実装しないといけないことが盛り沢山なのでがんばるぞい</p>"},"__N_SSG":true}