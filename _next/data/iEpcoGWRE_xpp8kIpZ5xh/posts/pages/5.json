{"pageProps":{"posts":[{"data":{"title":"SICP 問題 5.20","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>で作られたリスト構造の箱とポインタ表記，メモリーべ宇久田表現をかけ．<br/>\nfreeポインタは最初p1にあるとする．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160131170448\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160131/20160131170448.jpg\" alt=\"f:id:wat-aro:20160131170448j:image\" title=\"f:id:wat-aro:20160131170448j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span>\n最後freeポインタはp4を指している．<br/>\np1がxを，p2がyを表している．</p>\n\n","slug":"SICP 問題 5.20"},{"data":{"title":"SICP 問題 5.19","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n<p>ラベルから何番目の命令の直前に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8\">ブレークポイント</a>を入れられるようにする．<br/>\n実装した手続きのテストはREPLで試したが，テストの記述は省略．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-breakpoint machine label n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>set-breakpoint<span class=\"synSpecial\">)</span> label n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>proceed-machine machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>proceed<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-breakpoint machine label n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>cancel-breakpoint<span class=\"synSpecial\">)</span> label n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-all-breakpoints machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>cancel-all-breakpoints<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tracing-label <span class=\"synSpecial\">'</span>global<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>breakpoint <span class=\"synSpecial\">'())</span>                <span class=\"synComment\">;連想リストのリスト</span>\n        <span class=\"synSpecial\">(</span>label-number <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span>check-breakpoint breakpoint<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">&quot;break! ~s: ~s&quot;</span>\n                                                       tracing-label label-number<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadaar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> label-number<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>proceed<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdaar</span> insts<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> label-number<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n         <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-breakpoint label n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remove</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label n<span class=\"synSpecial\">)</span> breakpoint<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remove</span> x lis<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Cannot find in breakpoint&quot;</span> x<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remove</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-all-breakpoints<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> breakpoint <span class=\"synSpecial\">'()))</span>\n      <span class=\"synComment\">;; breakpointを引数に取り，再帰で一致するものがないか調べる．</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>check-breakpoint breakpoint<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> breakpoint<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> breakpoint<span class=\"synSpecial\">)</span> tracing-label<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> breakpoint<span class=\"synSpecial\">)</span> label-number<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>check-breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> breakpoint<span class=\"synSpecial\">)))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>check-breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> breakpoint<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-breakpoint label n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label n<span class=\"synSpecial\">)</span> breakpoint<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> tracing-label<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set-breakpoint<span class=\"synSpecial\">)</span> set-breakpoint<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>proceed<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proceed<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>cancel-breakpoint<span class=\"synSpecial\">)</span> cancel-breakpoint<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>cancel-all-breakpoints<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>cancel-all-breakpoints<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.19"},{"data":{"title":"SICP 問題 5.18","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>の値をトレース出来るようにする</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; registerがtraceを持ち，trace-onがメッセージパッシングされたらトレースする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>contents <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unssaigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>contents value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>trace contents value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> contents value<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> trace <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>contents value<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;register: ~6s   oldv-value: ~s new-value: ~s\\n&quot;</span>\n                                   name contents value<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> trace <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>contents value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- REGISTER&quot;</span> message<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.18"},{"data":{"title":"SICP 問題 5.17","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>トレースログにラベルネームをつける．<br/>\n　<br/>\nextract-labelsでlabelを見つけた時に('label labe-name)の形でinsts, labels両方に登録する．<br/>\nmake-new-machineでtracing-labelを作り，そこに現在のラベルを登録する．<br/>\n<a href=\"#f-c0dd7cf5\" name=\"fn-c0dd7cf5\" title=\"'label label-name\">*1</a>の実行形式はそのまま(advanced-pc pc)でpcをすすめるだけ．<br/>\n後はexecuteを調整する</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>error\n                    <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span>\n                    label-name<span class=\"synSpecial\">)</span>\n                   <span class=\"synComment\">;; ここでlabelは('label . next-inst)の形でinstsに登録</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>label next-inst<span class=\"synSpecial\">))</span> insts<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span>receive insts\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                               labels<span class=\"synSpecial\">))))</span>\n               <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                              insts<span class=\"synSpecial\">)</span>\n                   labels<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tracing-label <span class=\"synSpecial\">'</span>global<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdaar</span> insts<span class=\"synSpecial\">)))</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> tracing-label<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine\n                                  pc flag stack ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>label<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>fib-machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\ntrace-on\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)(</span>fib-done<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\ndone\n</pre>\n\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-c0dd7cf5\" name=\"f-c0dd7cf5\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">'label label-name</span></p>\n</div>\n","slug":"SICP 問題 5.17"},{"data":{"title":"SICP 問題 5.16","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>命令トレースを出来るようにする．<br/>\nexecuteがtraceフラグを引数に取り，trace-onなら命令を印字し，trace-offなら#fを返す．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synComment\">;; tracing-flagを引数に取るようにする．</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">'</span>done\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;trace-onならここで命令を印字．offなら#fを返す.</span>\n                <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>fact-machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\ntrace-on\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\ndone\n</pre>\n\n\n","slug":"SICP 問題 5.16"},{"data":{"title":"SICP 問題 5.15","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>命令数カウンタを追加する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>    <span class=\"synComment\">;counterの追加</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">'</span>done\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; ここでインクリメント</span>\n                <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span> <span class=\"synComment\">;counterの取得</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span> <span class=\"synComment\">;counterの初期化</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3628800</span>\ngosh&gt; <span class=\"synSpecial\">(</span>fact-machine <span class=\"synSpecial\">'</span>counter<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">104</span>\n</pre>\n\n\n","slug":"SICP 問題 5.15"},{"data":{"title":"SICP 問題 5.14","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fact-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>continue n val<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print print<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n     fact-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n     after-fact\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     base-case\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fact-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>fact-machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-register-contents! fact-machine <span class=\"synSpecial\">'</span>n n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>start fact-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;factorial: ~2d = ~10d&quot;</span> n <span class=\"synSpecial\">(</span>get-register-contents fact-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">((</span>fact-machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>fact k<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>fact k<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>display-fact <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">1</span> <span class=\"synIdentifier\">=</span>          <span class=\"synConstant\">1</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">2</span> <span class=\"synIdentifier\">=</span>          <span class=\"synConstant\">2</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">3</span> <span class=\"synIdentifier\">=</span>          <span class=\"synConstant\">6</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">4</span> <span class=\"synIdentifier\">=</span>         <span class=\"synConstant\">24</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">5</span> <span class=\"synIdentifier\">=</span>        <span class=\"synConstant\">120</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">6</span> <span class=\"synIdentifier\">=</span>        <span class=\"synConstant\">720</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">7</span> <span class=\"synIdentifier\">=</span>       <span class=\"synConstant\">5040</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">8</span> <span class=\"synIdentifier\">=</span>      <span class=\"synConstant\">40320</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">9</span> <span class=\"synIdentifier\">=</span>     <span class=\"synConstant\">362880</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>\nfactorial: <span class=\"synConstant\">10</span> <span class=\"synIdentifier\">=</span>    <span class=\"synConstant\">3628800</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;undef&gt;</span>\n</pre>\n\n\n<p>total-depth, maximum-depthともに2(n-1)回になる．</p>\n\n","slug":"SICP 問題 5.14"},{"data":{"title":"SICP 問題 5.13","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>make-machineで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリストを登録するのではなく，  <br/>\n命令の中で初めてassignされるときに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>を登録するように変更する．<br/>\nmake-machineとmake-new-machineの変更だけですむ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; register-namesを削除</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-machine ops controller-text<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> ops<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddddr</span> insts<span class=\"synSpecial\">)))</span>\n      machine<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; lookupで見つからなければallocateで登録．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-types <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-label-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-saved-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-register-sources <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synComment\">;; 登録した後にそのレジスタを返す</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name reg<span class=\"synSpecial\">)</span>\n                               register-table<span class=\"synSpecial\">))</span>\n                   reg<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;; 見つからなければ新たに登録する．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-types types<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>regs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-label-registers regs<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>saved<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-saved-registers saved<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-register-sources sources<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">)</span> the-instruction-types<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">)</span> the-label-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">)</span> the-saved-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">)</span> the-register-sources<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synComment\">;; '(n val continue)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6765</span>\n</pre>\n\n\n","slug":"SICP 問題 5.13"},{"data":{"title":"SICP 問題 5.12","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>シミュレータのメッセージパッシングインターフェースを拡張し，以下の情報にアクセスできるようにする．<br/>\n・命令の型で，格納されたすべての異なる命令のリスト<br/>\n・エントリポイントの保持に使った<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリスト<br/>\n・save, restoreされる異なる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリスト<br/>\n・各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>に対して，異なる代入元のリスト<br/>\n　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%E9\">アセンブラ</a>を拡張しろってことなのでextra-labelsの継続渡しの部分で上記４つのリストの雛形を作り，<br/>\nupdate-insts!で重複を削除し，ソートしてinstsと一緒に返すようにした．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract-labels controller-text\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>update-insts! insts labels machine type-insts\n                                   label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span> label-name<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>receive\n                       insts\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                             labels<span class=\"synSpecial\">)</span>\n                     type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>receive\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                         insts<span class=\"synSpecial\">)</span>\n                   labels\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> next-inst type-insts<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>add-label-reg next-inst label-regs<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>add-saved-reg next-inst saved-regs<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>add-reg-sources next-inst reg-sources<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-label-reg next-inst label-regs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>tagged-list? next-inst <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> next-inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>reg<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadadr</span> next-inst<span class=\"synSpecial\">)</span> label-regs<span class=\"synSpecial\">)</span>\n      label-regs<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-saved-reg next-inst saved-regs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>tagged-list? next-inst <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> next-inst<span class=\"synSpecial\">)</span> saved-regs<span class=\"synSpecial\">)</span>\n      saved-regs<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-reg-sources next-inst reg-sources<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>tagged-list? next-inst <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> next-inst<span class=\"synSpecial\">)</span> reg-sources<span class=\"synSpecial\">)</span>\n      reg-sources<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tag x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; 重複は既に排除されている．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sort-reg reg-sources<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>helper first items<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> first<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>tag first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> first<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>helper first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>lst reg-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> result<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> lst<span class=\"synSpecial\">))))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>helper <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine pc flag ops<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> insts\n          <span class=\"synSpecial\">(</span>sort-reg <span class=\"synSpecial\">(</span>delete-duplicates type-insts<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>delete-duplicates label-regs<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>delete-duplicates  saved-regs<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>sort-reg <span class=\"synSpecial\">(</span>delete-duplicates reg-sources<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-machine register-names ops controller-text<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>register-name<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> register-name<span class=\"synSpecial\">))</span>\n              register-names<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> ops<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddddr</span> insts<span class=\"synSpecial\">)))</span>\n      machine<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-types <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-label-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-saved-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-register-sources <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                          register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-types types<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>regs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-label-registers regs<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>saved<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-saved-registers saved<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-register-sources sources<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">)</span> the-instruction-types<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">)</span> the-label-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">)</span> the-saved-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">)</span> the-register-sources<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-types machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-label-registers machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-saved-registers machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-register-sources machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 整形した</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-types fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>assign <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">((</span>label immediate-answer<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>save <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">((</span>label fib-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">((</span>reg continue<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>restore <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)))</span>\ngosh&gt; fib-machine\ngosh&gt; <span class=\"synSpecial\">(</span>get-types fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>assign <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">((</span>label immediate-answer<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>save <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">((</span>label fib-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">((</span>reg continue<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>restore <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-label-registers fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-saved-registers fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>continue n val<span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-sources fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>continue <span class=\"synSpecial\">((</span>label fib-done<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">((</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">((</span>label afterfib-n-2<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>reg val<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>reg n<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.12"},{"data":{"title":"SICP 問題 5.11-c","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n<p>各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>がスタックを持つようにしてpopやpushはそのスタックを使用するように修正する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; make-registerがstackを持つ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>contents <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassaigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;;(make-stack)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> contents value<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">((</span>dispatch <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span> val<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">((</span>stack <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- REGISTER&quot;</span> message<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; make-new-machineはstackを持たなくなった．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops                    <span class=\"synComment\">;すべてのregisterに対してstackを初期化する手続きを入れる</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synComment\">;; registerをregiter-tableに登録する．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                          register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; registerの値をregister-tableから見つける．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; pc内に保存された手続きを実行する</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceをpcに保存してexecute</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceにseqを登録</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> <span class=\"synComment\">;新しいopをthe-opsに追加</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine <span class=\"synComment\">;引数からstackを削除</span>\n                                  pc flag ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;引数からstackを削除</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;引数からstackを削除</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n         pc flag ops<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test.\n5.11-bと同じくfib-machine2で動けばよく，fib-machineでは正しい答えが返らない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine2\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine2 <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine2<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine2 <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: Empty stack -- POP\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">1770</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">1906</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">2</span>  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n        At line <span class=\"synConstant\">1810</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">3</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-c"},{"data":{"title":"SICP 問題 5.11-b","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; stackに退避するときにレジスタを指定しておき，そのレジスタにresotre出来るように修正する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>pop stack<span class=\"synSpecial\">)))</span>\n        <span class=\"synComment\">;; valのcarにregisterが入っているので呼び出し側のregと比較し#fならエラーを返す</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> val<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>set-contents! reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> val<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;RESTORE require the same register as save, but&quot;</span> reg<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>push stack <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> reg <span class=\"synSpecial\">(</span>get-contents reg<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;regも一緒にconsする．</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>ex5.11-aで作ったfib-machineでテスト．これは失敗してほしい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: operation <span class=\"synIdentifier\">-</span> is <span class=\"synIdentifier\">not</span> defined between <span class=\"synSpecial\">(</span><span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-register dispatch<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">((</span>restore n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-restore make-restore<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>save val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-save make-save<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-goto make-goto<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>restore n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-restore make-restore<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>restore continue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-restore make-restore<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-goto make-goto<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-goto make-goto<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">))</span> <span class=\"synStatement\">and</span> <span class=\"synConstant\">2</span>\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span>value-proc<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">341</span> of <span class=\"synConstant\">&quot;/Users//work/scheme/SICP/5.2.scm&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span>set-contents! target <span class=\"synSpecial\">(</span>value-proc<span class=\"synSpecial\">))</span>\n        At line <span class=\"synConstant\">341</span> of <span class=\"synConstant\">&quot;/Users//work/scheme/SICP/5.2.scm&quot;</span>\n  <span class=\"synConstant\">2</span>  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n        At line <span class=\"synConstant\">444</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">3</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n<p>ex5.06で作ったfib-machine2.これは成功してほしい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine2\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>               <span class=\"synComment\">;ここを消して</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;ここで(restore n)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine2 <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine2<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine2 <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-b"},{"data":{"title":"SICP 問題 5.11-a","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n<p>図5.12のfibonacci計算から1命令除去する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; ex5.06で変更したこれを使う．</span>\n<span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n  fib-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-2\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                <span class=\"synComment\">;ここを消して</span>\n    <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここで(restore n)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val\n            <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  immediate-answer\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n    fib-done<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 変更後</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">8</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-a"},{"data":{"title":"SICP 問題 5.10","published":"2016/01/27","tags":["scheme","SICP"]},"content":"\n<p>新しく構文を追加する．<br/>\n簡単にincrementとdecrementで．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine\n                                  pc flag stack ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>increment<span class=\"synSpecial\">)</span>    <span class=\"synComment\">;increment</span>\n         <span class=\"synSpecial\">(</span>make-increment inst machine pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>decrement<span class=\"synSpecial\">)</span>    <span class=\"synComment\">;decrement</span>\n         <span class=\"synSpecial\">(</span>make-decrement inst machine pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 選択子</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>increment-reg-name name<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> name<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decrement-reg-name name<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> name<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-increment inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">(</span>increment-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>value <span class=\"synSpecial\">(</span>get-contents target<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> value <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;INCREMENT require number, but&quot;</span> value<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-decrement inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">(</span>decrement-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>value <span class=\"synSpecial\">(</span>get-contents target<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> value <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;DECREMENT require number, but&quot;</span> value<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> add-two\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">'(</span>controller\n     main\n     <span class=\"synSpecial\">(</span>increment a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>increment a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>increment a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>decrement a<span class=\"synSpecial\">)</span>\n     done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! add-two <span class=\"synSpecial\">'</span>a <span class=\"synConstant\">200</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start add-two<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents add-two <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">202</span>\n</pre>\n\n\n","slug":"SICP 問題 5.10"},{"data":{"title":"SICP 問題 5.09","published":"2016/01/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 演算はレジスタと定数にだけ使えるという条件を強要する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-operation-exp <span class=\"synIdentifier\">exp</span> machine labels operations<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>op <span class=\"synSpecial\">(</span>lookup-prim <span class=\"synSpecial\">(</span>operation-exp-op <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> operations<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>aprocs\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>e<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>label-exp? e<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Operation can be used only with registers and constants -- ASSEMBLE&quot;</span> e<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>make-primitive-exp e machine labels<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>operation-exp-operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">))</span> aprocs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.09"},{"data":{"title":"SICP 問題 5.08","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>start\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label here<span class=\"synSpecial\">))</span>\nhere\n <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\nhere\n <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\nthere\n</pre>\n\n\n<p>この時thereに達した時のaの値は何かという問題．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n                          <span class=\"synComment\">;; symbolであればlabel</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n                              <span class=\"synComment\">;; (receive insts labels)なのでsymbolならlabelsにcons</span>\n                              <span class=\"synComment\">;; falseならinstsにcons</span>\n                              <span class=\"synSpecial\">(</span>receive insts\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                                        labels<span class=\"synSpecial\">))</span>\n                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                                             insts<span class=\"synSpecial\">)</span>\n                                  labels<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n         pc flag stack ps<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-label-entry label-name insts<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label-name insts<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-label labels label-name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> label-name labels<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> val<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Undefined label -- ASSEMBLE&quot;</span> label-name<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>からlabelsは順番を保持してlabelsに登録されていく．\nlookup-labelではassocが使われているので先頭に近いものが先に選ばれる．<br/>\nそのため(goto (label here))で向かうのは最初のhere.\naには3が入っている．<br/>\n　<br/>\nこれを同じラベルを違う場所に登録しようとするとエラーとなるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n                          <span class=\"synComment\">;; symbolであればlabel</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;labelsに既に登録されていればここでtrueが返る</span>\n                                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span> label-name<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>receive insts\n                                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                                            labels<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                                             insts<span class=\"synSpecial\">)</span>\n                                  labels<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.08"},{"data":{"title":"SICP 問題 5.07","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; シミュレータを使い問題5.04で設計した計算機をテストせよ</span>\n\n<span class=\"synComment\">;; 再帰的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorial-recur-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>b n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'((</span>assign continue <span class=\"synSpecial\">(</span>label expt-done<span class=\"synSpecial\">))</span>\n     expt-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-expt<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\n     after-expt\n       <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     base-case\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     expt-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-recur-machine <span class=\"synSpecial\">'</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-recur-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start factorial-recur-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>get-register-contents factorial-recur-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synComment\">;=&gt; 1024が返ってくるはず</span>\n\n\n<span class=\"synComment\">;; 反復的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorial-iter-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>b n product<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'((</span>assign product <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     expt-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n1 <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign p1 <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg n1<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assigin product <span class=\"synSpecial\">(</span>reg p1<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\n     expt-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-iter-machine <span class=\"synSpecial\">'</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-iter-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start factorial-iter-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>get-register-contents factorial-iter-machine <span class=\"synSpecial\">'</span>product<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.07"},{"data":{"title":"SICP 問題 5.06","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n<p>Fibonacci計算機の余分なsaveとrestoreを取り除く</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                  <span class=\"synComment\">;ここでcontinueをrestoreしているのに</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;ここでそのままcontinueをsaveして</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;ここでcontinueを上書きしている．</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>余分なところを削除すると</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>こうなる．\n全文は以下の通り．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n  fib-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-2\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val\n            <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  immediate-answer\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n    fib-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.06"},{"data":{"title":"SICP 問題 5.05","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n<p>階乗とFibonacci計算機を机上シミュレート.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的な階乗計算を机上シミュレートする．</span>\n<span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n  fact-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; nと continue を退避し再帰呼び出しを設定する．</span>\n    <span class=\"synComment\">;; 再帰呼び出しから戻るとき after-fact から</span>\n    <span class=\"synComment\">;; 計算が続行するように continue を設定</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n  after-fact\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  base-case\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  fact-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (assign (reg n) (const 3))を既に実行済みであると仮定する．</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>     <span class=\"synComment\">;continue &lt;= fact-done</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(= 3 1) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;fact-done =&gt; stack =&gt; fact-done</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;3 =&gt; stack =&gt; 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 2</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;continue &lt;= after-fact</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(= 2 1) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;after-fact =&gt; stack =&gt; after-fact, 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;2 =&gt; stack =&gt; 2, after-fact, 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;continue &lt;= after-fact</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(= 1 1) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>                  <span class=\"synComment\">;val &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;goto after-fact</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 2 | stack =&gt; after-fact, 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= after-fact | stack =&gt; 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;val &lt;= 2 &lt;= (* 2 1)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;goto after-fact</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 3 | stack fact-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= fact-done | stack =&gt; null</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;n &lt;= 6 &lt;= (* 2 3)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;goto fact-done</span>\n\nfact-done\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 次はfibonacci計算を机上シミュレートする．</span>\n<span class=\"synComment\">;; Fibonacci 数を計算する計算機の制御器</span>\n<span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n  fib-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; Fib(n-1)を計算するよう設定</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;n の昔の値を退避</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;n を n-1 に変える</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>             <span class=\"synComment\">;再帰呼び出しを実行</span>\n  afterfib-n-1                          <span class=\"synComment\">;戻った時 Fib(n-1) は val にある</span>\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synComment\">;; Fib(n-2)を計算するよう設定</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                          <span class=\"synComment\">;Fib(n-1) を退避</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-2                          <span class=\"synComment\">;戻った時 Fib(n-2) の値は val にある</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                <span class=\"synComment\">;n には Fib(n-2) がある</span>\n    <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;val には Fib(n-1) がある</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val                         <span class=\"synComment\">;Fib(n-1) + Fib(n-2)</span>\n            <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                 <span class=\"synComment\">;呼び出し側に戻る．答えは val にある</span>\n  immediate-answer\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                <span class=\"synComment\">;基底の場合: Fib(n)=n</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n    fib-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 階乗と同じく(assign n (const 3))を実行済みと仮定する</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;continue &lt;= fib-done</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 3 2) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;fib-done =&gt; stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-1</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;3 =&gt; stack =&gt; 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 2</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 2 2) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;afterfib-n-1 =&gt; stack =&gt; afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-1</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;2 =&gt; stack =&gt; 2, afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 1 2) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;val &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-1)</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 2 | stack =&gt; afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= afterfib-n-1 | stack =&gt; 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 0</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;afterfib-n-1 =&gt; stack =&gt;afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-2</span>\n\n<span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                              <span class=\"synComment\">;1 =&gt; stack =&gt; 1, afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 0 2) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;val &lt;= 0</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-2)</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;n &lt;= 0</span>\n\n<span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;val &lt;= 1 | stack =&gt; afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= afterfib-n-1 | stack =&gt; 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;val &lt;= 1 &lt;= (+ 1 0)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-1)</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 3 | stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= fib-done | stack =&gt; null</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 1 &lt;= (- 3 2)</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;fib-done =&gt; stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-2</span>\n\n<span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                              <span class=\"synComment\">;1 =&gt; stack =&gt; 1, fib-done</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 1 2) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>brach <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;val &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-2)</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;n &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;val &lt;= 1 | stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;val &lt;= 2 &lt;= (+ 1 1)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto fib-done)</span>\n\nfib-done\n</pre>\n\n\n","slug":"SICP 問題 5.05"},{"data":{"title":"SICP 問題 5.04","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a 再帰的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>controller\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label expt-done<span class=\"synSpecial\">))</span>\n expt-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-expt<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\nafter-expt\n   <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\nbase-case\n   <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\nexpt-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160123002736\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160123/20160123002736.jpg\" alt=\"f:id:wat-aro:20160123002736j:image\" title=\"f:id:wat-aro:20160123002736j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p>　<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; b 反復的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expt-iter counter product<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>expt-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> product<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>expt-iter n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>contoroller\n   <span class=\"synSpecial\">(</span>assign product <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n expt-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign n1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign p1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg n1<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assigin product <span class=\"synSpecial\">(</span>reg p1<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\n expt-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160123002740\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160123/20160123002740.jpg\" alt=\"f:id:wat-aro:20160123002740j:image\" title=\"f:id:wat-aro:20160123002740j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 5.04"},{"data":{"title":"SICP 問題 5.03","published":"2016/01/22","tags":["scheme","SICP"]},"content":"\n<p>１章でやったNewton法で求めるsqrt手続き．<br/>\nこれをデータパス図で描き，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>計算機言語で定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>sqrt-iter <span class=\"synConstant\">1.0</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-iter guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n      guess\n      <span class=\"synSpecial\">(</span>sqrt-iter <span class=\"synSpecial\">(</span>improve guess x<span class=\"synSpecial\">)</span>\n                 x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>improve guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>average guess <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x guess<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>average x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>square guess<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ngood-enough?, improveを使った場合\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160122185657\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160122/20160122185657.jpg\" alt=\"f:id:wat-aro:20160122185657j:image\" title=\"f:id:wat-aro:20160122185657j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p>定義</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; good-enough?, improveを使った場合</span>\n<span class=\"synSpecial\">(</span>controller\n <span class=\"synIdentifier\">sqrt</span>\n   <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n test-b\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op good-enough?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label sqrt-done<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign t <span class=\"synSpecial\">(</span>op improve<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>reg t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label test-b<span class=\"synSpecial\">))</span>\n sqrt-done\n   <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op peinr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>　<br/>\ngood-enough?, improveを使わなかった場合\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160122185726\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160122/20160122185726.jpg\" alt=\"f:id:wat-aro:20160122185726j:image\" title=\"f:id:wat-aro:20160122185726j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span>\n　<br/>\n定義</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; good-enough?, improveを使わずに</span>\n<span class=\"synSpecial\">(</span>controller\n  <span class=\"synIdentifier\">sqrt</span>\n    <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n  good-enough?\n    <span class=\"synSpecial\">(</span>assign p <span class=\"synSpecial\">(</span>op square<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign diff <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign g <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">abs</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg diff<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg g<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label sqrt-done<span class=\"synSpecial\">))</span>\n  improve\n    <span class=\"synSpecial\">(</span>assign d <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign t <span class=\"synSpecial\">(</span>op average<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg d<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>reg t<span class=\"synSpecial\">))</span>\n  sqrt-done\n    <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.03"}],"currentPage":5,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}