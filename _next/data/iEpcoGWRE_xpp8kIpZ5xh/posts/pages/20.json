{"pageProps":{"posts":[{"data":{"title":"SICP 問題1.28","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>miller-rabin-test n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expmod base <span class=\"synIdentifier\">exp</span> m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>tmp <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>tmp2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span>square tmp<span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> tmp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 1でも(n-1)でもなく，かつ</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> tmp2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; nを法として１の自明でない平方根の時は０を返す</span>\n                 <span class=\"synConstant\">0</span>\n                 tmp2<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> base <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span> m<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-it a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>expmod a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>try-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>random-integer <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (miller-rabin-test 561)\n#f\ngosh&gt; (miller-rabin-test 1105)\n#t\ngosh&gt; (miller-rabin-test 1105)\n#f\ngosh&gt; (miller-rabin-test 1729)\n#f\ngosh&gt; (miller-rabin-test 2465)\n#f\ngosh&gt; (miller-rabin-test 2821)\n#f\ngosh&gt; (miller-rabin-test 6601)\n#f</pre>\n\n\n","slug":"SICP 問題1.28"},{"data":{"title":"SICP 問題1.27","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>carmichael-test n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-loop a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> a n<span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>expmod a n n<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>try-loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>try-loop <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (carmichael-test 561)\n#t\ngosh&gt; (prime? 561)\n#f\ngosh&gt; (carmichael-test 1105)\n#t\ngosh&gt; (prime? 1105)\n#f\ngosh&gt; (carmichael-test 1729)\n#t\ngosh&gt; (prime? 1729)\n#f\ngosh&gt; (carmichael-test 2465)\n#t\ngosh&gt; (prime? 2465)\n#f\ngosh&gt; (carmichael-test 2821)\n#t\ngosh&gt; (prime? 2821)\n#f\ngosh&gt; (carmichael-test 6601)\n#t\ngosh&gt; (prime? 6601)\n#f</pre>\n\n\n","slug":"SICP 問題1.27"},{"data":{"title":"SICP 問題1.26","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expmod base <span class=\"synIdentifier\">exp</span> m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                    m<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> base <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                         m<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>square を使わないことで * の部分で <code>(expomd base (/ exp 2) m)</code> が二回呼ばれているため．<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E0%BC%A1\">逐次</a>平方になっていない．</p>\n\n","slug":"SICP 問題1.26"},{"data":{"title":"SICP 問題1.25","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expmod b e m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> e <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> e<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>expmod b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> e <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                    m<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b <span class=\"synSpecial\">(</span>expmod b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> e <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                         m<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>new-expmod base <span class=\"synIdentifier\">exp</span> m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span>fast-expt base <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>time手続きを使って比較してみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (time (new-expmod 5 1000000 7))\n;(time (new-expmod 5 1000000 7))\n; real   5.010\n; user   5.000\n; sys    0.010\n2\ngosh&gt; (time (expmod 5 1000000 7))\n;(time (expmod 5 1000000 7))\n; real   0.000\n; user   0.000\n; sys    0.000\n2</pre>\n\n\n<p>expmodが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E0%BC%A1\">逐次</a>平方によって，その都度remainder手続きを適用することによって常に剰余を計算対象にしている．<br/>\nnew-expmodは5<sup>1000000</sup>を計算するところまでのステップ数はべきに対して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C2%D0%BF%F4\">対数</a>的に増加しているが，その後<code>(remainder 5^1000000 7)</code>の計算がO(n)となる．<br/>\n途中計算の手間が大きいため高速<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>テストと同じようには使えない．</p>\n\n","slug":"SICP 問題1.25"},{"data":{"title":"SICP 問題1.23","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">3</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-divisor n test-divisor<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>square test-divisor<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>divides? test-divisor n<span class=\"synSpecial\">)</span> test-divisor<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>find-divisor n <span class=\"synSpecial\">(</span>next test-divisor<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (search-for-primes 1000 1100)\n\n1009 *** 4\n1013 *** 4\n1019 *** 4\n1021 *** 3\n1031 *** 4\n1033 *** 3\n1039 *** 3\n1049 *** 3\n1051 *** 4\n1061 *** 4\n1063 *** 4\n1069 *** 4\n1087 *** 4\n1091 *** 4\n1093 *** 4\n1097 *** 4\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 10000 10100)\n\n10007 *** 12\n10009 *** 11\n10037 *** 11\n10039 *** 10\n10061 *** 11\n10067 *** 11\n10069 *** 11\n10079 *** 10\n10091 *** 11\n10093 *** 11\n10099 *** 10\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 100000 100100)\n\n100003 *** 35\n100019 *** 34\n100043 *** 33\n100049 *** 33\n100057 *** 34\n100069 *** 33\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 1000000 1000100)\n\n1000003 *** 160\n1000033 *** 104\n1000037 *** 104\n1000039 *** 104\n1000081 *** 105\n1000099 *** 105\n#&lt;undef&gt;</pre>\n\n\n<p>だいたい1.6倍になってる．ちょうど二倍にならないのは<code>next</code>で<code>if</code>を使っているためだと考えられる</p>\n\n","slug":"SICP 問題1.23"},{"data":{"title":"SICP 問題1.22","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>timed-prime-test n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>start-prime-test n <span class=\"synSpecial\">(</span>runtime<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-prime-test n start-time<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>prime? n<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>report-prime <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>runtime<span class=\"synSpecial\">)</span> start-time<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>report-prime elapsed-time<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; *** &quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> elapsed-time<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>runtime<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>use srfi-11<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>let-values <span class=\"synSpecial\">(((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>sys-gettimeofday<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a <span class=\"synConstant\">1000000</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>以上を使って指定範囲の連続する奇数について<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>性を調べる手続き手続きを書く．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>search-for-primes start end<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter start end<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> start end<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span>prime? start<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>timed-prime-test start<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> start<span class=\"synSpecial\">)</span> end<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> start<span class=\"synSpecial\">)</span> end<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> start<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>iter start end<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> start<span class=\"synSpecial\">)</span> end<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (search-for-primes 1000 1100)\n\n1009 *** 6\n1013 *** 6\n1019 *** 5\n1021 *** 5\n1031 *** 6\n1033 *** 6\n1039 *** 6\n1049 *** 6\n1051 *** 5\n1061 *** 6\n1063 *** 6\n1069 *** 5\n1087 *** 6\n1091 *** 6\n1093 *** 6\n1097 *** 6\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 10000 10100)\n\n10007 *** 28\n10009 *** 17\n10037 *** 17\n10039 *** 17\n10061 *** 17\n10067 *** 17\n10069 *** 17\n10079 *** 18\n10091 *** 17\n10093 *** 17\n10099 *** 18\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 100000 100100)\n\n100003 *** 85\n100019 *** 55\n100043 *** 55\n100049 *** 55\n100057 *** 54\n100069 *** 54\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 1000000 1000100)\n\n1000003 *** 195\n1000033 *** 172\n1000037 *** 172\n1000039 *** 172\n1000081 *** 176\n1000099 *** 176\n#&lt;undef&gt;</pre>\n\n\n<p>nが100倍になると処理時間は概ね10倍となっているので予想通りと言える．</p>\n\n","slug":"SICP 問題1.22"},{"data":{"title":"SICP 問題1.21","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>smallest-divisor n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>find-divisor n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-divisor n test-divisor<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>square test-divisor<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>divides? test-divisor n<span class=\"synSpecial\">)</span> test-divisor<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>find-divisor n <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> test-divisor <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>divides? a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> b a<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (smallest-divisor 199)\n199\ngosh&gt; (smallest-divisor 1999)\n1999\ngosh&gt;(smallest-divisor 19999)\n7</pre>\n\n\n","slug":"SICP 問題1.21"},{"data":{"title":"SICP 問題1.19","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151006/20151006041637.jpg\" alt=\"f:id:wat-aro:20151006041637j:plain\" title=\"f:id:wat-aro:20151006041637j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fib-iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib-iter a b p q count<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> count<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>fib-iter a\n                   b\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square q<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square q<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> p q<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>halve count<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>fib-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b q<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a q<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a p<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a q<span class=\"synSpecial\">))</span>\n                        p\n                        q\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.19"},{"data":{"title":"SICP 問題1.18","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C2%D0%BF%F4\">対数</a>的ステップ数の，二つの整数の乗算の反復的プロセスを生成する手続き</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-* a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fast-*-iter a b <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-*-iter a b sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> sum<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>fast-*-iter <span class=\"synSpecial\">(</span>double a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>halve b<span class=\"synSpecial\">)</span> sum<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>fast-*-iter a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a sum<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.18"},{"data":{"title":"SICP 問題1.17","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">0</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; 末尾再帰にしてみた</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>*iter a b <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>*iter a b sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      sum\n      <span class=\"synSpecial\">(</span>*iter a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a sum<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>double n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>halve n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; fast-exptのように</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-* n m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> m <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>double <span class=\"synSpecial\">(</span>fast-* n <span class=\"synSpecial\">(</span>halve m<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n <span class=\"synSpecial\">(</span>fast-* n <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> m <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.17"},{"data":{"title":"SICP 問題1.16","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n<p>反復的べき上プロセスを生成する手続き</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-expt b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fast-expt-iter b n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-expt-iter b count product<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> product<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> count<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>fast-expt-iter <span class=\"synSpecial\">(</span>square b<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> count <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                        product<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>fast-expt-iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b product<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.16"},{"data":{"title":"SICP 問題1.12","published":"2015/10/05","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%B9%A5%AB%A5%EB\">パスカル</a>の三角形のn行目のk番目を求める手続き<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pascals-triangle n k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n k<span class=\"synSpecial\">))</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>pascals-triangle <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>pascals-triangle <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> k<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.12"},{"data":{"title":"SICP 問題1.11","published":"2015/10/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的プロセス</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 反復的プロセス</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g n<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; iterでは3 ≦ nの時のみの処理．n1 はf(n-1),n2はf(n-2),n3はf(n-3)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n1 n2 n3 count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        n1\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> n2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> n3<span class=\"synSpecial\">))</span>\n              n1\n              n2\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;3≦nの時iter．n=1,2の時はn1,n2に渡してあるのでcountに渡す引数は(- n 2)</span>\n</pre>\n\n\n","slug":"SICP 問題1.11"},{"data":{"title":"SICP 問題1.9","published":"2015/10/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      b\n      <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>dec a<span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">))))</span>\n<span class=\"synComment\">;; 再帰的</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">6</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">7</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">9</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      b\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>dec a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>inc b<span class=\"synSpecial\">))))</span>\n<span class=\"synComment\">;; 反復的</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">9</span>\n</pre>\n\n\n","slug":"SICP 問題1.9"},{"data":{"title":"SICP 問題1.10","published":"2015/10/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>A x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> y <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> x <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> y<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> y <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>A <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>A x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> y <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>A <span class=\"synConstant\">1</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; gosh&gt; 1024</span>\n\n<span class=\"synSpecial\">(</span>A <span class=\"synConstant\">2</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; gosh&gt; 65536</span>\n\n<span class=\"synSpecial\">(</span>A <span class=\"synConstant\">3</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; gosh&gt; 65536</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>A <span class=\"synConstant\">0</span> n<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt; f(n) = 2n</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>A <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt; g(n) = 2^n</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>h n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>A <span class=\"synConstant\">2</span> n<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt; h(1) = 2</span>\n<span class=\"synComment\">;; =&gt; h(2) = 2^2</span>\n<span class=\"synComment\">;; =&gt; h(3) = 2^(2^2)</span>\n<span class=\"synComment\">;; =&gt; h(4) = 2^(2^(2^2))</span>\n<span class=\"synComment\">;; 2の2乗をn回繰り返したもの？</span>\n</pre>\n\n\n","slug":"SICP 問題1.10"},{"data":{"title":"SICP 問題1.8","published":"2015/10/03","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CB%A5%E5%A1%BC%A5%C8%A5%F3%CB%A1\">ニュートン法</a>で立方根を求める　<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cube-root-iter guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n      guess\n      <span class=\"synSpecial\">(</span>cube-root-iter <span class=\"synSpecial\">(</span>cube-improve guess x<span class=\"synSpecial\">)</span>\n                 x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cube-improve guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x\n           <span class=\"synSpecial\">(</span>square guess<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> guess<span class=\"synSpecial\">))</span>\n     <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synConstant\">1.0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> guess <span class=\"synSpecial\">(</span>cube-improve guess x<span class=\"synSpecial\">))))</span> <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cube-root x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cube-root-iter <span class=\"synConstant\">1.0</span> x<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.8"},{"data":{"title":"SICP 問題1.7","published":"2015/10/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-iter guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>new-if <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n      guess\n      <span class=\"synSpecial\">(</span>sqrt-iter <span class=\"synSpecial\">(</span>improve guess x<span class=\"synSpecial\">)</span>\n                 x<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を動かすと値が返ってこない．new-ifは通常の手続きであるので作用的順序の評価に従って引数がまず評価される．<br/>\nそのため(sqrt-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iter\">iter</a> (improve guess x) x)が評価され続けるループに入っている．</p>\n\n","slug":"SICP 問題1.7"},{"data":{"title":"SICP 問題1.5","published":"2015/10/03","tags":["scheme","SICP"]},"content":"\n<p>問題１．５</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>test x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">0</span>\n      y<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>を実行した時，作用的順序の評価を使う解釈系と正規順序の評価を使う解釈系それぞれでどういう仏舞を見るか説明せよ．</p>\n\n<p>作用的順序を使う解釈系ではまず(test 0 (p))を\n(if (= 0 0)\n    0\n    (p))\nと評価し，(= 0 0)が#tなのでthenが評価され0が返る．\n正規順序の評価を使う解釈系では\n(if (= 0 0)\n    0\n    (p))\nと評価するところまでは同じだが，この後基本的<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>だけになるまで評価を繰り返す．\nそのため(p)を評価し，その結果(p)が返り，それをまた評価しようとするので\n演算が終わらない．</p>\n\n","slug":"SICP 問題1.5"},{"data":{"title":"SICP 問題1.3","published":"2015/10/03","tags":["scheme"]},"content":"\n<p>1.3  三つの数を引数としてとり，大きい二つの数の事情の話を返す手続きを書け<br/>\n　<br/>\n答えはa<sup>2</sup> + b<sup>2</sup>, b<sup>2</sup> + c<sup>2</sup>, c<sup>2</sup> + a<sup>2</sup>の３通りがあるのでその分け方をもとに書く</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-of-squares-large2 a b c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> a c b<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>sum-of-squares b c<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> b a c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> b c a<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>sum-of-squares a c<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>sum-of-squares a c<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.3"},{"data":{"title":"プログラミングGauche読了","published":"2015/09/29","tags":["scheme","gauche"]},"content":"\n<p>ちょっと時間かかったけどプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>読み終わりました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>手習い程度の知識しかなかったので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>には便利な機能がたくさんあるなと思いました．<br/>\n特に<code>#?=</code>で<code>debug-print</code>が呼び出せるのはいいですね．<br/>\n　<br/>\n継続，マクロは難しかったです．<br/>\nパターンマッチに慣れてないのもあって，マクロがなかなか読み解けず，<br/>\nさらにそこに継続が加わると，確かにそう動くんだけどなぜ？となって苦戦しました．<br/>\nまだ使いこなせそうにないですが，継続はすごいですね．<br/>\nキューと継続を使ったREPLや，ハッシュと継続でWebアプリケーションを書くところが面白かったです．<br/>\n　<br/>\n　<br/>\n次は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>夜曲をやります．<br/>\n計算が多そうで面白そうで楽しみです．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51Exg14b4uL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"プログラミングGauche\" title=\"プログラミングGauche\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\">プログラミングGauche</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Kahua\">Kahua</a>プロジェクト,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%EE%B9%E7%BB%CB%CF%AF\">川合史朗</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3\">オライリージャパン</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2008/03/14</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 22人 <span class=\"hatena-asin-detail-label\">クリック</span>: 713回</li><li><a href=\"http://d.hatena.ne.jp/asin/4873113482/wataro-22\" target=\"_blank\">この商品を含むブログ (272件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4486019245/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51qK5xMkoxL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"素数夜曲―女王陛下のLISP\" title=\"素数夜曲―女王陛下のLISP\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4486019245/wataro-22/\">素数夜曲―女王陛下のLISP</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> 吉田武</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%EC%B3%A4%C2%E7%B3%D8\">東海大学</a>出版会</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2012/06</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 6人 <span class=\"hatena-asin-detail-label\">クリック</span>: 266回</li><li><a href=\"http://d.hatena.ne.jp/asin/4486019245/wataro-22\" target=\"_blank\">この商品を含むブログ (16件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"プログラミングGauche読了"}],"currentPage":20,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}