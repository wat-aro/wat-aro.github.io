{"pageProps":{"posts":[{"data":{"title":"SICP 問題 2.82","published":"2015/11/01","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-coercion args tags<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> tags<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-coercion <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tags<span class=\"synSpecial\">)</span>\n                                                         <span class=\"synSpecial\">(</span>type-tag x<span class=\"synSpecial\">)))</span>\n                               args<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag new-args<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>peroc <span class=\"synSpecial\">(</span>get op <span class=\"synSpecial\">(</span>new-type-tags<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span>contents new-args<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>try-coercion new-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tags<span class=\"synSpecial\">))))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pero <span class=\"synSpecial\">(</span>get op types<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>try-coercion args typep-tags<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.82"},{"data":{"title":"SICP 問題 2.81","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op type-tags<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc <span class=\"synComment\">;;false</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> args<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>type2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1-&gt;t2 <span class=\"synSpecial\">(</span>get-coercion type1 type2<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>t2-&gt;t1 <span class=\"synSpecial\">(</span>get-coercion type2 type1<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>t1-&gt;t2 <span class=\"synComment\">;;true</span>\n                         <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">(</span>t1-&gt;t2 a1<span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;complex-&gt;complex</span>\n                        <span class=\"synSpecial\">(</span>t2-&gt;t1\n                         <span class=\"synSpecial\">(</span>apply-generic op a1 <span class=\"synSpecial\">(</span>t2-&gt;t1 a2<span class=\"synSpecial\">)))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;No method for these types&quot;</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">))))))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; 引数に二つの複素数を持ってexpを呼び出すと，</span>\n<span class=\"synComment\">;; procがfalseになり，complexからcomplexへの変換を無限ループする</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; 無限ループに陥るのでLouisはまちがっている</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op type-tags<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> args<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> type-tags<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> type-tags<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;同じtype-tagならエラーになる</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>type2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1-&gt;t2 <span class=\"synSpecial\">(</span>get-coercion type1 type2<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>t2-&gt;t1 <span class=\"synSpecial\">(</span>get-coercion type2 type1<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>t1-&gt;t2\n                         <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">(</span>t1-&gt;t2 a1<span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span>t2-&gt;t1\n                         <span class=\"synSpecial\">(</span>apply-generic op a1 <span class=\"synSpecial\">(</span>t2-&gt;t1 a2<span class=\"synSpecial\">)))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;No method for these types&quot;</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">))))))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.81"},{"data":{"title":"SICP 問題 2.80","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero? x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>=zero? x y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-numberパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rationalパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complexパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.80"},{"data":{"title":"SICP 問題 2.79","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; scheme-numberパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>equ? <span class=\"synSpecial\">'(</span>scheme-number scheme-number<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; rationalパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>equ? <span class=\"synSpecial\">'(</span>rational rational<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>numer y<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>denom y<span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;; complexパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>equ <span class=\"synSpecial\">'(</span>complex complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> y<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> y<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>equ? x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>equ? x y<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.79"},{"data":{"title":"SICP 問題 2.78","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>attach-tag type-tag contents<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> type-tag <span class=\"synSpecial\">'</span>scheme-number<span class=\"synSpecial\">)</span>\n      contents\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> type-tag contents<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type-tag datum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> datum<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>scheme-number<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> datum<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> datum<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Bad tagged datum -- TYPE-TAG&quot;</span> datum<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contents datum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> datum<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>scheme-number<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> datum<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> datum<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Bad tagged datum -- CONTENTS&quot;</span> datum<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.78"},{"data":{"title":"SICP 問題 2.77","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>real-part <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">real-part</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>imag-part <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">imag-part</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>magnitude <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">magnitude</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>angle <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">angle</span><span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;; magnitudeはcomplex型を知らないのでerrorを返す．</span>\n<span class=\"synComment\">;; なので表にcomplex型を追加すれば動く．</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> z<span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>complex ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span>apply-generic <span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>complex ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>magnitude <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span>apply-generic <span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>magnitude <span class=\"synSpecial\">'(</span>ractangular<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synConstant\">5</span>\n</pre>\n\n\n","slug":"SICP 問題 2.77"},{"data":{"title":"SICP 問題 2.76","published":"2015/10/30","tags":["scheme","SICP"]},"content":"\n<p>;; 明示的ディスパッチによる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>演算\nデータの型が追加されるたびに各演算にその型用の演算を追加していく．\n新しい演算が追加されたときはそれを追加するだけ．</p>\n\n<p>;; データ主導スタイル\nデータの型が追加されると，それらをパッケージを作ってputする．\n各型パッケージにその演算を追加する．</p>\n\n<p>;; メッセージパッシングスタイル\nデータが追加されたときは特になし\n新しい演算が追加されたときは，各データ型に演算を追加する．</p>\n\n<p>データ新しい型がよく追加されるならメッセージパッシングスタイルが向いている．\n新しい演算が追加されるときには明示的ディスパッチが向いている．</p>\n\n","slug":"SICP 問題 2.76"},{"data":{"title":"SICP 問題 2.75","published":"2015/10/30","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-from-mag-ang r a<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch op<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>magnitude<span class=\"synSpecial\">)</span> r<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>angle<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>real-part<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> r <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> a<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>imag-part<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> r <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> a<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown op -- MAKE-FROM-MAG-ANG&quot;</span> op<span class=\"synSpecial\">))))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 2.75"},{"data":{"title":"SICP 問題 2.74","published":"2015/10/30","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synComment\">;; 各事業所ごとに従業員ファイルを作っていると考え，person-fileのcar部に</span>\n<span class=\"synComment\">;; 従業所を識別するコードを入れるようにする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-record name  person-file<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>get-record <span class=\"synSpecial\">(</span>division person-file<span class=\"synSpecial\">))</span> name file<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>division file<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> file<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; ここではrecordが(name salary age)となってると考える．</span>\n<span class=\"synComment\">;; この事業所のrecordからsalaryを取り出すにはcadrを取れば良い</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-salary name record<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>get-salary <span class=\"synSpecial\">(</span>identifying person-file<span class=\"synSpecial\">))</span> record<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-employee-record name division-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> division-list<span class=\"synSpecial\">)</span>\n      false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>serch <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>get-record <span class=\"synSpecial\">(</span>division x<span class=\"synSpecial\">))</span> name x<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>serch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> division-list<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>serch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> division-list<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>find-employee-record name <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> division-list<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; d</span>\n<span class=\"synComment\">;; その新しく合併した会社の従業員レコードから情報を得るget-recordとget-salaryなどの</span>\n<span class=\"synComment\">;; 必要な手続きを作りパッケージを作成し，本社の表にputすればよい．</span>\n</pre>\n\n\n","slug":"SICP 問題 2.74"},{"data":{"title":"エラトステネスの篩","published":"2015/10/28","tags":["scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eratosthenes n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>recur\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n                        lis<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>iota <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">round</span> n<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>繰り返しで</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eratosthenes n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n                      lis<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))))))</span>\n   <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>iota <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()))</span>\n</pre>\n\n\n<p>できるだけ元の論理通りにやってみました．<br/>\nあの斜線つけるやつね．</p>\n\n","slug":"エラトステネスの篩"},{"data":{"title":"SICP 問題 2.73","published":"2015/10/28","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>same-variable? <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>get <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>;; a\n元のプログラムと違うのはelseの行．<br/>\noperatorの型に合わせたderivが呼ばれ残りの要素を処理する．<br/>\nnumberとvariableはリストでないので型を持たないため，データ主導の振り分けに吸収できない．</p>\n\n<p>;; b</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-deriv-sum-package<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv-sum <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>make-sum <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>addend <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>augend <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-sum a1 a2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> a1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> a2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> a1<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> a2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a1 a2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ a1 a2<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>addend x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>augend x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>+ <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">'</span>+ deriv-sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>make <span class=\"synSpecial\">'</span>+ make-sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-deriv-product-package<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv-product <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>make-sum <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>multiplier <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>multiplicand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>multiplicand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>multiplier <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-product m1 m2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> m1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> m2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> m1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> m2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m1<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> m2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> m1 m2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* m1 m2<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplicand x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>* <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">'</span>* deriv-product<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>make <span class=\"synSpecial\">'</span>* make-product<span class=\"synSpecial\">)</span>\n\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>;; c</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-exponent-package<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv-exponent <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>make-product <span class=\"synSpecial\">(</span>get make <span class=\"synSpecial\">'</span>*<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>make-product\n       <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-exponentiation <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span>\n                                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n       <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-exponent b e<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> e <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> e <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>** b e<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">'</span>** deriv-exponent<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>make <span class=\"synSpecial\">'</span>** make-exponent<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>;; d\nputの演算と型を入れ替える</p>\n\n","slug":"SICP 問題 2.73"},{"data":{"title":"SICP 問題 2.71","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151027/20151027213831.jpg\" alt=\"f:id:wat-aro:20151027213831j:plain\" title=\"f:id:wat-aro:20151027213831j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151027/20151027213854.jpg\" alt=\"f:id:wat-aro:20151027213854j:plain\" title=\"f:id:wat-aro:20151027213854j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>n = 5のとき，最高頻度の記号には4bit.最低頻度の記号には1bit必要．\nn = 10のとき，最高頻度の記号には9bit.最低頻度の記号には1bit必要．</p>\n\n","slug":"SICP 問題 2.71"},{"data":{"title":"SICP 問題 2.70","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q-pairs &#39;((A 2) (BOOM 1) (GET 2) (JOB 2) (NA 16) (SHA 3)\n                       (YIP 9) (WAH 1)))\nq-pairs\ngosh&gt; (define q-tree\n  (successive-merge (make-leaf-set q-pairs)))\nq-tree\ngosh&gt; (define message\n  &#39;(GET A JOB\n    SHA NA NA NA NA NA NA NA NA\n    GET A JOB\n    SHA NA NA NA NA NA NA NA NA\n    WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP\n    SHA BOOM))\nmessage\ngosh&gt; (encode message q-tree)\n(1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 \n 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1)\ngosh&gt; (length (encode message q-tree))\n84\ngosh&gt; (decode (encode message q-tree) q-tree)\n(GET A JOB SHA NA NA NA NA NA NA NA NA GET A JOB \n SHA NA NA NA NA NA NA NA NA WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP SHA BOOM)</pre>\n\n\n<p>符号化には84bit必要．\n八記号アルファベットの固定長符号の場合は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt;(length message)\n36</pre>\n\n\n<p>36 * (log2 8) = 108\nなので108bit必要．</p>\n\n","slug":"SICP 問題 2.70"},{"data":{"title":"SICP 問題 2.69","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>generate-huffman-tree pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>successive-merge <span class=\"synSpecial\">(</span>make-leaf-set pairs<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; pairsは昇順に並んでいるので先頭の2要素をmake-code-pairsする．</span>\n<span class=\"synComment\">;; それを(cddr pairs)にadjoin-setすればまた昇順に並んだpairsができるのでそれを繰り返す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>successive-merge pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pairs<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>successive-merge <span class=\"synSpecial\">(</span>adjoin-set <span class=\"synSpecial\">(</span>make-code-pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)</span>\n                                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> pairs<span class=\"synSpecial\">))</span>\n                                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> pairs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.69"},{"data":{"title":"SICP 問題 2.68","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode message tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>encode-symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>encode <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode-symbol msg tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">0</span>\n              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error symbol <span class=\"synConstant\">&quot;is not Found&quot;</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (encode &#39;(A D A B B C A) sample-tree)\n(0 1 1 0 0 1 0 1 0 1 1 1 0)\ngosh&gt; (decode (encode &#39;(A D A B B C A) sample-tree) sample-tree)\n(A D A B B C A)</pre>\n\n\n","slug":"SICP 問題 2.68"},{"data":{"title":"SICP 問題 2.67","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; Huffman木</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf symbol weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>leaf symbol weight<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>leaf? object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> object<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>leaf<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbol-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-code-tree left right<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> left\n        right\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>symbols left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>symbols right<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>weight left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight right<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbols tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>symbol-leaf tree<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> tree<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>weight-leaf tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> tree<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; bitが0なら左，1なら右の枝をたどっていき，leafにたどり着くと，そのシンボルをconsして次にいく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode bits tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode-1 bits current-branch<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> bits<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-branch\n               <span class=\"synSpecial\">(</span>choose-branch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> bits<span class=\"synSpecial\">)</span> current-branch<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? next-branch<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>symbol-leaf next-branch<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> next-branch<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>decode-1 bits tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; bitが左ならleft-branch,bitが右ならright-branchを選択</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>choose-branch bit branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>left-branch branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>right-branch branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;bad bit -- CHOOSE-BRANCH&quot;</span> bit<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; weightで昇順に順序づけられた集合に要素を追加する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-set x set<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>weight x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x set<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>adjoin-set x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> set<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; pairsからweightの昇順にleafの集合を作る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf-set pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> pairs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>adjoin-set <span class=\"synSpecial\">(</span>make-leaf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pair<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> pair<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>make-leaf-set <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pairs<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define sample-tree\n        (make-code-tree (make-leaf &#39;A 4)\n                        (make-code-tree\n                         (make-leaf &#39;B 2)\n                         (make-code-tree (make-leaf &#39;D 1)\n                                         (make-leaf &#39;C 1)))))\nsample-tree\ngosh&gt; (define sample-message\n        &#39;(0 1 1 0 0 1 0 1 0 1 1 1 0))\nsample-message\ngosh&gt; (decode sample-message sample-tree)\n(A D A B B C A)</pre>\n\n\n","slug":"SICP 問題 2.67"},{"data":{"title":"SICP 問題 2.66","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-tree given-key set-of-records<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key-record <span class=\"synSpecial\">(</span>key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set-of-records<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set-of-records<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> given-key key-record<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set-of-records<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> given-key key-record<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>lookup-tree given-key <span class=\"synSpecial\">(</span>left-branch set-of-records<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> key-record given-key<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>lookup-tree given-key <span class=\"synSpecial\">(</span>right-branch set-of-records<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.66"},{"data":{"title":"SICP 問題 2.65","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>union-tree s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>list-&gt;tree\n   <span class=\"synSpecial\">(</span>union-set <span class=\"synSpecial\">(</span>tree-&gt;list-2 s<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>tree-&gt;list-2 t<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>intersection-tree s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>list-&gt;tree\n   <span class=\"synSpecial\">(</span>intersection-set-local <span class=\"synSpecial\">(</span>tree-&gt;list-2 s<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>tree-&gt;list-2 t<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.65"},{"data":{"title":"SICP 問題 2.64","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n<p>;a\n先頭から(n-1)/2番目までをleft-treeとしてpartial-treeにかける．<br/>\n残ったリストの先頭をthis-entryとしてこの木の分岐点におく．<br/>\nそのcdrをright-treeとしてpartial-treeにかける．<br/>\nこれを繰り返して木を作る．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>      5\n   /     \\\n1         9\n  \\       /   \\\n   3    7    11</pre>\n\n\n<p>;b\nO(n)</p>\n\n","slug":"SICP 問題 2.64"},{"data":{"title":"SICP 問題 2.58b","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n<p>2.58b は解けそうになかったので解答を見てできるかぎり解説を入れてみました．<br/>\n一部修正しています．\n解答は↓から</p>\n\n<p><a href=\"https://github.com/sarabander/p2pu-sicp/blob/master/2.3/2.58.scm\">p2pu-sicp/2.58.scm at master &middot; sarabander/p2pu-sicp &middot; GitHub</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; partには'beforeか'afterが入り，symbolの位置でexpを前後に分ける．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract part symbol <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter subexp remaining<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> remaining<span class=\"synSpecial\">)</span> remaining<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> remaining<span class=\"synSpecial\">)</span> symbol<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> part <span class=\"synSpecial\">'</span>before<span class=\"synSpecial\">)</span> subexp<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> part <span class=\"synSpecial\">'</span>after<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> remaining<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unclear, do you mean 'before or after?&quot;</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> subexp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> remaining<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> remaining<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>iter nil <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> result<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> result<span class=\"synSpecial\">)</span>\n        result<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; リストにシンボルが入っているかを問う述語</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contains? symbol lis<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> lis<span class=\"synSpecial\">)))</span> false<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>contains? symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; sum</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>contains? <span class=\"synSpecial\">'</span>+ x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>addend s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before <span class=\"synSpecial\">'</span>+ s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>augend s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after <span class=\"synSpecial\">'</span>+ s<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; product</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>product? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>contains? <span class=\"synSpecial\">'</span>* x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before <span class=\"synSpecial\">'</span>* p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplicand p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after <span class=\"synSpecial\">'</span>* p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; exponentiation</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponentiation? e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>contains? <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>base e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponent e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))</span>\n\n\n\n<span class=\"synComment\">;; 簡約</span>\n\n<span class=\"synComment\">;; かっこを外す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fringe tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> tree<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 演算子で分けられたリストに分ける．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-by op polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> polynome<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> polynome<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>contains? op polynome<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;追加．これがないと最後の項がシングルトン以外の場合空リストになる．</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> polynome<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before op polynome<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>split-by op <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after op polynome<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>summands polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>split-by <span class=\"synSpecial\">'</span>+ polynome<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factors polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>split-by <span class=\"synSpecial\">'</span>* polynome<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; リストの要素の間にopを入れる</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>infix op lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> op\n                            <span class=\"synSpecial\">(</span>infix op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>infix-add s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>infix <span class=\"synSpecial\">'</span>+ s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>infix-multiply p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>infix <span class=\"synSpecial\">'</span>* p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; リストの先頭のリストにだけopを適用する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-car op lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lst<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-car+ s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-car <span class=\"synIdentifier\">+</span> s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-car* p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-car <span class=\"synIdentifier\">*</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; (6)を6といった具合に数一つだけのリストをnumberにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>release-singleton e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> e<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> e<span class=\"synSpecial\">)</span>\n      e<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 数だけを先頭にあつめてリストにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>group lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lst<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> n<span class=\"synSpecial\">)))</span>\n                      lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; リストの先頭を最後にもっていく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>shift-left lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; まずfringeでかっこを外し，summandsを使い，＋の位置で分けたリストに変換する．</span>\n<span class=\"synComment\">;; そのリストに対してmapで各要素にfactors,group,apply-car*,release-singletonの順に手続きを適用する．</span>\n<span class=\"synComment\">;; つまり，*でわけたリストに変換し，数字のみのリストをcarにもってきて，それに*を適用し，要素の間に＊をいれ，シングルトンがあれば，それを数字にする．</span>\n<span class=\"synComment\">;; これが全要素に完了した後に出来たリストに対して，group,apply-car+,shift-left,infix-add,fringeを順に適用する．</span>\n<span class=\"synComment\">;; 先頭に数字のみでできたリストを作り，それらを足し，リストの最後に移す．このリストの要素の間に＋を挿入し，かっこを取り払う．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simplify polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>compose fringe\n            infix-add\n            shift-left\n            apply-car+\n            group<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span>compose release-singleton\n                 infix-multiply\n                 apply-car*\n                 group\n                 factors<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>summands <span class=\"synSpecial\">(</span>fringe polynome<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.58b"}],"currentPage":15,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}