{"pageProps":{"posts":[{"data":{"title":"プログラミングGauche 19.7 簡易な例外機構のまとめ","published":"2015/09/25","tags":["scheme","gauche"]},"content":"\n<p>マクロと<code>call/cc</code>を使った<code>catch</code>と<code>throw</code>の実装の解説を備忘録として残します．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 簡易例外機構</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">'())</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> catch\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally follow ...<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>signals-backup <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">call/cc</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>k<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>sig k<span class=\"synSpecial\">)</span> <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span>\n                            body ...<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> signals-backup<span class=\"synSpecial\">)</span>\n       follow ...\n       val<span class=\"synSpecial\">)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">))]))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> throw\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">[(</span>_ sig val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> <span class=\"synSpecial\">'</span>sig <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span> val<span class=\"synSpecial\">)]))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; サンプルコード</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div n d<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> d <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>throw DivedeZeroError\n             <span class=\"synSpecial\">(</span>print <span class=\"synError\">#`</span><span class=\"synConstant\">&quot;ERROR: Divide Zero Error Occured...\\n divide ,n by ZERO!\\n--------------------&quot;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n d<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>percentage a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>DivedeZeroError\n          <span class=\"synSpecial\">(</span>print <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>div a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">100.0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>finally\n          <span class=\"synSpecial\">(</span>print <span class=\"synConstant\">&quot;follow ...&quot;</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n処理の流れを説明します．<br/>\n<code>*signal*</code>の初期値を<code>signals-backup</code>に束縛します．<br/>\nその後<code>*signal*</code>には<code>(set! *signal* ...)</code>の行で<code>car</code>にシグナル，<code>cdr</code>に継続を渡すk，というペアのリストが束縛されます．<br/>\n<code>((sig . k))</code>という形になります．<br/>\nサンプルコードでは<code>((DivisedZeroError . k))</code>が入ります．<br/>\nその後<code>body</code>が実行されます．<br/>\nサンプルコードでは<code>percentage</code>の最初の<code>print</code>行．<br/>\nここで<code>div</code>が呼ばれます．<br/>\n<code>(= d 0)</code>のが真の時に<code>throw</code>が呼ばれます．<br/>\n<code>(cdr (assq 'sig *signals*))</code>が評価され継続を表す<code>k</code>が返され，<code>(k val)</code>で<code>throw</code>の<code>print</code> 行を実行し，戻り値が<code>catch</code>のvalに束縛されます．<br/>\n（※　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>でkeenさん(@blackenedgold)さんから，継続を渡す<code>k</code>ではなく，継続を表す<code>k</code>と教えていただいたので訂正しました．）<br/>\nここではまってたのですが，<code>(= d 0)</code>なのにシグナルが違っていた場合は<code>(cdr #f)</code>となりエラーが返ります.<br/>\nシグナルを間違えるなって話ですね．<br/>\n<code>(= d 0)</code>が<code>#f</code>の時は<code>(/ n d)</code>が実行され値が返ります．<br/>\n　<br/>\n<code>catch</code>に返ってくると<code>*signals*</code>にシグナルの初期値を戻します．<br/>\nそして<code>finally ...</code>を実行します．<br/>\n最後にvalに束縛した値を返して終了です．\nここでは<code>percentage</code>は<code>print</code>してるので<code>#&lt;undef&gt;</code>が返ります．<br/>\n　<br/>\nこうして一つ一つ追えばそんなに難しくないですね．<br/>\nでも理解するのに時間かかりました．．．<br/>\n最後に実行例紹介して終わります．<br/>\n　　<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (percentage 1 40)\n2.5%\nfollow ...\n#&lt;undef&gt;\ngosh&gt; (percentage 10 0)\nERROR: Divide Zero Error Occured...\n divide 10 by ZERO!\n--------------------\nfollow ...\n#&lt;undef&gt;</pre>\n\n\n<p>　<br/>\nマクロもcall/ccも難しい</p>\n\n","slug":"プログラミングGauche 19.7 簡易な例外機構のまとめ"},{"data":{"title":"プログラミングGauche 17.5.3練習問題","published":"2015/09/24","tags":["scheme","gauche"]},"content":"\n<ul>\n<li><code>&lt;logger-generic&gt;</code>のログ出力のon/offを切り替えられるようにする.<br/>\n<code>&lt;logger-generic&gt;</code>クラスに<code>printing</code>スロットを追加してその真偽で処理を分ければよい．\n<code>printing</code>スロットの値を後で変えられるように<code>printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>と<code>not-printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>も追加した．</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>define-class <span class=\"synConstant\">&lt;logger-generic&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">&lt;generic&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>printing :init-value <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>define-method apply-generic <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;args: ~s\\n&quot;</span> args<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>return-value <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;result: ~s\\n&quot;</span> return-value<span class=\"synSpecial\">)</span>\n               return-value<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>define-method not-printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>define-method printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 17.5.3練習問題"},{"data":{"title":"プログラミングGauche 14.3.2練習問題","published":"2015/09/22","tags":["scheme","gauche","scheme","gauche"]},"content":"\n<p><code>call-with-input-string</code>と<code>call-with-output-string</code>を使って<code>write-to-string</code>と<code>read-drom-string</code>を実装する．<br/>\nポートの挙動がよくわかってなかったので苦戦した．<br/>\nこういう時にREPLはありがたい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>write-to-string arg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>call-with-output-string <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>port<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">write</span> arg port<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>read-from-string <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>call-with-input-string <span class=\"synIdentifier\">string</span> <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 14.3.2練習問題"},{"data":{"title":"プログラミングGauche 9.1練習問題","published":"2015/09/21","tags":["scheme","gauche"]},"content":"\n<p><code>delete-1</code>は見つからなかった場合もcond式のelse節でconsしているためにコピーしたリストを返す．<br/>\n元のリストを返すように実装する．\n以下が元の<code>delete-1</code></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">[(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">()]</span>\n            <span class=\"synSpecial\">[(</span>cmp-fn <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> elt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)]</span>\n            <span class=\"synSpecial\">[</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))]))</span>\n    <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<ul>\n<li><code>cond</code>をつかった実装．</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; 見つけた場合の処理</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">[(</span>cmp-fn <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> elt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)]</span>\n            <span class=\"synSpecial\">[</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))]))</span>\n    <span class=\"synComment\">;; member関数で要素があるか探す</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">[(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">member</span> elt lis cmp-fn<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)]</span>\n          <span class=\"synSpecial\">[</span><span class=\"synStatement\">else</span> lis<span class=\"synSpecial\">])))</span>\n</pre>\n\n\n<p>見つからない場合の処理はすでに<code>member</code>で行ってるので<code>null?</code>は省略．<br/>\n<code>(cond [(and (member elt lis cmp-fn) #t)　(loop lis)]</code>の部分が少しわかりにくい．<br/>\n<code>member</code>は要素が見つからなかった場合に元のリストを返すので<code>and</code>に入れてリストが返って来た場合は<code>#t</code>を，<code>#f</code>が返ってきた場合は<code>#f</code>を返すようにした．</p>\n\n<ul>\n<li><code>if</code>をつかった実装</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; 見つけた場合の処理</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cmp-fn <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> elt<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))</span>\n    <span class=\"synComment\">;; member関数で要素があるか探す</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">member</span> elt lis cmp-fn<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n        lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><code>if</code>ならリストが返って来た場合も<code>then</code>節を実行してくれる．</p>\n\n<p><code>member</code>で末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で探した後に<code>delete-1</code>で非末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で削除するのは無駄が多い気も．\nもっといい書き方あるかな．</p>\n\n<p>[追記]<br/>\nググったらもっといい書き方ありました．</p>\n\n<p><a href=\"http://www.serendip.ws/archives/1953\">&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;Gauche 9.1 &#x96C6;&#x5408; &#x7DF4;&#x7FD2;&#x554F;&#x984C; : Serendip - Web&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                          <span class=\"synSpecial\">((</span>cmp-fn elt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> lis<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n                                lis\n                                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))))))</span>\n                  <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><code>eq?</code>で比較しろって書かれていたのはこういうことだったのか．<br/>\n重複している部分があるので<code>if</code>の分岐を削除して書き換えます</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                          <span class=\"synSpecial\">((</span>cmp-fn elt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> lis<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))))</span>\n                  <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>元のコードに一行足すだけだったとは・・・</p>\n\n","slug":"プログラミングGauche 9.1練習問題"},{"data":{"title":"プログラミングGauche 8.3.3練習問題","published":"2015/09/21","tags":["scheme","gauche"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>any-pred <span class=\"synSpecial\">.</span> preds<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>pred x<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span> preds<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>every-pred <span class=\"synSpecial\">.</span> preds<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred true<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>pred x<span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> preds<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 8.3.3練習問題"},{"data":{"title":"プログラミングGauche ７.４練習問題","published":"2015/09/20","tags":["scheme","gauche"]},"content":"\n<p>可変長の引数を受け取り，リストにして返す手続き<code>list</code>を書く．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">list</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> ls\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>または</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">.</span> ls<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>実行してみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(list)\n()\n(list 1 2 )\n(1 2)\n(list &#39;(1 2) &#39;(3 4))\n((1 2) (3 4))</pre>\n\n\n<p>引数をそのまま返すだけ.<br/>\nこれ以外の書き方ってあるのかな．</p>\n\n","slug":"プログラミングGauche ７.４練習問題"},{"data":{"title":"プログラミングGauche ７.２練習問題","published":"2015/09/20","tags":["scheme","gauche"]},"content":"\n<ul>\n<li>for-each-numbersを書く</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> for-each-numbers\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<ul>\n<li>map-numbersを書く</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> map-number\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<ul>\n<li>numbers-onlyを書く</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>numbers-only walker<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>walker proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<ul>\n<li>「数値とそれ以外が混じっている入れ子のリスト」の数値だけについて<code>(numbers-only for-each)</code>や<code>(numbers-only map)</code>を<code>tree-walk</code>に渡して処理ができるか．できないならなぜできないか．</li>\n</ul>\n\n\n<p><code>tree-walk</code>のコードは以下の通り</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk walker proc tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>walker <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>elt<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list?</span> elt<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>tree-walk walker proc elt<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>proc elt<span class=\"synSpecial\">)))</span>\n          tree<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>以下を例に考えてみた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span>numbers-only <span class=\"synIdentifier\">map</span><span class=\"synSpecial\">)</span> print  <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>  <span class=\"synSpecial\">(</span><span class=\"synConstant\">#t</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>実行結果は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>1\n2\n(#&lt;undef&gt; #&lt;undef&gt;)</pre>\n\n\n<p>入れ子になった部分の処理が出来ていない．\n<code>numbers-only</code>と<code>tree-walk</code>にリストがどう渡されているのか調べてみる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk walker proc tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>walker <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>elt<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list?</span> <span class=\"synError\">#?=elt</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>tree-walk walker proc elt<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>proc elt<span class=\"synSpecial\">)))</span>\n          tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>numbers-only walker<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>walker proc <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span>numbers-only <span class=\"synIdentifier\">map</span><span class=\"synSpecial\">)</span> print  <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>  <span class=\"synSpecial\">(</span><span class=\"synConstant\">#t</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>結果は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>#?=&#34;(standard input)&#34;:262:(filter number? lis)\n#?-    (1 2)\n#?=elt\n#?-    1\n1\n#?=elt\n#?-    2\n2\n(#&lt;undef&gt; #&lt;undef&gt;)</pre>\n\n\n<p>これを見ると<code>tree-walk</code>にリストが渡される前に<code>numbers-only</code>の<code>filter</code>が先に評価されている．<br/>\nここを改善して入れ子に対応した<code>filter</code>を書いて，<code>numbers-only-for-tree</code>を書く．<br/>\n<code>(car lis)</code>がリストならそこに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>して<code>filter</code>をかける．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> filter-for-tree\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred lis<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">list?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>filter-for-tree pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span>\n                                    <span class=\"synSpecial\">(</span>filter-for-tree pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">((</span>pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span>filter-for-tree pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>numbers-only-for-tree walker<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>walker proc <span class=\"synSpecial\">(</span>filter-for-tree <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><code>numbers-only</code>と同じように実行してみます．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (tree-walk (numbers-only-for-tree map) print  &#39;(1 2 (3 (#f 4))  (#t 5)))\n1\n2\n3\n4\n5\n(#&lt;undef&gt; #&lt;undef&gt; (#&lt;undef&gt; (#&lt;undef&gt;)) (#&lt;undef&gt;))</pre>\n\n\n<p>入れ子なったリストに対応した<code>numbers-only-for-map</code>が書けました．</p>\n\n","slug":"プログラミングGauche ７.２練習問題"},{"data":{"title":"もくもくEmacs#1に参加しました．","published":"2015/09/20"},"content":"\n<p>初めて勉強会なるものに参加してきました．<br/>\n自分でも参加できそうなものを探していると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1\">もくもく会</a>が！<br/>\nEmacsLispは書けないから本を買って向こうで勉強しようと参加を決意．</p>\n\n<p>今まで一人で勉強してたので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>の話を聞けたり，実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>のパッケージ開発してる人の話を聞けて興奮しました．<br/>\nやる気をたくさんもらったので頑張ろう．</p>\n\n","slug":"もくもくEmacs#1に参加しました．"},{"data":{"title":"Control+Comand+Spaceの変更","published":"2015/09/20","tags":["mac"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Mac\">Mac</a>でControl+Comand+Spaceを押すと次のような絵文字や記号の挿入画面が開きます．<br/>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20150920/20150920003500.jpg\" alt=\"f:id:wat-aro:20150920003500j:plain\" title=\"f:id:wat-aro:20150920003500j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><br/>\nこれが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AD%A1%BC%A5%D0%A5%A4%A5%F3%A5%C9\">キーバインド</a>C-M-SPC（S式をマーク）と競合してしまっていました．</p>\n\n<p>これをControl+Comand+Shift+Spaceに変更します．</p>\n\n<p><code>システム環境設定 / キーボード / ショートカット</code>を開きます．<br/>\n左のPanelから<code>アプリケーション</code>を選択し，すべてのアプリケーションのプルダウンを開きます．<br/>\nここで<code>絵文字と記号</code>という項目があればそれを選択し，編集します．<br/>\n無い場合は<code>+</code>を選択し，<code>メニュータイトル</code>に<code>絵文字と記号</code>と入力し，<code>キーボードショートカット</code>の欄で<code>Control+Comand+Shift+Space</code>を押せば入力されます．<br/>\nこれは他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AD%A1%BC%A5%D0%A5%A4%A5%F3%A5%C9\">キーバインド</a>でもOKです．<br/>\nシステムの言語を英語にしている場合は参考のサイトで書かれている通り，<code>Emoji &amp; Symbols</code>と入力すればOKです．</p>\n\n<p>[参考]</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F20245652%2Fhow-to-unbind-command-control-space-key-from-mac-os-x-10-9\" title=\"How to unbind Command-Control-Space key from Mac OS X 10.9?\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://stackoverflow.com/questions/20245652/how-to-unbind-command-control-space-key-from-mac-os-x-10-9\">stackoverflow.com</a></cite></p>\n\n<p>※<code>Emoji &amp; Symbols</code>が日本語環境で何になるか迷いました．</p>\n\n","slug":"Control+Comand+Spaceの変更"},{"data":{"title":"ruby: No such file or directory -- xmpfilter (LoadError)","published":"2015/06/27"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">xmpfilter</a>を使おうとするとこのエラーが出て困っていました。</p>\n\n<p>原因はshellと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>でパスが違うことだったようです。</p>\n\n<p>まず.bashrcの末尾に以下を追加します。</p>\n\n<pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synComment\">## create emacs env file</span>\nperl -wle \\\n    <span class=\"synConstant\">'do { print qq/(setenv &quot;$_&quot; &quot;$ENV{$_}&quot;)/ if exists $ENV{$_} } for @ARGV'</span> \\\n    PATH &gt; ~<span class=\"synStatement\">/</span><span class=\"synSpecial\">.</span><span class=\"synConstant\">emacs</span><span class=\"synSpecial\">.</span><span class=\"synConstant\">d</span><span class=\"synStatement\">/s</span>hellenv.el\n</pre>\n\n\n<p>そしてinit.elに以下を記述すれば完成です。</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synComment\">;; load environment value</span>\n<span class=\"synSpecial\">(</span>load-file <span class=\"synSpecial\">(</span>expand-file-name <span class=\"synConstant\">&quot;~/.emacs.d/shellenv.el&quot;</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">dolist</span> <span class=\"synSpecial\">(</span>path <span class=\"synSpecial\">(</span><span class=\"synStatement\">reverse</span> <span class=\"synSpecial\">(</span>split-string <span class=\"synSpecial\">(</span>getenv <span class=\"synConstant\">&quot;PATH&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;:&quot;</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">exec-path</span> path<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>うまく動いてくれてるようです。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>a = <span class=\"synConstant\">1</span> + <span class=\"synConstant\">1</span>                       <span class=\"synComment\"># =&gt; 2</span>\np a + <span class=\"synConstant\">1</span>\n<span class=\"synComment\"># &gt;&gt; 3</span>\n</pre>\n\n\n<p>[追記]\nついでにauto-complete.elをenf-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>-modeで使う時の設定も</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synComment\">;; auto-complete</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">auto-complete</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">auto-complete-config</span><span class=\"synSpecial\">)</span>    <span class=\"synComment\">; 必須ではないですが一応</span>\n<span class=\"synSpecial\">(</span>global-auto-complete-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>define-key ac-completing-map <span class=\"synSpecial\">(</span>kbd <span class=\"synConstant\">&quot;C-n&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">ac-next</span><span class=\"synSpecial\">)</span>      <span class=\"synComment\">; M-nで次候補選択</span>\n<span class=\"synSpecial\">(</span>define-key ac-completing-map <span class=\"synSpecial\">(</span>kbd <span class=\"synConstant\">&quot;C-p&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">ac-previous</span><span class=\"synSpecial\">)</span>  <span class=\"synComment\">; C-p で前候補選択</span>\n<span class=\"synSpecial\">(</span>ac-config-default<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">ac-modes</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">enh-ruby-mode</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n","slug":"ruby: No such file or directory -- xmpfilter (LoadError)"},{"data":{"title":"再帰で数を数える","published":"2015/05/24","tags":["scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>でリスト処理してる時に数を数えるには別に変数つけなくちゃいけないのかなって考えてました。<br/>\nThe Little Schemer読んでたら以下のようなコードが出てきました。<br/>\nnull?で0を返せばよかったのね。<br/>\nそして数を数えたい処理が来るたびに１加算していけば数えられると。<br/>\n面白いなー</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> occur\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a lat<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lat<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lat<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add1 <span class=\"synSpecial\">(</span>occur a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lat<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>occur a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lat<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/0262560992/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41vFTwjzvbL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"The Little Schemer\" title=\"The Little Schemer\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/0262560992/wataro-22/\">The Little Schemer</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman,Matthias Felleisen</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> The MIT Press</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 1995/12/21</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> ペーパーバック</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 10人 <span class=\"hatena-asin-detail-label\">クリック</span>: 137回</li><li><a href=\"http://d.hatena.ne.jp/asin/0262560992/wataro-22\" target=\"_blank\">この商品を含むブログ (91件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"再帰で数を数える"},{"data":{"title":"spring備忘録","published":"2015/05/17","tags":["Ruby on Rails"]},"content":"\n<p>Rails4.1から標準で付属するようになったspringの備忘録。</p>\n\n<p>springを使える状態にする。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bundle exec bin/spring binstub --all</pre>\n\n\n<p>springが起動しているか確認。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bin/spring status</pre>\n\n\n<p>springを停止する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bin/spring stop</pre>\n\n\n<p>springはrakeや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/rails\">rails</a>コマンドで再起動する。\nここがわからなくていつの間にか起動しているけど、どうやって起動するのか調べてた。</p>\n\n<p>私の環境ではこれくらい時間が短縮できた。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bin/spring stop\nSpring stopped.\n\n$ time bundle exec rails runner &#39;puts &#34;hello&#34;&#39;\nhello\n\nreal    0m2.450s\nuser    0m0.548s\nsys 0m0.086s</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bin/spring status\nSpring is running:\n\n79921 spring server | study_app | started 39 secs ago\n79922 spring app    | study_app | started 39 secs ago | development mode\n\n$ time bundle exec rails runner &#39;&#34;puts hello&#34;&#39;\n\nreal    0m0.766s\nuser    0m0.546s\nsys 0m0.082s</pre>\n\n\n<p>これくらい短縮されると嬉しいですね。</p>\n\n<p>[参考]</p>\n\n<p><a href=\"http://qiita.com/bibio/items/58806063bd2365a9832a\">Rails - spring &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C6;&#x30B9;&#x30C8;&#x9AD8;&#x901F;&#x5316; - Qiita</a></p>\n\n","slug":"spring備忘録"},{"data":{"title":"NoMethodError: undefined method `visit&#39;","published":"2015/05/17","tags":["Ruby on Rails","Rspec","Capybara"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails\">Ruby on Rails</a> 4.2.1で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rspec\">Rspec</a> + Capybaraでタイトルのエラーが出た時の対策。\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails\">Ruby on Rails</a> Tutorialではspec_helper.rbに</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>config.include Capybara::DSL</pre>\n\n\n<p>と記述しろと書かれているが、そうすると</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>/vendor/bundle/gems/capybara-2.4.4/lib/capybara/rails.rb:6:in `block (2 levels) in &lt;top (required)&gt;&#39;: uninitialized constant Rails (NameError)</pre>\n\n\n<p>とエラーが起こる。\n<a href=\"http://railstutorial.jp/chapters/static-pages?version=4.0#top\">&#x7B2C;3&#x7AE0; &#x307B;&#x307C;&#x9759;&#x7684;&#x306A;&#x30DA;&#x30FC;&#x30B8;&#x306E;&#x4F5C;&#x6210; | Rails &#x30C1;&#x30E5;&#x30FC;&#x30C8;&#x30EA;&#x30A2;&#x30EB;</a></p>\n\n<p>capybaraが動いていないのだからcapybaraの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/github\">github</a>を見てみると</p>\n\n<hr />\n\n<p>Using Capybara with <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSpec\">RSpec</a></p>\n\n<p>Load <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSpec\">RSpec</a> 2.x support by adding the following line (typically to your spec_helper.rb file):</p>\n\n<p>require 'capybara/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/rspec\">rspec</a>'</p>\n\n<hr />\n\n<p>と書かれていたのでこれを冒頭に記述。\n先の</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>config.include Capybara::DSL</pre>\n\n\n<p>と合わせればうまくテストが動いた。</p>\n\n","slug":"NoMethodError: undefined method `visit&#39;"},{"data":{"title":"cd, dvdが認識されない。","published":"2015/04/21","tags":["Ubuntu14.10"]},"content":"\n<p>Ｕｂｕｎｔｕ１４．０４ＬＴＳのＬｉｖｅ DVDを作ろうとしたところブランクＤＶＤが認識されませんでした。<br />\n試しにCDやCD、ＤＶＤビデオなど試してみるもすべてダメ。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/BIOS\">BIOS</a>を見てみるもちゃんと認識している。<br />\ndmesgで探してみてもそれらしきものはみつからない。</p><p><a href=\"http://www.kinryokai.net/modules/news/article.php?storyid=98\">&#x9326;&#x7A1C;&#x4F1A; KINRYOKAI - &#x30CB;&#x30E5;&#x30FC;&#x30B9;</a></p><p>ここを見てＩＤＥでなくＡＨＣＩに変更。<br />\n無事にドライブは認識されました。<br />\nこんなはまりどころがあるとはなー</p>\n\n","slug":"cd, dvdが認識されない。"},{"data":{"title":"Array#slice","published":"2015/03/25","tags":["ruby"]},"content":"\n<p>slice<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>には</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>ary.slice(<span class=\"synConstant\">0</span>,<span class=\"synConstant\">3</span>)\nary.slice(<span class=\"synConstant\">0</span>..<span class=\"synConstant\">3</span>)\n</pre><p>のように２つの書き方があります。</p><p>ひとつ目はary[0]から３つの要素を取り出して部分配列を作ります。<br />\nこの場合は</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>[ary[<span class=\"synConstant\">0</span>], ary[<span class=\"synConstant\">1</span>], ary[<span class=\"synConstant\">2</span>]]\n</pre><p>となります。</p><p>ふたつ目はary[0]からary[3]までの要素を取り出して部分配列を作ります。</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>[ary[<span class=\"synConstant\">0</span>], ary[<span class=\"synConstant\">1</span>], ary[<span class=\"synConstant\">2</span>], ary[<span class=\"synConstant\">3</span>]]\n</pre>\n","slug":"Array#slice"},{"data":{"title":"BLUE GIANT","published":"2015/03/24"},"content":"\n<p>３巻の帯に書かれていた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%E5%B8%B6%A4%D2%A4%ED%A4%DF\">上原ひろみ</a>さんのコメントに惹かれて購入。</p><p>「無音なはずの漫画から、音が聞こえてくる。心の何かを突き動かす音が。」<br />\nガツンと響いてきます。<br />\n胸をかきむしって叫びたくなるような何かが奥の方からこみ上げてきます。</p><p>何かをしないと。<br />\n何ができるかじゃなくて何かをしないといけない。<br />\nそんな気にさせられました。</p><p>ジャズ漫画だと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%E4%C6%BB%A4%CE%A5%A2%A5%DD%A5%ED%A5%F3\">坂道のアポロン</a>を持ってるけどＢＬＵＥ GIANTのほうがジャズの熱さがストレートに伝わってきていいです。<br />\nなんだか頑張れそうです。</p><p>今日は３巻までしか買ってないので明日の残りを買ってきます。<br />\n楽しみですわー</p><p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091856780/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/415BUO0ccjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"BLUE GIANT 1 (ビッグコミックススペシャル)\" title=\"BLUE GIANT 1 (ビッグコミックススペシャル)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091856780/wataro-22/\">BLUE GIANT 1 (ビッグコミックススペシャル)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%D0%C4%CD%BF%BF%B0%EC\">石塚真一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%AE%B3%D8%B4%DB\">小学館</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2013/11/29</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> コミック</li><li><a href=\"http://d.hatena.ne.jp/asin/4091856780/wataro-22\" target=\"_blank\">この商品を含むブログ (13件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091862454/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51BTKdvLSQL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"BLUE GIANT 2 (ビッグコミックススペシャル)\" title=\"BLUE GIANT 2 (ビッグコミックススペシャル)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091862454/wataro-22/\">BLUE GIANT 2 (ビッグコミックススペシャル)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%D0%C4%CD%BF%BF%B0%EC\">石塚真一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%AE%B3%D8%B4%DB\">小学館</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/03/28</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> コミック</li><li><a href=\"http://d.hatena.ne.jp/asin/4091862454/wataro-22\" target=\"_blank\">この商品を含むブログ (8件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091864600/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/516feQkH2VL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"BLUE GIANT 3 (ビッグコミックススペシャル)\" title=\"BLUE GIANT 3 (ビッグコミックススペシャル)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091864600/wataro-22/\">BLUE GIANT 3 (ビッグコミックススペシャル)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%D0%C4%CD%BF%BF%B0%EC\">石塚真一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%AE%B3%D8%B4%DB\">小学館</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/07/30</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> コミック</li><li><a href=\"http://d.hatena.ne.jp/asin/4091864600/wataro-22\" target=\"_blank\">この商品を含むブログ (3件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"BLUE GIANT"},{"data":{"title":"THE WORLD IS MINE","published":"2015/02/08"},"content":"\n<p>久々にTHE WORLD IS MINE一気読み。<br />\nあとがきの前半がこの物語の締めに本当にふさわしい。<br />\n以下引用します。</p>\n\n    <blockquote>\n        <p>愛　平和　正義　夢　努力　感動　共感　エコ　真実　未来　希望　青空　涙　汗　つながり　平等　協力　仲間　ありがとう　友情　サポート　成長　便利　役立つ　限定　先着　最先端　ＮＥＷ　カワイイ　キレイ　ハッピー　ステキ　ヘルシー　痩せる　流行　光る　輝く　明日　本当の私　自由　翼　改革　革命　一瞬　永遠　姓名<br />\nそれから…「世界「などなど<br />\n十歳になる娘に「疑え」と教えている言葉です<br />\n神さまにつきましては幼少期にその存在を「有り」と植え付けてから今「無いかも」と壊しにかかっています…最低の父親です</p>\n\n    </blockquote>\n<p><br />\nこういう物語です。<br />\n二人の爆弾魔とヒグマドンと名付けられた怪獣が暴れまわる物語です。<br />\n緻密な背景リアリティを高め、登場人物のセリフによって価値観を振り回しにかかってきます。<br />\n過剰に生々しく描かれた登場人物があっけなく死んでいく一方で、希望を見出した人々が絶望の中死んでいきます。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%C8%A5%D4%A5%A2\">ユートピア</a>を要求する殺人鬼に、人の命に平等に価値はなく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%C8%A5%D4%A5%A2\">ユートピア</a>は実現できないと断ずる総理が、それでも目指さなくてはならないと演説するシーンには心が揺さぶられます。<br />\n少女が使命感に突き動かされ処女を捧げ泣き帰るシーン、その少女が親友とその子供を殺され心が壊れてしまうシーンでは、自分が刺されているかのような痛みを覚えます。<br />\n善良な一般市民からの悪意と息子の悪行によって母親が自殺するシーン、自殺できなかった父親がテレビの前で息子を殺してくれと嘆願するシーン、個人と社会を天秤に載せ人質もろとも犯人を射殺しろと命令した警察官が記者会見の場で自害するシーン、いくらでもおもしろい場面があります。<br />\n何度も読みました。<br />\nこれから先も何度も読むでしょう。<br />\nまた一度本棚の奥にしまって次に読む時を楽しみにします。</p>\n\n","slug":"THE WORLD IS MINE"},{"data":{"title":"Ubuntu14.10にVMWare Player 7をインストールする時に起こったエラー","published":"2015/02/02"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ubuntu\">Ubuntu</a> 14.10に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VMware\">VMware</a> Player 7をインストールしようとしていたら</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>~/Downloads/VMware-Player-7.0.0-2305329.x86_64.bundle </pre><p>を実行した際に</p>\n\n    <blockquote>\n        <p>(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vmware\">vmware</a>-installer.py:12935): <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gtk\">Gtk</a>-WARNING **: module_path にはテーマ・エンジンがありません: \"murrine\"<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gtk\">Gtk</a>-Message: Failed to load module \"canberra-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gtk\">gtk</a>-module\": libcanberra-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gtk\">gtk</a>-module.so: 共有オブジェクトファイルを開けません: そのようなファイルやディレクトリはありません</p>\n\n    </blockquote>\n<p>とエラーが出ました。<br />\nググッて検索したところ１つ目のエラーはgtk2-engines-muriineをインストールすれば良いとのことだったのですが</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sudo apt-get install gtk2-engines-murrine</pre><p>としても既に最新版だと言われてしまいます。</p><p><a href=\"http://ubuntuforums.org/archive/index.php/t-2061142.html\">[ubuntu] Gtk-WARNING: Unable to locate theme engine in module_path &quot;murrine&quot; [Archive] - Ubuntu Forums</a><br />\nここを見る限り、32bit版のgtk2-engines-murrineを求められているようです。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sudo apt-get install --reinstall gtk2-engines-murrine:i386</pre><p>で再インストールしたところ通りました。</p><p>２つ目は解決できませんでした。<br />\nどうすればいいんでしょうね。</p>\n\n","slug":"Ubuntu14.10にVMWare Player 7をインストールする時に起こったエラー"},{"data":{"title":"smartparrensとweb-modeを使う時の設定","published":"2015/01/29","tags":["emacs","elisp"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>でerbファイルを扱う時にsmartparrensとweb-modeがどちらも補完してしまいます。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% %&gt;</pre><p>としたいのに</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% %&gt;&gt;</pre><p>と<がひとつ多くなってしまいます。</p><p>まずsmartparensが</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;</pre><p>と入力された時点で</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt; &gt;</pre><p>と補完します。<br />\nその後に</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% &gt;</pre><p>と%を入力し、スペースや=を入力すると</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% %&gt;&gt;</pre><p>と%>を補完してしまい、>がひとつ多くなるのです。</p><p>一応web-mode.elの844行目から847行目の</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>    <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;erb&quot;</span>        <span class=\"synStatement\"> . </span><span class=\"synSpecial\">((</span><span class=\"synConstant\">&quot;&lt;% &quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot; %&gt;&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%=&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&gt;&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%#&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&gt;&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%-&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&gt;&quot;</span><span class=\"synSpecial\">)))</span>\n</pre><p>を</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>    <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;erb&quot;</span>        <span class=\"synStatement\"> . </span><span class=\"synSpecial\">((</span><span class=\"synConstant\">&quot;&lt;% &quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot; %&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%=&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%#&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%-&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">)))</span>\n</pre><p>と置き換えることで正常な補完となるのですが、init.elへの設定などでこれを解決できませんかね。</p><p>スタックオーバーフローでも質問してみました。<br />\ntab=answers<a href=\"http://ja.stackoverflow.com/questions/5573/smartparens%E3%81%A8web-mode%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E4%BD%BF%E3%81%86%E9%9A%9B%E3%81%AE%E8%A8%AD%E5%AE%9A\">emacs - smartparens&#x3068;web-mode&#x3092;&#x540C;&#x6642;&#x306B;&#x4F7F;&#x3046;&#x969B;&#x306E;&#x8A2D;&#x5B9A; - &#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30FB;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30D5;&#x30ED;&#x30FC;</a></p>\n\n","slug":"smartparrensとweb-modeを使う時の設定"},{"data":{"title":"複数のシステムのＥｍａｃｓ上でｇａｕｃｈｅを使う時のinit.elの設定","published":"2015/01/19","tags":["emacs","gauche","ubuntu","mac"]},"content":"\n<p>現在Ｍａｃｂｏｏｋ　ＰｒｏとＵｂｕｎｔｕを使っています。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>上で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>を使おうとする時にｍａｃとｕｂｕｎｔｕで設定を統一したかったので調べました。</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>when <span class=\"synSpecial\">(</span>eq system-type <span class=\"synSpecial\">'</span>system-type<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>setq ...<span class=\"synSpecial\">))</span>\n</pre><p>とすれば良いようです。<br />\nsystem-typeですが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/linux\">linux</a>では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gnu/linux\">gnu/linux</a>,、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mac\">mac</a>では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/darwin\">darwin</a>となっています。<br />\n私の場合は以下のように記述しました。</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n <span class=\"synSpecial\">((</span>eq system-type <span class=\"synSpecial\">'</span>gnu/linux<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>setq scheme-program-name <span class=\"synConstant\">&quot;gosh -i&quot;</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">((</span>eq system-type <span class=\"synSpecial\">'</span>darwin<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>setq scheme-program-name <span class=\"synConstant\">&quot;/usr/local/bin/gosh -i&quot;</span><span class=\"synSpecial\">)))</span>\n</pre><p>条件を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>指定するのでwhenではなくcondを使用しました。<br />\nこれでｕｂｕｎｔｕでもｍａｃでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>が走ります。</p><br />\n<br />\n<p>そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mac\">mac</a>にもパスを通してあるはずなのになぜ\"gosh -i\"で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>が走らないんだろう</p><p>[参考]<br />\n<a href=\"http://d.hatena.ne.jp/kenbeese/20120212/title\">emacs&#x306E;&#x8A2D;&#x5B9A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;.emacs&#x3092;&#x8907;&#x6570;&#x306E;&#x74B0;&#x5883;(&#x7570;&#x306A;&#x308B;PC&#x3001;OS)&#x3067;&#x7D71;&#x4E00;&#x3059;&#x308B;&#x65B9;&#x6CD5; - Linux, Mac, Emacs&#x306B;&#x3064;&#x3044;&#x3066;&#x306E;&#x8A2D;&#x5B9A;&#x3001;&#x899A;&#x3048;&#x66F8;&#x304D;</a></p>\n\n","slug":"複数のシステムのＥｍａｃｓ上でｇａｕｃｈｅを使う時のinit.elの設定"}],"currentPage":21,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}