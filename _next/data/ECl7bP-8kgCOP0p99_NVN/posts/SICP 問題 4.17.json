{"pageProps":{"post":{"title":"SICP 問題 4.17","published":"2015/12/25","tags":["scheme","SICP"],"content":"\n<p>lambdaを評価すると新しくフレームが作られます．<br/>\nこれを防ぐためにletで<em>unassignment</em>を束縛するのではなくdefineで内部定義します．<br/>\ndefine-variable!はフレームに新たな変数を追加する手続きなので余計なフレームは作られません．<br/>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151225194001\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151225/20151225194001.jpg\" alt=\"f:id:wat-aro:20151225194001j:image\" title=\"f:id:wat-aro:20151225194001j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>scheme\n(define (scan-out-defines body)\n  (define (split-def-body proc-body)\n    (let iter ((proc-body proc-body)\n               (def &#39;())\n               (body &#39;()))\n      (cond ((null? proc-body) (cons (reverse def) (reverse body)))\n            ((definition? (car proc-body)) (iter (cdr proc-body)\n                                                 (cons (car proc-body) def)\n                                                 body))\n            (else (iter (cdr proc-body)\n                        def\n                        (cons (car proc-body) body))))))\n  (let* ((def-body-list (split-def-body body))\n         (def-list (car def-body-list))\n         (body-list (cdr def-body-list)))\n    (if (null? def-list)\n        body\n        (append  (map (lambda (x) (make-definition (definition-variable x) &#39;&#39;*unassigned*))\n                    def-list)\n                 (map (lambda (x) (list &#39;set! (definition-variable x)\n                                        (definition-value x)))\n                      def-list)\n                 body-list))))</pre>\n\n\n","slug":"SICP 問題 4.17"},"content":"<p>lambdaを評価すると新しくフレームが作られます．<br>\nこれを防ぐためにletで<em>unassignment</em>を束縛するのではなくdefineで内部定義します．<br>\ndefine-variable!はフレームに新たな変数を追加する手続きなので余計なフレームは作られません．<br>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151225194001\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151225/20151225194001.jpg\" alt=\"f:id:wat-aro:20151225194001j:image\" title=\"f:id:wat-aro:20151225194001j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">scheme\n</span><span class=\"code-line\">(define (scan-out-defines body)\n</span><span class=\"code-line\">  (define (split-def-body proc-body)\n</span><span class=\"code-line\">    (let iter ((proc-body proc-body)\n</span><span class=\"code-line\">               (def '())\n</span><span class=\"code-line\">               (body '()))\n</span><span class=\"code-line\">      (cond ((null? proc-body) (cons (reverse def) (reverse body)))\n</span><span class=\"code-line\">            ((definition? (car proc-body)) (iter (cdr proc-body)\n</span><span class=\"code-line\">                                                 (cons (car proc-body) def)\n</span><span class=\"code-line\">                                                 body))\n</span><span class=\"code-line\">            (else (iter (cdr proc-body)\n</span><span class=\"code-line\">                        def\n</span><span class=\"code-line\">                        (cons (car proc-body) body))))))\n</span><span class=\"code-line\">  (let* ((def-body-list (split-def-body body))\n</span><span class=\"code-line\">         (def-list (car def-body-list))\n</span><span class=\"code-line\">         (body-list (cdr def-body-list)))\n</span><span class=\"code-line\">    (if (null? def-list)\n</span><span class=\"code-line\">        body\n</span><span class=\"code-line\">        (append  (map (lambda (x) (make-definition (definition-variable x) ''*unassigned*))\n</span><span class=\"code-line\">                    def-list)\n</span><span class=\"code-line\">                 (map (lambda (x) (list 'set! (definition-variable x)\n</span><span class=\"code-line\">                                        (definition-value x)))\n</span><span class=\"code-line\">                      def-list)\n</span><span class=\"code-line\">                 body-list))))</span></code></pre>"},"__N_SSG":true}