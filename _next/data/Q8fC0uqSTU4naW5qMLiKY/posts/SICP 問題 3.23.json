{"pageProps":{"post":{"title":"SICP 問題 3.23","published":"2015/11/20","tags":["scheme","SICP"],"content":"\n<p>対を使って前後へのポインタを持ったdequeを実装する．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151120/20151120224817.jpg\" alt=\"f:id:wat-aro:20151120224817j:plain\" title=\"f:id:wat-aro:20151120224817j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; dequeの実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>value-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> ptr<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prev-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> ptr<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ptr<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; ((value))というリストを作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-ptr value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> value<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-front-ptr! queue <span class=\"synSpecial\">'())</span>\n  <span class=\"synSpecial\">(</span>set-rear-ptr! queue <span class=\"synSpecial\">'())</span>\n  queue<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>deque <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> deque<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>value-ptr deque<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>next-ptr deque<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-front-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> queue item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-rear-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> queue item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-prev-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ptr<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-next-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> ptr item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>set-prev-ptr! <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)</span>\n                          new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-next-ptr! new-item\n                          <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>set-next-ptr! <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">)</span>\n                          new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-prev-ptr! new-item\n                          <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;FRONT-DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>old-front-ptr <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>new-front-ptr <span class=\"synSpecial\">(</span>next-ptr old-front-ptr<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-front-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>set-next-ptr! old-front-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-prev-ptr! new-front-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-front-ptr! queue new-front-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;REAR-DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-rear-ptr <span class=\"synSpecial\">(</span>prev-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">(</span>old-rear-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-rear-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-rear<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>set-prev-ptr! old-rear-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-next-ptr! new-rear-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-rear-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-rear-ptr<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (printing q1)\n()\ngosh&gt; (front-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(c b a)\ngosh&gt; (front-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-delete-queue! q1)\nb\ngosh&gt; (front-delete-queue! q1)\nok\ngosh&gt; (printing q1)\n()\ngosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (printing q1)\n()\ngosh&gt; (front-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(c b a)\ngosh&gt; (front-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-delete-queue! q1)\nb\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-delete-queue! q1)\na\ngosh&gt; (printing q1)\n()\ngosh&gt; (rear-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (rear-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(a b)\ngosh&gt; (rear-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(a b c)\ngosh&gt; (rear-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(a b)\ngosh&gt; (rear-delete-queue! q1)\nb\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (rear-delete-queue! q1)\na\ngosh&gt; (printing q1)\n()</pre>\n\n\n","slug":"SICP 問題 3.23"},"content":"<p>対を使って前後へのポインタを持ったdequeを実装する．</p>\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151120/20151120224817.jpg\" alt=\"f:id:wat-aro:20151120224817j:plain\" title=\"f:id:wat-aro:20151120224817j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; dequeの実装</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>value-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> ptr<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prev-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> ptr<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ptr<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; ((value))というリストを作る</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-ptr value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> value<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>set-front-ptr! queue <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>set-rear-ptr! queue <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">  queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>deque <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> deque<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>value-ptr deque<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>next-ptr deque<span class=\"synSpecial\">)))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-front-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> queue item<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-rear-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> queue item<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-prev-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ptr<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-next-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> ptr item<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-insert-queue! queue item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-prev-ptr! <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                          new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-next-ptr! new-item\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-insert-queue! queue item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-next-ptr! <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                          new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-prev-ptr! new-item\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-delete-queue! queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"FRONT-DELETE! called with an empty queue\"</span> queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>old-front-ptr <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>new-front-ptr <span class=\"synSpecial\">(</span>next-ptr old-front-ptr<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-front-ptr<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>set-next-ptr! old-front-ptr\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>set-prev-ptr! new-front-ptr\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>set-front-ptr! queue new-front-ptr<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">)))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-delete-queue! queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"REAR-DELETE! called with an empty queue\"</span> queue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-rear-ptr <span class=\"synSpecial\">(</span>prev-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>old-rear-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-rear-ptr<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>value-ptr old-rear<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>set-prev-ptr! old-rear-ptr\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>set-next-ptr! new-rear-ptr\n</span><span class=\"code-line\">                                 <span class=\"synSpecial\">'())</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-rear-ptr<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>value-ptr old-rear-ptr<span class=\"synSpecial\">)))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define q1 (make-queue))\n</span><span class=\"code-line\">q1\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">()\n</span><span class=\"code-line\">gosh> (front-insert-queue! q1 'a)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a)\n</span><span class=\"code-line\">gosh> (front-insert-queue! q1 'b)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(b a)\n</span><span class=\"code-line\">gosh> (front-insert-queue! q1 'c)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(c b a)\n</span><span class=\"code-line\">gosh> (front-delete-queue! q1)\n</span><span class=\"code-line\">c\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(b a)\n</span><span class=\"code-line\">gosh> (front-delete-queue! q1)\n</span><span class=\"code-line\">b\n</span><span class=\"code-line\">gosh> (front-delete-queue! q1)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">()\n</span><span class=\"code-line\">gosh> (define q1 (make-queue))\n</span><span class=\"code-line\">q1\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">()\n</span><span class=\"code-line\">gosh> (front-insert-queue! q1 'a)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a)\n</span><span class=\"code-line\">gosh> (front-insert-queue! q1 'b)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(b a)\n</span><span class=\"code-line\">gosh> (front-insert-queue! q1 'c)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(c b a)\n</span><span class=\"code-line\">gosh> (front-delete-queue! q1)\n</span><span class=\"code-line\">c\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(b a)\n</span><span class=\"code-line\">gosh> (front-delete-queue! q1)\n</span><span class=\"code-line\">b\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a)\n</span><span class=\"code-line\">gosh> (front-delete-queue! q1)\n</span><span class=\"code-line\">a\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">()\n</span><span class=\"code-line\">gosh> (rear-insert-queue! q1 'a)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a)\n</span><span class=\"code-line\">gosh> (rear-insert-queue! q1 'b)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a b)\n</span><span class=\"code-line\">gosh> (rear-insert-queue! q1 'c)\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a b c)\n</span><span class=\"code-line\">gosh> (rear-delete-queue! q1)\n</span><span class=\"code-line\">c\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a b)\n</span><span class=\"code-line\">gosh> (rear-delete-queue! q1)\n</span><span class=\"code-line\">b\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">(a)\n</span><span class=\"code-line\">gosh> (rear-delete-queue! q1)\n</span><span class=\"code-line\">a\n</span><span class=\"code-line\">gosh> (printing q1)\n</span><span class=\"code-line\">()</span></code></pre>"},"__N_SSG":true}