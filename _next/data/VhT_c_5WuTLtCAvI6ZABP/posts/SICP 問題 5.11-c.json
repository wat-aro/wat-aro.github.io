{"pageProps":{"post":{"data":{"title":"SICP 問題 5.11-c","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n<p>各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>がスタックを持つようにしてpopやpushはそのスタックを使用するように修正する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; make-registerがstackを持つ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>contents <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassaigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;;(make-stack)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> contents value<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">((</span>dispatch <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span> val<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">((</span>stack <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- REGISTER&quot;</span> message<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; make-new-machineはstackを持たなくなった．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops                    <span class=\"synComment\">;すべてのregisterに対してstackを初期化する手続きを入れる</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synComment\">;; registerをregiter-tableに登録する．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                          register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; registerの値をregister-tableから見つける．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; pc内に保存された手続きを実行する</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceをpcに保存してexecute</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceにseqを登録</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> <span class=\"synComment\">;新しいopをthe-opsに追加</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine <span class=\"synComment\">;引数からstackを削除</span>\n                                  pc flag ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;引数からstackを削除</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;引数からstackを削除</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n         pc flag ops<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test.\n5.11-bと同じくfib-machine2で動けばよく，fib-machineでは正しい答えが返らない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine2\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine2 <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine2<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine2 <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: Empty stack -- POP\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">1770</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">1906</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">2</span>  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n        At line <span class=\"synConstant\">1810</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">3</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-c"},"content":"<p>各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>がスタックを持つようにしてpopやpushはそのスタックを使用するように修正する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; make-registerがstackを持つ</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>contents <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassaigned*</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;;(make-stack)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> contents value<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">((</span>dispatch <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span> val<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">((</span>stack <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown request -- REGISTER\"</span> message<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">    dispatch<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; make-new-machineはstackを持たなくなった．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'()))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops                    <span class=\"synComment\">;すべてのregisterに対してstackを初期化する手続きを入れる</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                     register-table<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">        <span class=\"synComment\">;; registerをregiter-tableに登録する．</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Multiply defined rgister: \"</span> name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                          register-table<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synComment\">;; registerの値をregister-tableから見つける．</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown register: \"</span> name<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">        <span class=\"synComment\">;; pc内に保存された手続きを実行する</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">'</span>done\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceをpcに保存してexecute</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceにseqを登録</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> <span class=\"synComment\">;新しいopをthe-opsに追加</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown request -- MACHINE\"</span> message<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">        dispatch<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine <span class=\"synComment\">;引数からstackを削除</span>\n</span><span class=\"code-line\">                                  pc flag ops<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;引数からstackを削除</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;引数からstackを削除</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown instruction type -- ASSEMBLE\"</span> inst<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n</span><span class=\"code-line\">        inst\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>make-execution-procedure\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n</span><span class=\"code-line\">         pc flag ops<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">     insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n</span><span class=\"code-line\">                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n</span><span class=\"code-line\">                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>test.\n5.11-bと同じくfib-machine2で動けばよく，fib-machineでは正しい答えが返らない．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine2\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>make-machine\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&#x3C; <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">'(</span>controller\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     fib-loop\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &#x3C;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     afterfib-n-1\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     afterfib-n-2\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     immediate-answer\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">     fib-done<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! fib-machine2 <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start fib-machine2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>get-register-contents fib-machine2 <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">55</span>\n</span></code></pre>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">done\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">***</span> ERROR: Empty stack -- POP\n</span><span class=\"code-line\">Stack Trace:\n</span><span class=\"code-line\">_______________________________________\n</span><span class=\"code-line\">  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        At line <span class=\"synConstant\">1770</span> of <span class=\"synConstant\">\"(standard input)\"</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        At line <span class=\"synConstant\">1906</span> of <span class=\"synConstant\">\"(standard input)\"</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">2</span>  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        At line <span class=\"synConstant\">1810</span> of <span class=\"synConstant\">\"(standard input)\"</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">3</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">\"/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm\"</span>\n</span></code></pre>"},"__N_SSG":true}