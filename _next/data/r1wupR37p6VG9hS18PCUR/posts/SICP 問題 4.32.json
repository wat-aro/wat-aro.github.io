{"pageProps":{"title":"SICP 問題 4.32","published":"2016/01/10","tags":["scheme","SICP"],"content":"<p>遅延度の高い遅延リストではcar部も遅延されているので未定義の変数を使って構成するできる．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\">my-stream\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&#x3C;procedure-env></span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>car部もlazy-evaluateされるのでlazyなリスト（ストリーム）だけでなくlazyな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CC%DA%B9%BD%C2%A4\">木構造</a>も作ることができる．</p>","slug":"SICP 問題 4.32","rawContent":"\n<p>遅延度の高い遅延リストではcar部も遅延されているので未定義の変数を使って構成するできる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\nmy-stream\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>car部もlazy-evaluateされるのでlazyなリスト（ストリーム）だけでなくlazyな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CC%DA%B9%BD%C2%A4\">木構造</a>も作ることができる．</p>\n\n"},"__N_SSG":true}