{"pageProps":{"title":"SICP 問題 4.27","published":"2016/01/07","tags":["scheme","SICP"],"content":"<p>遅延評価</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>id x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> w <span class=\"synSpecial\">(</span>id <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok \n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\">count\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\">w\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">10</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\">count\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">2</span>\n</span></code></pre>\n<p>wを定義する時に<code>(id (id 10))</code>がevalされる．<br>\naplication?からmy-applyに送られる．<br>\nこの時にoperatorはactual-valueされるがoperandsはされない．<br>\nそこで<code>(set! count (+ count 1))</code>の行からcountが1になり，<code>(id (id 10))</code>の値は<code>(thunk (id 10))</code>として保存される．．<br>\nその後，wを評価すると，<code>(actual-value w)</code>となるのでdelayしていた部分が全てforceされる．<br>\nしかし，この時点で<code>(id (id 10))</code>の値は<code>(id 10)</code>であると保存されているので<code>(thunk (id 10))</code>が返されるだけでset!行は実行されない．<br>\nそして<code>(thunk (id 10))</code>が評価されてcountが2になる．<br>\n　<br>\n環境の中身は以下のようになっている．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> the-global-environment\n</span><span class=\"code-line\"><span class=\"synError\">#0=</span><span class=\"synSpecial\">(((</span>w id count driver-loop try false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>thunk <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">((</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                     <span class=\"synSpecial\">(</span>announce-output output<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                     <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> b<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synConstant\">#f</span>\n</span><span class=\"code-line\">     <span class=\"synConstant\">#t</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> car><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> cdr><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> cons><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> null?><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synStatement\">=></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synError\">-></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synError\">+></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> *><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> /><span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>wの値は <code>(thunk (id 10))</code>になっている．</p>","slug":"SICP 問題 4.27","rawContent":"\n<p>遅延評価</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>id x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> w <span class=\"synSpecial\">(</span>id <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok \n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\nw\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">10</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">2</span>\n</pre>\n\n\n<p>wを定義する時に<code>(id (id 10))</code>がevalされる．<br/>\naplication?からmy-applyに送られる．<br/>\nこの時にoperatorはactual-valueされるがoperandsはされない．<br/>\nそこで<code>(set! count (+ count 1))</code>の行からcountが1になり，<code>(id (id 10))</code>の値は<code>(thunk (id 10))</code>として保存される．．<br/>\nその後，wを評価すると，<code>(actual-value w)</code>となるのでdelayしていた部分が全てforceされる．<br/>\nしかし，この時点で<code>(id (id 10))</code>の値は<code>(id 10)</code>であると保存されているので<code>(thunk (id 10))</code>が返されるだけでset!行は実行されない．<br/>\nそして<code>(thunk (id 10))</code>が評価されてcountが2になる．<br/>\n　<br/>\n環境の中身は以下のようになっている．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; the-global-environment\n<span class=\"synError\">#0=</span><span class=\"synSpecial\">(((</span>w id count driver-loop try false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>thunk <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synConstant\">1</span>\n     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">()</span>\n                <span class=\"synSpecial\">((</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span>announce-output output<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> b<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synConstant\">#f</span>\n     <span class=\"synConstant\">#t</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cdr&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cons&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> null?&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synStatement\">=&gt;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">-&gt;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">+&gt;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> *&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> /&gt;<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>wの値は <code>(thunk (id 10))</code>になっている．</p>\n\n"},"__N_SSG":true}