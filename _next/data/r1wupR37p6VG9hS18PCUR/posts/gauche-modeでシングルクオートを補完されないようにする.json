{"pageProps":{"title":"gauche-modeでシングルクオートを補完されないようにする","published":"2015/12/17","tags":["emacs","elisp","Gauche"],"content":"<p>smartparens-modeをアップデートしたら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeでシングルクオート<code>'</code>が補完されて<code>''</code>になってしまいました．<br>\n以前はsmartparens.elの該当箇所，</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n</span><span class=\"code-line\">                           clojure-mode\n</span><span class=\"code-line\">                           clojurec-mode\n</span><span class=\"code-line\">                           clojurescript-mode\n</span><span class=\"code-line\">                           clojurex-mode\n</span><span class=\"code-line\">                           common-lisp-mode\n</span><span class=\"code-line\">                           emacs-lisp-mode\n</span><span class=\"code-line\">                           eshell-mode\n</span><span class=\"code-line\">                           geiser-repl-mode\n</span><span class=\"code-line\">                           inf-clojure-mode\n</span><span class=\"code-line\">                           inferior-emacs-lisp-mode\n</span><span class=\"code-line\">                           inferior-lisp-mode\n</span><span class=\"code-line\">                           inferior-scheme-mode\n</span><span class=\"code-line\">                           lisp-interaction-mode\n</span><span class=\"code-line\">                           lisp-mode\n</span><span class=\"code-line\">                           monroe-mode\n</span><span class=\"code-line\">                           scheme-interaction-mode\n</span><span class=\"code-line\">                           scheme-mode\n</span><span class=\"code-line\">                           slime-repl-mode\n</span><span class=\"code-line\">                           racket-mode\n</span><span class=\"code-line\">                           racket-repl-mode<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">\"List of Lisp modes.\"</span>\n</span><span class=\"code-line\">  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>これに</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n</span><span class=\"code-line\">                           clojure-mode\n</span><span class=\"code-line\">                           clojurec-mode\n</span><span class=\"code-line\">                           clojurescript-mode\n</span><span class=\"code-line\">                           clojurex-mode\n</span><span class=\"code-line\">                           common-lisp-mode\n</span><span class=\"code-line\">                           emacs-lisp-mode\n</span><span class=\"code-line\">                           eshell-mode\n</span><span class=\"code-line\">                           geiser-repl-mode\n</span><span class=\"code-line\">                           inf-clojure-mode\n</span><span class=\"code-line\">                           inferior-emacs-lisp-mode\n</span><span class=\"code-line\">                           inferior-lisp-mode\n</span><span class=\"code-line\">                           inferior-scheme-mode\n</span><span class=\"code-line\">                           lisp-interaction-mode\n</span><span class=\"code-line\">                           lisp-mode\n</span><span class=\"code-line\">                           monroe-mode\n</span><span class=\"code-line\">                           scheme-interaction-mode\n</span><span class=\"code-line\">                           scheme-mode\n</span><span class=\"code-line\">                           slime-repl-mode\n</span><span class=\"code-line\">                           racket-mode\n</span><span class=\"code-line\">                           racket-repl-mode\n</span><span class=\"code-line\">                           gauche-mode<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">\"List of Lisp modes.\"</span>\n</span><span class=\"code-line\">  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeを付け足していたのですが，今回のようにsmartprensを新しいものにした時に消えてしまうのでinit.elに書くことにしました．</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">sp-lisp-modes</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">gauche-mode</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>通常smartparensを使う時には</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>でいいのですが，sp-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/lisp\">lisp</a>-modesにアクセスするために始めにsmartparensをrequireしています．</p>","slug":"gauche-modeでシングルクオートを補完されないようにする","rawContent":"\n<p>smartparens-modeをアップデートしたら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeでシングルクオート<code>'</code>が補完されて<code>''</code>になってしまいました．<br/>\n以前はsmartparens.elの該当箇所，</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n                           clojure-mode\n                           clojurec-mode\n                           clojurescript-mode\n                           clojurex-mode\n                           common-lisp-mode\n                           emacs-lisp-mode\n                           eshell-mode\n                           geiser-repl-mode\n                           inf-clojure-mode\n                           inferior-emacs-lisp-mode\n                           inferior-lisp-mode\n                           inferior-scheme-mode\n                           lisp-interaction-mode\n                           lisp-mode\n                           monroe-mode\n                           scheme-interaction-mode\n                           scheme-mode\n                           slime-repl-mode\n                           racket-mode\n                           racket-repl-mode<span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">&quot;List of Lisp modes.&quot;</span>\n  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>これに</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n                           clojure-mode\n                           clojurec-mode\n                           clojurescript-mode\n                           clojurex-mode\n                           common-lisp-mode\n                           emacs-lisp-mode\n                           eshell-mode\n                           geiser-repl-mode\n                           inf-clojure-mode\n                           inferior-emacs-lisp-mode\n                           inferior-lisp-mode\n                           inferior-scheme-mode\n                           lisp-interaction-mode\n                           lisp-mode\n                           monroe-mode\n                           scheme-interaction-mode\n                           scheme-mode\n                           slime-repl-mode\n                           racket-mode\n                           racket-repl-mode\n                           gauche-mode<span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">&quot;List of Lisp modes.&quot;</span>\n  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeを付け足していたのですが，今回のようにsmartprensを新しいものにした時に消えてしまうのでinit.elに書くことにしました．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">sp-lisp-modes</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">gauche-mode</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>通常smartparensを使う時には</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>でいいのですが，sp-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/lisp\">lisp</a>-modesにアクセスするために始めにsmartparensをrequireしています．</p>\n\n"},"__N_SSG":true}