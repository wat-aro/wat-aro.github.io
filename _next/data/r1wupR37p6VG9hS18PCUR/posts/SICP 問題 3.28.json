{"pageProps":{"title":"SICP 問題 3.28","published":"2015/11/24","tags":["scheme","SICP"],"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-gate a1 a2 output<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-action-procedure<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-value\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>logical-or <span class=\"synSpecial\">(</span>get-signal a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-signal a2<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>after-delay or-gate-delay\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">                     <span class=\"synSpecial\">(</span>set-signal! output new-value<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>add-action! a1 or-action-procedure<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>add-action! a2 or-action-procedure<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</span></code></pre>","slug":"SICP 問題 3.28","rawContent":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-action-procedure<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-value\n           <span class=\"synSpecial\">(</span>logical-or <span class=\"synSpecial\">(</span>get-signal a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-signal a2<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>after-delay or-gate-delay\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                     <span class=\"synSpecial\">(</span>set-signal! output new-value<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>add-action! a1 or-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-action! a2 or-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</pre>\n\n\n"},"__N_SSG":true}