{"pageProps":{"posts":[{"data":{"title":"Arch Linux で日本語 man ページと英語 man ページを使い分ける","published":"2022/05/29","tags":["Linux","Arch"]},"content":"\n普段コードを書く環境ではエラーメッセージのググラビリティを考えて locale を英語にしています。\n日本語でエラーメッセージを表示しても同じ問題にひっかかっている issue や StackOverFlow などが出てきづらくなるためです。\nでも man ページを読む際には日本語のほうが楽ですよね。\nしかし日本語の man ページしか見れなくなるのも他の人に共有する際に困ってしまいます。\nここでは日本語と英語の man ページをいい感じに共存する方法を紹介します。\n\nと言ってもやることは単純で\n\n```shell\n$ LANG=ja_JP.UTF-8 yay -S man-pages-ja\n```\n\nで日本語 man をインストールし、\n\n```fish\nabbr --add jman \"LANG=ja_JP.UTF-8 man\"\n```\n\nのように `abbr` を登録するか\n\n```bash\nalias jman='LANG=ja_JP.UTF-8 man'\n```\n\nのように `alias` を登録するだけです。\n`PKGBUILD` を見るとわかるのですが、`man-pages-ja` では環境変数 `LANG` の値を見て日本語 man をインストールするディレクトリを判定しています。\n\n```shell\npackage() {\n    mkdir -p ${pkgdir}/usr/share/man/${LANG}\n    cd ${srcdir}/${pkgname}-${pkgver}\n    make install\n}\n```\n\nそのため `yay -S` する際に `LANG` を渡すことで任意のディレクトリに日本語 man をインストールできるわけです。\nこうすると `man` を叩けばオリジナルの man ページが、\n`jman` を叩くと日本語の man ページが表示できるようになります。\n\nめでたしめでたし。\n","slug":"japanese-man-page"},{"data":{"title":"JSON parser を書いた","published":"2022/05/27","tags":["Rust","nom"]},"content":"\nyak shaving で作っていた JSON parser が一応完成。  \nRust 楽しいすなあ。\n\nHaskell の parsec の感覚で使えるかと思って [nom](https://github.com/Geal/nom) を使ってみたけれど、最初はなかなかとっつきづらく。  \nまあだいたい慣れることができたのでよし！\n\nせっかくなので [crates.io](https://crates.io/) に公開したのだけれど、  \nhttps://doc.rust-jp.rs/book-ja/ch14-02-publishing-to-crates-io.html を見ながら `cargo publish` すると他の crate と比べて表示が足りない。  \n`Cargo.toml` に `respository` や `documentation` を追加する必要があったのね。\n\nhttps://crates.io/crates/wson\n\n名前は `wat-aro` の json parser で `wson` にした。  \nテストがめんどうでした。  \n[json.org](https://www.json.org/json-en.html)にはお世話になりました。\n\nさっさと movable type を変換するぞ！\n","slug":"wson"},{"data":{"title":"Playwright で OGP 画像を生成する","published":"2022/05/24","tags":["Next.js","TypeScript"]},"content":"\nブログ記事のインポートをしたかったはずなのに json parser を作る yak shaving が楽しい。  \n次は Scheme のインタプリタを作りたくなってきた。危ない。\n\nさて、表題のとおりブログの OGP 画像を [Playwright](https://github.com/microsoft/playwright) で生成するようにした。  \nこのサイトは [Next.js](https://nextjs.org/) で作って、[GitHub Pages](https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages) でホスティングしている。  \nソースコードは[ここ](https://github.com/wat-aro/wat-aro.github.io)にある。\n\nブログ記事のタイトルと slug から OGP 画像を生成している。\n\n```ts\nimport { chromium } from 'playwright';\nimport { getHtml } from './getHtml';\n\ntype Params = {\n  title: string;\n  slug: string;\n};\n\nexport const takeScreenshot = async ({ title, slug }: Params) => {\n  const browser = await chromium.launch();\n  const context = await browser.newContext({\n    viewport: { width: 1200, height: 630 },\n  });\n  const page = await context.newPage();\n  const html = getHtml({ title });\n  await page.setContent(html, { waitUntil: 'load' });\n  await page.screenshot({\n    path: `public/og-images/${slug}.png`,\n    fullPage: true,\n  });\n  await browser.close();\n};\n```\n\n`await page.setContent(html, { waitUntil: 'load' });` の `load` を指定するのが味噌。  \nまた、`setContent` に渡す html 内で画像を使う場合は[データ URL](https://developer.mozilla.org/ja/docs/Web/HTTP/Basics_of_HTTP/Data_URLs) に base64 エンコードされた画像を渡す必要がある。  \n`setContent` には文字列を渡しているだけなためファイルパスでは Playwright は画像を特定できない。  \n後は html と css を書いたら完成。  \nこれくらいの用途だと Playwright でも Puppeteer でも変わらないね。\n\nまだまだサイトに実装しないといけないことが盛り沢山なのでがんばるぞい\n","slug":"generate-ogimage-by-playwright"},{"data":{"title":"json で nom のお勉強","published":"2022/05/16","tags":["Rust","nom"]},"content":"\n旧ブログの `movable type` を `markdown` に変換したい。  \n[nom](https://github.com/Geal/nom) でパースしようと思ったが Readme を読んでもいまいちしっくりこない。  \nparsec と同じようにはできませんか。\nとりあえず練習がてら何かをパースしてみる。  \n仕様があるほうが嬉しいので探してみると [json](https://www.json.org/json-ja.html) がよさそうだった。  \nまずは `digits` を書いてみた。  \n[digit1](https://docs.rs/nom/latest/nom/character/complete/fn.digit1.html) を使えば終わりなのだが、それでは練習にならないため定義通りに実装。\n\nhttps://github.com/wat-aro/wjson\n\n```rust\nfn zero(input: &str) -> IResult<&str, u64> {\n    map(char('0'), |c| c.to_string().parse::<u64>().unwrap())(input)\n}\n\nfn onenine(input: &str) -> IResult<&str, u64> {\n    map(\n        alt((\n            char('1'),\n            char('2'),\n            char('3'),\n            char('4'),\n            char('5'),\n            char('6'),\n            char('7'),\n            char('8'),\n            char('9'),\n        )),\n        |c| c.to_string().parse::<u64>().unwrap(),\n    )(input)\n}\n\npub fn digit(input: &str) -> IResult<&str, u64> {\n    alt((zero, onenine))(input)\n}\n\npub fn digits(input: &str) -> IResult<&str, u64> {\n    let (rest, v) = many1(digit)(input)?;\n    let str_vec: String = v.iter().map(|d| d.to_string()).collect::<String>();\n\n    Ok((rest, str_vec.parse().unwrap()))\n}\n```\n\nまだ `Rust` を書き慣れていないけれど楽しい。\n","slug":"study-nom-by-json"},{"data":{"title":"ブログを移転しました","published":"2022/05/15"},"content":"\nhttps://wat-aro.hatenablog.com/ のブログを移転。\n`github.io` 用にドメインは前から取得していたが、やっとサイトを作成する気になった。\n今後はこちらに書いていくつもり。\n\n使用技術は\n\n- Next.js\n- TypeScript\n- Tailwind CSS\n- github.io\n\nNext.js の開発体験はいいね。  \nあまり難しいことはやらないつもりだけど、 `webassembly` まわりの何かを仕込んでみたい。  \n残作業は\n\n- 旧ブログのデータのインポート\n- OGP の設定\n- reveal.js で書いたスライドをこのサイトで表示できるようにする\n\n### 旧ブログのデータのインポート\n\nはてなブログは `Movable Type` でデータをエクスポートできる。  \nこれを `markdown` に変換して移行する予定。  \n`Rust` の練習にちょうどいいかなーと思ってる。\n\n### OGP の設定\n\n[puppeteer](https://github.com/puppeteer/puppeteer) を使う予定。  \n`next export` を叩く前に `markdown` のファイルごとにスクリーンショットを取ればいけるかと。  \n若干めんどくさくなっているが、最後まで頑張ろう。\n\n### reveal.js で書いたスライドをこのサイトで表示できるようにする\n\nプロフィールにリンクはあるけれど、これを `Next.js` で管理できるようにしたい。  \nしばらくは [About](https://wat-aro.dev/about) に書いたままにする。\n\n### 最後に\n\n数年まともにブログを書いてこなかったので今後はちゃんと書いていくつもり。  \nやるぞ！\n","slug":"moved-my-blog-to-github-io"}]},"__N_SSG":true}