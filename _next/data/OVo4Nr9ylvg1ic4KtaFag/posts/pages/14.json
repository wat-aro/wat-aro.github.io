{"pageProps":{"posts":[{"data":{"title":"SICP 問題 3.13","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-cycle x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>last-pair x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span>\n  s<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> z <span class=\"synSpecial\">(</span>make-cycle <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b <span class=\"synSpecial\">'</span>c<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>zのポインタ図．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119224757\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119224757.jpg\" alt=\"f:id:wat-aro:20151119224757j:image\" title=\"f:id:wat-aro:20151119224757j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p><code>(last-pair z)</code>を計算しようとするとlast-pair?が#tになることがないので終わらない．</p>\n\n","slug":"SICP 問題 3.13"},{"data":{"title":"SICP 問題 3.12","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119223928\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119223928.jpg\" alt=\"f:id:wat-aro:20151119223928j:image\" title=\"f:id:wat-aro:20151119223928j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.12"},{"data":{"title":"SICP 問題 3.10","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> w1 <span class=\"synSpecial\">(</span>make-withdraw <span class=\"synConstant\">100</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; E2(balance:100)-&gt;E1(initial-amount:100)-&gt;global</span>\n\n<span class=\"synSpecial\">(</span>w1 <span class=\"synConstant\">50</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; E3-&gt;(amount:50)-&gt;E2(balance:50)-&gt;E1(initial-amount:100)-&gt;global</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>make-withdraw <span class=\"synConstant\">100</span><span class=\"synSpecial\">)))</span>\n<span class=\"synComment\">;; E5(balance:100)-&gt;E4(initial-amount:100)-&gt;global</span>\n</pre>\n\n\n","slug":"SICP 問題 3.10"},{"data":{"title":"SICP 問題 3.09","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>階乗を計算する手続き<code>(factorial 6)</code>の環境構造を示す．</p>\n\n<p> </p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119211757.jpg\" alt=\"f:id:wat-aro:20151119211757j:plain\" title=\"f:id:wat-aro:20151119211757j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p> \n \n反復</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorial\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fact-iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fact-iter\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>product counter max-count<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> counter max-count<span class=\"synSpecial\">)</span>\nproduct\n<span class=\"synSpecial\">(</span>fact-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> counter product<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\nmax-count<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119211800.jpg\" alt=\"f:id:wat-aro:20151119211800j:plain\" title=\"f:id:wat-aro:20151119211800j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n","slug":"SICP 問題 3.09"},{"data":{"title":"SICP 問題 3.08","published":"2015/11/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a x<span class=\"synSpecial\">))</span>\n      a<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>(f 0) (f 1)の順に評価したら0,0が返り，(f 1) (f 0)の順に評価すると1, 0 が返ってくれば題意を満たしたことになる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define f\n  (let ((a 1))\n    (lambda (x)\n      (set! a (* a x))\n      a)))\nf\ngosh&gt; (f 0)\n0\ngosh&gt; (f 1)\n0\ngosh&gt; (define f\n  (let ((a 1))\n    (lambda (x)\n      (set! a (* a x))\n      a)))\nf\ngosh&gt; (f 1)\n1\ngosh&gt; (f 0)\n0</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; letをlambdaで書き換えてみた</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a x<span class=\"synSpecial\">))</span>\n      a<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.08"},{"data":{"title":"SICP 問題 3.07","published":"2015/11/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account balance password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n               balance<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n    balance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>login-error amount<span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch pass m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> pass password<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> withdraw<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> deposit<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span>\n                           m<span class=\"synSpecial\">)))</span>\n        login-error<span class=\"synSpecial\">))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-joint account password new-account-password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch entered-pass m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> entered-pass new-account-password<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>account password m<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define peter-acc\n  (make-account 100 &#39;open-sesame))\npeter-acc\ngosh&gt; (define paul-acc\n  (make-joint peter-acc &#39;open-sesame &#39;rosebud))\npaul-acc\ngosh&gt; ((paul-acc &#39;rosebud &#39;deposit) 30)\n130\ngosh&gt; ((paul-acc &#39;rosebud &#39;withdraw) 50)\n80\ngosh&gt; ((peter-acc &#39;open-sesame &#39;withdraw) 50)\n30</pre>\n\n\n<p>意図したように動いてくれてます．<br/>\npaul-accで 80まで減らしてpeterが50引き出すと残り30ってことは両方のアカウントが同じものを指してるってことですからね．<br/>\nただdefineで口座の指定をすると参照先のアカウントのパスワードが間違ってた場合に,make-jointする時点でエラー返したいですよね．<br/>\nこのやりかたじゃそれができないっていうのが気になります．</p>\n\n","slug":"SICP 問題 3.07"},{"data":{"title":"SICP 問題 3.5","published":"2015/11/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use srfi-27<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>random-in-range low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>range <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> high low<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>random-real<span class=\"synSpecial\">)</span> range<span class=\"synSpecial\">))))</span>\n<span class=\"synComment\">;; 問題分には(+ low (random range))となっている．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>estimate-integral P x1 x2 y1 y2 trials<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x-length <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x2 x1<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>y-length <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> y2 y1<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>square-area <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x-length y-length<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> square-area <span class=\"synSpecial\">(</span>monte-carlo trials\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>P <span class=\"synSpecial\">(</span>random-in-range x1 x2<span class=\"synSpecial\">)</span>\n                                                <span class=\"synSpecial\">(</span>random-in-range y1 y2<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span>estimate-integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                   <span class=\"synConstant\">-1.0</span> <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">-1.0</span> <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">10000</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; 3.1436</pre>\n\n\n<p><code>estimate-integral</code>の中で<code>(random-in-range x1 x2)</code>と<code>(random-in-range x1 x2)</code>をletで束縛して<code>monte-carlo</code>に渡していたためなかなかうまくいきまんでした．</p>\n\n","slug":"SICP 問題 3.5"},{"data":{"title":"SICP 問題 3.4","published":"2015/11/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account balance password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n                 balance<span class=\"synSpecial\">)</span>\n          <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n      balance<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>login-error amount<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> counter<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> counter <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>coll-the-cop<span class=\"synSpecial\">)</span>\n          <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>call-the-cops<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">&quot;110&quot;</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch pass m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> pass password<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                 withdraw<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                 deposit<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span>\n                             m<span class=\"synSpecial\">)))</span>\n          login-error<span class=\"synSpecial\">))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.4"},{"data":{"title":"SICP 問題 3.06","published":"2015/11/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; オリジナルのrand</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rand <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x random-init<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span>rand-update x<span class=\"synSpecial\">))</span>\n                 x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 'generateで乱数生成，'resetで引数の数字で初期化するrand</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rand\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x random-init<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>reset new-rand<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x new-rand<span class=\"synSpecial\">)</span>\n      x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>generate<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span>rand-update x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>reset<span class=\"synSpecial\">)</span>\n             reset<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>generate<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>generate<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown argument -- RAND&quot;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> m<span class=\"synSpecial\">)))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.06"},{"data":{"title":"SICP 問題 3.3","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account balance password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n               balance<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n    balance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>login-error amount<span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch pass m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> pass password<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> withdraw<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> deposit<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span>\n                           m<span class=\"synSpecial\">)))</span>\n        login-error<span class=\"synSpecial\">))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define acc (make-account 100 &#39;secret-password))\nacc\ngosh&gt; ((acc &#39;secret-password &#39;withdraw) 50)\n50\ngosh&gt; ((acc &#39;some-password &#39;deposit) 40)\n&#34;Incorrect password&#34;</pre>\n\n\n","slug":"SICP 問題 3.3"},{"data":{"title":"SICP 問題 3.2","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-monitored f<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>in<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>how-many-calls?<span class=\"synSpecial\">)</span> mf<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>reset-count<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> mf<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>f in<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define s (make-monitored sqrt))\ns\ngosh&gt; (s 100)\n10\ngosh&gt; (s &#39;how-many-calls?)\n1\ngosh&gt; (s &#39;reset-count)\n0\ngosh&gt; (s &#39;how-many-calls?)\n0</pre>\n\n\n","slug":"SICP 問題 3.2"},{"data":{"title":"SICP 問題 3.1","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-accumulator n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>sum n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>num<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> sum <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> sum num<span class=\"synSpecial\">))</span>\n      sum<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define A (make-accumulator 5))\nA\ngosh&gt; (A 10)\n15\ngosh&gt; (A 10)\n25</pre>\n\n\n","slug":"SICP 問題 3.1"},{"data":{"title":"SICP 問題 2.91","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-termlist? L1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-c <span class=\"synSpecial\">(</span>div <span class=\"synSpecial\">(</span>coeff t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>coeff t2<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>new-o <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rest-of-result\n                     <span class=\"synSpecial\">(</span>div-terms <span class=\"synSpecial\">(</span>sub-terms L1\n                                           <span class=\"synSpecial\">(</span>mul-terms L2\n                                                      <span class=\"synSpecial\">(</span>make-term new-o\n                                                                 new-c<span class=\"synSpecial\">)))</span>\n                                L2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>add-terms <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-term new-o new-c<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest-of-result<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> rest-of-result<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-poly p1 p2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>same-variable? <span class=\"synSpecial\">(</span>variable p1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>variable p2<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>make-poly <span class=\"synSpecial\">(</span>variable p1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>div <span class=\"synSpecial\">(</span>term-list p1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>term-list p2<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Polys not in same var -- DIV POLY&quot;</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> p1 p2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.91"},{"data":{"title":"SICP 問題 2.89","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 2.89</span>\n<span class=\"synComment\">;; 濃い多項式に適している実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-polynomial valiable term-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> valiable term-list<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>valiable p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>term-list p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>valiable? v<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> v<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-valiable? v1 v2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>valiable? v1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>valiable? v2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> v1 v2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero-term? L<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>L1 <span class=\"synSpecial\">(</span>term-list L<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>empty-termlist? L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>=zero? <span class=\"synSpecial\">(</span>coeff <span class=\"synSpecial\">(</span>first L1<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span>=zero-term? <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-term term term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> term term-list<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-termlist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-term term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> term-list<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-terms term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> term-list<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-termlist? term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> term-list<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-term order coeff<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> coeff <span class=\"synSpecial\">(</span>iota order <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>order term<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synSpecial\">(</span>rest-terms term<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>coeff term<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-term term<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-terms L<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-termlist? L<span class=\"synSpecial\">)</span>\n      empty-termlist\n      <span class=\"synSpecial\">(</span>addjoin-term <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span>first term<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>negative-terms <span class=\"synSpecial\">(</span>rest-terms L<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o1 <span class=\"synSpecial\">(</span>order L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o2 <span class=\"synSpecial\">(</span>order L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term t1 <span class=\"synSpecial\">(</span>add-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term t2 <span class=\"synSpecial\">(</span>add-terms L1 <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n            <span class=\"synSpecial\">(</span>addjoin-term <span class=\"synSpecial\">(</span>add t1 t2<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>add-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-terms L1<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o1 <span class=\"synSpecial\">(</span>order L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o2 <span class=\"synSpecial\">(</span>order L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term t1\n                         <span class=\"synSpecial\">(</span>sub-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term <span class=\"synSpecial\">(</span>negative t2<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>sub-terms L1 <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n            <span class=\"synSpecial\">(</span>adjoin-term <span class=\"synSpecial\">(</span>sub t1 t2<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>sub-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>add-terms\n          <span class=\"synSpecial\">(</span>mul-term-by-all-terms\n           <span class=\"synSpecial\">(</span>make-term <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>iota <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n           L2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>mul-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-term-by-all-terms t L<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-termlist L<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>rest-terms t<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>add-join-term <span class=\"synSpecial\">(</span>mul <span class=\"synSpecial\">(</span>first-term t<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-term L<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>mul-term-by-all-terms t <span class=\"synSpecial\">(</span>rest-terms L<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.89"},{"data":{"title":"SICP 問題 2.88","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; polynominal-package</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>coeff p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>polynominal<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; 2.88</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>negative x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-number</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-integer x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-integer x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rational</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-rational x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-rational <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-raitonal x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; real</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-real x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-real x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complex</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rect-angler</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-rectangler x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-complex-from-mag-ang <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> x<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">180</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">angle</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>rectangler<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-rectangler x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; real-imag</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-polar x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                               <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>polar<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-polar x<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; polynomial</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-term p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>mul-term <span class=\"synSpecial\">(</span>make-term <span class=\"synConstant\">0</span> <span class=\"synConstant\">-1</span><span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>negative-term L2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>adjoin-term\n                   t1 <span class=\"synSpecial\">(</span>sub-term <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>adjoin-term\n                   <span class=\"synSpecial\">(</span>negative-term L2<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>sub-term L1 <span class=\"synSpecial\">(</span>rest-term L2<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>adjoin-term\n                   <span class=\"synSpecial\">(</span>make-term <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>sub <span class=\"synSpecial\">(</span>coeff t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>coeff t2<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span>sub-term <span class=\"synSpecial\">(</span>rest-term L1<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>rest-term L2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>polynomil<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-term x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sub <span class=\"synSpecial\">'(</span>polynomiial <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>sub-terms L1 L2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.88"},{"data":{"title":"SICP 問題 2.87","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; polynominal-package</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>coeff p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>polynominal<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.87"},{"data":{"title":"SICP 問題 2.86","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-root x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square-root x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>sine x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cosine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>cosine x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>atangent x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>atangent x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-number</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rational</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-rat <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span>\n                                               <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n\n<span class=\"synComment\">;; real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complex</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                                 <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>imag<span class=\"synSpecial\">)))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-mag-ang <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> x<span class=\"synSpecial\">))</span>\n                                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">angle</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n\n</pre>\n\n\n","slug":"SICP 問題 2.86"},{"data":{"title":"SICP 問題 2.85","published":"2015/11/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-project-packege<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>project x<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">'</span>complex <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">'</span>real <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rational <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">inexact-&gt;exact</span> x<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span>make-rational <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">numerator</span> rational<span class=\"synSpecial\">)</span>\n                                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">denominator</span> rational<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>make-scheme-number <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">round</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">)</span>\n                                                          <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>drop x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>projected <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">(</span>type-tag x<span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>raised <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag projected<span class=\"synSpecial\">))</span> projected<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>equ? x raised<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>drop projected<span class=\"synSpecial\">)</span>\n        x<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tower <span class=\"synSpecial\">'(</span>complex real rational scheme-number<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-type? a b<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type-&lt; a b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>same-type? a b<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>type-&lt; <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">))</span> a<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">))</span> b<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>highest-type lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span>type-&lt; result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span>iter result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-highest-type high lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>target x<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> high target<span class=\"synSpecial\">)</span>\n                             target\n                             <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag target<span class=\"synSpecial\">))</span>\n                                    target<span class=\"synSpecial\">)))))</span>\n           lst<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op types<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span>drop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;drop</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-args <span class=\"synSpecial\">(</span>same-highest-type <span class=\"synSpecial\">(</span>highest-type args<span class=\"synSpecial\">)</span>\n                                             args<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op <span class=\"synSpecial\">(</span>type-tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> new-args<span class=\"synSpecial\">)))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n                  <span class=\"synSpecial\">(</span>dorp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents new-args<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;drop</span>\n                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.85"},{"data":{"title":"SICP 問題 2.84","published":"2015/11/02","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tower <span class=\"synSpecial\">'(</span>complex real rational scheme-number<span class=\"synSpecial\">)))</span>\n    <span class=\"synComment\">;; 同じタイプか調べる述語</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-type? a b<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)))</span>\n    <span class=\"synComment\">;; aよりもbのほうが階層が高いか調べる述語</span>\n    <span class=\"synComment\">;; 両方をraiseしながらcomplexに先になったほうが階層が高い</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type-&lt; a b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>same-type? a b<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>type-&lt; <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">))</span> a<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">))</span> b<span class=\"synSpecial\">)))))</span>\n    <span class=\"synComment\">;; リストの中でもっとも高い階層の型を調べる</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>highest-type lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span>type-&lt; result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span>iter result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))))</span>\n    <span class=\"synComment\">;; リストの要素すべてを最も階層の高い型highまでraiseする</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-highest-type high lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>target x<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> high target<span class=\"synSpecial\">)</span>\n                             target\n                             <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag target<span class=\"synSpecial\">))</span>\n                                    target<span class=\"synSpecial\">)))))</span>\n           lst<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op types<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-args <span class=\"synSpecial\">(</span>same-highest-type <span class=\"synSpecial\">(</span>highest-type args<span class=\"synSpecial\">)</span>\n                                             args<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op <span class=\"synSpecial\">(</span>type-tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> new-args<span class=\"synSpecial\">)))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents new-args<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.84"},{"data":{"title":"SICP 問題 2.83","published":"2015/11/01","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>raise x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>raise x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-numberパッケージで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scheme-number-&gt;rational n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-rational n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">'</span>scheme-number scheme-number-&gt;rational<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; rationalパッケージで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rational-&gt;real x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">1.0</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">'</span>rational rational-&gt;real<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; real-numberパッケージで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>real-&gt;complex<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-complex-from-real-imag x <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">'</span>real-number real-&gt;complex<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 2.83"}],"currentPage":14,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}