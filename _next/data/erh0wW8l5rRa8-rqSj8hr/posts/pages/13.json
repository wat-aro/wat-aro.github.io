{"pageProps":{"posts":[{"data":{"title":"SICP 3.4.2 parallel-executeの実装","published":"2015/12/03","tags":["Gauche","scheme","SICP"]},"content":"\n<p>これ以降やるための準備です．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>.threadsの使い方がわからなかったのでリファレンス見ながらググって見つけたコードを理解しました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use gauche.threads<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> time proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">(</span>thread-sleep! time<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-print time name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> time <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                <span class=\"synSpecial\">(</span>print name<span class=\"synSpecial\">)</span>\n                name<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(let ((t1 (make-thread (delay-print 4 &#34;First thread&#34;)))\n            (t2 (make-thread (delay-print 2  &#34;Secound thread&#34;))))\n        (thread-start! t1)\n        (thread-start! t2)\n        (print &#34;Main thread&#34;)\n        (thread-join! t1)\n        (thread-join! t2))\nMain thread\nSecound thread\nFirst thread\n&#34;Secound thread&#34;</pre>\n\n\n<p><code>procs</code>にある手続きに対して全て<code>make-thread</code>して<code>threads</code>に保存．<br/>\n<code>threads</code>に保存したスレッドを全てスタートし，ジョインで値を取る．<br/>\nスレッドをスタートしているので値を得る前に次のスレッドをスタートできるので並列に実行していることになる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parallel-execute <span class=\"synSpecial\">.</span> procs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>i <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>threads <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span>make-thread proc i<span class=\"synSpecial\">))</span> procs<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> thread-start! threads<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> thread-join! threads<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (parallel-execute\n       (delay-print 4 &#34;A&#34;)\n       (delay-print 2 &#34;B&#34;)\n       (delay-print 1 &#34;C&#34;))\nC\nB\nA\n(&#34;A&#34; &#34;B&#34; &#34;C&#34;)</pre>\n\n\n<p>　<br/>\n　<br/>\n　<br/>\n参考</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fsicp.g.hatena.ne.jp%2Ftkmr2000%2F20090212%2F1234456834\" title=\" 3.4.2 並列性の制御機構 - SICP読書メモ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://sicp.g.hatena.ne.jp/tkmr2000/20090212/1234456834\">sicp.g.hatena.ne.jp</a></cite></p>\n\n","slug":"SICP 3.4.2 parallel-executeの実装"},{"data":{"title":"schemeでクイックソートとマージソート","published":"2015/11/29","tags":["scheme"]},"content":"\n<p>こういうのを書いてなかったので．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; クイックソート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick-sort lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      lst\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>quick-sort <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>quick-sort <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> x first<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; マージソート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge-sort lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge l m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> m<span class=\"synSpecial\">)</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> m<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>merge l <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> m<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>divide lst<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n        lst\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>list-size <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> lst<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>half <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">floor</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> list-size <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>divide <span class=\"synSpecial\">(</span>take lst half<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>divide <span class=\"synSpecial\">(</span>drop lst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> list-size half<span class=\"synSpecial\">)))))))</span>\n  <span class=\"synSpecial\">(</span>divide lst<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"schemeでクイックソートとマージソート"},{"data":{"title":"Gaucheの組み込み手続きの戻し方","published":"2015/11/29","tags":["gauche"]},"content":"\n<p>何回も忘れてその都度ググったりプログライング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>見るのでダメですね．\nここに書いておきます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> func-name <span class=\"synSpecial\">(</span>with-module gauche func-name<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"Gaucheの組み込み手続きの戻し方"},{"data":{"title":"SICP 問題 3.32","published":"2015/11/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; A-&gt;B-&gt;Cという順に並んだ回線があったとする．</span>\n<span class=\"synComment\">;; FIFOの場合Aが変化するとそれがBに伝わり，次のactionが実行されCに伝わる．</span>\n<span class=\"synComment\">;; FILOの場合Aが変化してもまずB-C間のactionが実行されCは変化しない．</span>\n<span class=\"synComment\">;; そのあとA-B間のactionが実行されるAの変化がBに伝わる．</span>\n<span class=\"synComment\">;; FILOの場合は最後まで変化が伝わらないためFIFOが使われている．</span>\n</pre>\n\n\n","slug":"SICP 問題 3.32"},{"data":{"title":"SICP 問題 3.31","published":"2015/11/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; accept-action-procedure!でprocを実行して初期化している部分で初期化しないとどうなるか．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>signal-value <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>action-procedures <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-my-signal! new-value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> signal-value new-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> signal-value new-value<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>call-each action-procedures<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accept-action-procedure! proc<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> action-procedures <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc action-procedures<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;この(proc)がないとどうなるか</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>get-signal<span class=\"synSpecial\">)</span> signal-value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>set-signal!<span class=\"synSpecial\">)</span> set-my-signal!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>add-action!<span class=\"synSpecial\">)</span> accept-action-procedure!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- WIRE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; and-gate手続きをつかって述べる．</span>\n<span class=\"synComment\">;; ここでprocがないとここの内部定義and-action-procedureを登録しているだけで実行しない．</span>\n<span class=\"synComment\">;; つまりafter-delayも実行しない．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-action-procedure<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-value\n           <span class=\"synSpecial\">(</span>logical-and <span class=\"synSpecial\">(</span>get-signal a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-signal a2<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>after-delay and-gate-delay\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                     <span class=\"synSpecial\">(</span>set-signal! output new-value<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>add-action! a1 and-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-action! a2 and-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; after-delay手続きでthe-agendaに登録している．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>after-delay <span class=\"synStatement\">delay</span> action<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-to-agenda! <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>current-time the-agenda<span class=\"synSpecial\">))</span>\n                  action\n                  the-agenda<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; propagateはthe-agendaに登録されたactionを一つずつ実行する．</span>\n<span class=\"synComment\">;; after-delayが呼ばれていないので何も登録されていないため何も実行できない．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>propagate<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-agenda? the-agenda<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-item <span class=\"synSpecial\">(</span>first-agenda-item the-agenda<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>first-item<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>remove-first-agenda-item! the-agenda<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>propagate<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.31"},{"data":{"title":"SICP 問題 3.30","published":"2015/11/25","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 最後のfull-adderのc-inは0．</span>\n<span class=\"synComment\">;; (make-wire)の初期値は0と仮定してます．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ripple-carry-adder Ak Bk Sk C<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>c-in <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Ak<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>full-adder <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Ak<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Bk<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Sk<span class=\"synSpecial\">)</span> C<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>full-adder <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Ak<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Bk<span class=\"synSpecial\">)</span> c-in <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Sk<span class=\"synSpecial\">)</span> C<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>ripple-carry-adder <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Ak<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Bk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Sk<span class=\"synSpecial\">)</span> c-in<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.30"},{"data":{"title":"SICP 問題 3.29","published":"2015/11/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>b1 <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>b2 <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>c <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>inverter a1 b1<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>inverter a2 b2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>and-gate b1 b2 c<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>inverter c output<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 遅延時間は(+ and-gate-delay (* 2 inverter-delay))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.29"},{"data":{"title":"SICP 問題 3.28","published":"2015/11/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-action-procedure<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-value\n           <span class=\"synSpecial\">(</span>logical-or <span class=\"synSpecial\">(</span>get-signal a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-signal a2<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>after-delay or-gate-delay\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                     <span class=\"synSpecial\">(</span>set-signal! output new-value<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>add-action! a1 or-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-action! a2 or-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.28"},{"data":{"title":"SICP 問題 3.26","published":"2015/11/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; tree</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-tree key value left-branch right-branch<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> key value left-branch right-branch<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 選択子</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>key-tree tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>value-tree tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; set</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-value! value tree<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-left-branch! left tree<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> tree<span class=\"synSpecial\">)</span> left<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-right-branch! right tree<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> tree<span class=\"synSpecial\">)</span> right<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span>make-tree <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-list<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> table<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n                   table\n                   <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>value-tree table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>left-branch table<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>right-branch table<span class=\"synSpecial\">))))))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-list value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>key-tree local-table<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> local-table <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>set-value! <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span> table<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>left-branch table<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>set-left-branch! <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span> table<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>left-branch table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>right-branch table<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>set-right-branch! <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span> table<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>right-branch table<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>make-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> value <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n          <span class=\"synSpecial\">(</span>make-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>insert-iter! <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> local-table<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>printing<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">((</span>error <span class=\"synConstant\">&quot;Unknown operation --TABLE&quot;</span> m<span class=\"synSpecial\">)))))</span>\n  dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup table key-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>table <span class=\"synSpecial\">'</span>lookup<span class=\"synSpecial\">)</span> key-list<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! table key-list value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>table <span class=\"synSpecial\">'</span>insert!<span class=\"synSpecial\">)</span> key-list value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing table<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>table <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define t1 (make-table))\nt1\ngosh&gt; (insert! t1 &#39;(1 3) &#39;a)\ndone\ngosh&gt; (printing t1)\n(1 (3 a () ()) () ())\n#&lt;undef&gt;\ngosh&gt; (lookup t1 &#39;(1 3))\n(3 a () ())</pre>\n\n\n","slug":"SICP 問題 3.26"},{"data":{"title":"SICP 問題 3.25","published":"2015/11/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; keyではなくkey-listを'(x y z)という形で渡す</span>\n<span class=\"synComment\">;; key-listのcdrがnullになるまで再帰すればkeyの数がいくつでも対応できる</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*local-table*</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-list<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> key-list<span class=\"synSpecial\">)</span>\n            false\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> record\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n                       record\n                       <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span> recordf<span class=\"synSpecial\">)))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-list value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> key-list<span class=\"synSpecial\">)</span>\n            false\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> record value<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span>\n                            record<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> table\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> table<span class=\"synSpecial\">)))))))</span>\n      <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- TABLE&quot;</span> m<span class=\"synSpecial\">)))))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.25"},{"data":{"title":"SICP 問題 3.24","published":"2015/11/22","tags":["scheme","SICP"]},"content":"\n<p>assocをequal?以外を使ってテストできるようにする．\nmake-table手続きはキーの等価性に使うsame-key?手続きを引数にとる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table same-key?<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key value records<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> records<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span>same-key? key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> records<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> records<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> records<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-1 key-2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> record<span class=\"synSpecial\">)</span>\n                  false<span class=\"synSpecial\">))</span>\n            false<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-1 key-2 value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> record value<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> subtable\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> local-table\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> key-1\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- TABLE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.24"},{"data":{"title":"SICP 問題 3.23","published":"2015/11/20","tags":["scheme","SICP"]},"content":"\n<p>対を使って前後へのポインタを持ったdequeを実装する．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151120/20151120224817.jpg\" alt=\"f:id:wat-aro:20151120224817j:plain\" title=\"f:id:wat-aro:20151120224817j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; dequeの実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>value-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> ptr<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prev-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> ptr<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ptr<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; ((value))というリストを作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-ptr value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> value<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-front-ptr! queue <span class=\"synSpecial\">'())</span>\n  <span class=\"synSpecial\">(</span>set-rear-ptr! queue <span class=\"synSpecial\">'())</span>\n  queue<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>deque <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> deque<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>value-ptr deque<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>next-ptr deque<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-front-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> queue item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-rear-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> queue item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-prev-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ptr<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-next-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> ptr item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>set-prev-ptr! <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)</span>\n                          new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-next-ptr! new-item\n                          <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>set-next-ptr! <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">)</span>\n                          new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-prev-ptr! new-item\n                          <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;FRONT-DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>old-front-ptr <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>new-front-ptr <span class=\"synSpecial\">(</span>next-ptr old-front-ptr<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-front-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>set-next-ptr! old-front-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-prev-ptr! new-front-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-front-ptr! queue new-front-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;REAR-DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-rear-ptr <span class=\"synSpecial\">(</span>prev-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">(</span>old-rear-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-rear-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-rear<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>set-prev-ptr! old-rear-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-next-ptr! new-rear-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-rear-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-rear-ptr<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (printing q1)\n()\ngosh&gt; (front-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(c b a)\ngosh&gt; (front-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-delete-queue! q1)\nb\ngosh&gt; (front-delete-queue! q1)\nok\ngosh&gt; (printing q1)\n()\ngosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (printing q1)\n()\ngosh&gt; (front-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(c b a)\ngosh&gt; (front-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-delete-queue! q1)\nb\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-delete-queue! q1)\na\ngosh&gt; (printing q1)\n()\ngosh&gt; (rear-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (rear-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(a b)\ngosh&gt; (rear-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(a b c)\ngosh&gt; (rear-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(a b)\ngosh&gt; (rear-delete-queue! q1)\nb\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (rear-delete-queue! q1)\na\ngosh&gt; (printing q1)\n()</pre>\n\n\n","slug":"SICP 問題 3.23"},{"data":{"title":"SICP 問題 3.22","published":"2015/11/20","tags":["scheme","SICP"]},"content":"\n<p>局所状態を持つ手続きとしてキューを定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>queue <span class=\"synSpecial\">'</span>insert-queue!<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>queue <span class=\"synSpecial\">'</span>delete-queue!<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>front-ptr <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>rear-ptr <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue?<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> front-ptr<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-queue! item<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> item<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue?<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> front-ptr new-item<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> rear-ptr new-item<span class=\"synSpecial\">)</span>\n               front-ptr<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> rear-ptr new-item<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> rear-ptr new-item<span class=\"synSpecial\">)</span>\n               front-ptr<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-queue!<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue?<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;DELETE called with an empty queue&quot;</span> front-ptr<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> front-ptr <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> front-ptr<span class=\"synSpecial\">))</span>\n             front-ptr<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-queue!<span class=\"synSpecial\">)</span>\n             insert-queue!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>delete-queue!<span class=\"synSpecial\">)</span>\n             delete-queue!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Undefined operation -- MAKE-QUEUE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (insert-queue! q1 &#39;a)\n(a)\ngosh&gt; (insert-queue! q1 &#39;b)\n(a b)\ngosh&gt; (delete-queue! q1)\n(b)</pre>\n\n\n","slug":"SICP 問題 3.22"},{"data":{"title":"SICP 問題 3.21","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-front-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> queue item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-rear-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> queue item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;FRONT called with an empty queue&quot;</span> queue<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> item <span class=\"synSpecial\">'())))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-pair<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-pair<span class=\"synSpecial\">)</span>\n           queue<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> new-pair<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-pair<span class=\"synSpecial\">)</span>\n           queue<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>set-front-ptr! queue <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n         queue<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>項目がキューに二度挿入されているのではなく，最後に挿入した項目へ向いたポインタが二つある．\nfront-ptrの最後のポインタとrear-ptrがそう．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; print-queue</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>print-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.21"},{"data":{"title":"SICP 問題 3.19","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>答え見た．<br/>\n<a href=\"https://github.com/nomnel/SICP/blob/master/3/19.scm\">https://github.com/nomnel/SICP/blob/master/3/19.scm</a><br/>\n一歩ずつ進むポインタと二歩ずつ進むポインタが同じになれば循環している．<br/>\nうまいこと考えてるな.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>look-check x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>check x0 x1<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> x0 x1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x1<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x1<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>check <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x1<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>check <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x<span class=\"synSpecial\">))</span>\n      <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.19"},{"data":{"title":"SICP 問題 3.18","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 循環するリストを見つける手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cycle? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>x x<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>record <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> x record<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x record<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x record<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.18"},{"data":{"title":"SICP 問題 3.17","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>任意の構造の異なる対の個数を返すcount-pairsを完成させる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-pairs x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> pair-list <span class=\"synSpecial\">'())</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur s<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> s pair-list<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> pair-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> s pair-list<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n              <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>recur s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.17"},{"data":{"title":"SICP 問題 3.16","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>ポインタが同じ構造を指していた場合に重複して数えてしまう．<br/>\nさらに，循環リストの場合は結果が返ってこない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-pairs x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">))</span>\n      <span class=\"synConstant\">0</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>count-pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>count-pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n         <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119232255\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119232255.jpg\" alt=\"f:id:wat-aro:20151119232255j:image\" title=\"f:id:wat-aro:20151119232255j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.16"},{"data":{"title":"SICP 問題 3.15","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> z1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> z2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-to-wow! x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>wow<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>(set-to-wow! z1)と(set-to-wow! z2)の結果の箱とポインタ図</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119231205\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119231205.jpg\" alt=\"f:id:wat-aro:20151119231205j:image\" title=\"f:id:wat-aro:20151119231205j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.15"},{"data":{"title":"SICP 問題 3.14","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>mysteryはreverseと同じ結果を返し，xを先頭の要素だけを取り出したリストに置き換える．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mystery x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop x y<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n        y\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>temp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> x y<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>loop temp x<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>loop x <span class=\"synSpecial\">'()))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119230908\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119230908.jpg\" alt=\"f:id:wat-aro:20151119230908j:image\" title=\"f:id:wat-aro:20151119230908j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.14"}],"page":13},"__N_SSG":true}