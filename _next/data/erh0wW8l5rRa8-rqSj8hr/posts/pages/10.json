{"pageProps":{"posts":[{"data":{"title":"SICP 問題 4.09","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; iteratorの実装</span>\n<span class=\"synComment\">;; whileの使用例</span>\n<span class=\"synSpecial\">(</span>while <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> i <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> i<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> while <span class=\"synSpecial\">()</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> i <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> i<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>while<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 破壊的です．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>while<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-named-let <span class=\"synSpecial\">'</span>my-while <span class=\"synSpecial\">'()</span>\n                  <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>while-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>meke-begin\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>while-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">'(</span>my-while<span class=\"synSpecial\">)))</span>\n                           <span class=\"synSpecial\">'())))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.09"},{"data":{"title":"SICP 問題 4.08","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n<p>let->combinationの変更ですんでいるのでevalは変更しなくていい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synSpecial\">'(</span>let fib-iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n                           <span class=\"synSpecial\">(</span>= <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                               b\n                               <span class=\"synSpecial\">(</span>fib-iter <span class=\"synSpecial\">(</span>+ a b<span class=\"synSpecial\">)</span> a <span class=\"synSpecial\">(</span>- count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">((</span><span class=\"synStatement\">define</span> fib-iter\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a b count<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n               b\n               <span class=\"synSpecial\">(</span>fib-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n       <span class=\"synSpecial\">(</span>fib-iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span> n<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.08"},{"data":{"title":"SICP 問題 4.07","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n<p>let*をネストしたletで置き換える．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (let* ((x 3)</span>\n<span class=\"synComment\">;;        (y (+ x 2))</span>\n<span class=\"synComment\">;;        (z (+ x y 5)))</span>\n<span class=\"synComment\">;;   (* x z))</span>\n\n<span class=\"synComment\">;; (let ((x 3))</span>\n<span class=\"synComment\">;;   (let ((y (+ x 2)))</span>\n<span class=\"synComment\">;;     (let ((z (+ x y 5)))</span>\n<span class=\"synComment\">;;       (* x z))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;let*を追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synSpecial\">'(</span>let* <span class=\"synSpecial\">((</span>x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">(</span>+ x x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span>* x y<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span>+ x y z<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>* x y z<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x y<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x y z<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x y z<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.07"},{"data":{"title":"SICP 問題 4.06","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n<p>letを導入．<br/>\nlambdaに変形することで定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (let ((a 1) (b 2) (c 3))</span>\n<span class=\"synComment\">;;   (+ a b c))</span>\n\n<span class=\"synComment\">;; ((lambda (a b c)</span>\n<span class=\"synComment\">;;    (+ a b c)) 1 2 3)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synSpecial\">'(</span>let <span class=\"synSpecial\">((</span>var1 exp1<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>var2 exp2<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>var3 exp3<span class=\"synSpecial\">))</span>\n                          body1\n                          body2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var1 var2 var3<span class=\"synSpecial\">)</span>\n   body1\n   body2<span class=\"synSpecial\">)</span>\n exp1 exp2 exp3<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;letを追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.06"},{"data":{"title":"SICP 問題 4.05","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n<p>make-ifに渡す前にclauseをpredicateとactionにわかる．\n(car action)に'=>があれば(cadr action)にpredicateを適用する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false <span class=\"synComment\">;; else 説は無い</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last: COND-&gt;IF&quot;</span>\n                       clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>action <span class=\"synSpecial\">(</span>cond-action first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.05"},{"data":{"title":"SICP 問題 4.04","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; and</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>and<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>true\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; or</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>or<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">'</span>true<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 派生式としてのandとor</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>expand-and-clause <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-and-clause clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>true\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>lst-exp? clauses<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>first-exp clauses<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;最後の式の値を返す.</span>\n          <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>first-exp clauses<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>expand-and-clause <span class=\"synSpecial\">(</span>rest-exps clauses<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>expand-or-clause <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-or-clause clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>first-exp clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>make-if first\n                 first\n                 <span class=\"synSpecial\">(</span>expand-or-clause <span class=\"synSpecial\">(</span>rest-exps clauses<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.04"},{"data":{"title":"SICP 問題 4.03","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; evalをデータ主導スタイルに書き換える．</span>\n<span class=\"synComment\">;; 本文で定義されたeval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; opを持つexpと持たないexpで分ける．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>op <span class=\"synSpecial\">(</span>get <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;opが見付からなければfalseが束縛</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>op\n                 <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-1 key-2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> record<span class=\"synSpecial\">)</span>\n                  false<span class=\"synSpecial\">))</span>\n            false<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-1 key-2 value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> record value<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> subtable\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> local-table\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> key-1\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- TABLE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> operation-table <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> get <span class=\"synSpecial\">(</span>operation-table <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> put <span class=\"synSpecial\">(</span>operation-table <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-eval-package<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; クオート式</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 代入</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>set-variable-value! <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; 定義</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; 条件式</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n  <span class=\"synComment\">;; lambda</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 列</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false <span class=\"synComment\">;; else 説は無い</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last: COND-&gt;IF&quot;</span>\n                         clauses<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>quote text-of-quotation<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>set! eval-assignment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>define eval-definition<span class=\"synSpecial\">)</span>v\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>if eval-if<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                                       env<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>begin <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>cond <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 4.03"},{"data":{"title":"SICP 問題 4.02","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文のeval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; evalのcondの順番を変えてapplyをassignmentより前にしようとしている</span>\n<span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; (application? exp)は(pair? exp)なので(define x 3)もapplyされる．</span>\n<span class=\"synComment\">;; applyの節はすべてのリストにマッチするので最後でないといけない．</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; 手続き適用がcallで始まるように構文を変える．</span>\n<span class=\"synComment\">;; Louisの希望通り，assignmentよりも前にapplyをもってくる．</span>\n<span class=\"synComment\">;; 後はselectorとapplication?を変更すればよい．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>call<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>csdr <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.02"},{"data":{"title":"gauche-modeでシングルクオートを補完されないようにする","published":"2015/12/17","tags":["emacs","elisp","Gauche"]},"content":"\n<p>smartparens-modeをアップデートしたら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeでシングルクオート<code>'</code>が補完されて<code>''</code>になってしまいました．<br/>\n以前はsmartparens.elの該当箇所，</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n                           clojure-mode\n                           clojurec-mode\n                           clojurescript-mode\n                           clojurex-mode\n                           common-lisp-mode\n                           emacs-lisp-mode\n                           eshell-mode\n                           geiser-repl-mode\n                           inf-clojure-mode\n                           inferior-emacs-lisp-mode\n                           inferior-lisp-mode\n                           inferior-scheme-mode\n                           lisp-interaction-mode\n                           lisp-mode\n                           monroe-mode\n                           scheme-interaction-mode\n                           scheme-mode\n                           slime-repl-mode\n                           racket-mode\n                           racket-repl-mode<span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">&quot;List of Lisp modes.&quot;</span>\n  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>これに</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n                           clojure-mode\n                           clojurec-mode\n                           clojurescript-mode\n                           clojurex-mode\n                           common-lisp-mode\n                           emacs-lisp-mode\n                           eshell-mode\n                           geiser-repl-mode\n                           inf-clojure-mode\n                           inferior-emacs-lisp-mode\n                           inferior-lisp-mode\n                           inferior-scheme-mode\n                           lisp-interaction-mode\n                           lisp-mode\n                           monroe-mode\n                           scheme-interaction-mode\n                           scheme-mode\n                           slime-repl-mode\n                           racket-mode\n                           racket-repl-mode\n                           gauche-mode<span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">&quot;List of Lisp modes.&quot;</span>\n  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeを付け足していたのですが，今回のようにsmartprensを新しいものにした時に消えてしまうのでinit.elに書くことにしました．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">sp-lisp-modes</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">gauche-mode</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>通常smartparensを使う時には</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>でいいのですが，sp-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/lisp\">lisp</a>-modesにアクセスするために始めにsmartparensをrequireしています．</p>\n\n","slug":"gauche-modeでシングルクオートを補完されないようにする"},{"data":{"title":"SICP 問題 4.01","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 評価順によらず，左から右に評価するlist-of-values</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-eval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-operand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> first-eval\n              <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; 右から左に評価するlist-of-values</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-eval <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-operand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              first-eval<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.01"},{"data":{"title":"SICP 問題 3.82","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>random-in-range x1 x2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x1 <span class=\"synSpecial\">(</span>random-integer <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x2 x1<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>estimate-integral p x1 x2 y1 y2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x2 x1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> y2 y1<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>monte-carlo\n               <span class=\"synSpecial\">(</span>stream-map p\n                           <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>random-in-range x1 x2<span class=\"synSpecial\">))</span> integers<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>random-in-range y1 y2<span class=\"synSpecial\">))</span> integers<span class=\"synSpecial\">))</span>\n               <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.82"},{"data":{"title":"SICP 問題 3.81","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use srfi-19<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rand-update x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x <span class=\"synConstant\">1103515245</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">12345</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2147483647</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 命令のストリームを引数にとる</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rand stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>randoming s<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> s<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>random-update <span class=\"synSpecial\">(</span>time-nanosecond <span class=\"synSpecial\">(</span>current-time<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>random-update s<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> random-stream\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n        the-empty-stream\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> s1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>rand-update s1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>rand-update <span class=\"synSpecial\">(</span>time-nanosecond <span class=\"synSpecial\">(</span>current-time<span class=\"synSpecial\">))))</span>\n                       <span class=\"synSpecial\">(</span>stream-map randoming\n                                   random-stream<span class=\"synSpecial\">)))))</span>\n  random-stream<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.81"},{"data":{"title":"SICP 問題 3.80","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>なかなかテスト通らなくて困りました．<br/>\n結局iLを書く位置をvCの次にしたら動きました．<br/>\n元々そこにはdvCがあって，<br/>\n<code>(scale-stream iL (/ -1 C)))</code>がiLの初期化前に行われたのが原因でした．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>RLC R L C dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vC0 iL0<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> vC <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dvC<span class=\"synSpecial\">)</span> vC0 dt<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> iL <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> diL<span class=\"synSpecial\">)</span> iL0 dt<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dvC <span class=\"synSpecial\">(</span>scale-stream iL <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">-1</span> C<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> diL <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream iL <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> R L<span class=\"synSpecial\">)))</span>\n                             <span class=\"synSpecial\">(</span>scale-stream vC <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> L<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span> vC iL<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> RLC1 <span class=\"synSpecial\">(</span>RLC <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0.2</span> <span class=\"synConstant\">0.1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head (RLC1 10 0) 10)\n(10 . 0)\n(10.0 . 1.0)\n(9.5 . 1.9)\n(8.55 . 2.66)\n(7.220000000000001 . 3.249)\n(5.5955 . 3.6461)\n(3.77245 . 3.84104)\n(1.8519299999999999 . 3.834181)\n(-0.0651605000000004 . 3.6359559)\n(-1.8831384500000004 . 3.2658442599999997)\ndone</pre>\n\n\n","slug":"SICP 問題 3.80"},{"data":{"title":"SICP 問題 3.79","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>solve-2nd f dt h0 dy0<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dy <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> ddy<span class=\"synSpecial\">)</span> dy0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ddy <span class=\"synSpecial\">(</span>stream-map f y dy<span class=\"synSpecial\">))</span>\n  y<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 3.79"},{"data":{"title":"SICP 問題 3.78","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>問題文のまま</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>solve-2nd a b dt y0 dy0<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dy <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> ddy<span class=\"synSpecial\">)</span> dy0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ddy <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream dy a<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>scale-stream y b<span class=\"synSpecial\">)))</span>\n  y<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.78"},{"data":{"title":"SICP 問題 3.77","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>ループのあるシステムで使えるようにintegrandをdelayed-integrandにする．<br/>\nintegralを呼び出す時の第一引数にはdelayをつける</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream initial-value\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? integrand<span class=\"synSpecial\">)</span>\n                   the-empty-stream\n                   <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span>stream-cdr integrand<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> dt <span class=\"synSpecial\">(</span>stream-car integrand<span class=\"synSpecial\">))</span>\n                                initial-value<span class=\"synSpecial\">)</span>\n                             dt<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral delayed-integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream initial-value\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>integrand <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-integrand<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? integrand<span class=\"synSpecial\">)</span>\n                     the-empty-stream\n                     <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>stream-cdr integrand<span class=\"synSpecial\">))</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> dt <span class=\"synSpecial\">(</span>stream-car integrand<span class=\"synSpecial\">))</span>\n                                  initial-value<span class=\"synSpecial\">)</span>\n                               dt<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.77"},{"data":{"title":"SICP 問題 3.76","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>前回のデータと比べて平均化する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>smooth stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>average <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>stream-map average\n                           <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span>\n                           stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings sense-data<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smooth-data <span class=\"synSpecial\">(</span>smooth sense-data<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>stream-map sign-change-detector\n                smooth-data\n                <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span> smooth-data<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.76"},{"data":{"title":"SICP 問題 3.75","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>バグを探す問題</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings input-stream last-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>avpt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">)</span> last-value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>sign-change-detector avpt last-value<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>make-zero-crossings <span class=\"synSpecial\">(</span>stream-cdr input-stream<span class=\"synSpecial\">)</span>\n                                      avpt<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; s1 s2 s3という順番でストリームが流れてくる時，この手続きでは</span>\n<span class=\"synComment\">;; s1とs2の平均a1をとし，次のs3のところでa1とs3の平均a2とする．</span>\n<span class=\"synComment\">;; ここではs2とs3の平均をとってa2として欲しいので引数を一つ増やす．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings input-stream last-value last-avpt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>avpt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> s1 last-value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>sign-change-detector avpt last-avpt<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>make-zero-crossings <span class=\"synSpecial\">(</span>stream-cdr input-stream<span class=\"synSpecial\">)</span>\n                                      s1 avpt<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.75"},{"data":{"title":"SICP 問題 3.74","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>last-valueを取る代わりにmapのargstreamsの二つ目に一回分遅らせたsense-dataをとればいい．<br/>\nそうすれば今の値と前回の値を比べて零交差だったかをsign-change-detectorで判定できる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings input-stream last-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span>sign-change-detector <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">)</span> last-value<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>make-zero-crossings <span class=\"synSpecial\">(</span>stream-cdr input-stream<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> zero-crossings <span class=\"synSpecial\">(</span>make-zero-crossings sense-data <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> zero-crossings\n  <span class=\"synSpecial\">(</span>stream-map sign-change-detector sense-data\n              <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span>\n                           sense-data<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.74"},{"data":{"title":"SICP 問題 3.73","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>問題文と図の通りに．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> int\n    <span class=\"synSpecial\">(</span>cons-stream initial-value\n                 <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream integrand dt<span class=\"synSpecial\">)</span>\n                              int<span class=\"synSpecial\">)))</span>\n  int<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>RC R C dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i v0<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream i R<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span>scale-stream i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> C<span class=\"synSpecial\">))</span>\n                           vo dt<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.73"}],"page":10},"__N_SSG":true}