{"pageProps":{"post":{"data":{"title":"SICP 問題 2.68","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode message tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>encode-symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>encode <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode-symbol msg tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">0</span>\n              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error symbol <span class=\"synConstant\">&quot;is not Found&quot;</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (encode &#39;(A D A B B C A) sample-tree)\n(0 1 1 0 0 1 0 1 0 1 1 1 0)\ngosh&gt; (decode (encode &#39;(A D A B B C A) sample-tree) sample-tree)\n(A D A B B C A)</pre>\n\n\n","slug":"SICP 問題 2.68"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode message tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> message<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>encode-symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>encode <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode-symbol msg tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">0</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error symbol <span class=\"synConstant\">\"is not Found\"</span><span class=\"synSpecial\">)))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (encode '(A D A B B C A) sample-tree)\n</span><span class=\"code-line\">(0 1 1 0 0 1 0 1 0 1 1 1 0)\n</span><span class=\"code-line\">gosh> (decode (encode '(A D A B B C A) sample-tree) sample-tree)\n</span><span class=\"code-line\">(A D A B B C A)</span></code></pre>"},"__N_SSG":true}