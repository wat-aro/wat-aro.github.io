{"pageProps":{"posts":[{"data":{"title":"anagramの別解考えた","published":"2016/10/04","tags":["ruby"]},"content":"\n<p>まず二つの文字列のサイズを計測して，それらが等しくなければfalseを返す．\n同じ場合は一文字ずつカウントしながらハッシュに入れていく．\nこの時，s1の文字はインクリメントして，s2の文字はデクリメントする．\n最後にハッシュのバリューを取りだして，すべてゼロならtrue.\nひとつでもゼロでなければfalse.\nそれで書いたのが以下．</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">anagram</span>(s1, s2)\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">false</span> <span class=\"synStatement\">if</span> s1.size != s2.size\n\n  compare(s1.downcase, s2.downcase, s1.size)\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">compare</span>(s1, s2, size)\n  counts = <span class=\"synType\">Hash</span>.new(<span class=\"synConstant\">0</span>)\n  <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> <span class=\"synConstant\">0</span>..(size-<span class=\"synConstant\">1</span>) <span class=\"synStatement\">do</span>\n    counts[s1[i]] += <span class=\"synConstant\">1</span>\n    counts[s2[i]] -= <span class=\"synConstant\">1</span>\n  <span class=\"synStatement\">end</span>\n\n  counts.values.all?{ |<span class=\"synIdentifier\">value</span>| value == <span class=\"synConstant\">0</span> }\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n<p>んー</p>\n\n<p>追記\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>の積を取るやり方を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/reddit\">reddit</a>で教えてもらったので．</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">str_product</span>(str)\n  <span class=\"synType\">PRIMES</span> = [<span class=\"synConstant\">2</span>,   <span class=\"synConstant\">3</span>,  <span class=\"synConstant\">5</span>,  <span class=\"synConstant\">7</span>, <span class=\"synConstant\">11</span>, <span class=\"synConstant\">13</span>, <span class=\"synConstant\">17</span>, <span class=\"synConstant\">19</span>, <span class=\"synConstant\">23</span>, <span class=\"synConstant\">29</span>,\n            <span class=\"synConstant\">31</span>, <span class=\"synConstant\">37</span>, <span class=\"synConstant\">41</span>, <span class=\"synConstant\">43</span>, <span class=\"synConstant\">47</span>, <span class=\"synConstant\">53</span>, <span class=\"synConstant\">59</span>, <span class=\"synConstant\">61</span>, <span class=\"synConstant\">67</span>, <span class=\"synConstant\">71</span>,\n            <span class=\"synConstant\">73</span>, <span class=\"synConstant\">79</span>, <span class=\"synConstant\">83</span>, <span class=\"synConstant\">89</span>, <span class=\"synConstant\">97</span>, <span class=\"synConstant\">101</span>, <span class=\"synConstant\">103</span>, <span class=\"synConstant\">107</span>, <span class=\"synConstant\">109</span>, <span class=\"synConstant\">113</span>,\n            <span class=\"synConstant\">127</span>, <span class=\"synConstant\">131</span>, <span class=\"synConstant\">137</span>, <span class=\"synConstant\">139</span>, <span class=\"synConstant\">149</span>, <span class=\"synConstant\">151</span>, <span class=\"synConstant\">157</span>, <span class=\"synConstant\">163</span>, <span class=\"synConstant\">167</span>, <span class=\"synConstant\">173</span>,\n            <span class=\"synConstant\">179</span>, <span class=\"synConstant\">181</span>, <span class=\"synConstant\">191</span>, <span class=\"synConstant\">193</span>, <span class=\"synConstant\">197</span>, <span class=\"synConstant\">199</span>, <span class=\"synConstant\">211</span>, <span class=\"synConstant\">223</span>, <span class=\"synConstant\">227</span>, <span class=\"synConstant\">229</span>,\n            <span class=\"synConstant\">233</span>, <span class=\"synConstant\">239</span>, <span class=\"synConstant\">241</span>, <span class=\"synConstant\">251</span>, <span class=\"synConstant\">257</span>, <span class=\"synConstant\">263</span>, <span class=\"synConstant\">269</span>, <span class=\"synConstant\">271</span>, <span class=\"synConstant\">277</span>, <span class=\"synConstant\">281</span>,\n            <span class=\"synConstant\">283</span>, <span class=\"synConstant\">293</span>, <span class=\"synConstant\">307</span>, <span class=\"synConstant\">311</span>, <span class=\"synConstant\">313</span>, <span class=\"synConstant\">317</span>, <span class=\"synConstant\">331</span>, <span class=\"synConstant\">337</span>, <span class=\"synConstant\">347</span>, <span class=\"synConstant\">349</span>,\n            <span class=\"synConstant\">353</span>, <span class=\"synConstant\">359</span>, <span class=\"synConstant\">367</span>, <span class=\"synConstant\">373</span>, <span class=\"synConstant\">379</span>, <span class=\"synConstant\">383</span>, <span class=\"synConstant\">389</span>, <span class=\"synConstant\">397</span>, <span class=\"synConstant\">401</span>, <span class=\"synConstant\">409</span>,\n            <span class=\"synConstant\">419</span>, <span class=\"synConstant\">421</span>, <span class=\"synConstant\">431</span>, <span class=\"synConstant\">433</span>, <span class=\"synConstant\">439</span>, <span class=\"synConstant\">443</span>, <span class=\"synConstant\">449</span>, <span class=\"synConstant\">457</span>, <span class=\"synConstant\">461</span>, <span class=\"synConstant\">463</span>,\n            <span class=\"synConstant\">467</span>, <span class=\"synConstant\">479</span>, <span class=\"synConstant\">487</span>, <span class=\"synConstant\">491</span>, <span class=\"synConstant\">499</span>, <span class=\"synConstant\">503</span>, <span class=\"synConstant\">509</span>, <span class=\"synConstant\">521</span>, <span class=\"synConstant\">523</span>, <span class=\"synConstant\">541</span>,\n            <span class=\"synConstant\">547</span>, <span class=\"synConstant\">557</span>, <span class=\"synConstant\">563</span>, <span class=\"synConstant\">569</span>, <span class=\"synConstant\">571</span>, <span class=\"synConstant\">577</span>, <span class=\"synConstant\">587</span>, <span class=\"synConstant\">593</span>, <span class=\"synConstant\">599</span>, <span class=\"synConstant\">601</span>,\n            <span class=\"synConstant\">607</span>, <span class=\"synConstant\">613</span>, <span class=\"synConstant\">617</span>, <span class=\"synConstant\">619</span>, <span class=\"synConstant\">631</span>, <span class=\"synConstant\">641</span>, <span class=\"synConstant\">643</span>, <span class=\"synConstant\">647</span>, <span class=\"synConstant\">653</span>, <span class=\"synConstant\">659</span>,\n            <span class=\"synConstant\">661</span>, <span class=\"synConstant\">673</span>, <span class=\"synConstant\">677</span>, <span class=\"synConstant\">683</span>, <span class=\"synConstant\">691</span>, <span class=\"synConstant\">701</span>, <span class=\"synConstant\">709</span>, <span class=\"synConstant\">719</span>]\n  result = <span class=\"synConstant\">0</span>\n  (<span class=\"synConstant\">0</span>..(str.size - <span class=\"synConstant\">1</span>)).each <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">i</span>|\n    result +=<span class=\"synType\">PRIMES</span>[str[i].downcase.ord]\n  <span class=\"synStatement\">end</span>\n  result\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">anagram</span>(s1, s2)\n  str_product(s1) == str_product(s2)\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n<p>これはいい</p>\n\n","slug":"anagramの別解考えた"},{"data":{"title":"Githubにpushした時に他の人がpushしたと通知される","published":"2016/09/26","tags":["github"]},"content":"\n<p>転職して配属されたプロジェクトの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>ーで，僕がpushしてるのに他の人がpushしてると通知される不具合がありました．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Github\">Github</a>の設定や.gitconfigを見てもおかしいところはなく，どうしようかと思っていたらStackOverFlowにちょうど同じ症状の質問がありました．</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F21615431%2Fgit-pushes-with-wrong-user-from-terminal\" title=\"git pushes with wrong user from terminal\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://stackoverflow.com/questions/21615431/git-pushes-with-wrong-user-from-terminal\">stackoverflow.com</a></cite></p>\n\n<ol>\n<li><code>Command + Space</code> で spotlight を開く</li>\n<li><code>keychain</code> と入力しEnterを押して Keychain <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Access\">Access</a>.appを起動</li>\n<li>左のカラムから<code>ログイン</code>と<code>パスワード</code>の2つの項目を選択</li>\n<li><code>github.com</code>を削除する</li>\n<li>remoteが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ssh\">ssh</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/https\">https</a>に変更されているので <code>git remote set-url ...</code> で登録しなおす．</li>\n</ol>\n\n\n<p>これで解決できました．</p>\n\n","slug":"Githubにpushした時に他の人がpushしたと通知される"},{"data":{"title":"RubyKaigiの弁当のコードを実行してみた","published":"2016/09/09","tags":["ruby"]},"content":"\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>                <span class=\"synStatement\">eval</span>(\n               <span class=\"synSpecial\">%w(</span><span class=\"synConstant\"> put</span>\n<span class=\"synConstant\">             s(([   2*7,</span>\n<span class=\"synConstant\">            2*31     ,1,3</span>\n<span class=\"synConstant\">           *3*5       ,2*2</span>\n<span class=\"synConstant\">          *2*2          *3].</span>\n<span class=\"synConstant\">         map{            |c|c</span>\n<span class=\"synConstant\">        .to_          s(5*7</span>\n<span class=\"synConstant\">       ).gs        ub(&quot;1    &quot;,&quot;</span>\n<span class=\"synConstant\">      \\s&quot;)      .upca        se}.</span>\n<span class=\"synConstant\">     zip(     [2*5*           61*1</span>\n<span class=\"synConstant\">    801,    2*5*3              931,</span>\n<span class=\"synConstant\">   811*   1871,                 2*11</span>\n<span class=\"synConstant\">  *350  27,7*                    11*1</span>\n<span class=\"synConstant\"> 259* 20389                       *764</span>\n<span class=\"synConstant\">171].map{|c|c.to_s(2*2*3*3)}))*&quot;&quot;)</span><span class=\"synSpecial\">)</span>*<span class=\"synSpecial\">&quot;&quot;</span>)\n<span class=\"synComment\"># &gt;&gt; Enjoy Ruby with Agile Development</span>\n</pre>\n\n\n","slug":"RubyKaigiの弁当のコードを実行してみた"},{"data":{"title":"OSXにGaucheのHEADをインストール","published":"2016/08/07","tags":["gauche","scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>のHEADをインストールするにはリリースされた最新の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>が必要です． <br/>\nここにはまりました． <br/>\nなぜか最新版の0.9.4でもビルドできなかったので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/brew\">brew</a>でインストールしてから後で消しています．<br/>\n<code>make install</code> の後に<code>brew uninstall gauche</code>をすると必要なusr/local/share以下のファイルなどが消されてしまうので\n必ず<code>make install</code> の前に<code>brew uninstall gauche</code>しましょう．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ brew install gauche\n$ git clone git@github.com:shirok/Gauche.git\n$ cd Gauche\n$ ./DIST gen\n$ ./configure --enable-threads=pthreads\n$ make</pre>\n\n\n<p>ここで</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>warning: unrecognized encoding name `utf-8’</pre>\n\n\n<p>と表示されますが無視．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ make check\n$ brew uninstall gauche\n$ make install</pre>\n\n\n<p>これでインストールできました．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ gosh -V\nGauche scheme shell, version 0.9.5_pre2 [utf-8,pthreads], x86_64-apple-darwin15.6.0\n$ gosh\ngosh&gt; (+ 1 1)\n2</pre>\n\n\n<p>無事動いていますね．これで完了です．</p>\n\n<p>今後HEADをビルドするにはダウンロードした<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リで</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ git pull\n$ gauche-config --reconfigure | sh &amp;&amp; make &amp;&amp; make check &amp;&amp; make install</pre>\n\n\n<p>するだけで済みます．</p>\n\n","slug":"OSXにGaucheのHEADをインストール"},{"data":{"title":"MacでSticky ShiftにするためのKarabinerの設定","published":"2016/07/29","tags":["mac","キーボード","emacs","skk","karabiner"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SKK\">SKK</a>を使いはじめました．<br/>\nそうするとシフトキーを多用するのでもっと楽に入力したくなります．<br/>\nそこでSticky Shiftです．<br/>\n「シフトキーを押したまま他のキーを入力する」のではなく，「一度シフトキーを押して離した直後に押したキーが大文字になってくれます．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SKK\">SKK</a>を使っていなくてもCamelCaseなどの入力がとても楽になります．<br/>\n左手小指はControlキーのためにありますからね．<br/>\n全国一千万人の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>愛好家にとっては譲れませんよね．</p>\n\n<p>Karabinerに標準でSticky Shiftの設定項目はありませんが，private.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を編集することで設定できるようになります．  <br/>\nただ <code>private.xml</code> の記述方法がわかりづらかったので書いておきます．  <br/>\n僕はセミコロンをSticky Shiftにして右シフトをセミコロンにしています．  <br/>\nそのかわりに右シフトをセミコロンに当てています．</p>\n\n<p>~/Library/Application\\ Support/Karabiner/private.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を編集します．</p>\n\n<pre class=\"code lang-xml\" data-lang=\"xml\" data-unlink><span class=\"synComment\">&lt;?</span><span class=\"synType\">xml version</span>=<span class=\"synConstant\">&quot;1.0&quot;</span><span class=\"synComment\">?&gt;</span>\n<span class=\"synIdentifier\">&lt;root&gt;</span>\n  <span class=\"synIdentifier\">&lt;item&gt;</span>\n    <span class=\"synIdentifier\">&lt;name&gt;</span>Common<span class=\"synIdentifier\">&lt;/name&gt;</span>\n    <span class=\"synIdentifier\">&lt;item&gt;</span>\n      <span class=\"synIdentifier\">&lt;name&gt;</span>Sticky Shift<span class=\"synIdentifier\">&lt;/name&gt;</span>\n      <span class=\"synIdentifier\">&lt;appendix&gt;</span>Use semicolon to Sticky Shift_L<span class=\"synIdentifier\">&lt;/appendix&gt;</span>\n      <span class=\"synIdentifier\">&lt;identifier&gt;</span>private.semicolon_to_sticky_shift_l<span class=\"synIdentifier\">&lt;/identifier&gt;</span>\n      <span class=\"synIdentifier\">&lt;autogen&gt;</span>\n        --KeyToKey-- KeyCode::SEMICOLON, ModifierFlag::NONE,\n        KeyCode::VK_STICKY_SHIFT_L\n      <span class=\"synIdentifier\">&lt;/autogen&gt;</span>\n    <span class=\"synIdentifier\">&lt;/item&gt;</span>\n    <span class=\"synIdentifier\">&lt;item&gt;</span>\n      <span class=\"synIdentifier\">&lt;name&gt;</span>Change Shift_R2Semicoron<span class=\"synIdentifier\">&lt;/name&gt;</span>\n      <span class=\"synIdentifier\">&lt;appendix&gt;</span>Use Shift_R to Semicolon<span class=\"synIdentifier\">&lt;/appendix&gt;</span>\n      <span class=\"synIdentifier\">&lt;identifier&gt;</span>private.dhift_r_to_semicolon<span class=\"synIdentifier\">&lt;/identifier&gt;</span>\n      <span class=\"synIdentifier\">&lt;autogen&gt;</span>--KeyToKey-- KeyCode::SHIFT_R, KeyCode::SEMICOLON<span class=\"synIdentifier\">&lt;/autogen&gt;</span>\n    <span class=\"synIdentifier\">&lt;/item&gt;</span>\n  <span class=\"synIdentifier\">&lt;/item&gt;</span>\n<span class=\"synIdentifier\">&lt;/root&gt;</span>\n</pre>\n\n\n<p>これでKarabinerでSticky Shiftをチェックできるようになります．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SKK\">SKK</a>を使っていなくてもSticky Shiftは便利なので是非設定しましょう．</p>\n\n","slug":"MacでSticky ShiftにするためのKarabinerの設定"},{"data":{"title":"リモートのブランチにローカルでチェックアウトする","published":"2016/07/13","tags":["git"]},"content":"\n<p>まずリモートブランチをfetchします．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ git fetch</pre>\n\n\n<p>次にリモートブランチを確認します．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> $ git branch -a\n* master\n  remotes/origin/01_untested\n  remotes/origin/02_setup\n  remotes/origin/03_models\n  remotes/origin/04_factories\n  remotes/origin/05_controller_basics\n  remotes/origin/06_advanced_controllers\n  remotes/origin/07_controller_cleanup\n  remotes/origin/08_features\n  remotes/origin/09_speedup\n  remotes/origin/11_tdd\n  remotes/origin/HEAD -&gt; origin/master\n  remotes/origin/master</pre>\n\n\n<p>ここでチェックアウトしたいのは<code>02_setup</code>です．<br/>\nローカルブランチ名を指定してリモートブランチをチェックアウトします．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> $ git co -b 02_setup origin/02_setup\nBranch 02_setup set up to track remote branch 02_setup from origin.\nSwitched to a new branch &#39;02_setup&#39;</pre>\n\n\n<p>これでリモートブランチにチェックアウトすることができました．</p>\n\n","slug":"リモートのブランチにローカルでチェックアウトする"},{"data":{"title":"Railsのnew, build, createの違い","published":"2016/07/13","tags":["Ruby on Rails"]},"content":"\n<p><a href=\"http://railsdoc.com/references/build\">build - &#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9; - - Rails&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>\n\n<h2>new</h2>\n\n<p>モデルオブジェクトを生成する．<br/>\n生成するだけで，保存はされていないためsaveメソッドなどを使用して保存する．</p>\n\n<h2>build</h2>\n\n<p>new の alias</p>\n\n<h2>create</h2>\n\n<p>モデルオブジェクトを生成して保存する．</p>\n\n","slug":"Railsのnew, build, createの違い"},{"data":{"title":"Scheme修行のtryについて","published":"2016/06/04","tags":["gauche","scheme"]},"content":"\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41t9gbUu52L._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Scheme修行\" title=\"Scheme修行\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\">Scheme修行</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman and Matthias Felleisen,元吉文男,横山晶一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2011/06/15</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 3人 <span class=\"hatena-asin-detail-label\">クリック</span>: 46回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274068536/wataro-22\" target=\"_blank\">この商品を含むブログ (10件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>p89の欄外で補足されているtryについて．<br/>\nこれが出てきたのは <code>rember1*</code> の実装の中です．<br/>\n<code>rember1*</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a> aとリストlを引数に取ります． <br/>\nlの中で最初に出てきたaと同じアトムを削除して新しいリストを返す手続きです．</p>\n\n<p>tryを使う前の実装は以下になります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? <span class=\"synSpecial\">(</span>let/cc oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)))</span>\n        l\n        <span class=\"synSpecial\">(</span>rm a l <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> <span class=\"synSpecial\">())))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-car\n             <span class=\"synSpecial\">(</span>let/cc oh\n               <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? new-car<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> new-car <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n<p>リストの中で最後まで探し終わってlがnullになれば継続に<code>(quote no)</code>を渡します．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>であればcarにリストはないのでcdrを探します．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に探して，aと同じものがあれば，それを取り除いた残りのリストを返します．<br/>\n取り除くのは最初に見つかったものだけです．<br/>\nこのコードをtryを使うとこうなります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>try oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)</span> l<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span>try oh2\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>tryについてはここでページ欄外に</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>try x <span class=\"synError\">α</span> <span class=\"synError\">β</span><span class=\"synSpecial\">)</span>\n<span class=\"synIdentifier\">=</span>\n<span class=\"synSpecial\">(</span>let/cc success\n  <span class=\"synSpecial\">(</span>let/cc x\n    <span class=\"synSpecial\">(</span>success a<span class=\"synSpecial\">))</span>\n  b<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>と書かれています．<br/>\nここがなかなかわかりませんでした．</p>\n\n<p>まず中のlet/ccから考えます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>let/cc x\n  <span class=\"synSpecial\">(</span>success <span class=\"synError\">α</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>α内で継続xが使われているはずです．<br/>\n継続xに値γが渡されると，<code>(let/cc x γ)</code>となり，次の計算βに進みます．</p>\n\n<p>継続xに値が渡されない場合はαの値が継続successに渡され，そこで計算が終了しこの式の値はαとなります．<br/>\nつまり，tryはα内で継続xに値が渡されればβの値が返り，<br/>\n渡されなければαの値が返るわけです．<br/>\n元の式で継続に値が渡されたのを判別するために<code>(quote no)</code>を継続に渡して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>?で判別していたものを<br/>\n継続が返ってくるかこないかで判別できるようになっています．</p>\n\n<p>継続難しいです．<br/>\nでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>修行で少しずつわかってきた気がします．</p>\n\n","slug":"Scheme修行のtryについて"},{"data":{"title":"Schemeでクイックソート","published":"2016/05/14","tags":["scheme"]},"content":"\n<p>先日の納会でソートの話が少し出たので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%A4%A5%C3%A5%AF%A5%BD%A1%BC%A5%C8\">クイックソート</a>を書いてみました．<br/>\n書きやすいので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>で．</p>\n\n<p>まず普通に書いてみます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> first x<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (quick &#39;( 4 7 8 3 9 2 7 3 92 7 1))\n(1 2 3 3 4 7 7 7 8 9 92)</pre>\n\n\n<p>普通ですね．<br/>\nただfilterで何度もリストの中身を舐めているのが嫌です．\nここでstreamを使ってみます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use util.stream<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-&gt;list\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>s <span class=\"synSpecial\">(</span>list-&gt;stream lst<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n         stream-null\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>stream-append <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> first x<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (quick &#39;( 4 7 8 3 9 2 7 3 92 7 1))\n(1 2 3 3 4 7 7 7 8 9 92)</pre>\n\n\n<p>リストからストリームへの変換とストリームからリストへの変換が入っているので<br/>\n効率的になったのかどうか怪しいですが一応期待通りに動いていますね．<br/>\nどうするのが正解なんでしょう？</p>\n\n","slug":"Schemeでクイックソート"},{"data":{"title":"once-onlyマクロの解読","published":"2016/04/09","tags":["Common Lisp"]},"content":"\n<p>実践<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Common%20Lisp\">Common Lisp</a> p100にあるonce-onlyマクロの解読に挑戦．\n<div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274067211/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51LYivxTpSL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"実践Common Lisp\" title=\"実践Common Lisp\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274067211/wataro-22/\">実践Common Lisp</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Peter Seibel,佐野匡俊,水丸淳,園城雅之,金子祐介</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2008/07/26</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 8人 <span class=\"hatena-asin-detail-label\">クリック</span>: 192回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274067211/wataro-22\" target=\"_blank\">この商品を含むブログ (69件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div>\n　<br/>\n　<br/>\n　</p>\n\n<h3>マクロのコードは以下のとおり．</h3>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">defmacro</span> onece-only <span class=\"synSpecial\">((</span><span class=\"synType\">&amp;rest</span> names<span class=\"synSpecial\">)</span> <span class=\"synType\">&amp;body</span> body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n       <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n          ,<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names for g in gensyms collect <span class=\"synPreProc\">`(</span>,n ,g<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                ,@body<span class=\"synSpecial\">)</span><span class=\"synPreProc\">))</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<h3>一行ずつ解読していく</h3>\n\n<p>まずは</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>の部分から．<br/>\nバッククォートがないので何がgensymsに束縛されるかをREPLで確かめる．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n           gensyms<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synType\">#:G884</span> <span class=\"synType\">#:G885</span> <span class=\"synType\">#:G886</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>namesの数と同じだけのユニークなシンボルを作成している．\n　<br/>\n　<br/>\n次の行は</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>gensymsは一行目の処理でユニークなシンボルのリストになっている．<br/>\ngensymsのそれぞれの要素と(gensym)をペアにしていく．<br/>\nここまでを実行してみる．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span><span class=\"synType\">#:G887</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G888</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G889</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>　<br/>\n三行目．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>とうとう`,が二重に．<br/>\n１つずつ見ていく．\n二行目の`(let　の式の中で `(letとなっているのでここは出力後の形が`(letとなってほしいはず．<br/>\n,,@となっているのは二行目のバッククォート，三行目頭のバッククォートと二回バッククォートされているので\n二度展開しなといloopが展開されない．\nこれでloop内は展開されるようになった．\n次は``(,,g ,,n)．二重にバッククォートするのは先ほどと同じように`(foo bar) という形のリストにしたいから．<br/>\n(,,g ,,n)になっているのはloopでgensymsの要素をgに，namesの要素をnに対応付けているから．<br/>\n`(,gensymsの要素 ,nameの要素)という形に変換しようとしている．<br/>\n　　<br/>\nここまでを展開するとこうなる</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>names <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n             <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@<span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                   <span class=\"synPreProc\">))</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span><span class=\"synType\">#:G937</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G938</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G939</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synPreProc\">`(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">(</span>,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G937</span> ,A<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G938</span> ,B<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G939</span> ,C<span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n     <span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時には新たに(gensym)で作られたユニークなシンボルにnamesの値が束縛されるようになる．<br/>\n　<br/>\n　<br/>\n最後に４行目．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>,<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names for g in gensyms collect <span class=\"synPreProc\">`(</span>,n ,g<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>二行目と三行目でバッククォートされてるので,先頭のカンマは展開されず(let ...という形になる．  <br/>\n,@の部分は既に先頭で一度カンマがあった後なのでそのまま展開出来る．<br/>\n`(,n ,g)の部分で実際にAにAの値を束縛するという部分を作る．  <br/>\nなのでここではバッククォートが一つ．<br/>\nここのgには３行目で値に束縛したユニークなシンボルが入る．<br/>\n実際に展開する．<br/>\n最後なのですべて展開するとこうなる.</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>names <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'(</span>body<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n             <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@<span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                   ,<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names for g in gensyms collect <span class=\"synPreProc\">`(</span>,n ,g<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                         ,@body<span class=\"synSpecial\">)</span><span class=\"synPreProc\">))</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span><span class=\"synType\">#:G934</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G935</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G936</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synPreProc\">`(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">(</span>,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G934</span> ,A<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G935</span> ,B<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G936</span> ,C<span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n     ,<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span>A <span class=\"synType\">#:G934</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>B <span class=\"synType\">#:G935</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>C <span class=\"synType\">#:G936</span><span class=\"synSpecial\">))</span>\n        BODY<span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<h3>まとめ</h3>\n\n<p>まずnamesと同じ数だけ(gensym)でユニークなシンボルを作り，それをgensymsというリストにする．<br/>\ngensymsの各要素を新たに(gensym)に束縛するlet式を作る．<br/>\nこの(gensym)はonce-onlyを使うマクロの展開時に新しくユニークなシンボルを作る．<br/>\ngensymsの各要素を評価すると新しく作られるユニークなシンボルを返すようになる．\nこのユニークなシンボルにnamesの各値を束縛するようにする．<br/>\nそれが本体の三行目に当たる．\n四行目ではnamesのシンボルにgensymsの各要素を対応付ける．<br/>\ngensymsの各要素は新たに作られたユニークなシンボルに束縛され，そのユニークなシンボルはnameの値に束縛される．<br/>\n以上で終わり．\n　<br/>\n　<br/>\n高階マクロで名前の衝突を回避して，評価順序を保つのはこんなに大変なんですね．</p>\n\n","slug":"once-onlyマクロの解読"},{"data":{"title":"shibuya.lispで発表しました","published":"2016/03/31"},"content":"\n<p>ゆるわな感じです．</p>\n\n<p><a href=\"http://lisp.connpass.com/event/28429/\">Lisp Meet Up presented by Shibuya.lisp #38 - connpass</a></p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fniconare.nicovideo.jp%2Fwatch%2Fkn1307\" title=\"プログラミング初心者が 計算機プログラムの構造と解釈を読んだら / wat-aro さん - ニコナレ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://niconare.nicovideo.jp/watch/kn1307\">niconare.nicovideo.jp</a></cite></p>\n\n<p>反省点は聞いてる人のほうを向いて喋れなかったことですね．\n自分のPCのモニタばかり見てました．\n次どこかで発表するときはそこを改善したいですね．\n後もっとましなスライドを作れるようになりたい．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"shibuya.lispで発表しました"},{"data":{"title":"Emacsのhtmlizeを使ってコードのシンタックスハイライトを保ったままKeynoteにコピペ","published":"2016/03/25"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>のコードを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Keynote\">Keynote</a>に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>ハイライトを保ってコピペする方法がわからずに困っていたら\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>で教えてもらいました．</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a> マンなら htmlize で <a href=\"https://t.co/A8sNim2GAI\">https://t.co/A8sNim2GAI</a></p>&mdash; 齊藤敦志 (@SaitoAtsushi) <a href=\"https://twitter.com/SaitoAtsushi/status/713011495500513282\">2016年3月24日</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>でhtmlizeでHTMLを出力してそれを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>で開く．<br/>\n　<br/>\n　</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160324/20160324235611.png\" alt=\"f:id:wat-aro:20160324235611p:plain\" title=\"f:id:wat-aro:20160324235611p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　<br/>\n　<br/>\n　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Keynote\">Keynote</a>へコピペ</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160324/20160324235830.png\" alt=\"f:id:wat-aro:20160324235830p:plain\" title=\"f:id:wat-aro:20160324235830p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>おおー！これはいい！<br/>\nちなみに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>で開くとうまくいきませんでした．<br/>\nGistからコピペするのと違ってこれなら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>ハイライトのままコピペできるのがいいですね．<br/>\nありがたや〜</p>\n\n","slug":"Emacsのhtmlizeを使ってコードのシンタックスハイライトを保ったままKeynoteにコピペ"},{"data":{"title":"Rubyで言語処理100本ノック 00-04","published":"2016/03/17","tags":["ruby"]},"content":"\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.cl.ecei.tohoku.ac.jp%2Fnlp100%2F\" title=\"言語処理100本ノック 2015\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www.cl.ecei.tohoku.ac.jp/nlp100/\">www.cl.ecei.tohoku.ac.jp</a></cite></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>の練習のために始めました．<br/>\n4章からは難しそうなので3章まで頑張りたい．でも飽きたらやめるかも．<br/>\nコードを書く基礎が足りない気がするのでもっと書かないと．<br/>\n始めるにあって，とりあえず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> 2.2.3のStringクラスは一通り目を通してきました．<br/>\n全体的に末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>でなんとかしようとしてます．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>は末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がないって聞いたんですがどうなんですかね？\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>っぽい書き方がわからないので，Rubocop先生に出来るだけ怒られないように書いてます．</p>\n\n<h2>00</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 00 文字列を受け取り，末尾から順に表示する</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">my_reverse</span>\n    size = length\n    result = <span class=\"synSpecial\">''</span>\n    <span class=\"synStatement\">while</span> size &gt; <span class=\"synConstant\">0</span>\n      size -= <span class=\"synConstant\">1</span>\n      result &lt;&lt; <span class=\"synConstant\">self</span>[size]\n    <span class=\"synStatement\">end</span>\n    result\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synComment\"># Like tail call</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter_reverse</span>\n    iter(<span class=\"synSpecial\">''</span>, length)\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str, str_len)\n    <span class=\"synStatement\">if</span> str_len &gt; <span class=\"synConstant\">0</span>\n      iter(str + <span class=\"synConstant\">self</span>[str_len - <span class=\"synConstant\">1</span>], str_len - <span class=\"synConstant\">1</span>)\n    <span class=\"synStatement\">else</span>\n      str\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.my_reverse                <span class=\"synComment\"># =&gt; &quot;esrever&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.my_reverse                      <span class=\"synComment\"># =&gt; &quot;a&quot;</span>\n<span class=\"synSpecial\">''</span>.my_reverse                       <span class=\"synComment\"># =&gt; &quot;&quot;</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.iter_reverse          <span class=\"synComment\"># =&gt; &quot;esrever&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.iter_reverse                <span class=\"synComment\"># =&gt; &quot;a&quot;</span>\n<span class=\"synSpecial\">''</span>.iter_reverse                 <span class=\"synComment\"># =&gt; &quot;&quot;</span>\n</pre>\n\n\n<h2>01</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 01 文字列の奇数番目だけ取り出した新しい文字列を返す</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">str_odd</span>\n    iter(<span class=\"synConstant\">0</span>, <span class=\"synSpecial\">''</span>)\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(index, str)\n    <span class=\"synStatement\">if</span> index &lt; length\n      <span class=\"synStatement\">if</span> index.even?\n        iter(index + <span class=\"synConstant\">1</span>, str + <span class=\"synConstant\">self</span>[index])\n      <span class=\"synStatement\">else</span>\n        iter(index + <span class=\"synConstant\">1</span>, str)\n      <span class=\"synStatement\">end</span>\n    <span class=\"synStatement\">else</span>\n      str\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">hello</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># =&gt; &quot;hlo&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">abcde</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># =&gt; &quot;ace&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">パタトクカシーー</span><span class=\"synSpecial\">'</span>.str_odd     <span class=\"synComment\"># =&gt; &quot;パトカー&quot;</span>\n</pre>\n\n\n<h2>02</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 02 ２つの文字列を受け取り，先頭から交互に混ぜた文字列をつくる</span>\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">comb_str</span>(str1, str2)\n  iter(str1, str2, <span class=\"synSpecial\">''</span>)\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str1, str2, result)\n  <span class=\"synStatement\">if</span> str1.empty?\n    result + str2\n  <span class=\"synStatement\">elsif</span> str2.empty?\n    result + str1\n  <span class=\"synStatement\">else</span>\n    iter(str1[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], str2[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], result + str1[<span class=\"synConstant\">0</span>] + str2[<span class=\"synConstant\">0</span>])\n  <span class=\"synStatement\">end</span>\n<span class=\"synPreProc\">end</span>\n\ncomb_str(<span class=\"synSpecial\">'</span><span class=\"synConstant\">パトカー</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">タクシー</span><span class=\"synSpecial\">'</span>) <span class=\"synComment\"># =&gt; &quot;パタトクカシーー&quot;</span>\n</pre>\n\n\n<h2>03</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 03 文字列から数字のリストをつくる</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pi</span>\n    split.map(&amp;<span class=\"synConstant\">:length</span>)\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.</span><span class=\"synSpecial\">&quot;</span>.pi\n <span class=\"synComment\"># =&gt; [3, 1, 4, 1, 6, 9, 2, 7, 5, 3, 5, 8, 9, 7, 10]</span>\n</pre>\n\n\n<h2>04</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 04 文字列を受け取り，単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字</span>\n<span class=\"synComment\"># それ以外の単語は先頭に2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列を返す</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">element</span>\n    recur(split, <span class=\"synConstant\">1</span>, [])\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">helper</span>(str, i)\n    <span class=\"synStatement\">case</span> i\n    <span class=\"synStatement\">when</span> <span class=\"synConstant\">1</span>, <span class=\"synConstant\">5</span>, <span class=\"synConstant\">6</span>, <span class=\"synConstant\">7</span>, <span class=\"synConstant\">8</span>, <span class=\"synConstant\">9</span>, <span class=\"synConstant\">15</span>, <span class=\"synConstant\">16</span>, <span class=\"synConstant\">19</span>\n      [str[<span class=\"synConstant\">0</span>], i]\n    <span class=\"synStatement\">else</span>\n      [str[<span class=\"synConstant\">0</span>, <span class=\"synConstant\">2</span>], i]\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">recur</span>(arr, index, result)\n    <span class=\"synStatement\">if</span> arr.empty?\n      result\n    <span class=\"synStatement\">else</span>\n      recur(arr.drop(<span class=\"synConstant\">1</span>), index + <span class=\"synConstant\">1</span>, result.push(helper(arr[<span class=\"synConstant\">0</span>], index)))\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.</span><span class=\"synSpecial\">&quot;</span>.element\n<span class=\"synComment\"># =&gt; [[&quot;H&quot;, 1], [&quot;He&quot;, 2], [&quot;Li&quot;, 3], [&quot;Be&quot;, 4], [&quot;B&quot;, 5], [&quot;C&quot;, 6], [&quot;N&quot;, 7], [&quot;O&quot;, 8], [&quot;F&quot;, 9], [&quot;Ne&quot;, 10], [&quot;Na&quot;, 11], [&quot;Mi&quot;, 12], [&quot;Al&quot;, 13], [&quot;Si&quot;, 14], [&quot;P&quot;, 15], [&quot;S&quot;, 16], [&quot;Cl&quot;, 17], [&quot;Ar&quot;, 18], [&quot;K&quot;, 19], [&quot;Ca&quot;, 20]]</span>\n</pre>\n\n\n<p>Stringクラスを一読するのに時間がかかったので今日はこれだけ．</p>\n\n","slug":"Rubyで言語処理100本ノック 00-04"},{"data":{"title":"OSX クリーンインストール前の準備","published":"2016/03/14","tags":["mac"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/yosemite\">yosemite</a>からEl Capitanへアップデートする前の準備．</p>\n\n<h2>dotfilesの準備</h2>\n\n<p>.bashrcや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/.emacs\">.emacs</a>.dなどインストール後に必要になりそうなものをここに入れてしまいます．<br/>\n他にも次の環境に必要なものはここに入れてしまいます．<br/>\nそして<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%DC%A5%EA%A5%C3%A5%AF%A5%EA%A5%F3%A5%AF\">シンボリックリンク</a>を貼る<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>をつけておきます．</p>\n\n<p><a href=\"http://qiita.com/b4b4r07/items/b70178e021bef12cd4a2\">&#x6700;&#x5F37;&#x306E; dotfiles &#x99C6;&#x52D5;&#x958B;&#x767A;&#x3068; GitHub &#x3067;&#x7BA1;&#x7406;&#x3059;&#x308B;&#x904B;&#x7528;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p>ここの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>を少し変更して</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink><span class=\"synComment\">#!/bin/bash</span>\n<span class=\"synStatement\">for </span>f <span class=\"synStatement\">in</span> .??*\n<span class=\"synStatement\">do</span>\n    <span class=\"synIdentifier\">filepath</span>=<span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">${PWD}</span><span class=\"synConstant\">/</span><span class=\"synPreProc\">${f}</span><span class=\"synStatement\">&quot;</span>\n    <span class=\"synIdentifier\">homefile</span>=<span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">${HOME}</span><span class=\"synConstant\">/</span><span class=\"synPreProc\">${f}</span><span class=\"synStatement\">&quot;</span>\n    \n    <span class=\"synSpecial\">[[</span> <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$f</span><span class=\"synStatement\">&quot;</span> <span class=\"synStatement\">==</span> <span class=\"synConstant\">&quot;.git&quot;</span> <span class=\"synSpecial\">]]</span> <span class=\"synStatement\">&amp;&amp;</span> <span class=\"synStatement\">continue</span>\n    <span class=\"synSpecial\">[[</span> <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$f</span><span class=\"synStatement\">&quot;</span> <span class=\"synStatement\">==</span> <span class=\"synConstant\">&quot;.DS_Store&quot;</span> <span class=\"synSpecial\">]]</span> <span class=\"synStatement\">&amp;&amp;</span> <span class=\"synStatement\">continue</span>\n    \n    ln <span class=\"synSpecial\">-snf</span> <span class=\"synPreProc\">$filepath</span> <span class=\"synPreProc\">$homefile</span>\n<span class=\"synStatement\">done</span>\n</pre>\n\n\n<p>これを実行すればホームディレクトリに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%DC%A5%EA%A5%C3%A5%AF%A5%EA%A5%F3%A5%AF\">シンボリックリンク</a>が張られます．</p>\n\n<h2>Homebrewでインストールしたもののリスト，tap先を保存する  </h2>\n\n<p>Homebrewで何を入れたかなんて覚えていられませんね．<br/>\ntapで何を追加したのかも覚えていられません．<br/>\nなのでファイルに書き出しておきます．<br/>\nここから抜き出して一気にインストールなんてことが出来るかは知りません．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A1%BC%A5%F3%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%EB\">クリーンインストール</a>後に調べます．</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>$ brew tap <span class=\"synStatement\">&gt;</span> ~/dotfiles/brewtaplist\n$ brew list <span class=\"synStatement\">&gt;</span> ~/dotfiles/brewlist\n</pre>\n\n\n<p>これで全て書きだされます．  <br/>\nさっきの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%C3%A5%C8%A5%D5%A5%A1%A5%A4%A5%EB\">ドットファイル</a>以外の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%DC%A5%EA%A5%C3%A5%AF%A5%EA%A5%F3%A5%AF\">シンボリックリンク</a>は作らないのでこれらのリンクは作られません．</p>\n\n<h2>iTerm2の設定のエクスポート  </h2>\n\n<p>iTerm2の設定も覚えていられませんね．  <br/>\n未来を見てきたらこういうのです．(timemachineで戻ってきました)  <br/>\nなので設定ファイルをエクスポートしておきます．</p>\n\n<p><a href=\"http://qiita.com/reoring/items/a0f3d6186efd11c87f1b\">iTerm2&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x30A4;&#x30F3;&#x30DD;&#x30FC;&#x30C8;&#x30FB;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p>ここを見てきてください．<br/>\nPreferences > General > Prefeences のLoad preferences ... の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9\">チェックボックス</a>をクリックしてホームディレクトリのdotfilesにします．    <br/>\nディレクトリを確認して <code>com.googlecode.iterm2.plist</code> があればOK．  <br/>\nなければもう一度保存先のディレクトリ名があってるか確認してください．</p>\n\n<h2>Karabinerの設定のエクスポート  </h2>\n\n<p>Karabinerの設定も覚えていられませんね．  <br/>\n快適な環境を維持するためにこれもエクスポートして次の環境に持って行きましょう．</p>\n\n<p><a href=\"http://qiita.com/icb54615/items/9c7a5366e23496bfacd5\">Karabiner&#x306E;&#x8A2D;&#x5B9A;&#x79FB;&#x884C; - Qiita</a></p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>$ /Applications/Karabiner.app/Contents/Library/bin/karabiner <span class=\"synStatement\">export</span><span class=\"synIdentifier\"> </span><span class=\"synStatement\">&gt;</span><span class=\"synIdentifier\"> ~/dotfiles/karabiner.sh</span>\n</pre>\n\n\n<p>これで大丈夫です．</p>\n\n<h2>最後に</h2>\n\n<p>以上の作業で作ったdotfilesを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/github\">github</a>に上げるなり，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/dropbox\">dropbox</a>に上げるなり，外付けHDDに入れるなりして次の環境に送りましょう．  <br/>\n準備完了です．</p>\n\n","slug":"OSX クリーンインストール前の準備"},{"data":{"title":"初めてのgem","published":"2016/03/11","tags":["ruby"]},"content":"\n<p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fwat-aro%2Fcase_converter\" title=\"wat-aro/case_converter\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/wat-aro/case_converter\">github.com</a></cite></p>\n\n<p>キャメルケース，スネークケース，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%B9%A5%AB%A5%EB\">パスカル</a>ケースを相互に変換するgemを書きました．<br/>\n書き方わからずに色々やってたら最初にリリースした分は盛大にバグってました．<br/>\nとりあえずバグが取れたのでまたgemに．<br/>\n一応 <code>gem install case_converter</code> で入れられます．</p>\n\n<p>使い方はこんな感じ</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">camel_case</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel                 <span class=\"synComment\"># =&gt; &quot;camelCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">string ca_mel_case string</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel  <span class=\"synComment\"># =&gt; &quot;string caMelCase string&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">pascal_case</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel                <span class=\"synComment\"># =&gt; &quot;pascalCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">string pas_cal_case string</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel <span class=\"synComment\"># =&gt; &quot;string pasCalCase string&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">snakeCase</span><span class=\"synSpecial\">&quot;</span>.camel_to_snake                  <span class=\"synComment\"># =&gt; &quot;snake_case&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo snakeCase bar</span><span class=\"synSpecial\">&quot;</span>.camel_to_snake          <span class=\"synComment\"># =&gt; &quot;foo snake_case bar&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">pascalCase</span><span class=\"synSpecial\">&quot;</span>.camel_to_pascal                <span class=\"synComment\"># =&gt; &quot;PascalCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo pasCalCase bar</span><span class=\"synSpecial\">&quot;</span>.camel_to_snake         <span class=\"synComment\"># =&gt; &quot;foo pas_cal_case bar&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">SnakeCase</span><span class=\"synSpecial\">&quot;</span>.pascal_to_snake                 <span class=\"synComment\"># =&gt; &quot;snake_case&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo SnaKeCase bar</span><span class=\"synSpecial\">&quot;</span>.pascal_to_snake         <span class=\"synComment\"># =&gt; &quot;foo sna_ke_case bar&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">CamelCase</span><span class=\"synSpecial\">&quot;</span>.pascal_to_camel                 <span class=\"synComment\"># =&gt; &quot;camelCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo CaMelCase bar</span><span class=\"synSpecial\">&quot;</span>.pascal_to_camel         <span class=\"synComment\"># =&gt; &quot;foo caMelCase bar&quot;</span>\n</pre>\n\n\n<p>初心者でもこれなら簡単に書ける！</p>\n\n","slug":"初めてのgem"},{"data":{"title":"Nginxでsites-enabledが読み込まれない","published":"2016/03/10"},"content":"\n<p>nginx version: nginx/1.8.1</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww26.atwiki.jp%2Fnginx%2Fpages%2F13.html\" title=\"nginx @ ウィキ - nginx　バーチャルホスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www26.atwiki.jp/nginx/pages/13.html\">www26.atwiki.jp</a></cite></p>\n\n<p>ここを見ながらnginxでVirtual Host を構築しようとしていました．<br/>\nただここのやり方では <code>/etc/nginx/conf.d/default.conf</code> が読み込まれてしまうのその対処方法を書きます．</p>\n\n<p><code>/etc/nginx/nginx.conf</code>を開くとこうなっているはずです．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;\n                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;\n                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}</pre>\n\n\n<p>http内のincludeの次の行に新しくincludeを追加します．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;\n                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;\n                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}</pre>\n\n\n","slug":"Nginxでsites-enabledが読み込まれない"},{"data":{"title":"Debian 8 に MySQL 5.7.11をインストール","published":"2016/03/09"},"content":"\n<p><a href=\"http://dev.mysql.com/downloads/repo/apt/\">MySQL :: Download MySQL APT Repository</a></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309021040.png\" alt=\"f:id:wat-aro:20160309021040p:plain\" title=\"f:id:wat-aro:20160309021040p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\nここの数字を確認する．\n数字が変わっていれば以下の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>-apt-config_NUMBER_all.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/deb\">deb</a>のNUMBER部分を変更する．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ mkdir ~/src\n$ cd ~/src\n$ wget http://dev.mysql.com/get/mysql-apt-config_0.6.0-1_all.deb</pre>\n\n\n<p>　<br/>\n次にこのダウンロードした<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/deb\">deb</a>パッケージをdpkgでインストールする.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sudo dpkg -i mysql-apt-config_0.6.0-1_all.deb</pre>\n\n\n<p>　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>-5.7を選択\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309022815.png\" alt=\"f:id:wat-aro:20160309022815p:plain\" title=\"f:id:wat-aro:20160309022815p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>-5.7を選択\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309022822.png\" alt=\"f:id:wat-aro:20160309022822p:plain\" title=\"f:id:wat-aro:20160309022822p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　<br/>\napplyを選択\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309022829.png\" alt=\"f:id:wat-aro:20160309022829p:plain\" title=\"f:id:wat-aro:20160309022829p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># リポジトリのアップデート\n$ sudo apt-get update\n# mysqlのインストール\n$ sudo apt-get install mysql-server</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>サーバのrootのpasswordを聞かれるので入力する．\n　</p>\n\n<h2>インストールの確認</h2>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sudo service mysql status\n$ sudo service mysql stop\n$ sudo service mysql start</pre>\n\n\n<p>　<br/>\n問題がなければ完了．\n/etc/init.d/mysqld がないけど，5.7ではないの？<br/>\nよくわからず5時間くらい探しまわった．</p>\n\n<p>ここに書いた内容は公式サイトから．</p>\n\n<p><a href=\"http://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/\">MySQL :: A Quick Guide to Using the MySQL APT Repository</a></p>\n\n","slug":"Debian 8 に MySQL 5.7.11をインストール"},{"data":{"title":"MySQL5.7.11でユーザを追加できない．","published":"2016/03/08","tags":["MySQL"]},"content":"\n<p>環境はdebian8, mysql5.7.11.</p>\n\n<pre class=\"code lang-mysql\" data-lang=\"mysql\" data-unlink>mysql&gt; <span class=\"synStatement\">grant</span> <span class=\"synStatement\">all</span> <span class=\"synStatement\">on</span> blog_app.* <span class=\"synStatement\">to</span> <span class=\"synConstant\">'foo'</span><span class=\"synIdentifier\">@localhost</span> <span class=\"synStatement\">identified</span> <span class=\"synStatement\">by</span> <span class=\"synConstant\">'hogehoge'</span>;\nERROR <span class=\"synConstant\">1054</span> (42S22): Unknown <span class=\"synStatement\">column</span> <span class=\"synConstant\">'password_last_changed'</span> <span class=\"synStatement\">in</span> <span class=\"synConstant\">'mysql.user'</span>\n</pre>\n\n\n<p>以上のようなエラーが出ました．<br/>\n対処方法は以下になります．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sudo mysql_upgrade -u root -p\n\n$ sudo systemctl restart mysql</pre>\n\n\n<p><a href=\"http://stackoverflow.com/questions/29455181/mysql-unknown-column-password-last-changed\">MySQL unknown column &#39;password_last_changed&#39; - Stack Overflow</a></p>\n\n","slug":"MySQL5.7.11でユーザを追加できない．"},{"data":{"title":"Rubyの正規表現でそれぞれのケースへの変換","published":"2016/03/05","tags":["ruby","正規表現"]},"content":"\n<p>今日は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>に苦しんだので練習しました。<br/>\nsnake_case、camel_Case、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Pascal\">Pascal</a>_Caseのそれぞれへの変換です。<br/>\ncapitalizeなくても書けるけど一応。<br/>\n<code>m[0].upcase + m[1..-1]</code>はちょっと汚いですしね。  <br/>\n<a href=\"http://rubular.com/\">Rubular</a>使えばテストケースが期待通りのマッチになるまで簡単に\nトライ＆エラーが出来ていいです。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_camel</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]/</span>) { |<span class=\"synIdentifier\">m</span>| m[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>].capitalize}\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_pascal</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.capitalize }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_snake</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">&quot;</span> + m.downcase }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_pascal</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.capitalize\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_snake</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">&quot;</span> + m }.downcase[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>]\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_camel</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.downcase }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n","slug":"Rubyの正規表現でそれぞれのケースへの変換"},{"data":{"title":"FLEXBOX FROGGYチートシート","published":"2016/02/28","tags":["css","Flexbox"]},"content":"\n<p><a href=\"http://flexboxfroggy.com/\">FLEXBOX FROGGY</a>をクリアしたのでやりながらまとめたものを貼ります．<br/>\nFlexboxはここでやった部分しかしりませんが，これだけでも便利ですね．</p>\n\n<h1>コンテナ全体</h1>\n\n<ul>\n<li>justify-content 水平方向への寄せなど\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-start: 左寄せ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-end: 右寄せ</li>\n<li>center: 中央寄せ</li>\n<li>space-between: 要素間にスペースを入れる</li>\n<li>space-around: 要素の前後にスペースを入れる</li>\n</ul>\n</li>\n<li>align-content 垂直方向への寄せなど\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-start 上寄せ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-end 下寄せ</li>\n<li>center 中央寄せ</li>\n<li>space-between: 要素間にスペースを入れる</li>\n<li>space-around: 要素の前後にスペースを入れる</li>\n</ul>\n</li>\n<li>align-items\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-start: 上部に表示</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-end: 下部に表示</li>\n<li>center: 上下の中央に表示</li>\n<li>baseline: コンテナのベースラインに表示</li>\n<li>stretch: よくわからない</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-direction (先頭の方向を変えるのでjustify-content, align-itemsの挙動が変わる)\n\n<ul>\n<li>row: 左から右に並べる</li>\n<li>row-reverse: 右から左に並べる</li>\n<li>column: 上から下に並べる</li>\n<li>column-reverse: 下から上に並べる</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-wrap\n\n<ul>\n<li>nowrap: 一行で表示</li>\n<li>wrap: 行端までいくと新たに行を追加して表示する</li>\n<li>wrap-reverse: 反対から表示し，行端までいけば新たに行を追加して表示する</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-flow\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-directionと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-wrapを同時に使える．値はスペスで区切って書く．</li>\n</ul>\n</li>\n</ul>\n\n\n<h1>個別の要素に対して</h1>\n\n<ul>\n<li>order\n\n<ul>\n<li>現在位置を 0 として順番をずらす．一つ後ろにずらすなら1,一つ前なら-1.</li>\n</ul>\n</li>\n<li>align-self\n\n<ul>\n<li>垂直方向の位置を変える．コマンドはalign-itemsと同じ.</li>\n</ul>\n</li>\n</ul>\n\n\n","slug":"FLEXBOX FROGGYチートシート"}],"currentPage":2,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}