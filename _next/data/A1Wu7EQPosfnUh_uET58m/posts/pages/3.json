{"pageProps":{"posts":[{"data":{"title":"fjordのリモートインターンに参加しました","published":"2016/02/25"},"content":"\n<p>昨日別ブログにも書きましたが，向こうはやめてこっちに書いていきます．<br/>\nコードを書いてごはんが食べられるように頑張ります．</p>\n\n","slug":"fjordのリモートインターンに参加しました"},{"data":{"title":"プログラミングの基礎を読み終わった．","published":"2016/02/20","tags":["プログラミングの基礎","OCaml"]},"content":"\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4781911609/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51FBsJHo4EL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"プログラミングの基礎 (Computer Science Library)\" title=\"プログラミングの基礎 (Computer Science Library)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4781911609/wataro-22/\">プログラミングの基礎 (Computer Science Library)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%F5%B0%E6%B7%F2%B0%EC\">浅井健一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B5%A5%A4%A5%A8%A5%F3%A5%B9%BC%D2\">サイエンス社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2007/03</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 17人 <span class=\"hatena-asin-detail-label\">クリック</span>: 409回</li><li><a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\" target=\"_blank\">この商品を含むブログ (126件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>演習問題をほぼ解いて一週間くらいかかりました．\n　　  <br/>\nタイトルどおりに丁寧にプログラミングの基礎を習得出来る本でした．<br/>\nデザインレシピを通して，プログラムの書き方を学んでいきます．<br/>\nこのデザインレシピがよく出来ていて，<br/>\n簡単な関数ならこのやり方のまま迷わずに書いていけます．<br/>\nさらに実行して期待する型が出力できる段階まで書けると，テストを書くようになっているので．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%A5%D5%A5%A1%A1%BC%A5%B9%A5%C8\">テストファースト</a>も体験できます．<br/>\n何度も問題を解いていくうちに型をちゃんと意識するようになりました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>やっていた時も面倒なバグは大体型がおかしくなっていることに起因していたのですごくためになります．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>やリスト操作自体は慣れていましたが，パターンマッチによって操作していくのはおもしろかったです． <br/>\nプログラミング初心者にも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%B8%C0%B8%EC\">関数型言語</a>初心者にもおすすめな内容だと思います．</p>\n\n","slug":"プログラミングの基礎を読み終わった．"},{"data":{"title":"プログラミングの基礎　16.4 最初の完動プログラム","published":"2016/02/16","tags":["OCaml","プログラミングの基礎"]},"content":"\n<p>プログラミングの基礎で作ったメトロネットワーク最短路問題の解答．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%AF%A5%B9%A5%C8%A5%E9\">ダイクストラ</a>法を使い求める．<br/>\nここまでのメトロネットワーク最短路問題に関係する問題の解答すべてここに書いてある．</p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synComment\">(* サポートページからダウンロードしたglobal_ekimei_listとglobal_ekikan_list *)</span>\n<span class=\"synPreProc\">#use</span> <span class=\"synConstant\">&quot;metro.ml&quot;</span>\n\n<span class=\"synComment\">(* 目的：ekimei_t型のデータを受け取り，「路線名，駅名（かな）」を返す *)</span>\n<span class=\"synComment\">(* hyoji : ekimei_t -&gt; string *)</span>\n<span class=\"synStatement\">let</span> hyoji ekimei <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> ekimei <span class=\"synStatement\">with</span>\n    <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> kanji<span class=\"synStatement\">;</span>\n     kana <span class=\"synStatement\">=</span> kana<span class=\"synStatement\">;</span>\n     romaji <span class=\"synStatement\">=</span> romaji<span class=\"synStatement\">;</span>\n     shozoku <span class=\"synStatement\">=</span> shozoku<span class=\"synStatement\">;}</span>\n    <span class=\"synStatement\">-&gt;</span> shozoku <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;，&quot;</span> <span class=\"synStatement\">^</span> kanji <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;（&quot;</span> <span class=\"synStatement\">^</span> kana <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;）&quot;</span><span class=\"synStatement\">;;</span>\n\n\n\n<span class=\"synComment\">(* hyoji test *)</span>\nprint_string <span class=\"synConstant\">&quot;hyouji test&quot;</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> hyoji <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;茗荷谷&quot;</span><span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;みょうがだに&quot;</span><span class=\"synStatement\">;</span>\n                   romaji <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;myogadani&quot;</span><span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;丸ノ内線&quot;</span><span class=\"synStatement\">}</span>\n  <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;丸ノ内線，茗荷谷（みょうがだに）&quot;</span>\n\n\n<span class=\"synComment\">(* 目的：ローマ字の駅名（文字列）と駅名リスト(ekimei_t list 型)を受け取り</span>\n<span class=\"synComment\">   園駅の漢字表記を返す *)</span>\n<span class=\"synComment\">(* romaji_to_kanji -&gt; string -&gt; ekimei_t list -&gt; string *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> romaji_to_kanji name lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">&quot;&quot;</span>\n  <span class=\"synStatement\">|</span> <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> kanji<span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> kana<span class=\"synStatement\">;</span> romaji <span class=\"synStatement\">=</span> romaji<span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> shozoku<span class=\"synStatement\">}</span> <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n     <span class=\"synStatement\">if</span> name <span class=\"synStatement\">=</span> romaji\n     <span class=\"synStatement\">then</span> kanji\n     <span class=\"synStatement\">else</span> romaji_to_kanji name rest\n\n<span class=\"synComment\">(* romaji_to_kanji test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;&quot;</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;myogadani&quot;</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;myogadani&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;茗荷谷&quot;</span>\n<span class=\"synStatement\">let</span> test5 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;aoyamaicchome&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span>\n<span class=\"synStatement\">let</span> test6 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;heiwadai&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;平和台&quot;</span>\n\n\n<span class=\"synComment\">(* 目的：漢字の駅名を２つと駅間リストを受け取ったら，駅間リストの中からその２駅間の距離を返す *)</span>\n<span class=\"synComment\">(* get_ekikan_kyori : string -&gt; string -&gt; ekikan_t list -&gt; float *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> get_ekikan_kyori eki1 eki2 lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> infinity\n  <span class=\"synStatement\">|</span> <span class=\"synStatement\">{</span>kiten <span class=\"synStatement\">=</span> kiten<span class=\"synStatement\">;</span> shuten <span class=\"synStatement\">=</span> shuten<span class=\"synStatement\">;</span> keiyu <span class=\"synStatement\">=</span> keiyu<span class=\"synStatement\">;</span> kyori <span class=\"synStatement\">=</span> kyori<span class=\"synStatement\">;</span> jikan <span class=\"synStatement\">=</span> jikan<span class=\"synStatement\">}</span> <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n     <span class=\"synStatement\">if</span> eki1 <span class=\"synStatement\">=</span> kiten <span class=\"synStatement\">&amp;&amp;</span> eki2 <span class=\"synStatement\">=</span> shuten\n     <span class=\"synStatement\">then</span> kyori\n     <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> eki2 <span class=\"synStatement\">=</span> kiten <span class=\"synStatement\">&amp;&amp;</span> eki1 <span class=\"synStatement\">=</span> shuten\n     <span class=\"synStatement\">then</span> kyori\n     <span class=\"synStatement\">else</span> get_ekikan_kyori eki1 eki2 rest\n\n\n\n<span class=\"synComment\">(* get_ekikan_kyori test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;錦糸町&quot;</span> <span class=\"synConstant\">&quot;住吉&quot;</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;錦糸町&quot;</span> <span class=\"synConstant\">&quot;&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;&quot;</span> <span class=\"synConstant\">&quot;錦糸町&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;横浜駅&quot;</span> <span class=\"synConstant\">&quot;錦糸町&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test5 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;大手町&quot;</span> <span class=\"synConstant\">&quot;三越前&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span>\n<span class=\"synStatement\">let</span> test6 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;三越前&quot;</span> <span class=\"synConstant\">&quot;大手町&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span>\n<span class=\"synStatement\">let</span> test7 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;霞ヶ関&quot;</span> <span class=\"synConstant\">&quot;日比谷&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.2</span>\n\n\n<span class=\"synComment\">(* 目的：ローマ字の駅名を２つ受け取り，その間の距離を調べ，つながっている場合は</span>\n<span class=\"synComment\">   「A駅からB駅までのはｘｋｍです」と返し，繋がっていない場合は</span>\n<span class=\"synComment\">   「A駅からB駅はつながっていません」と返す*)</span>\n<span class=\"synStatement\">let</span> kyori_wo_hyoji r1 r2 <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">let</span> k1 <span class=\"synStatement\">=</span> romaji_to_kanji r1 global_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> k2 <span class=\"synStatement\">=</span> romaji_to_kanji r2 global_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> not_exist <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;という駅は存在しません&quot;</span> <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">if</span> k1 <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n  <span class=\"synStatement\">then</span> r1 <span class=\"synStatement\">^</span> not_exist\n  <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> k2 <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n  <span class=\"synStatement\">then</span> r2 <span class=\"synStatement\">^</span> not_exist\n  <span class=\"synStatement\">else</span> <span class=\"synStatement\">let</span> kyori <span class=\"synStatement\">=</span> get_ekikan_kyori k1 k2 global_ekikan_list <span class=\"synStatement\">in</span>\n       <span class=\"synStatement\">if</span> kyori <span class=\"synStatement\">=</span> infinity\n       <span class=\"synStatement\">then</span> k1 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅と&quot;</span> <span class=\"synStatement\">^</span> k2 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅はつながっていません&quot;</span>\n       <span class=\"synStatement\">else</span> k1 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅から&quot;</span> <span class=\"synStatement\">^</span> k2 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅までは&quot;</span> <span class=\"synStatement\">^</span> string_of_float kyori <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;kmです&quot;</span>\n\n<span class=\"synComment\">(* kyori_wo_hyoji test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;otemachi&quot;</span> <span class=\"synConstant\">&quot;hibiya&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町駅と日比谷駅はつながっていません&quot;</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;&quot;</span> <span class=\"synConstant\">&quot;kinsityo&quot;</span>  <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;という駅は存在しません&quot;</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;yokohama&quot;</span> <span class=\"synConstant\">&quot;kinsityo&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;yokohamaという駅は存在しません&quot;</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;otemachi&quot;</span> <span class=\"synConstant\">&quot;mitsukoshimae&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町駅から三越前駅までは0.7kmです&quot;</span>\n<span class=\"synStatement\">let</span> test5 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;mitsukoshimae&quot;</span> <span class=\"synConstant\">&quot;otemachi&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前駅から大手町駅までは0.7kmです&quot;</span>\n<span class=\"synStatement\">let</span> test6 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;kasumigaseki&quot;</span> <span class=\"synConstant\">&quot;hibiya&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;霞ヶ関駅から日比谷駅までは1.2kmです&quot;</span>\n\n<span class=\"synStatement\">type</span> eki_t <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>\n  namae : <span class=\"synType\">string</span><span class=\"synStatement\">;</span>               <span class=\"synComment\">(* 駅名（漢字の文字列） *)</span>\n  saitan_kyori : <span class=\"synType\">float</span><span class=\"synStatement\">;</span>         <span class=\"synComment\">(* 最短距離（実数） *)</span>\n  temae_list : <span class=\"synType\">string</span> <span class=\"synType\">list</span><span class=\"synStatement\">;</span>     <span class=\"synComment\">(* 駅名（漢字の文字列）のリスト *)</span>\n<span class=\"synStatement\">}</span>\n\n<span class=\"synComment\">(* 目的：string型の駅名(漢字)とekimei_t list型を受け取り，</span>\n<span class=\"synComment\">   ekimei_t listをeki_t listに変え，その際駅名と一致する駅についてはshokikaする *)</span>\n<span class=\"synComment\">(* make_initial_eki_list : string -&gt; ekimei_t list -&gt; eki_t list *)</span>\n<span class=\"synStatement\">let</span> make_initial_eki_list name lst <span class=\"synStatement\">=</span>\n  <span class=\"synPreProc\">List</span>.map <span class=\"synStatement\">(fun</span> eki <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">match</span> eki <span class=\"synStatement\">with</span>\n    <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> k<span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> a<span class=\"synStatement\">;</span> romaji <span class=\"synStatement\">=</span> r<span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> s<span class=\"synStatement\">}</span>\n    <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> name\n      <span class=\"synStatement\">then</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> k<span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>k<span class=\"synStatement\">]}</span>\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> k<span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">})</span>\n    lst<span class=\"synStatement\">;;</span>\n\n<span class=\"synComment\">(* make_initial_eki_list test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> make_initial_eki_list <span class=\"synConstant\">&quot;代々木上原&quot;</span> <span class=\"synStatement\">[{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;よよぎうえはら&quot;</span><span class=\"synStatement\">;</span>\n                                                 romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;yoyogiuehara&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">]}];;</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> make_initial_eki_list <span class=\"synConstant\">&quot;明治神宮前&quot;</span> <span class=\"synStatement\">[{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;代々木公園&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;よよぎこうえん&quot;</span><span class=\"synStatement\">;</span>\n                                                romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;yoyogikouen&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">};</span>\n                                               <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;明治神宮前&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;めいじじんぐうまえ&quot;</span><span class=\"synStatement\">;</span>\n                                                romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;meijijinguumae&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;代々木公園&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;明治神宮前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;明治神宮前&quot;</span><span class=\"synStatement\">]}];;</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> make_initial_eki_list <span class=\"synConstant\">&quot;赤坂&quot;</span> <span class=\"synStatement\">[{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;表参道&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;おもてさんどう&quot;</span><span class=\"synStatement\">;</span>\n                                           romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;omotesandou&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">};</span>\n                                          <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;乃木坂&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;のぎざか&quot;</span><span class=\"synStatement\">;</span>\n                                           romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;nogizaka&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">};</span>\n                                          <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;赤坂&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;あかさか&quot;</span><span class=\"synStatement\">;</span>\n                                           romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;akasaka&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;表参道&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;乃木坂&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;赤坂&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;赤坂&quot;</span><span class=\"synStatement\">]}];;</span>\n\n\n\n\n\n<span class=\"synComment\">(* 目的：ekimei_t型のレコードとekimei_t型のリストを受け取ったら，平仮名の昇順となる位置に</span>\n<span class=\"synComment\">   ekimei_t型のレコードを挿入する．同じ駅がリストにあれば挿入しない．</span>\n<span class=\"synComment\">   seiretsuのための補助関数*)</span>\n<span class=\"synComment\">(* ekimei_isnert : -&gt; ekimei_t -&gt; ekimei_t list -&gt; ekimei_t list *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> ekimei_insert eki lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">[</span>eki<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">|</span> <span class=\"synStatement\">({</span>kanji <span class=\"synStatement\">=</span> kanji<span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> kana<span class=\"synStatement\">;</span> romaji <span class=\"synStatement\">=</span> romaji<span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> shozoku<span class=\"synStatement\">;}</span> <span class=\"synStatement\">as</span> first<span class=\"synStatement\">)</span> <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n     <span class=\"synStatement\">if</span> kana <span class=\"synStatement\">=</span> eki.kana\n     <span class=\"synStatement\">then</span> lst                   <span class=\"synComment\">(* リストにあったほうが残る *)</span>\n     <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> eki.kana <span class=\"synStatement\">&lt;</span> kana    <span class=\"synComment\">(* 駅のkana &lt; first のkana *)</span>\n     <span class=\"synStatement\">then</span> eki <span class=\"synStatement\">::</span> lst\n     <span class=\"synStatement\">else</span> first <span class=\"synStatement\">::</span> ekimei_insert eki rest\n\n<span class=\"synComment\">(* test data *)</span>\n<span class=\"synStatement\">let</span> yoyogiuehara_tiyodasen <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;よよぎうえはら&quot;</span><span class=\"synStatement\">;</span>\n                              romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;yoyogiuehara&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> otemachi_tiyodasen <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;おおてまち&quot;</span><span class=\"synStatement\">;</span>\n                         romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;otemachi&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> otemachi_hanzoumonsen <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;おおてまち&quot;</span><span class=\"synStatement\">;</span>\n                             romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;otemachi&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;半蔵門線&quot;</span><span class=\"synStatement\">}</span>\n\n\n<span class=\"synComment\">(* test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> ekimei_insert otemachi_tiyodasen <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> ekimei_insert otemachi_tiyodasen <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">]</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> ekimei_insert otemachi_tiyodasen <span class=\"synStatement\">[</span>yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n    <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> ekimei_insert yoyogiuehara_tiyodasen <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">]</span>\n    <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n\n\n<span class=\"synComment\">(* 目的：ekimei_t型のリストを受け取ったら，それを平仮名の順に整列し，</span>\n<span class=\"synComment\">   さらに駅の重複を取り除いたekimei_t型のリストを返す *)</span>\n<span class=\"synComment\">(* seiretsu : ekimei_t -&gt; ekimei_t *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> seiretsu lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">[]</span>\n  <span class=\"synStatement\">|</span> first <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span> ekimei_insert first <span class=\"synStatement\">(</span>seiretsu rest<span class=\"synStatement\">)</span>\n\n\n\n\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> seiretsu <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> seiretsu <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> otemachi_hanzoumonsen<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> seiretsu <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> otemachi_hanzoumonsen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n\n\n\n\n<span class=\"synStatement\">let</span> otemachi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]}</span>\n<span class=\"synStatement\">let</span> mitsukoshimae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> shibuya <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> aoyamaichome <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n\n\n\n<span class=\"synComment\">(* 目的：直前に確定した駅 p (eki_t型)と味覚手の役のリスト v (eki_t list型)を受け取り</span>\n<span class=\"synComment\">   必要な更新処理を行った後の未確定の駅のリストを返す*)</span>\n<span class=\"synComment\">(* koushin -&gt; eki_t -&gt; eki_t list -&gt; ekikan_t list -&gt; eki_t list *)</span>\n<span class=\"synStatement\">let</span> koushin p v ekikan <span class=\"synStatement\">=</span>\n  <span class=\"synPreProc\">List</span>.map\n    <span class=\"synStatement\">(fun</span> q <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">let</span> kyori <span class=\"synStatement\">=</span> get_ekikan_kyori p.namae q.namae ekikan <span class=\"synStatement\">in</span>\n      <span class=\"synStatement\">if</span> kyori <span class=\"synStatement\">=</span> infinity\n      <span class=\"synStatement\">then</span> q\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">let</span> p_keiyu_q_kyori <span class=\"synStatement\">=</span> p.saitan_kyori +. kyori <span class=\"synStatement\">in</span>\n           <span class=\"synStatement\">if</span>  p_keiyu_q_kyori  <span class=\"synStatement\">&lt;</span> q.saitan_kyori\n           <span class=\"synStatement\">then</span> <span class=\"synStatement\">{</span> namae <span class=\"synStatement\">=</span> q.namae<span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> p_keiyu_q_kyori<span class=\"synStatement\">;</span>\n                  temae_list <span class=\"synStatement\">=(</span>q.namae<span class=\"synStatement\">)</span> <span class=\"synStatement\">::</span> p.temae_list<span class=\"synStatement\">}</span>\n           <span class=\"synStatement\">else</span> q<span class=\"synStatement\">)</span>\n    v<span class=\"synStatement\">;;</span>\n\n\n<span class=\"synComment\">(* test data *)</span>\n<span class=\"synStatement\">let</span> otemachi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]}</span>\n<span class=\"synStatement\">let</span> mitsukoshimae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> shibuya <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> aoyamaichome <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> nagatacho <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;永田町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> shinochanomizu <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n\n<span class=\"synComment\">(* koushin test *)</span>\n<span class=\"synStatement\">let</span> koushin_test1 <span class=\"synStatement\">=</span> koushin otemachi\n  <span class=\"synStatement\">[</span>mitsukoshimae<span class=\"synStatement\">;</span> shibuya<span class=\"synStatement\">;</span> shinochanomizu<span class=\"synStatement\">;</span> aoyamaichome<span class=\"synStatement\">]</span> global_ekikan_list\n  <span class=\"synStatement\">=[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span><span class=\"synStatement\">;</span>\n     temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n    <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n    <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.3</span><span class=\"synStatement\">;</span>\n     temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n    <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}];;</span>\n\n\n\n<span class=\"synComment\">(* 目的：eki_t list型のリストを受け取り，「最短距離最小の駅」と</span>\n<span class=\"synComment\">   「最短距離最小の駅以外からなるリスト」の組を返す *)</span>\n<span class=\"synComment\">(* saitan_wo_bunri : eki_t list -&gt; eki_t * eki_t list *)</span>\n<span class=\"synStatement\">let</span> saitan_wo_bunri eki_list <span class=\"synStatement\">=</span>\n  <span class=\"synPreProc\">List</span>.fold_right\n    <span class=\"synStatement\">(fun</span> first rest_saitan <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">let</span> <span class=\"synStatement\">(</span>minimum, lst<span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span> rest_saitan <span class=\"synStatement\">in</span>\n      <span class=\"synStatement\">if</span> minimum.namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n      <span class=\"synStatement\">then</span> <span class=\"synStatement\">(</span>first, lst<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> first.saitan_kyori <span class=\"synStatement\">&lt;=</span> minimum.saitan_kyori\n      <span class=\"synStatement\">then</span> <span class=\"synStatement\">(</span>first, minimum <span class=\"synStatement\">::</span> lst<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">(</span>minimum, first <span class=\"synStatement\">::</span> lst<span class=\"synStatement\">))</span>\n    eki_list\n    <span class=\"synStatement\">({</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>, <span class=\"synConstant\">[]</span><span class=\"synStatement\">)</span>\n\n\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> saitan_wo_bunri <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span><span class=\"synStatement\">;</span>\n                              temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n                             <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.3</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">]};</span>\n                             <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.3</span><span class=\"synStatement\">;</span>\n                              temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n                             <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span>\n                              temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=({</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.3</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">]}</span>,\n    <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span><span class=\"synStatement\">;</span>\n     temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.3</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}]);;</span>\n\n\n<span class=\"synComment\">(* 目的：eki_t list型の未確定の駅のリストとekikan_t list型の駅間のリストを受け取り</span>\n<span class=\"synComment\">   ダイクストラのアルゴリズムにしたがって各駅について</span>\n<span class=\"synComment\">   最短距離と最短経路が正しく入ったリストを返す *)</span>\n<span class=\"synComment\">(* dijkstra_main : eki_t list -&gt; ekikan_t list -&gt; eki_t list *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> dijkstra_main  eki_list ekikan <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> eki_list <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">[]</span>\n  <span class=\"synStatement\">|</span> first <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">match</span> <span class=\"synStatement\">(</span>saitan_wo_bunri eki_list<span class=\"synStatement\">)</span> <span class=\"synStatement\">with</span>\n    <span class=\"synStatement\">(</span>saitan1, <span class=\"synConstant\">[]</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">[</span>saitan1<span class=\"synStatement\">]</span>\n    <span class=\"synStatement\">|</span> <span class=\"synStatement\">(</span>saitan2, rest<span class=\"synStatement\">)</span> <span class=\"synStatement\">-&gt;</span> saitan2 <span class=\"synStatement\">::</span> <span class=\"synStatement\">(</span>dijkstra_main <span class=\"synStatement\">(</span>koushin saitan2 rest ekikan<span class=\"synStatement\">)</span> ekikan<span class=\"synStatement\">)</span> <span class=\"synStatement\">;;</span>\n\n\n\n<span class=\"synComment\">(* test_data *)</span>\n<span class=\"synStatement\">let</span> otemachi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.7</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};;</span>\n<span class=\"synStatement\">let</span> mitsukoshimae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n<span class=\"synStatement\">let</span> suitenguumae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n<span class=\"synStatement\">let</span> kiyosumishirakawa <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n<span class=\"synStatement\">let</span> sumiyoshi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;住吉&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n\n<span class=\"synStatement\">let</span> dijkstra_test1 <span class=\"synStatement\">=</span> dijkstra_main <span class=\"synStatement\">[</span>otemachi<span class=\"synStatement\">;</span> mitsukoshimae<span class=\"synStatement\">;</span> suitenguumae<span class=\"synStatement\">;</span>\n                                    kiyosumishirakawa<span class=\"synStatement\">;</span> sumiyoshi<span class=\"synStatement\">]</span>\n  global_ekikan_list\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.7</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">2.4</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">3.7</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">5.4</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;住吉&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">7.30000000000000071</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span>\n         <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;住吉&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]}];;</span>\n\n<span class=\"synComment\">(* 目的：始点の駅名（ローマ字の文字列）と終点の駅名（ローマ字の文字列）を受け取り</span>\n<span class=\"synComment\">   seiretsuを使ってglobal_ekimei_list の重複を取り除き，</span>\n<span class=\"synComment\">   romaji_to_kanji を使って始点と終点の漢字表記を求め</span>\n<span class=\"synComment\">   make_initial_eki_listを使って駅のリストを作り，</span>\n<span class=\"synComment\">   dijkstra_mainを使って各駅までの最短路を確定し，</span>\n<span class=\"synComment\">   その中空終点の駅のレコード(eki_t型)を返す*)</span>\n<span class=\"synComment\">(* dijkstra : string -&gt; string -&gt; eki_t *)</span>\n<span class=\"synStatement\">let</span> dijkstra siten shuten <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">let</span> sorted_ekimei_list <span class=\"synStatement\">=</span> seiretsu global_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> siten_kanji <span class=\"synStatement\">=</span> romaji_to_kanji siten sorted_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> shuten_kanji <span class=\"synStatement\">=</span> romaji_to_kanji shuten sorted_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> initialized_list <span class=\"synStatement\">=</span> make_initial_eki_list siten_kanji sorted_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> saitan_list <span class=\"synStatement\">=</span> dijkstra_main initialized_list global_ekikan_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> serch item lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n      <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n    <span class=\"synStatement\">|</span> first <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n       <span class=\"synStatement\">if</span> first.namae <span class=\"synStatement\">=</span> item\n       <span class=\"synStatement\">then</span> first\n       <span class=\"synStatement\">else</span> serch item rest\n  <span class=\"synStatement\">in</span> serch shuten_kanji saitan_list<span class=\"synStatement\">;;</span>\n\n<span class=\"synComment\">(* test *)</span>\n<span class=\"synComment\">(* サポートページからのコピペ *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> dijkstra <span class=\"synConstant\">&quot;shibuya&quot;</span> <span class=\"synConstant\">&quot;gokokuji&quot;</span> <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;護国寺&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">9.8</span><span class=\"synStatement\">;</span>\n   temae_list <span class=\"synStatement\">=</span>\n     <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;護国寺&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;江戸川橋&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;飯田橋&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;市ヶ谷&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;麹町&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;永田町&quot;</span><span class=\"synStatement\">;</span>\n      <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;表参道&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">]}</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> dijkstra <span class=\"synConstant\">&quot;myogadani&quot;</span> <span class=\"synConstant\">&quot;meguro&quot;</span> <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;目黒&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">12.7000000000000028</span><span class=\"synStatement\">;</span>\n   temae_list <span class=\"synStatement\">=</span>\n     <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;目黒&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;白金台&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;白金高輪&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;麻布十番&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;六本木一丁目&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;溜池山王&quot;</span><span class=\"synStatement\">;</span>\n      <span class=\"synConstant\">&quot;永田町&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;麹町&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;市ヶ谷&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;飯田橋&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;後楽園&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;茗荷谷&quot;</span><span class=\"synStatement\">]}</span>\n</pre>\n\n\n","slug":"プログラミングの基礎　16.4 最初の完動プログラム"},{"data":{"title":"OCamlの無名関数は再帰を定義できない？","published":"2016/02/15","tags":["プログラミングの基礎","OCaml"]},"content":"\n<p>わたろーです．<br/>\n今<a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\">プログラミングの基礎 (Computer Science Library)</a>を読んでいます．<br/>\nこれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>とデザインレシピでプログラミングの基礎を学ぶという内容なのですが，<br/>\n名前のない関数という節で気になる文章がありました．<br/>\n14.4 名前のない関数 p145</p>\n\n<blockquote><p>名前のない関数で定義できるのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>をしていない関数だけです．</p></blockquote>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%E0%A5%C0%B7%D7%BB%BB\">ラムダ計算</a>を元にしていると思っていたので驚きました．<br/>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>出来ないのって思ったので試してみました．<br/>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>は<a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\">計算機プログラムの構造と解釈 第2版</a>p233 問題4.21に載っていたものを使います．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; SICP</span>\n<span class=\"synComment\">;;; 階乗計算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n         <span class=\"synConstant\">1</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>実行すると</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                <span class=\"synConstant\">1</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n       <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">120</span>\n</pre>\n\n\n<p>　<br/>\nこれを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>で書いてみます．</p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-&gt;</span>\n  <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-&gt;</span>\n    fact fact n<span class=\"synStatement\">)</span>\n    <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n      <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n      <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n            <span class=\"synConstant\">Characters</span> <span class=\"synConstant\">33</span>-<span class=\"synConstant\">37</span>:\n      fact fact n<span class=\"synError\">)</span>\n           <span class=\"synStatement\">^^^^</span>\n<span class=\"synConstant\">Error</span>: <span class=\"synConstant\">This</span> expression has <span class=\"synStatement\">type</span> 'a <span class=\"synStatement\">-&gt;</span> 'b <span class=\"synStatement\">-&gt;</span> 'c\n       but an expression was expected <span class=\"synStatement\">of</span> <span class=\"synStatement\">type</span> 'a\n       <span class=\"synConstant\">The</span> <span class=\"synStatement\">type</span> variable 'a occurs inside 'a <span class=\"synStatement\">-&gt;</span> 'b <span class=\"synStatement\">-&gt;</span> 'c\n</pre>\n\n\n<p>エラーですね．<br/>\n型が解決されていないのでしょうか．<br/>\nググッてみると -rectypesを使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>を起動すれば出来るようです．</p>\n\n<p><a href=\"http://d.hatena.ne.jp/sumii/20051203/1133575324\">&#x4E0D;&#x52D5;&#x70B9;&#x6F14;&#x7B97;&#x5B50;&#x3075;&#x305F;&#x305F;&#x3073; - sumii&#x306E;&#x65E5;&#x8A18;</a></p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-&gt;</span>\n    <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-&gt;</span>\n      fact fact n<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-&gt;</span>\n        <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n        <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n        <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n\n            - : <span class=\"synType\">int</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">120</span>\n</pre>\n\n\n<p>おお，動いた．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>型っていうのが必要になるわけなんですね．<br/>\nまだまだわからないことだらけですが，型もおもしろそうです．<br/>\nこの辺探すのに行き着いたこのページのTaPLのまとめがすごくおもしろそうです．</p>\n\n<p><iframe src=\"http://mint.hateblo.jp/embed/2014/12/24/211543\" title=\"おいお前ら、TAPL読むぞ！ - ミントフレーバー緑茶\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://mint.hateblo.jp/entry/2014/12/24/211543\">mint.hateblo.jp</a></cite></p>\n\n<p>おもしろそう．読みたい．すごく読みたい．\nでもまだ自分には厳しそう．</p>\n\n<p>その前に<a href=\"http://d.hatena.ne.jp/asin/4781912850/wataro-22\">プログラミング言語の基礎概念 (ライブラリ情報学コア・テキスト)</a>を読みたい．<br/>\nしかしその時間を作れるか．<br/>\nそろそろお仕事探しのために動かないといけないかもって思ってきています．<br/>\n勉強だけしていたい．</p>\n\n","slug":"OCamlの無名関数は再帰を定義できない？"},{"data":{"title":"プログラミング初心者がSICP(計算機プログラムの構造と解釈)を読んでみた","published":"2016/02/13","tags":["scheme","SICP"]},"content":"\n<h1>読む前の状態と動機</h1>\n\n<ul>\n<li>読み始めた時点でプログラミング歴約１年</li>\n<li><a href=\"http://www.shido.info/lisp/idx_scm.html\">もうひとつのscheme入門</a>でプログラミングに入門するも，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4\">高階関数</a>で挫折．</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>本二冊，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a> Tutorialを二周．</li>\n<li>他読み始めたけど途中で飽きた本が何冊か．</li>\n<li>仕事（非IT)が忙しく，プログラミング始めて一年でこれくらいしか出来なかった．</li>\n<li>基本的なところがしっくりこない．</li>\n<li>でもコード書くのは楽しいし，出来ればそれを仕事にしたいので基礎を身に着けたい．</li>\n<li>無職になって時間もあるから基礎を身につけるために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>を読もう．<br/>\n　</li>\n</ul>\n\n\n\n\n\n<p>\n　</p>\n\n<h1>読むための準備</h1>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>手習いとプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>を読んでから<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>にとりかかった．</li>\n<li>メインで読んだのは2版の和田訳．読んでわからない時は原著や1版の元吉訳に当たる．</li>\n<li>後半になると<a href=\"https://github.com/hiroshi-manabe/sicp-pdf\">真鍋訳</a>が登場したためこちらにも助けられた．<br/>\n　<br/>\n　\n\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>を読む過程で得たもの</h1></li>\n<li>括弧が気にならなくなった</li>\n<li>S式のほうが読みやすいのになんで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E6%C3%D6%B5%AD%CB%A1\">中置記法</a>のほうがメジャーなの？</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的プロセスと反復的プロセス</li>\n<li>第一級手続き</li>\n<li>抽象の壁</li>\n<li>メッセージパッシング</li>\n<li>型によるディスパッチと強制型変換</li>\n<li>イベントドリヴン</li>\n<li>制約の拡散</li>\n<li>破壊的代入が怖くなった</li>\n<li>ストリーム</li>\n<li>遅延評価</li>\n<li>超循環評価器の実装を通して評価戦略を理解した．</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシンのシミュレータによって低レベルで何が行われているのか理解した．</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>の効率の違い<br/>\n　\n\n<h1>感想</h1>\n\n<p>４ヶ月半近くかかった．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>は基礎と聞いていたけど，やっぱり基礎でした．<br/>\n今の段階で読んでおいてよかった．<br/>\n問題全部解くつもりはなかったけど，だんだんと自力で解きたくなってきたため結局ほとんど自力で解いていた．<br/>\n解けないと悔しい．<br/>\n問題やってみて思うのは，時間がめちゃくちゃかかるけど解かないと理解できなかった．<br/>\n特に４章からは本文のコードを動かすにも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>が大変で，問題解くにも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>が大変．<br/>\nでもその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>を通して何度もコードや本文を読むことでそこで何をしているのか理解していけた．<br/>\n最後はソースがコメントだらけになった．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>でやる問題が２問残っているのでCを勉強してから解きたい．<br/>\nプログラミング楽しい！に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>おもしろい！も追加された．<br/>\nプログラミング初心者からプログラミング初級者へレベルアップできた・・・はず．<br/>\n　<br/>\nこれから読む人には<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>手習いを読んでおくことを勧めたい．<br/>\n読みにくいし後半急激に難しくなるけど，そこで継続を渡すことを覚えておくと楽になる．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>方法も覚えておかないと４章から辛いので<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>使うならプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>にも一通り目を通しておいたほうがいい．<br/>\n　<br/>\nかなり苦しんだけど，それでも楽しい・おもしろいのほうが勝ってる．<br/>\nまだ半年は生きていけそうなのでまだまだ勉強してコード書く仕事につけるように頑張ります．<br/>\nとりあえず<a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\">プログラミングの基礎 (Computer Science Library)</a>でMLとデザインレシピに触れてからK&amp;Rを読もうと思ってます．</p></li>\n</ul>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068269/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41OG665OkZL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Scheme手習い\" title=\"Scheme手習い\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068269/wataro-22/\">Scheme手習い</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman,Matthias Felleisen,元吉文男,横山晶一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2010/10/22</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 5人 <span class=\"hatena-asin-detail-label\">クリック</span>: 129回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274068269/wataro-22\" target=\"_blank\">この商品を含むブログ (33件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51Exg14b4uL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"プログラミングGauche\" title=\"プログラミングGauche\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\">プログラミングGauche</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Kahua\">Kahua</a>プロジェクト,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%EE%B9%E7%BB%CB%CF%AF\">川合史朗</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3\">オライリージャパン</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2008/03/14</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 22人 <span class=\"hatena-asin-detail-label\">クリック</span>: 713回</li><li><a href=\"http://d.hatena.ne.jp/asin/4873113482/wataro-22\" target=\"_blank\">この商品を含むブログ (272件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"プログラミング初心者がSICP(計算機プログラムの構造と解釈)を読んでみた"},{"data":{"title":"SICP 問題 5.50","published":"2016/02/12","tags":["scheme","SICP"]},"content":"\n<p>4.1節の超循環評価器を5.5で作った翻訳系で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>する．<br/>\n　</p>\n\n<p><a href=\"http://www.serendip.ws/archives/4020\">&#x554F;&#x984C;5.50 &ndash; SICP&#xFF08;&#x8A08;&#x7B97;&#x6A5F;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x69CB;&#x9020;&#x3068;&#x89E3;&#x91C8;&#xFF09;&#x305D;&#x306E;302 : Serendip - Web&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;</a></p>\n\n<p><a href=\"http://himoiku.cocolog-nifty.com/blog/2008/07/sicp550_f385.html\">http://himoiku.cocolog-nifty.com/blog/2008/07/sicp550_f385.html</a></p>\n\n<p>ここを参考にしました．<br/>\nまずここに書いてるmapが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%B0%A4%EB\">バグる</a>っていうのがわからないところからスタート．<br/>\nエラーメッセージを見ても原因がmapだとは気づかず，<br/>\nこの２つのブログを参考にしながら修正するも，翻訳系がダメなのか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>がダメなのかもなかなかわからず．<br/>\n　<br/>\n三日間いろいろなバグに出会いながら最後まで残ったのが２つ．<br/>\n一つ目はどこかで環境の保護がされていないために，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>のベースケースから戻ってきても環境が回復されずその後の計算がおかしくなるバグ．<br/>\n二つ目はレキシカルアドレッシングで翻訳時環境から得たアドレスが狂うバグ．<br/>\n一つ目は最終的にソースをenvで検索してpreservingまたはmake-instruction-sequenceでenvが足らないところがないか探しました．<br/>\nレキシカルアドレッシングの実装時に，作ったcompile-variablesとcompile-assignmentのmake-instruction-sequenceのneededにenvが入っていないためでした．\n二つ目の原因は内部定義でした．<br/>\n翻訳時環境が拡張されるのはcompile-lambda-bodyだけなので，内部定義でフレームが拡張されず，<br/>\nfind-variableが指すアドレスがこのシンボルがない時の環境でのアドレスなので実行時環境では違うものを指してしまいバグっていました．<br/>\nこれの解決策として，scan-out-definesでmake-letを使い内部定義を全てletに吐き出し，<br/>\nそれをlet->combinationでlambdaに変換することで解決しました．<br/>\n根本的な解決ではないですが，とりあえず，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>については問題なく動きます．<br/>\n　<br/>\n以下はテスト．\n翻訳系のREPLのEC-COMPからdriver-loopを呼び出し，<br/>\n翻訳系で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>のREPL，MC-Evalに入っています．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;;EC-COMP input:</span>\n<span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'((</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>product <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n count<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> count<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> count product<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fact <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter count product<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n count<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> count<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> count product<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fact <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n</pre>\n\n\n","slug":"SICP 問題 5.50"},{"data":{"title":"SICP 問題 5.49","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p>compileとassembleを機械計算として持ち，REPLを行う<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>計算機を設計する．<br/>\n　<br/>\nはじめ，assembleを命令列の上でやる方法がわからずに，compile-and-assembleという手続きを作り，<br/>\nそれを機械演算として登録してRCEPLを実装したが，</p>\n\n<p><a href=\"http://www.serendip.ws/archives/4005\">&#x554F;&#x984C;5.49 &ndash; SICP&#xFF08;&#x8A08;&#x7B97;&#x6A5F;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x69CB;&#x9020;&#x3068;&#x89E3;&#x91C8;&#xFF09;&#x305D;&#x306E;301 : Serendip - Web&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;</a></p>\n\n<p>ここでそれをうまく回避していたので真似た．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./compiler.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eceval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rcepl<span class=\"synSpecial\">)</span> RCEPL<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rcepl-proc\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> eceval-procedure\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compile compile<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assemble assemble<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rcepl rcepl<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>statements statements<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> RCEPL\n  <span class=\"synSpecial\">(</span>make-machine\n   rcepl-proc\n   <span class=\"synSpecial\">'((</span>assign machine <span class=\"synSpecial\">(</span>op rcepl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;直接RCEPLを指せないので</span>\n     read-compile-execute-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;;EC-COMP input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-compile-execute<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;;EC-COMP value&quot;</span>:<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-compile-execute-print-loop<span class=\"synSpecial\">))</span>\n\n     read-compile-execute\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compile<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const return<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">()))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op statements<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op assemble<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg machine<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-rcepl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>start RCEPL<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ntest</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start-rcepl<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;;EC-COMP input:</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n            n\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;;EC-COMP value</span>\nok\n\n<span class=\"synComment\">;;;EC-COMP input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">78</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">40</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;;EC-COMP value</span>\n<span class=\"synConstant\">2432902008176640000</span>\n</pre>\n\n\n","slug":"SICP 問題 5.49"},{"data":{"title":"SICP 問題 5.48","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p>ECEVALのrepl上で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>出来るようにする．<br/>\nこれで動くかなって思ったら動いた．<br/>\nただトレースした命令列を見ると，<br/>\napply-dispatchからprimitive-procedureにジャンプせずに先頭に戻っている．<br/>\nなぜそうなるのかわからない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 環境を拡張してprimitive-procedureとしてcompile-and-run を登録</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment-with-compile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extend-environment\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compile-and-run<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive compile-and-run<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; setup-environment-with-compileの環境からecevalに入るようにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-and-go expression<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>instructions\n         <span class=\"synSpecial\">(</span>assemble <span class=\"synSpecial\">(</span>statements\n                    <span class=\"synSpecial\">(</span>compile expression <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">'()))</span>\n                   eceval<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment-with-compile<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>val instructions<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>flag true<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">; ; and-goとは違い環境の初期設定はいらない．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-and-run expression<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>instructions\n         <span class=\"synSpecial\">(</span>assemble <span class=\"synSpecial\">(</span>statements\n                    <span class=\"synSpecial\">(</span>compile expression <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">'()))</span>\n                   eceval<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>val instructions<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>flag true<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 環境をwith-compileのほうにしてflagをfalseにしてからecevalに入る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-eceval<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment-with-compile<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>flag false<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.48"},{"data":{"title":"SICP 問題 5.47","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した手続きから積極制御評価器で定義した手続きを使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>primitive-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>primitive-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compiled-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compiled-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compound-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compound-branch<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; compound-branchの作成</span>\n        <span class=\"synSpecial\">(</span>after-call <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-call<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>compiled-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-call linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>primitive-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; compiled-branchへの分岐を追加</span>\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op compiled-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>compiled-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; primitiveでもcompiledでもなかったらcompoundとして処理．</span>\n       <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         compound-branch\n         <span class=\"synComment\">;; compiledと同じようにcompound-proc-applで命令を作る</span>\n         <span class=\"synSpecial\">(</span>compound-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             compiled-branch\n             <span class=\"synSpecial\">(</span>compile-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             primitive-branch\n             <span class=\"synSpecial\">(</span>end-with-linkage\n              linkage\n              <span class=\"synSpecial\">(</span>make-instruction-sequence\n               <span class=\"synSpecial\">'(</span>proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                         <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))))))))</span>\n       after-call<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; ほとんどcompile-proc-applと同じで，continueをセーブしてからcompappにジャンプする．</span>\n<span class=\"synComment\">;; compappには(label procedure-apply)が入っている．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-proc-appl target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'()</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-return <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>proc-return<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>make-instruction-sequence\n            <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n            <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-return<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">,</span>proc-return\n              <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>save continue<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;return linkage, target not val -- COMPILE&quot;</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; ec-evalの命令の先頭でcompappを初期化する．</span>\n   <span class=\"synSpecial\">'((</span>assign compapp <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span> <span class=\"synComment\">;追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label external-entry<span class=\"synSpecial\">))</span>\n     read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ntest</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>begin\n          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">10</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">12</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">22</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">4</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した定義の上書き，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>していない定義へのアクセスの両方がうまくいっている．</p>\n\n","slug":"SICP 問題 5.47"},{"data":{"title":"SICP 問題 5.46","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p>5.45と同様に今度は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%A3%A5%DC%A5%CA%A5%C3%A5%C1%BF%F4%CE%F3\">フィボナッチ数列</a>の計算でそれぞれ比べる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib  <span class=\"synComment\">;;一回目以外は省略</span>\n        <span class=\"synSpecial\">(</span>make-machine\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">'(</span>controller\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n           fib-loop\n           <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n           <span class=\"synComment\">;; Fib(n-1)を計算するよう設定</span>\n           <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;n の昔の値を退避</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>   <span class=\"synComment\">;n を n-1 に変える</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>               <span class=\"synComment\">;再帰呼び出しを実行</span>\n           afterfib-n-1                <span class=\"synComment\">;戻った時 Fib(n-1) は val にある</span>\n           <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n           <span class=\"synComment\">;; Fib(n-2)を計算するよう設定</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;Fib(n-1) を退避</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n           afterfib-n-2            <span class=\"synComment\">;戻った時 Fib(n-2) の値は val にある</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;n には Fib(n-2) がある</span>\n           <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>           <span class=\"synComment\">;val には Fib(n-1) がある</span>\n           <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign val                   <span class=\"synComment\">;Fib(n-1) + Fib(n-2)</span>\n                   <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;呼び出し側に戻る．答えは val にある</span>\n           immediate-answer\n           <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>          <span class=\"synComment\">;基底の場合: Fib(n)=n</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n           fib-done\n           <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\n\nfib\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">5</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">5</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">8</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">80</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">13</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">132</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">21</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">216</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">34</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">352</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>　<br/>\n翻訳系</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>&lt; n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n              n\n              <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">15</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">39</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">63</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">11</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">103</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">8</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">167</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">15</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">13</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">271</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">17</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">21</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">439</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">19</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">34</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">711</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">21</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>　<br/>\n積極制御評価器</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ec-fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ec-fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>ec-fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">72</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">128</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">408</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">688</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">8</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1136</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">13</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1864</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">21</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3040</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">34</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4944</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>プッシュ数</p>\n\n<table>\n<thead>\n<tr>\n<th> n   </th>\n<th style=\"text-align:right;\"> 計算機 </th>\n<th style=\"text-align:right;\"> 翻訳系 </th>\n<th style=\"text-align:right;\"> 評価器 </th>\n<th style=\"text-align:right;\"> 評/機 </th>\n<th style=\"text-align:right;\"> 翻/機 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 3   </td>\n<td style=\"text-align:right;\">    8 </td>\n<td style=\"text-align:right;\">  23 </td>\n<td style=\"text-align:right;\">   128  </td>\n<td style=\"text-align:right;\"> 16.0 </td>\n<td style=\"text-align:right;\"> 2.87 </td>\n</tr>\n<tr>\n<td> 4 </td>\n<td style=\"text-align:right;\"> 16 </td>\n<td style=\"text-align:right;\">  39 </td>\n<td style=\"text-align:right;\"> 240 </td>\n<td style=\"text-align:right;\"> 15.0 </td>\n<td style=\"text-align:right;\"> 2.43 </td>\n</tr>\n<tr>\n<td>5 </td>\n<td style=\"text-align:right;\"> 28 </td>\n<td style=\"text-align:right;\"> 63 </td>\n<td style=\"text-align:right;\"> 408 </td>\n<td style=\"text-align:right;\"> 14.57</td>\n<td style=\"text-align:right;\"> 2.25 </td>\n</tr>\n<tr>\n<td>6 </td>\n<td style=\"text-align:right;\"> 48</td>\n<td style=\"text-align:right;\"> 103 </td>\n<td style=\"text-align:right;\"> 688 </td>\n<td style=\"text-align:right;\"> 14.33 </td>\n<td style=\"text-align:right;\">2.14</td>\n</tr>\n<tr>\n<td>7 </td>\n<td style=\"text-align:right;\"> 80 </td>\n<td style=\"text-align:right;\"> 167</td>\n<td style=\"text-align:right;\"> 1136 </td>\n<td style=\"text-align:right;\">14.2</td>\n<td style=\"text-align:right;\">2.08</td>\n</tr>\n<tr>\n<td>8</td>\n<td style=\"text-align:right;\">132</td>\n<td style=\"text-align:right;\">271</td>\n<td style=\"text-align:right;\">1864</td>\n<td style=\"text-align:right;\"> 14.12</td>\n<td style=\"text-align:right;\">2.05</td>\n</tr>\n<tr>\n<td>9</td>\n<td style=\"text-align:right;\">216</td>\n<td style=\"text-align:right;\">439</td>\n<td style=\"text-align:right;\">3040</td>\n<td style=\"text-align:right;\">14.07</td>\n<td style=\"text-align:right;\"> 2.03</td>\n</tr>\n<tr>\n<td>10</td>\n<td style=\"text-align:right;\">352</td>\n<td style=\"text-align:right;\">711</td>\n<td style=\"text-align:right;\">4944</td>\n<td style=\"text-align:right;\">14.04</td>\n<td style=\"text-align:right;\">2.01|</td>\n</tr>\n<tr>\n<td>20</td>\n<td style=\"text-align:right;\">43780</td>\n<td style=\"text-align:right;\">87567</td>\n<td style=\"text-align:right;\">612936</td>\n<td style=\"text-align:right;\">14.0</td>\n<td style=\"text-align:right;\">2.0</td>\n</tr>\n</tbody>\n</table>\n\n\n<p>　<br/>\n 最大スタック深さ</p>\n\n<table>\n<thead>\n<tr>\n<th> 計算機</th>\n<th> 翻訳系</th>\n<th> 評価器 </th>\n<th>評/機</th>\n<th> 翻/機</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2n-2</td>\n<td>2n+1</td>\n<td>5n+3</td>\n<td>2.500</td>\n<td>1.00</td>\n</tr>\n</tbody>\n</table>\n\n\n","slug":"SICP 問題 5.46"},{"data":{"title":"SICP 問題 5.45","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した階乗計算，積極制御評価器の階乗計算，特殊目的計算機のプッシュ数，最大スタック深さを調べて比較する．</p>\n\n<p>まずは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>したものから</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">9</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">11</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">15</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">17</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">19</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">21</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ数は2n+3<br/>\n最大スタック深さは2n-2<br/>\n　<br/>\n次に積極制御評価器で計測する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ec-factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>ec-factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">80</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">112</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">144</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">176</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">208</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">272</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">304</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ数は32n-16<br/>\n最大スタック深さは5n+3<br/>\n　<br/>\n最後に階乗計算のための特殊計算機で計測する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fact  <span class=\"synComment\">;; 二回目以降の初期化は省略</span>\n        <span class=\"synSpecial\">(</span>make-machine\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">'(</span>controller\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n           fact-loop\n           <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n           after-fact\n           <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n           base-case\n           <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n           fact-done\n           <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\nfact\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">24</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">120</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">720</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">5040</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">40320</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">362880</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ数が2n-2\n最大スタック深さが2n-2．</p>\n\n<p>比べると，積極制御評価器は<br/>\ntotal: 32n-16<br/>\nmax: 5n+3<br/>\n　<br/>\n翻訳系は<br/>\ntotal: 2n+3<br/>\nmax: 2n-2<br/>\n　<br/>\n階乗計算機は<br/>\ntotal: 2n-2<br/>\nmax: 2n-2<br/>\n　<br/>\n本来はここで翻訳系と階乗計算機のほうがはるかに優れていることを確認するはずが<br/>\nここまでの問題で最適化したため，ほとんど性能差がなくなっている．<br/>\n比率を出すと積極制御評価器とは<br/>\ntotalが1:16<br/>\nmaxは2:5の性能差になる．</p>\n\n<p>ここで本当に翻訳系が2nで収まっているのか確認のために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した命令列を出力させる．<br/>\nsaveしているところを確認する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n        entry1\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n        true-branch3\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        false-branch4\n        <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>  <span class=\"synComment\">;; false-branchのcontinue</span>\n        <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>          <span class=\"synComment\">;; false-branchのenv</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n        compiled-branch7\n        <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label proc-return9<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        proc-return9\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n        primitive-branch6\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        after-call8\n        <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-if5\n        after-lambda2\n        <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>false-branchでcontinueとenvをsaveしているだけなので最大スタック深さが2n-2なのは確かなようだ．<br/>\nプッシュ数が2n+3なのは(factorial 1)でも5回プッシュされてるところを見ると，<br/>\n引数を適用する段階でされているのでこれ以上は無理だろう．<br/>\nfactorialは基本計算しか使っていないので，open-code最適化がかなり効いてるためのこれだけ性能がよくなってると思われる．</p>\n\n","slug":"SICP 問題 5.45"},{"data":{"title":"SICP 問題 5.44","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>基本手続きの名前を含む式の正しいコードを翻訳するため，翻訳時環境を調べるようにする．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>  (cond ((self-evaluating? exp)\n         (compile-self-evaluating exp target linkage))\n        ((variable? exp)\n         (compile-variable exp target linkage ct-env))\n        ((quoted? exp) (compile-quoted exp target linkage))\n        ((assignment? exp)\n         (compile-assignment exp target linkage ct-env))\n        ((definition? exp)\n         (compile-definition exp target linkage ct-env))\n        ((if? exp) (compile-if exp target linkage ct-env))\n        ((lambda? exp)\n         (compile-lambda exp target linkage ct-env))\n        ((let? exp)\n         (compile (let-&gt;combination exp) target linkage ct-env))\n        ((begin? exp)\n         (compile-sequence (begin-actions exp)\n                           target linkage ct-env))\n        ((cond? exp) (compile (cond-&gt;if exp) target linkage ct-env))\n        ((open-code? exp ct-env)           ;ct-envも渡して翻訳時環境に上書きされていないか調べる\n         (compile-open-code exp target linkage ct-env))\n        ((application? exp)\n         (compile-application exp target linkage ct-env))\n        (else\n         (error &#34;Unknown expression type -- COMPILE&#34; exp))))\n\n(define (not-overwrite? op ct-env)\n  (let ((address (find-variable op ct-env )))\n    (eq? address &#39;not-found)))\n\n(define (open-code? exp ct-env)\n  (and (memq (car exp) &#39;(= * - +))\n       (not-overwrite? (car exp) ct-env)))</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry14<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda15<span class=\"synSpecial\">))</span>\n  entry14\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここで+を探すのにct-envの中身から探しているので成功.open-codeになっていない．</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch19<span class=\"synSpecial\">))</span>\n  compiled-branch20\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call21<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch19\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call21\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch16<span class=\"synSpecial\">))</span>\n  compiled-branch17\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call18<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call18\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch22<span class=\"synSpecial\">))</span>\n  compiled-branch23\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch22\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call24\n  after-lambda15\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.44"},{"data":{"title":"SICP 問題 5.43","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>内部定義を吐き出して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>する．<br/>\nまず4.16で作ったscan-out-definesがこれ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-defines proc-body defines non-defines<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> defines<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> non-defines<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>split-defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> defines<span class=\"synSpecial\">)</span> non-defines<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>split-defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span> defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> non-defines<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>splits <span class=\"synSpecial\">(</span>split-defines body <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> splits<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>non-defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> splits<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> defines<span class=\"synSpecial\">)</span>\n          non-defines\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                              defines<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                        <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                      defines<span class=\"synSpecial\">)</span>\n                                 non-defines<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>　<br/>\nこれをcompile-lambda-bodyで使う</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>formals <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>append-instruction-sequences\n     <span class=\"synSpecial\">(</span>make-instruction-sequence\n      <span class=\"synSpecial\">'(</span>env proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n\n      <span class=\"synSpecial\">`(,</span>proc-entry\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env\n                <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>formals<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))</span>\n     <span class=\"synComment\">;; ここでscan-out-definesでlambda-bodyを変換してからcompile-sequenceに渡す</span>\n     <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> formals ct-env<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>　　<br/>\nこれはletに変換するのでcompileにletを追加する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                           <span class=\"synComment\">; letの追加</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>open-code? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>               <span class=\"synComment\">;open-code?でdispatch</span>\n         <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type -- COMPILE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test\nまずはscan-out-definesから．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">(</span>lambda-body <span class=\"synSpecial\">'(</span>lambda <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>define x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>y c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x c<span class=\"synSpecial\">))</span>\n                                        <span class=\"synSpecial\">(</span>+ a b y<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">let</span>\n     <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> y <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x c<span class=\"synSpecial\">)))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b y<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>　<br/>\n期待通りに動いている．<br/>\n次にcompile．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>後の命令列を追ったのでコメントをつけた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'((</span>lambda <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>define x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>y c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x c<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>+ a b <span class=\"synSpecial\">(</span>y <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>env proc argl continue val<span class=\"synSpecial\">)</span>\n       <span class=\"synComment\">;; procにentry56の手続き</span>\n       <span class=\"synSpecial\">((</span>assign proc <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry56<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda57<span class=\"synSpecial\">))</span>\n        entry56\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; (a b)を(5 6)に対応して拡張</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; proc: entry58</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry58<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda59<span class=\"synSpecial\">))</span>\n        entry58\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; (x y)に(*unassigned* *unassigned*)を対応付け</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; x のオブジェクトを1にする</span>\n        <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; val: entry60</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry60<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda61<span class=\"synSpecial\">))</span>\n        entry60\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; ((c) (6))</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>c<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; arg1: 1</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; arg2: 2</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; val: (+ 1 2) = 3</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-lambda61\n        <span class=\"synComment\">;; y &lt;= entry60</span>\n        <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;aftercall71</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;(+ a b) =&gt;(+ 5 6) =&gt; 11</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (2)</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch62<span class=\"synSpecial\">))</span>\n        compiled-branch63\n        <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label proc-return65<span class=\"synSpecial\">))</span> <span class=\"synComment\">;continue: proc-return65</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        proc-return65\n        <span class=\"synComment\">;; arg2: 7</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-call64<span class=\"synSpecial\">))</span>\n        primitive-branch62\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        after-call64\n        <span class=\"synComment\">;; val: (+ 11 3) = 14</span>\n        <span class=\"synSpecial\">(</span>assin val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>              <span class=\"synComment\">;aftercall71</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-lambda59\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (*unassigned* *unassigned*)</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch66<span class=\"synSpecial\">))</span>\n        compiled-branch67\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;val: entry58</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        primitive-branch66\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-call68\n        after-lambda57\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">6</span><span class=\"synSpecial\">))</span>          <span class=\"synComment\">;val: 6</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (6)</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>          <span class=\"synComment\">;val: 5</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (5 6)</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;no</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch69<span class=\"synSpecial\">))</span>\n        compiled-branch70\n        <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call71<span class=\"synSpecial\">))</span> <span class=\"synComment\">;continue: aftercall71</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;val: entry56</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        primitive-branch69\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        after-call71                    <span class=\"synComment\">;val 14</span>\n        <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>期待通りに内部定義を吐き出してlambdaで<em>unassigned</em>として受け取り，<br/>\nbodyで実際の値（手続き）にset!している．</p>\n\n","slug":"SICP 問題 5.43"},{"data":{"title":"SICP 問題 5.42","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>compile-variableとcompile-assignmentを文面アドレスを使った検索に対応</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>address <span class=\"synSpecial\">(</span>find-variable <span class=\"synIdentifier\">exp</span> ct-env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage\n     linkage\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> address <span class=\"synSpecial\">'</span>not-found<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n          <span class=\"synComment\">;; targetなら変更しても問題ないので一時的に帯域環境を入れる</span>\n          <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target\n                    <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>exp<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">,</span>target<span class=\"synSpecial\">))))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                    <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>address<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>get-value-code                 <span class=\"synComment\">;valを求めるための命令．</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>address <span class=\"synSpecial\">(</span>find-variable var ct-env<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span>end-with-linkage\n      linkage\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n                  get-value-code <span class=\"synComment\">;代入する値を求め，valに代入される．seq1</span>\n                  <span class=\"synComment\">;; valに代入された値をvarに代入する．seq2</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> address <span class=\"synSpecial\">'</span>not-found<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>make-instruction-sequence\n                       <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                       <span class=\"synComment\">;; 一度targetにglobal-environmentを代入してからsetする</span>\n                       <span class=\"synSpecial\">`((</span>assign target <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>var<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">,</span>target<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span>make-instruction-sequence\n                       <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">`((</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>address<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))))))))</span>\n</pre>\n\n\n<p>test<br/>\nこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>の式自体はバグってる．<br/>\nただし，test自体は出来るのでそのまま</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>lambda <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>+\n             <span class=\"synSpecial\">(</span>+ x a<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>* y b<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>set! x a<span class=\"synSpecial\">)</span> <span class=\"synComment\">;; +の中でset!してるので 'okが返ってバグる</span>\n             <span class=\"synSpecial\">(</span>set! z b<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">'</span>val\n       <span class=\"synSpecial\">'</span>next\n       <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry24<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda25<span class=\"synSpecial\">))</span>\n  entry24\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry26<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  entry26\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; arg2 = ok</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; (+ arg1 ok)なのでバグる</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assin val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-lambda27\n  after-lambda25<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.42"},{"data":{"title":"SICP 問題 5.41","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>翻訳時環境に対する変数の文面アドレスを返す手続きfind-variableの実装</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-variable var ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop frame-address env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan variable-address frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> frame<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> frame-address <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> frame-address variable-address<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> variable-address <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>not-found\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synConstant\">0</span> frame<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>env-loop <span class=\"synConstant\">0</span> ct-env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>find-variable <span class=\"synSpecial\">'</span>c <span class=\"synSpecial\">'((</span>y z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b c d e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>find-variable <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'((</span>y z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b c d e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>find-variable <span class=\"synSpecial\">'</span>w <span class=\"synSpecial\">'((</span>y z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b c d e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)))</span>\nnot-found\n</pre>\n\n\n","slug":"SICP 問題 5.41"},{"data":{"title":"SICP 問題 5.40","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>翻訳時環境を維持し，compile-lambda-bodyで拡張するように変更する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry ct-env<span class=\"synSpecial\">)</span> <span class=\"synComment\">;; ct-envを追加</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>formals <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>append-instruction-sequences\n     <span class=\"synSpecial\">(</span>make-instruction-sequence\n      <span class=\"synSpecial\">'(</span>env proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n\n      <span class=\"synSpecial\">`(,</span>proc-entry\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env\n                <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>formals<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> formals ct-env<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;; ct-envを拡張</span>\n</pre>\n\n\n<p>後はcompileするときに引数にct-envを取るように書く手続きを変更する．</p>\n\n","slug":"SICP 問題 5.40"},{"data":{"title":"SICP 問題 5.39","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>文面アドレスと実行時環境とり値を検索するlexical-address-lookupと\n値を変更するlexical-address-set!を実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 文面アドレスを使って変数の値を探す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-lookup lex-add r-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> val <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span><span class=\"synSpecial\">)</span>\n          val<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 文面アドレスにある値を変更する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-set! lex-add val r-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter frame count<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame val<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-env <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">'(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">))</span>\nmy-env\ngosh&gt; my-env\n<span class=\"synSpecial\">(((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">&gt;</span> <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">#f</span>\n  <span class=\"synConstant\">#t</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cdr&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cons&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> null?&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synStatement\">=&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">-&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">+&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> *&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> /&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> &gt;&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synConstant\">&lt;&gt;</span><span class=\"synSpecial\">)))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>scheme my-env<span class=\"synSpecial\">)</span>\nok\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\nscheme\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>SICP my-env<span class=\"synSpecial\">)</span>\nok\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\nSICP\n</pre>\n\n\n","slug":"SICP 問題 5.39"},{"data":{"title":"SICP 問題 5.38d","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p>+と*について任意個の被<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の式が使えるように拡張する．<br/>\n　<br/>\nここに書いた手続きを変更もしくは追加する．<br/>\n３つ以上の引数の時はarg1に畳み込んで計算していく．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-open-code-operand <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>*<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>compile-open-code-operand-2\n          <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;invalid application: &quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code-operand <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>args <span class=\"synSpecial\">(</span>spread-arguments <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> ct-env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage linkage\n                      <span class=\"synSpecial\">(</span>preserving\n                       <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">)</span>\n                       <span class=\"synComment\">;; co-arg2がopen-code式だった場合にarg1が上書きされるので退避させる．</span>\n                       <span class=\"synSpecial\">(</span>preserving\n                        <span class=\"synSpecial\">'(</span>arg1 env<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>make-instruction-sequence\n                         <span class=\"synSpecial\">'(</span>arg1 arg2 env<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synComment\">;;; operandが無くてprocが+なら1を，*なら0をtargetに代入．</span>\n<span class=\"synComment\">;;; operandが一つだけならそのままの値をtargetに入れる．</span>\n<span class=\"synComment\">;;; operandが３つ以上なら</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code-operand-2 proc operands target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> proc <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synConstant\">0</span> target linkage<span class=\"synSpecial\">)</span> <span class=\"synComment\">;+なら0</span>\n             <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synConstant\">1</span> target linkage<span class=\"synSpecial\">)))</span>   <span class=\"synComment\">;*なら1</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operands<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>end-with-linkage linkage\n                           <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> target <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>                           <span class=\"synComment\">;引数が３つ以上ならこちらで処理</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>operand <span class=\"synSpecial\">(</span>spread-arguments operands ct-env<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>end-with-linkage\n            linkage\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>compile-open-code-operand-3 proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand<span class=\"synSpecial\">)</span> target<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;;; ここに渡されるseqはコンパイルされた引数のリスト．</span>\n<span class=\"synComment\">;;; last-seqだとarg1を保護しながら最後の引数をarg2に代入して</span>\n<span class=\"synComment\">;;; 最後にarg1, arg2をprocした結果をvalに代入する．</span>\n<span class=\"synComment\">;;; まだ残っているときはarg1を保護しながら引数をarg2に代入して</span>\n<span class=\"synComment\">;;; arg1とarg2をprocした結果をarg1に代入する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code-operand-3 proc seq target<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>last-seq? seq<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>preserving\n       <span class=\"synSpecial\">'(</span>arg1 env<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>arg1 arg2 env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">`((</span>assin <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>preserving\n        <span class=\"synSpecial\">'(</span>arg1 env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>arg1 arg2 env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>arg1<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">`((</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))))</span>\n       <span class=\"synSpecial\">(</span>compile-open-code-operand-3 proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; operandが0または1以外の時はここでcompileする．</span>\n<span class=\"synComment\">;;; 一つ目だけarg1に代入し，残りはarg2に代入する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>spread-arguments operand ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>operand <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg1 <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> operand<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> result<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg2 <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-seq? seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>*<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>cont <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>* <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>cont <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>* <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>* <span class=\"synSpecial\">(</span>* <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>おかしいところはなく動いている．</p>\n\n","slug":"SICP 問題 5.38d"},{"data":{"title":"SICP 問題 5.38c","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p>元のcompileによる出力と5.38abでcompile-open-codeを追加した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の出力を比べる．<br/>\n命令列が約半分になっている．</p>\n\n<p>compile-open-codeを追加した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の出力</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n  entry1\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n  true-branch3\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  false-branch4\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n  compiled-branch7\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label proc-return9<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  proc-return9\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n  primitive-branch6\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call8\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-if5\n  after-lambda2\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>元のcompileによる出力</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n  entry1\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n  compiled-branch7\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch6\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call8\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n  true-branch3\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  false-branch4\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch9<span class=\"synSpecial\">))</span>\n  compiled-branch10\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call11<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch9\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call11\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch12<span class=\"synSpecial\">))</span>\n  compiled-branch13\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call14<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch12\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call14\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch15<span class=\"synSpecial\">))</span>\n  compiled-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch15\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call17\n  after-if5\n  after-lambda2\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.38c"},{"data":{"title":"SICP 問題 5.38ab","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p>+ - * = はopen-codeとして\n(reg val (op +)  (reg arg1) (reg arg2))\nの形で処理できるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>open-code? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>= * - +<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>open-code? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>               <span class=\"synComment\">;open-code?でdispatch</span>\n         <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type -- COMPILE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>spread-arguments operand<span class=\"synSpecial\">)</span>      <span class=\"synComment\">;それぞれコンパイルしてリストにして返す</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>co-arg1 <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg1 <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>co-arg2 <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg2 <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> co-arg1 co-arg2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>args <span class=\"synSpecial\">(</span>spread-arguments <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>end-with-linkage linkage\n                          <span class=\"synSpecial\">(</span>append-instruction-sequences\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">)</span>\n                           <span class=\"synComment\">;; co-arg2がopen-code式だった場合にarg1が上書きされるので退避させる．</span>\n                           <span class=\"synSpecial\">(</span>preserving\n                            <span class=\"synSpecial\">'(</span>arg1<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>make-instruction-sequence\n                             <span class=\"synSpecial\">'(</span>arg1 arg2<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))))))))</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;require 2 operand&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.38ab"}],"currentPage":3,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}