{"pageProps":{"posts":[{"data":{"title":"SICP 3.5章のstreamについて","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>整理しなおす．<br/>\n環境は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a> 0.9.4.<br/>\nstreamを本文通りに実装するとうまくいかない．<br/>\n遅延リストになっていない．<br/>\nstream-mapの挙動からそれがわかる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> low high<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream\n       low\n       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>show x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>ここでREPLには</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0x</pre>\n\n\n<p>と表示されてほしい．<br/>\nstream-mapのifのelse節の一行目．  <br/>\n<code>(apply proc (map stream-car angstreams))</code>となっているので(show 0)となり改行してから0を印字して<br/>\n次に(define x ...)なのでxと印字することを期待したい．</p>\n\n<p>ここで以下のようにstreamを実装したとする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>           \n  <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n                 result<span class=\"synSpecial\">)</span>\n          result<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n</pre>\n\n\n<p>ここで先ほどの</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を実行すると</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10x</pre>\n\n\n<p>となる．<br/>\nリストの先頭の要素以降の評価は遅延してほしいのにすべて評価してしまっている．<br/>\nここでマクロが必要となる．<br/>\ndelayとstream-cdrをマクロで実装する.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p><a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x554F;&#x984C;3.50-3.51 - nrvct&#x306E;&#x65E5;&#x8A18;</a></p>\n\n<p>ここでふたたび</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を実行する．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0x</pre>\n\n\n<p>期待通りに動いている．<br/>\nではなぜdefineでdelayとcons-streamを実装した場合に期待通りに動かなかったのかを考える．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>でまはず引数を評価する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> s <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>として考えやすくする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; ①</span>\n<span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; stream-mapの定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; cons-streamの定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; ここでは前の引数から順に評価すると考える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; -&gt; 0</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>①の式のsが(stream-cdr s)に変わっただけの式となった．<br/>\nつまりここからsが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a>になるまですべての要素が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に評価されてしまう．<br/>\nほしいのは遅延リストなのでこれは困る.<br/>\n手続きをsquareに変えると一見遅延リストのように見える．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map square (stream-enumerate-interval 0 10)))\nx\ngosh&gt; x\n(0 . #&lt;closure (memo-proc memo-proc)&gt;)</pre>\n\n\n<p>ただしshowで見たように内部ではリストの末尾までmapで評価され，その評価された値がdelayで包まれている．\ndefineだとdelayの引数とcons-streamの第二引数が先に評価されてしまうので意味がない．\n評価順序を変えるためにここではマクロが必要になる．</p>\n\n<p>今の理解はこんなところです．<br/>\n突っ込みどころがあればお願いします．</p>\n\n","slug":"SICP 3.5章のstreamについて"},{"data":{"title":"SICP 問題 3.51","published":"2015/12/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>show x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>\n0x</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>stream-ref x <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>\n1\n2\n3\n4\n55</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>stream-ref x <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>\n6\n77</pre>\n\n\n<p>memo-procのおかげで<code>(stream-ref x 7)</code>では<code>(stream-ref x 5)</code>の計算は行っていない．\nそのため6と77しか表示されない．</p>\n\n","slug":"SICP 問題 3.51"},{"data":{"title":"SICP 問題 3.50","published":"2015/12/07","tags":["scheme","SICP"]},"content":"\n<p>マクロを使ってる部分は<br/>\n<a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x554F;&#x984C;3.50-3.51 - nrvct&#x306E;&#x65E5;&#x8A18;</a><br/>\nここから引用．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 次の二つは引用元から</span>\n<span class=\"synComment\">;; cons-streamは評価順序を変えたいのでマクロ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; delayもマクロ．マクロよくわかってない．</span>\n<span class=\"synComment\">;; メモ化する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-ref s n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-ref <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-for-each proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>stream-for-each proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-stream s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-for-each display-line s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> low high<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream\n       low\n       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-filter pred stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? stream<span class=\"synSpecial\">)</span> the-empty-stream<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>pred <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>stream-filter pred\n                                     <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>stream-filter pred <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n                 result<span class=\"synSpecial\">)</span>\n          result<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; 3.50</span>\n<span class=\"synComment\">;; stream-map</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n        <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.50"},{"data":{"title":"SICP 問題 3.49","published":"2015/12/06","tags":["scheme","SICP"]},"content":"\n<p>ある口座の内容によって次にアクセスする口座の内容がかわるような状況．\n具体的な状況は思い浮かばず．</p>\n\n","slug":"SICP 問題 3.49"},{"data":{"title":"SICP 問題 3.48","published":"2015/12/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; make-accountの引数にidを追加．</span>\n<span class=\"synComment\">;; dispatchの引数に'numberで口座番号を参照できる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account-and-serializer balance id<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n               balance<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n    balance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>balance-serializer <span class=\"synSpecial\">(</span>make-serializer<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> withdraw<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> deposit<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>balance<span class=\"synSpecial\">)</span> balance<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">)</span> id<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">)</span> balance-serializer<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exchange account1 account2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>difference <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>account1 <span class=\"synSpecial\">'</span>balance<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>account2 <span class=\"synSpecial\">'</span>balance<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">((</span>account1 <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> difference<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>account2 <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> difference<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 口座番号の小さいほうから先にserialize.</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>serialized-exchange account1 account2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>id1 <span class=\"synSpecial\">(</span>account1 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>id2 <span class=\"synSpecial\">(</span>account2 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smaller <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> id1 id2<span class=\"synSpecial\">)</span> account1 account2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>bigger <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> id1 id2<span class=\"synSpecial\">))</span> account2 account1<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>serializer1 <span class=\"synSpecial\">(</span>smaller <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>serializer2 <span class=\"synSpecial\">(</span>bigger <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>serializer2 <span class=\"synSpecial\">(</span>serializer1 exchange<span class=\"synSpecial\">))</span>\n         account1 account2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>smallerとbiggerへの束縛のいい方法がわからず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>で聞いたところ，</p>\n\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">R7RS (というか let-values が使える環境) ならこんな感じかなぁ。&#10;(let-values (((x y) (if (&lt; a b) (values a b) (values b a))))&#10;  body ...)</p>&mdash; 齊藤敦志 (@SaitoAtsushi) <a href=\"https://twitter.com/SaitoAtsushi/status/673495343506448384\">December 6, 2015</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><cite class=\"hatena-citation\"><a href=\"https://t.co/GfONknuk5e\">t.co</a></cite></p>\n\n<p>と教えていただいたので書き換えました．<br/>\n二回比較するのが嫌だったんですよね．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 口座番号の小さいほうから先にserialize.</span>\n<span class=\"synSpecial\">(</span>use srfi-11<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>serialized-exchange account1 account2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>id1 <span class=\"synSpecial\">(</span>account1 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>id2 <span class=\"synSpecial\">(</span>account2 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>let-values <span class=\"synSpecial\">(</span>smaller bigger<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> id1 id2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">values</span> id1 id2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">values</span> id2 id1<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>serializer1 <span class=\"synSpecial\">(</span>smaller <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>serializer2 <span class=\"synSpecial\">(</span>bigger <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>serializer2 <span class=\"synSpecial\">(</span>serializer1 exchange<span class=\"synSpecial\">))</span>\n         account1 account2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.48"},{"data":{"title":"SICP 問題 3.47","published":"2015/12/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synError\">#|</span>\n<span class=\"synError\">このような形でmake-semaphoreは使われる．</span>\n<span class=\"synError\">|#</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-serializer<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>semaphore <span class=\"synSpecial\">(</span>make-semaphore <span class=\"synConstant\">6</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>serialized-p <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>semaphore <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> p args<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>semaphore <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span>\n          val<span class=\"synSpecial\">))</span>\n      serialized-p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-mutex<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cell <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> false<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>the-mutex m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>test-and-set! cell<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>the-mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;retry</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>release <span class=\"synSpecial\">(</span>clear! cell<span class=\"synSpecial\">)))))</span>\n    the-mutex<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#|</span>\n<span class=\"synError\">上を見ればわかるように評価した手続きをした後はかならずreleaseしている．</span>\n<span class=\"synError\">それを踏まえてmake-semaphoreを実装する．</span>\n\n<span class=\"synError\">・release</span>\n<span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span><span class=\"synError\">をするとcellがクリアされる．</span>\n<span class=\"synError\">何度clear!しても問題はないのでsemaphoreがreleaseするたびに</span><span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span><span class=\"synError\">を実行して次の処理が行えるようにする．</span>\n<span class=\"synError\">releaseした後にはcounterから1引いておく.</span>\n\n<span class=\"synError\">・acquire</span>\n<span class=\"synError\">releaseはmake-serializerのようにセマフォを使う手続きから行うのでacquire内では行わない．</span>\n<span class=\"synError\">counterがnと同じならば</span><span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span><span class=\"synError\">でロックし，カウンターを１増やす．</span>\n<span class=\"synError\">counterがnより大きければ</span><span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span><span class=\"synError\">内でretryする．</span>\n<span class=\"synError\">ここでカウンターを１増やさないとreleaseと数が合わなくなり，counterが負になるので1増やす．</span>\n<span class=\"synError\">counterがnよりも小さければcounterを１増やす．処理が終われば呼び出し元からreleaseが呼ばれる．</span>\n<span class=\"synError\">|#</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-semaphore n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">(</span>make-mutex<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>acquire<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;=</span> counter n<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> counter n<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>release<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span> acquire<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span> release<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MAKE-SEMAPHORE&quot;</span> m<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.47"},{"data":{"title":"SICP 問題 3.46","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n<p>cellがfalseの時に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のプロセスが同時にcellにアクセスすればmutexは破られる</p>\n\n","slug":"SICP 問題 3.46"},{"data":{"title":"SICP 問題 3.45","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n<p>serializerが入れ子になるために無限ループする</p>\n\n","slug":"SICP 問題 3.45"},{"data":{"title":"SICP 問題 3.44","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>transfer from-account to-account amount<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>from-account <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> amount<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>to-account <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> amount<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>交換と違い，残高の差を計算する必要がないので問題はおきない</p>\n\n","slug":"SICP 問題 3.44"},{"data":{"title":"SICP 問題 3.43","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151205012804\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151205/20151205012804.jpg\" alt=\"f:id:wat-aro:20151205012804j:image\" title=\"f:id:wat-aro:20151205012804j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p>deposit，withdrawが直列化されてない場合，<br/>\n書き換えられる前の値を参照したまま変更後の値をsetしてしまうために残高の合計が保存されない場合が有る．</p>\n\n","slug":"SICP 問題 3.43"},{"data":{"title":"SICP 問題 3.42","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n<p>安全な変更．並列性の間に違いはない．</p>\n\n","slug":"SICP 問題 3.42"},{"data":{"title":"SICP 問題 3.41","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n<p>変更箇所は書き換えによる変更を行わないのでそのままでも害はないので賛成しない．</p>\n\n","slug":"SICP 問題 3.41"},{"data":{"title":"SICP 問題 3.40","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code\" data-lang=\"\" data-unlink>10^2,10^3,10^4,10^5,10^6が取り得る値となる．  \n直列かするとこのうち，10^6のみが残る．</pre>\n\n\n","slug":"SICP 問題 3.40"},{"data":{"title":"SICP 問題 3.39","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n<p>101:P1がxに100をセットしてから，P2がxに101をセットする<br/>\n121:P2がxに11をセットしてから，P1がxに121をセットする<br/>\n100:P1がxから10をとってきて，そこでP2がxに11をセット，P1が続きの(* 10 10)を計算してxに100をセットする</p>\n\n","slug":"SICP 問題 3.39"},{"data":{"title":"SICP 問題 3.38","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> balance <span class=\"synConstant\">100</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; Peter</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Paul</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Mary</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> balance <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;a ３つのプロセスがある順序で逐次的に実行された場合のbalanceの取り得る値</span>\n<span class=\"synComment\">;;35,40,45,50</span>\n\n<span class=\"synComment\">;;b プロセスが混ざり合った場合</span>\n<span class=\"synComment\">;; 参照した後に上書きする前に他のプロセスによって値を上書きされる事がある．</span>\n<span class=\"synComment\">;; そのために実質的に一つのプロセスしか走ってない時や二つのプロセスしか走ってない場合が起き得る</span>\n<span class=\"synComment\">;; 新たに55,80,90,110といった値を取る事がある．</span>\n<span class=\"synComment\">;; 90を取る例</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151203214533\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151203/20151203214533.jpg\" alt=\"f:id:wat-aro:20151203214533j:image\" title=\"f:id:wat-aro:20151203214533j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.38"},{"data":{"title":"SICP 問題 3.37","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c+ x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>adder x y z<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c- x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>adder x z y<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c* x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>multiplier x y z<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c/ x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>multiplier x z y<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cv x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>constant x z<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.37"},{"data":{"title":"SICP 問題 3.36","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> a <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> b <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>set-value! a <span class=\"synConstant\">10</span> <span class=\"synSpecial\">'</span>user<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>set-value!を評価している間で</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>foreach-except setter inform-about-value constraints<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>が評価される環境を示す環境図を書け．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151203003621\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151203/20151203003621.jpg\" alt=\"f:id:wat-aro:20151203003621j:image\" title=\"f:id:wat-aro:20151203003621j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.36"},{"data":{"title":"SICP 問題 3.35","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n<p>平方器を新しい基本制約として定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>squarer a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>has-value? b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>get-value b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;square less than 0 -- SQUARER&quot;</span> <span class=\"synSpecial\">(</span>get-balue b<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>set-value! a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> b<span class=\"synSpecial\">)</span> me<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>set-value! b <span class=\"synSpecial\">(</span>square a<span class=\"synSpecial\">)</span> me<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! a me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! b me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>me request<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-have-a-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-lost-my-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- SQUARER&quot;</span> request<span class=\"synSpecial\">))))</span>\n  me<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.35"},{"data":{"title":"SICP 問題 3.34","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n<p>平方器をmultiplierを使って実装する時の問題点</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>value false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>informant false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>constraints <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-my-value newval setter<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>has-value? me<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> value newval<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> informant setter<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>for-each-except setter\n                              inform-about-value\n                              constraints<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> value newval<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Contradiction&quot;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> value newval<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>ignored<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>forget-my-value retractor<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> retractor informant<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> informant false<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>for-each-except retractor\n                                  inform-about-no-value\n                                  constraints<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">'</span>ignored<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>connect new-constraint<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> new-constraint constraints<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> constraints\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> new-constraint constraints<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>has-value? me<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>inform-about-value new-constraint<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>me request<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>has-value?<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> informant true false<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>value<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>set-value!<span class=\"synSpecial\">)</span> set-my-value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>forget<span class=\"synSpecial\">)</span> forget-my-value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>connect<span class=\"synSpecial\">)</span> connect<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- CONNECTOR&quot;</span> request<span class=\"synSpecial\">))))</span>\n    me<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier m1 m2 product<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>get-value m1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? m2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>get-value m2<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>set-value! product <span class=\"synConstant\">0</span> me<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>has-value? m2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-value! product\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>get-value m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-value m2<span class=\"synSpecial\">))</span>\n                       me<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>has-value? m1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-value! m2\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>get-value product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-value m1<span class=\"synSpecial\">))</span>\n                       me<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>has-value? m2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-value! m1\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>get-value product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-value m2<span class=\"synSpecial\">))</span>\n                       me<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! product me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! m1 me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! m2 me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>me request<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-have-a-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-lost-my-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MULTIPLIER&quot;</span> request<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>connect m1 me<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>connect m2 me<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>connect product me<span class=\"synSpecial\">)</span>\n  me<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>squarer a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>multiplier a a b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; bを求める場合はうまく動く．aが定まれば(* a a)の値がbに伝わる．</span>\n<span class=\"synComment\">;; aを求める時にはこれは動かない．</span>\n<span class=\"synComment\">;; multiplierは第一引数を求める時に(/ 第三引数 第二引数)を計算するが，</span>\n<span class=\"synComment\">;; 今の場合は第二引数がわからない．</span>\n<span class=\"synComment\">;; 同様に第二引数も求められない．</span>\n</pre>\n\n\n","slug":"SICP 問題 3.34"},{"data":{"title":"SICP 問題 3.33","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n<p>入力として三つの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%CD%A5%AF%A5%BF\">コネクタ</a>a,b,cをとり，cの値がaとbの値の平均であるような制約を達成する手続きaverager.<br/>\nadderとmultiplierを繋ぐ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%CD%A5%AF%A5%BF\">コネクタ</a>をp.<br/>\n定数2に繋がる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%CD%A5%AF%A5%BF\">コネクタ</a>をxとした．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>averager a b c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>p <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>adder a b p<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>multiplier c x p<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>constant <span class=\"synConstant\">2</span> x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.33"}],"currentPage":12,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}