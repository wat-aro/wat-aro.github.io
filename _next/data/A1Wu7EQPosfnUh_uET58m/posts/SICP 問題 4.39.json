{"pageProps":{"title":"SICP 問題 4.39","published":"2016/01/11","tags":["scheme","SICP"],"content":"<p>制限の順番は解には影響しないが，その時間には影響する．<br>\n失敗が多い制限ほど先にテストするほうが実行速度は速くなる．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">;; 本来のmultiple-dwelling\n</span><span class=\"code-line\">(define (multiple-dwelling)\n</span><span class=\"code-line\">  (let ((baker (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (cooper (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (fletcher (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (miller (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (sith (amb 1 2 3 4 5)))\n</span><span class=\"code-line\">    (require (distinct (list baker cooper fletcher miller smith)))\n</span><span class=\"code-line\">    (require (not (= baker 5)))\n</span><span class=\"code-line\">    (require (not (= cooper 1)))\n</span><span class=\"code-line\">    (require (not (= fletcher 5)))\n</span><span class=\"code-line\">    (require (not (= fletcher 1)))\n</span><span class=\"code-line\">    (require (&#x3C; cooper miller))\n</span><span class=\"code-line\">    (require (not (= (abs (- smith fletcher)) 1)))\n</span><span class=\"code-line\">    (require (not (= (abs (- fletcher cooper)))))\n</span><span class=\"code-line\">    (list (list 'baker baker)\n</span><span class=\"code-line\">          (list 'cooper cooper)\n</span><span class=\"code-line\">          (list 'fletcher fletcher)\n</span><span class=\"code-line\">          (list 'miller miller)\n</span><span class=\"code-line\">          (list 'smith smith))))\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">;; 改良版\n</span><span class=\"code-line\">(define (multiple-dwelling)\n</span><span class=\"code-line\">  (let ((baker (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (cooper (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (fletcher (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (miller (amb 1 2 3 4 5))\n</span><span class=\"code-line\">        (sith (amb 1 2 3 4 5)))\n</span><span class=\"code-line\">    (require (distinct (list baker cooper fletcher miller smith)))\n</span><span class=\"code-line\">    (require (&#x3C; cooper miller))\n</span><span class=\"code-line\">    (require (not (= (abs (- fletcher cooper)))))\n</span><span class=\"code-line\">    (require (not (= (abs (- smith fletcher)) 1)))\n</span><span class=\"code-line\">    (require (not (= fletcher 1)))\n</span><span class=\"code-line\">    (require (not (= fletcher 5)))\n</span><span class=\"code-line\">    (require (not (= baker 5)))\n</span><span class=\"code-line\">    (require (not (= cooper 1)))\n</span><span class=\"code-line\">    (list (list 'baker baker)\n</span><span class=\"code-line\">          (list 'cooper cooper)\n</span><span class=\"code-line\">          (list 'fletcher fletcher)\n</span><span class=\"code-line\">          (list 'miller miller)\n</span><span class=\"code-line\">          (list 'smith smith))))</span></code></pre>","slug":"SICP 問題 4.39","rawContent":"\n<p>制限の順番は解には影響しないが，その時間には影響する．<br/>\n失敗が多い制限ほど先にテストするほうが実行速度は速くなる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>;; 本来のmultiple-dwelling\n(define (multiple-dwelling)\n  (let ((baker (amb 1 2 3 4 5))\n        (cooper (amb 1 2 3 4 5))\n        (fletcher (amb 1 2 3 4 5))\n        (miller (amb 1 2 3 4 5))\n        (sith (amb 1 2 3 4 5)))\n    (require (distinct (list baker cooper fletcher miller smith)))\n    (require (not (= baker 5)))\n    (require (not (= cooper 1)))\n    (require (not (= fletcher 5)))\n    (require (not (= fletcher 1)))\n    (require (&lt; cooper miller))\n    (require (not (= (abs (- smith fletcher)) 1)))\n    (require (not (= (abs (- fletcher cooper)))))\n    (list (list &#39;baker baker)\n          (list &#39;cooper cooper)\n          (list &#39;fletcher fletcher)\n          (list &#39;miller miller)\n          (list &#39;smith smith))))\n\n;; 改良版\n(define (multiple-dwelling)\n  (let ((baker (amb 1 2 3 4 5))\n        (cooper (amb 1 2 3 4 5))\n        (fletcher (amb 1 2 3 4 5))\n        (miller (amb 1 2 3 4 5))\n        (sith (amb 1 2 3 4 5)))\n    (require (distinct (list baker cooper fletcher miller smith)))\n    (require (&lt; cooper miller))\n    (require (not (= (abs (- fletcher cooper)))))\n    (require (not (= (abs (- smith fletcher)) 1)))\n    (require (not (= fletcher 1)))\n    (require (not (= fletcher 5)))\n    (require (not (= baker 5)))\n    (require (not (= cooper 1)))\n    (list (list &#39;baker baker)\n          (list &#39;cooper cooper)\n          (list &#39;fletcher fletcher)\n          (list &#39;miller miller)\n          (list &#39;smith smith))))</pre>\n\n\n"},"__N_SSG":true}