{"pageProps":{"post":{"data":{"title":"SICP 問題 4.33","published":"2016/01/10","tags":["scheme","SICP"]},"content":"\n<p>遅延リストの実装に合わせて，quoteを遅延リストに対応させる．<br/>\n<code>(car '(a b c))</code>で正しく<code>a</code>が表示できるようにする．</p>\n\n<p><s>make-lambdaの<code>(make-quote (car obj))</code>のところ，始め<code>(car obj)</code>だけにしていたら，<br/>\n数字ではうまくいくのに<code>'(a b c)</code>だとunbound variable: aとなる． <br/>\nそれならばと<code>(list 'quote (car obj))</code>とすると今度は<code>(car '(1 2 3))</code>が'1になってそれをさらにeval-quoteに渡すのでエラー．<br/>\nmake-quoteで数字とそれ以外を分けるようにしました．</s><br/>\n<code>(symbol? 1)</code>でtrueが返ると思ってたのが間違っていました．<br/>\npredicateを追加したらmake-quoteは(list 'quote obj)だけでよくなりました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;eval-quoteに変更</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quote obj<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>obj <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>quote-&gt;cons obj<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-&gt;cons obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synSpecial\">(</span>make-quote <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> obj<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>quote-&gt;cons <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\na\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nb\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\na\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">()</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">#t</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a <span class=\"synSpecial\">.</span> b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nb\n</pre>\n\n\n","slug":"SICP 問題 4.33"},"content":"<p>遅延リストの実装に合わせて，quoteを遅延リストに対応させる．<br>\n<code>(car '(a b c))</code>で正しく<code>a</code>が表示できるようにする．</p>\n<p><s>make-lambdaの<code>(make-quote (car obj))</code>のところ，始め<code>(car obj)</code>だけにしていたら，<br>\n数字ではうまくいくのに<code>'(a b c)</code>だとunbound variable: aとなる． <br>\nそれならばと<code>(list 'quote (car obj))</code>とすると今度は<code>(car '(1 2 3))</code>が'1になってそれをさらにeval-quoteに渡すのでエラー．<br>\nmake-quoteで数字とそれ以外を分けるようにしました．</s><br>\n<code>(symbol? 1)</code>でtrueが返ると思ってたのが間違っていました．<br>\npredicateを追加したらmake-quoteは(list 'quote obj)だけでよくなりました．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;eval-quoteに変更</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                         env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let->combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*->nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec->let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond->if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                   env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"Unknown expression type --EVAL\"</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quote obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>obj <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>quote->cons obj<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote->cons obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synSpecial\">(</span>make-quote <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span>quote->cons <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">))))))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&#x3C;procedure-env></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">2</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&#x3C;procedure-env></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">a\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">b\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">a\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">#t</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a <span class=\"synSpecial\">.</span> b<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">b\n</span></code></pre>"},"__N_SSG":true}