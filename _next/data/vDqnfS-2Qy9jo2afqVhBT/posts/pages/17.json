{"pageProps":{"posts":[{"data":{"title":"SICP 問題 2.44","published":"2015/10/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>up-split painter n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      painter\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smaller <span class=\"synSpecial\">(</span>up-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>below painter <span class=\"synSpecial\">(</span>beside smaller smaller<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.44"},{"data":{"title":"SICP 問題 2.43","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queens board-size<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queen-cols k<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> empty-board<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>flatmap\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rest-of-queens<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>new-row<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> board-size<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>queen-cols <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>queen-cols board-size<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>l-queens board-size<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queen-cols k<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> empty-board<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>flatmap\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>new-row<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rest-of-queens<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>queen-cols <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> board-size<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>queen-cols board-size<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>元のqueensでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/queen\">queen</a>-colsはboard-size回呼ばれている．<br/>\nそれがLouisのqueensでは(new-row k)一個につき1回呼ばれている．<br/>\nつまり　border-size = xとして<br/>\n<code>1 + x^1 + x^2 + ... x^(x-1) = (x^x - 1)/ (x - 1)</code>回呼ばれている．<br/>\nよってLouisのqueensがかかる時間は　<code>T * ((x^x - 1/ (x * (x - 1)))</code>．</p>\n\n","slug":"SICP 問題 2.43"},{"data":{"title":"SICP 問題 2.42","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queens board-size<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queen-cols k<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> empty-board<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>flatmap\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rest-of-queens<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>new-row<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> board-size<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>queen-cols <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>queen-cols board-size<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> empty-board nil<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> new-row k<span class=\"synSpecial\">)</span> rest-of-queens<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> positions<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadar</span> positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadar</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> positions<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)))))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> positions<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (queens 5)\n(((4 5) (2 4) (5 3) (3 2) (1 1)) ((3 5) (5 4) (2 3) (4 2) (1 1)) ((5 5) (3 4) (1 3) (4 2) (2 1)) ((4 5) (1 4) (3 3) (5 2) (2 1)) ((5 5) (2 4) (4 3) (1 2) (3 1)) ((1 5) (4 4) (2 3) (5 2) (3 1)) ((2 5) (5 4) (3 3) (1 2) (4 1)) ((1 5) (3 4) (5 3) (2 2) (4 1)) ((3 5) (1 4) (4 3) (2 2) (5 1)) ((2 5) (4 4) (1 3) (3 2) (5 1)))\n</pre>\n\n\n","slug":"SICP 問題 2.42"},{"data":{"title":"SICP 問題 2.41","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>equal-sum-of-unique-trio n s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> s <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> l<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>flatmap\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>flatmap <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>j<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>k<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j k<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> j <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (equal-sum-of-unique-trio 10 20)\n((8 7 5) (9 6 5) (9 7 4) (9 8 3) (10 6 4) (10 7 3) (10 8 2) (10 9 1))</pre>\n\n\n","slug":"SICP 問題 2.41"},{"data":{"title":"SICP 問題 2.40","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unique-pairs n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>j<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n   <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prime-sum-pairs n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> make-pair-sum\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> prime-sum?\n               <span class=\"synSpecial\">(</span>unique-pairs n<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.40"},{"data":{"title":"schemeでmapを書いてみた","published":"2015/10/21","tags":["scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>の問題 2.37をやろうとしたところ，この本で定義した一つのリストのみに対応したmapではなく<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のリストに対応したmapが必要だったので自分で書いてみました．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foldr op init lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      init\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>foldr op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> op <span class=\"synSpecial\">.</span> lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>map1 op lst<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>op x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'()</span> lst<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>map1 op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>rest lst<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                      <span class=\"synSpecial\">((</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span> rest<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)))</span> rest<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span>map1 <span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (map + &#39;(1 2 3) &#39;(4 5 6))\n(5 7 9)</pre>\n\n\n<p>うまく動いてくれてるようです．<br/>\n可変長引数を省略した時にはrestに空リストが入るので(null? rest)で分岐することにしました．</p>\n\n","slug":"schemeでmapを書いてみた"},{"data":{"title":"SICP 問題 2.39","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter result rest<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>op result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter initial sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">)))</span> nil sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> y x<span class=\"synSpecial\">))</span> nil sequence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.39"},{"data":{"title":"SICP 問題 2.38","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter result rest<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>op result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter initial sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (fold-right / 1 (list 1 2 3))\n3/2\ngosh&gt; (fold-left / 1 (list 1 2 3))\n1/6\ngosh&gt; (fold-right list nil (list 1 2 3))\n(1 (2 (3 ())))\ngosh&gt; (fold-left list nil (list 1 2 3))\n(((() 1) 2) 3)</pre>\n\n\n<p>fold-rightとfold-leftによってopが満たすべき条件は＋や×のように順番に影響されない手続きであること．</p>\n\n","slug":"SICP 問題 2.38"},{"data":{"title":"SICP 問題 2.37","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dot-product v w<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">*</span> v w<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-vector m v<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>dot-product x v<span class=\"synSpecial\">))</span> m<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>transpose mat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate-n <span class=\"synIdentifier\">cons</span> nil mat<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-matrix m n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cols <span class=\"synSpecial\">(</span>transpose n<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>matrix-*-vector cols x<span class=\"synSpecial\">))</span>\n         m<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (matrix-*-vector &#39;((1 2)\n                        (3 4))\n                      &#39;(5 6))\n(17 39)\ngosh&gt; (dot-product &#39;(1 2) &#39;(3 4))\n11\ngosh&gt; (matrix-*-vector &#39;((1 2)\n                        (3 4))\n                      &#39;(5 6))\n(17 39)\ngosh&gt; (matrix-*-matrix &#39;((1 2 3)\n                         (4 5 6))\n                       &#39;((7 10)\n                         (8 11)\n                         (9 12)))\n((50 68) (122 167))</pre>\n\n\n","slug":"SICP 問題 2.37"},{"data":{"title":"SICP 問題 2.36","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; accumulate</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; accumulate-n</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate-n op init seqs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seqs<span class=\"synSpecial\">))</span>\n             nil\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>accumulate op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> seqs<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>accumulate-n op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> seqs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (accumulate-n + 0 &#39;((1 2 3) (4 5 6) (7 8 9) (10 11 12)))\n(22 26 30)</pre>\n\n\n","slug":"SICP 問題 2.36"},{"data":{"title":"SICP 問題 2.35","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;accumulate</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;enumerate-tree</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enumerate-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> tree<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>enumerate-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>enumerate-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;count-leaves</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-leaves tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>enumerate-tree tree<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (count-leaves (list 1 2 (list 3) (list 4 5 (list 6)) 7))\n7</pre>\n\n\n","slug":"SICP 問題 2.35"},{"data":{"title":"SICP 問題 2.34","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>horner-eval x coefficient-sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis res<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> res<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x res<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> coefficient-sequence<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (horner-eval 2 (list 1 3 0 5 0 1))\n79</pre>\n\n\n","slug":"SICP 問題 2.34"},{"data":{"title":"SICP 問題 2.33","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n<p>accumulateを使ってmap,append,lengthを実装する．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> p sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>p x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> nil sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">cons</span> seq2 seq1<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span> sequence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.33"},{"data":{"title":"SICP 問題 2.32","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>subsets s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> nil<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rest <span class=\"synSpecial\">(</span>subsets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                          rest<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;この式はまず最後まで再帰し，そこでrestに空リストを持って返ってくる．</span>\n<span class=\"synComment\">;;mapでcarとrestをconsして新しいリストを作りそれが返ったところでrestに入る．</span>\n<span class=\"synComment\">;;その繰り返しですべての部分集合が返される．</span>\n\ns <span class=\"synIdentifier\">=</span> nil\n<span class=\"synSpecial\">()</span>\n\ns <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nrest <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">()</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\ns <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nrest <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\ns <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nrest <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.32"},{"data":{"title":"SICP 問題 2.31","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-map fn tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sub-tree<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>tree-map fn sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>fn sub-tree<span class=\"synSpecial\">)))</span>\n       tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqaure x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tree-map square tree<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.31"},{"data":{"title":"SICP 問題 2.30","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> tree tree<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>square-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>square-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sub-tree<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>square-tree sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> sub-tree sub-tree<span class=\"synSpecial\">)))</span>\n       tree<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.30"},{"data":{"title":"SICP 問題 2.29","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-mobile left right<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> left right<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-branch <span class=\"synIdentifier\">length</span> structure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synIdentifier\">length</span> structure<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch mobile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> mobile<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch mobile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> mobile<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>branch-length branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> branch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>branch-structure branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> branch<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>total-weight mob<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> mob<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>branch-structure <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>branch-structure <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>balanced? mob<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> mob<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>branch-length <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>branch-length <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>balanced? <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>balanced? <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">)))</span>\n      <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; d</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch mobile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> mobile<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>branch-structure branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> branch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.29"},{"data":{"title":"SICP 問題 2.28","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fringe l<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (fringe x)\n(1 2 3 4)\ngosh&gt; (fringe (list x x))\n(1 2 3 4 1 2 3 4)</pre>\n\n\n","slug":"SICP 問題 2.28"},{"data":{"title":"SICP 問題2.25","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">5</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">7</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">6</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">))))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">))))))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (car (cdr (car (cdr (cdr &#39;(1 3 (5 7) 9))))))\n7\ngosh&gt; (car (car &#39;((7))))\n7\ngosh&gt; (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr &#39;(1 (2 (3 (4 (5 (6 7))))))))))))))))))\n7</pre>\n\n\n","slug":"SICP 問題2.25"},{"data":{"title":"SICP 問題 2.27","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n      items\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deep-reverse items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>deep-reverse <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>deep-reverse <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> items<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (deep-reverse x)\n((4 3) (2 1))\ngosh&gt; (define y (list (list 1 2) (list 3 4 (list 5 6 7))))\ny\ngosh&gt; (deep-reverse y)\n(((7 6 5) 4 3) (2 1))</pre>\n\n\n","slug":"SICP 問題 2.27"}],"currentPage":17,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}