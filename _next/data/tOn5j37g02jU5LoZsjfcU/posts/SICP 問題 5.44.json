{"pageProps":{"title":"SICP 問題 5.44","published":"2016/02/09","tags":["scheme","SICP"],"content":"<p>基本手続きの名前を含む式の正しいコードを翻訳するため，翻訳時環境を調べるようにする．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">  (cond ((self-evaluating? exp)\n</span><span class=\"code-line\">         (compile-self-evaluating exp target linkage))\n</span><span class=\"code-line\">        ((variable? exp)\n</span><span class=\"code-line\">         (compile-variable exp target linkage ct-env))\n</span><span class=\"code-line\">        ((quoted? exp) (compile-quoted exp target linkage))\n</span><span class=\"code-line\">        ((assignment? exp)\n</span><span class=\"code-line\">         (compile-assignment exp target linkage ct-env))\n</span><span class=\"code-line\">        ((definition? exp)\n</span><span class=\"code-line\">         (compile-definition exp target linkage ct-env))\n</span><span class=\"code-line\">        ((if? exp) (compile-if exp target linkage ct-env))\n</span><span class=\"code-line\">        ((lambda? exp)\n</span><span class=\"code-line\">         (compile-lambda exp target linkage ct-env))\n</span><span class=\"code-line\">        ((let? exp)\n</span><span class=\"code-line\">         (compile (let->combination exp) target linkage ct-env))\n</span><span class=\"code-line\">        ((begin? exp)\n</span><span class=\"code-line\">         (compile-sequence (begin-actions exp)\n</span><span class=\"code-line\">                           target linkage ct-env))\n</span><span class=\"code-line\">        ((cond? exp) (compile (cond->if exp) target linkage ct-env))\n</span><span class=\"code-line\">        ((open-code? exp ct-env)           ;ct-envも渡して翻訳時環境に上書きされていないか調べる\n</span><span class=\"code-line\">         (compile-open-code exp target linkage ct-env))\n</span><span class=\"code-line\">        ((application? exp)\n</span><span class=\"code-line\">         (compile-application exp target linkage ct-env))\n</span><span class=\"code-line\">        (else\n</span><span class=\"code-line\">         (error \"Unknown expression type -- COMPILE\" exp))))\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">(define (not-overwrite? op ct-env)\n</span><span class=\"code-line\">  (let ((address (find-variable op ct-env )))\n</span><span class=\"code-line\">    (eq? address 'not-found)))\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">(define (open-code? exp ct-env)\n</span><span class=\"code-line\">  (and (memq (car exp) '(= * - +))\n</span><span class=\"code-line\">       (not-overwrite? (car exp) ct-env)))</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry14<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda15<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  entry14\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここで+を探すのにct-envの中身から探しているので成功.open-codeになっていない．</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch19<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  compiled-branch20\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call21<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  primitive-branch19\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call21\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch16<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  compiled-branch17\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call18<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  primitive-branch16\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call18\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch22<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  compiled-branch23\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  primitive-branch22\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  after-call24\n</span><span class=\"code-line\">  after-lambda15\n</span><span class=\"code-line\">  <span class=\"synSpecial\">))</span>\n</span></code></pre>","slug":"SICP 問題 5.44","rawContent":"\n<p>基本手続きの名前を含む式の正しいコードを翻訳するため，翻訳時環境を調べるようにする．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>  (cond ((self-evaluating? exp)\n         (compile-self-evaluating exp target linkage))\n        ((variable? exp)\n         (compile-variable exp target linkage ct-env))\n        ((quoted? exp) (compile-quoted exp target linkage))\n        ((assignment? exp)\n         (compile-assignment exp target linkage ct-env))\n        ((definition? exp)\n         (compile-definition exp target linkage ct-env))\n        ((if? exp) (compile-if exp target linkage ct-env))\n        ((lambda? exp)\n         (compile-lambda exp target linkage ct-env))\n        ((let? exp)\n         (compile (let-&gt;combination exp) target linkage ct-env))\n        ((begin? exp)\n         (compile-sequence (begin-actions exp)\n                           target linkage ct-env))\n        ((cond? exp) (compile (cond-&gt;if exp) target linkage ct-env))\n        ((open-code? exp ct-env)           ;ct-envも渡して翻訳時環境に上書きされていないか調べる\n         (compile-open-code exp target linkage ct-env))\n        ((application? exp)\n         (compile-application exp target linkage ct-env))\n        (else\n         (error &#34;Unknown expression type -- COMPILE&#34; exp))))\n\n(define (not-overwrite? op ct-env)\n  (let ((address (find-variable op ct-env )))\n    (eq? address &#39;not-found)))\n\n(define (open-code? exp ct-env)\n  (and (memq (car exp) &#39;(= * - +))\n       (not-overwrite? (car exp) ct-env)))</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry14<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda15<span class=\"synSpecial\">))</span>\n  entry14\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここで+を探すのにct-envの中身から探しているので成功.open-codeになっていない．</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch19<span class=\"synSpecial\">))</span>\n  compiled-branch20\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call21<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch19\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call21\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch16<span class=\"synSpecial\">))</span>\n  compiled-branch17\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call18<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call18\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch22<span class=\"synSpecial\">))</span>\n  compiled-branch23\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch22\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call24\n  after-lambda15\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n"},"__N_SSG":true}