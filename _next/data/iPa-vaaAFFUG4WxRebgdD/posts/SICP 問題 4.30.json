{"pageProps":{"post":{"data":{"title":"SICP 問題 4.30","published":"2016/01/08","tags":["scheme","SICP"]},"content":"\n<p>並びの中の式は最後まで評価されないのではないかというCy D. Fectの心配に答える．</p>\n\n<p>a</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 元のeval-sequence</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; Cy D.Fectが提案したeval-sequence</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">'(</span><span class=\"synConstant\">57</span> <span class=\"synConstant\">321</span> <span class=\"synConstant\">88</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synConstant\">57</span>\n<span class=\"synConstant\">321</span>\n<span class=\"synConstant\">88</span>\n<span class=\"synComment\">;;; M-Eval value:</span>\ndone\n</pre>\n\n\n<p>初めのbeginで以下の式になる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">57</span><span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">'(</span><span class=\"synConstant\">321</span> <span class=\"synConstant\">88</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>beginの一つ目の式では(newline)はそのままevalされてM-Eval inputに空行が印字される．\n二つ目の式は(display x)で，このxに(thunk 57)が入るが，displayは基本式なのでforceされ57になる．\nそして57が印字される．\nこれを繰り返すのでfor-eachは正しく動く.\n　<br/>\nb</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p1 x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p2 x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p e<span class=\"synSpecial\">)</span>\n    e\n    x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p2 x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p e<span class=\"synSpecial\">)</span>\n    e\n    x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>p <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n</pre>\n\n\n<p>本文のeval-sequenceではp1のset!は基本手続きなので実行される．<br/>\np2のpは複合手続きなので遅延され実行されない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>Cyの提案するeval-sequenceの場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>c\naでやったfor-eachの振る舞いはCyのeval-sequenceでも変わらない．\naの式では基本手続きを使うために遅延されない．\nCyの式では強制的に評価するため遅延されない．</p>\n\n<p>d\nググってみた感じでは直列化して，最後の式が必要になったタイミングで他の式も強制的に評価するのがいいと思いました．\n読んだのはこちら↓</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fleque%2F20101202%2Fp1\" title=\" CSNagoya SICP 読書会: ex. 4.30 d., 4.31 - 月の塵\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://d.hatena.ne.jp/leque/20101202/p1\">d.hatena.ne.jp</a></cite></p>\n\n","slug":"SICP 問題 4.30"},"content":"<p>並びの中の式は最後まで評価されないのではないかというCy D. Fectの心配に答える．</p>\n<p>a</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; 元のeval-sequence</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; Cy D.Fectが提案したeval-sequence</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc items<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">'</span>done\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">'(</span><span class=\"synConstant\">57</span> <span class=\"synConstant\">321</span> <span class=\"synConstant\">88</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synConstant\">57</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">321</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">88</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">done\n</span></code></pre>\n<p>初めのbeginで以下の式になる．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">57</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">'(</span><span class=\"synConstant\">321</span> <span class=\"synConstant\">88</span><span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>beginの一つ目の式では(newline)はそのままevalされてM-Eval inputに空行が印字される．\n二つ目の式は(display x)で，このxに(thunk 57)が入るが，displayは基本式なのでforceされ57になる．\nそして57が印字される．\nこれを繰り返すのでfor-eachは正しく動く.\n　<br>\nb</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p1 x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">  x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p2 x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p e<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    e\n</span><span class=\"code-line\">    x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p2 x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p e<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    e\n</span><span class=\"code-line\">    x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>p <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\">ok\n</span></code></pre>\n<p>本文のeval-sequenceではp1のset!は基本手続きなので実行される．<br>\np2のpは複合手続きなので遅延され実行されない．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>p1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>p2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>Cyの提案するeval-sequenceの場合</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>p1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>p2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>c\naでやったfor-eachの振る舞いはCyのeval-sequenceでも変わらない．\naの式では基本手続きを使うために遅延されない．\nCyの式では強制的に評価するため遅延されない．</p>\n<p>d\nググってみた感じでは直列化して，最後の式が必要になったタイミングで他の式も強制的に評価するのがいいと思いました．\n読んだのはこちら↓</p>\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fleque%2F20101202%2Fp1\" title=\" CSNagoya SICP 読書会: ex. 4.30 d., 4.31 - 月の塵\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://d.hatena.ne.jp/leque/20101202/p1\">d.hatena.ne.jp</a></cite></p>"},"__N_SSG":true}