{"pageProps":{"post":{"data":{"title":"SICP 3.5章のstreamについて","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>整理しなおす．<br/>\n環境は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a> 0.9.4.<br/>\nstreamを本文通りに実装するとうまくいかない．<br/>\n遅延リストになっていない．<br/>\nstream-mapの挙動からそれがわかる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> low high<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream\n       low\n       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>show x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>ここでREPLには</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0x</pre>\n\n\n<p>と表示されてほしい．<br/>\nstream-mapのifのelse節の一行目．  <br/>\n<code>(apply proc (map stream-car angstreams))</code>となっているので(show 0)となり改行してから0を印字して<br/>\n次に(define x ...)なのでxと印字することを期待したい．</p>\n\n<p>ここで以下のようにstreamを実装したとする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>           \n  <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n                 result<span class=\"synSpecial\">)</span>\n          result<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n</pre>\n\n\n<p>ここで先ほどの</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を実行すると</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10x</pre>\n\n\n<p>となる．<br/>\nリストの先頭の要素以降の評価は遅延してほしいのにすべて評価してしまっている．<br/>\nここでマクロが必要となる．<br/>\ndelayとstream-cdrをマクロで実装する.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p><a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x554F;&#x984C;3.50-3.51 - nrvct&#x306E;&#x65E5;&#x8A18;</a></p>\n\n<p>ここでふたたび</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を実行する．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0x</pre>\n\n\n<p>期待通りに動いている．<br/>\nではなぜdefineでdelayとcons-streamを実装した場合に期待通りに動かなかったのかを考える．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>でまはず引数を評価する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> s <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>として考えやすくする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; ①</span>\n<span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; stream-mapの定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; cons-streamの定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; ここでは前の引数から順に評価すると考える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; -&gt; 0</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>①の式のsが(stream-cdr s)に変わっただけの式となった．<br/>\nつまりここからsが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a>になるまですべての要素が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に評価されてしまう．<br/>\nほしいのは遅延リストなのでこれは困る.<br/>\n手続きをsquareに変えると一見遅延リストのように見える．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map square (stream-enumerate-interval 0 10)))\nx\ngosh&gt; x\n(0 . #&lt;closure (memo-proc memo-proc)&gt;)</pre>\n\n\n<p>ただしshowで見たように内部ではリストの末尾までmapで評価され，その評価された値がdelayで包まれている．\ndefineだとdelayの引数とcons-streamの第二引数が先に評価されてしまうので意味がない．\n評価順序を変えるためにここではマクロが必要になる．</p>\n\n<p>今の理解はこんなところです．<br/>\n突っ込みどころがあればお願いします．</p>\n\n","slug":"SICP 3.5章のstreamについて"},"content":"<p>整理しなおす．<br>\n環境は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a> 0.9.4.<br>\nstreamを本文通りに実装するとうまくいかない．<br>\n遅延リストになっていない．<br>\nstream-mapの挙動からそれがわかる．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">></span> low high<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>cons-stream\n</span><span class=\"code-line\">       low\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>show x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>ここでREPLには</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define x (stream-map show (stream-enumerate-interval 0 10)))\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">0x</span></code></pre>\n<p>と表示されてほしい．<br>\nstream-mapのifのelse節の一行目．  <br>\n<code>(apply proc (map stream-car angstreams))</code>となっているので(show 0)となり改行してから0を印字して<br>\n次に(define x ...)なのでxと印字することを期待したい．</p>\n<p>ここで以下のようにstreamを実装したとする．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>           \n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 result<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          result<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n</span></code></pre>\n<p>ここで先ほどの</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>を実行すると</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define x (stream-map show (stream-enumerate-interval 0 10)))\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">0\n</span><span class=\"code-line\">1\n</span><span class=\"code-line\">2\n</span><span class=\"code-line\">3\n</span><span class=\"code-line\">4\n</span><span class=\"code-line\">5\n</span><span class=\"code-line\">6\n</span><span class=\"code-line\">7\n</span><span class=\"code-line\">8\n</span><span class=\"code-line\">9\n</span><span class=\"code-line\">10x</span></code></pre>\n<p>となる．<br>\nリストの先頭の要素以降の評価は遅延してほしいのにすべて評価してしまっている．<br>\nここでマクロが必要となる．<br>\ndelayとstream-cdrをマクロで実装する.</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n</span></code></pre>\n<p><a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">ストリームの実装と問題3.50-3.51 - nrvctの日記</a></p>\n<p>ここでふたたび</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</span></code></pre>\n<p>を実行する．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define x (stream-map show (stream-enumerate-interval 0 10)))\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">0x</span></code></pre>\n<p>期待通りに動いている．<br>\nではなぜdefineでdelayとcons-streamを実装した場合に期待通りに動かなかったのかを考える．<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>でまはず引数を評価する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> s <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>として考えやすくする．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; ①</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; stream-mapの定義</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      the-empty-stream\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; cons-streamの定義</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; ここでは前の引数から順に評価すると考える．</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;; -> 0</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n</span><span class=\"code-line\">       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>①の式のsが(stream-cdr s)に変わっただけの式となった．<br>\nつまりここからsが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a>になるまですべての要素が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に評価されてしまう．<br>\nほしいのは遅延リストなのでこれは困る.<br>\n手続きをsquareに変えると一見遅延リストのように見える．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (define x (stream-map square (stream-enumerate-interval 0 10)))\n</span><span class=\"code-line\">x\n</span><span class=\"code-line\">gosh> x\n</span><span class=\"code-line\">(0 . #&#x3C;closure (memo-proc memo-proc)>)</span></code></pre>\n<p>ただしshowで見たように内部ではリストの末尾までmapで評価され，その評価された値がdelayで包まれている．\ndefineだとdelayの引数とcons-streamの第二引数が先に評価されてしまうので意味がない．\n評価順序を変えるためにここではマクロが必要になる．</p>\n<p>今の理解はこんなところです．<br>\n突っ込みどころがあればお願いします．</p>"},"__N_SSG":true}