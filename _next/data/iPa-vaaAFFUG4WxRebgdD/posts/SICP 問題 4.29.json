{"pageProps":{"post":{"data":{"title":"SICP 問題 4.29","published":"2016/01/08","tags":["scheme","SICP"]},"content":"\n<p>メモ化しないとはるかに遅くなるプログラムの例として<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%A3%A5%DC%A5%CA%A5%C3%A5%C1%BF%F4%CE%F3\">フィボナッチ数列</a>の第n項を求める手続きを定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; メモ化するforce-it</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;expをその値で置き換える</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>    <span class=\"synComment\">;;必要のなくなったenvを忘れる</span>\n           result<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; メモ化しないforce-it</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>thunk? obj<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))</span>\n      obj<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; driver-loopにtimeマクロを仕込む</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここにtimeマクロ</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>メモ化する場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.001</span>\n<span class=\"synComment\">; user   0.000</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">832040</span>\n</pre>\n\n\n<p>メモ化しない場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   6.559</span>\n<span class=\"synComment\">; user   6.540</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">832040</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>id x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  x<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>メモ化する場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">100</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n</pre>\n\n\n<p>メモ化しない場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">100</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">2</span>\n</pre>\n\n\n<p>メモ化すると(* x x)を評価する時に初めのxは(thunk (id 10))となっているのでこれをforce-itしてcountを+1して10を返し，<br/>\nxの束縛を(evaluated-thunk 10)に変える．<br/>\n次のxをforce-itするとそのまま10が返る．</p>\n\n","slug":"SICP 問題 4.29"},"content":"<p>メモ化しないとはるかに遅くなるプログラムの例として<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%A3%A5%DC%A5%CA%A5%C3%A5%C1%BF%F4%CE%F3\">フィボナッチ数列</a>の第n項を求める手続きを定義する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">        a\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; メモ化するforce-it</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;expをその値で置き換える</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>    <span class=\"synComment\">;;必要のなくなったenvを忘れる</span>\n</span><span class=\"code-line\">           result<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; メモ化しないforce-it</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>thunk? obj<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      obj<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; driver-loopにtimeマクロを仕込む</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここにtimeマクロ</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>メモ化する場合</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n</span><span class=\"code-line\"><span class=\"synComment\">; real   0.001</span>\n</span><span class=\"code-line\"><span class=\"synComment\">; user   0.000</span>\n</span><span class=\"code-line\"><span class=\"synComment\">; sys    0.000</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">832040</span>\n</span></code></pre>\n<p>メモ化しない場合</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n</span><span class=\"code-line\"><span class=\"synComment\">; real   6.559</span>\n</span><span class=\"code-line\"><span class=\"synComment\">; user   6.540</span>\n</span><span class=\"code-line\"><span class=\"synComment\">; sys    0.000</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">832040</span>\n</span></code></pre>\n<p>　</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>id x<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  x<span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>メモ化する場合</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">100</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\">count\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">1</span>\n</span></code></pre>\n<p>メモ化しない場合</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">100</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval input:</span>\n</span><span class=\"code-line\">count\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; M-Eval value:</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">2</span>\n</span></code></pre>\n<p>メモ化すると(* x x)を評価する時に初めのxは(thunk (id 10))となっているのでこれをforce-itしてcountを+1して10を返し，<br>\nxの束縛を(evaluated-thunk 10)に変える．<br>\n次のxをforce-itするとそのまま10が返る．</p>"},"__N_SSG":true}