{"pageProps":{"post":{"data":{"title":"OCamlの無名関数は再帰を定義できない？","published":"2016/02/15","tags":["プログラミングの基礎","OCaml"]},"content":"\n<p>わたろーです．<br/>\n今<a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\">プログラミングの基礎 (Computer Science Library)</a>を読んでいます．<br/>\nこれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>とデザインレシピでプログラミングの基礎を学ぶという内容なのですが，<br/>\n名前のない関数という節で気になる文章がありました．<br/>\n14.4 名前のない関数 p145</p>\n\n<blockquote><p>名前のない関数で定義できるのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>をしていない関数だけです．</p></blockquote>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%E0%A5%C0%B7%D7%BB%BB\">ラムダ計算</a>を元にしていると思っていたので驚きました．<br/>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>出来ないのって思ったので試してみました．<br/>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>は<a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\">計算機プログラムの構造と解釈 第2版</a>p233 問題4.21に載っていたものを使います．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; SICP</span>\n<span class=\"synComment\">;;; 階乗計算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n         <span class=\"synConstant\">1</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>実行すると</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                <span class=\"synConstant\">1</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n       <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">120</span>\n</pre>\n\n\n<p>　<br/>\nこれを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>で書いてみます．</p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-&gt;</span>\n  <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-&gt;</span>\n    fact fact n<span class=\"synStatement\">)</span>\n    <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n      <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n      <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n            <span class=\"synConstant\">Characters</span> <span class=\"synConstant\">33</span>-<span class=\"synConstant\">37</span>:\n      fact fact n<span class=\"synError\">)</span>\n           <span class=\"synStatement\">^^^^</span>\n<span class=\"synConstant\">Error</span>: <span class=\"synConstant\">This</span> expression has <span class=\"synStatement\">type</span> 'a <span class=\"synStatement\">-&gt;</span> 'b <span class=\"synStatement\">-&gt;</span> 'c\n       but an expression was expected <span class=\"synStatement\">of</span> <span class=\"synStatement\">type</span> 'a\n       <span class=\"synConstant\">The</span> <span class=\"synStatement\">type</span> variable 'a occurs inside 'a <span class=\"synStatement\">-&gt;</span> 'b <span class=\"synStatement\">-&gt;</span> 'c\n</pre>\n\n\n<p>エラーですね．<br/>\n型が解決されていないのでしょうか．<br/>\nググッてみると -rectypesを使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>を起動すれば出来るようです．</p>\n\n<p><a href=\"http://d.hatena.ne.jp/sumii/20051203/1133575324\">&#x4E0D;&#x52D5;&#x70B9;&#x6F14;&#x7B97;&#x5B50;&#x3075;&#x305F;&#x305F;&#x3073; - sumii&#x306E;&#x65E5;&#x8A18;</a></p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-&gt;</span>\n    <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-&gt;</span>\n      fact fact n<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-&gt;</span>\n        <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n        <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n        <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n\n            - : <span class=\"synType\">int</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">120</span>\n</pre>\n\n\n<p>おお，動いた．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>型っていうのが必要になるわけなんですね．<br/>\nまだまだわからないことだらけですが，型もおもしろそうです．<br/>\nこの辺探すのに行き着いたこのページのTaPLのまとめがすごくおもしろそうです．</p>\n\n<p><iframe src=\"http://mint.hateblo.jp/embed/2014/12/24/211543\" title=\"おいお前ら、TAPL読むぞ！ - ミントフレーバー緑茶\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://mint.hateblo.jp/entry/2014/12/24/211543\">mint.hateblo.jp</a></cite></p>\n\n<p>おもしろそう．読みたい．すごく読みたい．\nでもまだ自分には厳しそう．</p>\n\n<p>その前に<a href=\"http://d.hatena.ne.jp/asin/4781912850/wataro-22\">プログラミング言語の基礎概念 (ライブラリ情報学コア・テキスト)</a>を読みたい．<br/>\nしかしその時間を作れるか．<br/>\nそろそろお仕事探しのために動かないといけないかもって思ってきています．<br/>\n勉強だけしていたい．</p>\n\n","slug":"OCamlの無名関数は再帰を定義できない？"},"content":"<p>わたろーです．<br>\n今<a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\">プログラミングの基礎 (Computer Science Library)</a>を読んでいます．<br>\nこれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>とデザインレシピでプログラミングの基礎を学ぶという内容なのですが，<br>\n名前のない関数という節で気になる文章がありました．<br>\n14.4 名前のない関数 p145</p>\n<blockquote><p>名前のない関数で定義できるのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>をしていない関数だけです．</p></blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%E0%A5%C0%B7%D7%BB%BB\">ラムダ計算</a>を元にしていると思っていたので驚きました．<br>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>出来ないのって思ったので試してみました．<br>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>は<a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\">計算機プログラムの構造と解釈 第2版</a>p233 問題4.21に載っていたものを使います．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; SICP</span>\n</span><span class=\"code-line\"><span class=\"synComment\">;;; 階乗計算</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n</span></code></pre>\n<p>実行すると</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n</span><span class=\"code-line\">       <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">120</span>\n</span></code></pre>\n<p>　<br>\nこれを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>で書いてみます．</p>\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-></span>\n</span><span class=\"code-line\">  <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-></span>\n</span><span class=\"code-line\">    fact fact n<span class=\"synStatement\">)</span>\n</span><span class=\"code-line\">    <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-></span>\n</span><span class=\"code-line\">      <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">      <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">      <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n</span><span class=\"code-line\">            <span class=\"synConstant\">Characters</span> <span class=\"synConstant\">33</span>-<span class=\"synConstant\">37</span>:\n</span><span class=\"code-line\">      fact fact n<span class=\"synError\">)</span>\n</span><span class=\"code-line\">           <span class=\"synStatement\">^^^^</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">Error</span>: <span class=\"synConstant\">This</span> expression has <span class=\"synStatement\">type</span> 'a <span class=\"synStatement\">-></span> 'b <span class=\"synStatement\">-></span> 'c\n</span><span class=\"code-line\">       but an expression was expected <span class=\"synStatement\">of</span> <span class=\"synStatement\">type</span> 'a\n</span><span class=\"code-line\">       <span class=\"synConstant\">The</span> <span class=\"synStatement\">type</span> variable 'a occurs inside 'a <span class=\"synStatement\">-></span> 'b <span class=\"synStatement\">-></span> 'c\n</span></code></pre>\n<p>エラーですね．<br>\n型が解決されていないのでしょうか．<br>\nググッてみると -rectypesを使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>を起動すれば出来るようです．</p>\n<p><a href=\"http://d.hatena.ne.jp/sumii/20051203/1133575324\">不動点演算子ふたたび - sumiiの日記</a></p>\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-></span>\n</span><span class=\"code-line\">    <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-></span>\n</span><span class=\"code-line\">      fact fact n<span class=\"synStatement\">)</span>\n</span><span class=\"code-line\">      <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-></span>\n</span><span class=\"code-line\">        <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">        <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">        <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">            - : <span class=\"synType\">int</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">120</span>\n</span></code></pre>\n<p>おお，動いた．<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>型っていうのが必要になるわけなんですね．<br>\nまだまだわからないことだらけですが，型もおもしろそうです．<br>\nこの辺探すのに行き着いたこのページのTaPLのまとめがすごくおもしろそうです．</p>\n<p><iframe src=\"http://mint.hateblo.jp/embed/2014/12/24/211543\" title=\"おいお前ら、TAPL読むぞ！ - ミントフレーバー緑茶\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://mint.hateblo.jp/entry/2014/12/24/211543\">mint.hateblo.jp</a></cite></p>\n<p>おもしろそう．読みたい．すごく読みたい．\nでもまだ自分には厳しそう．</p>\n<p>その前に<a href=\"http://d.hatena.ne.jp/asin/4781912850/wataro-22\">プログラミング言語の基礎概念 (ライブラリ情報学コア・テキスト)</a>を読みたい．<br>\nしかしその時間を作れるか．<br>\nそろそろお仕事探しのために動かないといけないかもって思ってきています．<br>\n勉強だけしていたい．</p>"},"__N_SSG":true}