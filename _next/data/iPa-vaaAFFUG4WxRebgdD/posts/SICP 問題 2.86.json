{"pageProps":{"post":{"data":{"title":"SICP 問題 2.86","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-root x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square-root x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>sine x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cosine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>cosine x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>atangent x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>atangent x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-number</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rational</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-rat <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span>\n                                               <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n\n<span class=\"synComment\">;; real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complex</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                                 <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>imag<span class=\"synSpecial\">)))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-mag-ang <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> x<span class=\"synSpecial\">))</span>\n                                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">angle</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n\n</pre>\n\n\n","slug":"SICP 問題 2.86"},"content":"<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-root x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square-root x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>sine x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cosine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>cosine x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>atangent x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>atangent x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; scheme-number</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; rational</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-rat <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                               <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; real</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; complex</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                                 <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>imag<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-mag-ang <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">angle</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span></code></pre>"},"__N_SSG":true}