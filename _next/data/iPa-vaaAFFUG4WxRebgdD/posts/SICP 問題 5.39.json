{"pageProps":{"post":{"data":{"title":"SICP 問題 5.39","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>文面アドレスと実行時環境とり値を検索するlexical-address-lookupと\n値を変更するlexical-address-set!を実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 文面アドレスを使って変数の値を探す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-lookup lex-add r-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> val <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span><span class=\"synSpecial\">)</span>\n          val<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 文面アドレスにある値を変更する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-set! lex-add val r-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter frame count<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame val<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-env <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">'(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">))</span>\nmy-env\ngosh&gt; my-env\n<span class=\"synSpecial\">(((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">&gt;</span> <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">#f</span>\n  <span class=\"synConstant\">#t</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cdr&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cons&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> null?&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synStatement\">=&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">-&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">+&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> *&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> /&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> &gt;&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synConstant\">&lt;&gt;</span><span class=\"synSpecial\">)))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>scheme my-env<span class=\"synSpecial\">)</span>\nok\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\nscheme\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>SICP my-env<span class=\"synSpecial\">)</span>\nok\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\nSICP\n</pre>\n\n\n","slug":"SICP 問題 5.39"},"content":"<p>文面アドレスと実行時環境とり値を検索するlexical-address-lookupと\n値を変更するlexical-address-set!を実装する．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;;; 文面アドレスを使って変数の値を探す</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-lookup lex-add r-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> val <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">\"*Unassigned* variable\"</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          val<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;;; 文面アドレスにある値を変更する</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-set! lex-add val r-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter frame count<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame val<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>iter frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n</span></code></pre>\n<p>test</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-env <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">'(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">my-env\n</span><span class=\"code-line\">gosh> my-env\n</span><span class=\"code-line\"><span class=\"synSpecial\">(((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"> <span class=\"synSpecial\">((</span>false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">></span> <span class=\"synIdentifier\">&#x3C;</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">#f</span>\n</span><span class=\"code-line\">  <span class=\"synConstant\">#t</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> car><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> cdr><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> cons><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> null?><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synStatement\">=></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synError\">-></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synError\">+></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> *><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> /><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> >><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&#x3C;subr</span> <span class=\"synConstant\">&#x3C;></span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">1</span>\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">2</span>\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">#f</span>\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synConstant\">#t</span>\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>scheme my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">scheme\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>SICP my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">ok\n</span><span class=\"code-line\">gosh> <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">SICP\n</span></code></pre>"},"__N_SSG":true}