{"pageProps":{"post":{"data":{"title":"SICP 問題 4.70","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n<p>本文中のadd-assertion!とadd-rules!のletの目的は何か．\n問題文のadd-assertion!ではダメな理由を述べよ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文中のadd-assertion!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-assertions THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n          <span class=\"synSpecial\">(</span>cons-stream assertion old-assertions<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 問題文のadd-assertion!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n        <span class=\"synSpecial\">(</span>cons-stream assertion THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>cons-streamはcarは評価し，cdrはdelayしてconsしている．<br/>\nそのため，問題文のadd-assertion!ではset!した時にassertionは評価されているが，THE-ASSERTIONSは評価されていない．   <br/>\nそれがTHE-ASSERTIONSに代入されるのでもともとのTHE-ASSERTIONSにアクセスできなくなる．  <br/>\nそれを防ぐために本文中のadd-assertion!とadd-rule!ではset!する前にletで古い値を保存している．</p>\n\n","slug":"SICP 問題 4.70"},"content":"<p>本文中のadd-assertion!とadd-rules!のletの目的は何か．\n問題文のadd-assertion!ではダメな理由を述べよ．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synComment\">;; 本文中のadd-assertion!</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-assertions THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>cons-stream assertion old-assertions<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synComment\">;; 問題文のadd-assertion!</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>cons-stream assertion THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>cons-streamはcarは評価し，cdrはdelayしてconsしている．<br>\nそのため，問題文のadd-assertion!ではset!した時にassertionは評価されているが，THE-ASSERTIONSは評価されていない．   <br>\nそれがTHE-ASSERTIONSに代入されるのでもともとのTHE-ASSERTIONSにアクセスできなくなる．  <br>\nそれを防ぐために本文中のadd-assertion!とadd-rule!ではset!する前にletで古い値を保存している．</p>"},"__N_SSG":true}