{"pageProps":{"post":{"data":{"title":"SICP 問題 2.33","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n<p>accumulateを使ってmap,append,lengthを実装する．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> p sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>p x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> nil sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">cons</span> seq2 seq1<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span> sequence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.33"},"content":"<p>accumulateを使ってmap,append,lengthを実装する．<br>\n　</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      initial\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> p sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>p x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> nil sequence<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> seq1 seq2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">cons</span> seq2 seq1<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> sequence<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span> sequence<span class=\"synSpecial\">))</span>\n</span></code></pre>"},"__N_SSG":true}