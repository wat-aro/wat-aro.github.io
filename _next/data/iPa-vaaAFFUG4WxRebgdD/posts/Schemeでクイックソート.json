{"pageProps":{"post":{"data":{"title":"Schemeでクイックソート","published":"2016/05/14","tags":["scheme"]},"content":"\n<p>先日の納会でソートの話が少し出たので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%A4%A5%C3%A5%AF%A5%BD%A1%BC%A5%C8\">クイックソート</a>を書いてみました．<br/>\n書きやすいので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>で．</p>\n\n<p>まず普通に書いてみます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> first x<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (quick &#39;( 4 7 8 3 9 2 7 3 92 7 1))\n(1 2 3 3 4 7 7 7 8 9 92)</pre>\n\n\n<p>普通ですね．<br/>\nただfilterで何度もリストの中身を舐めているのが嫌です．\nここでstreamを使ってみます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use util.stream<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-&gt;list\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>s <span class=\"synSpecial\">(</span>list-&gt;stream lst<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n         stream-null\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>stream-append <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> first x<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (quick &#39;( 4 7 8 3 9 2 7 3 92 7 1))\n(1 2 3 3 4 7 7 7 8 9 92)</pre>\n\n\n<p>リストからストリームへの変換とストリームからリストへの変換が入っているので<br/>\n効率的になったのかどうか怪しいですが一応期待通りに動いていますね．<br/>\nどうするのが正解なんでしょう？</p>\n\n","slug":"Schemeでクイックソート"},"content":"<p>先日の納会でソートの話が少し出たので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%A4%A5%C3%A5%AF%A5%BD%A1%BC%A5%C8\">クイックソート</a>を書いてみました．<br>\n書きやすいので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>で．</p>\n<p>まず普通に書いてみます．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">'()</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&#x3C;</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&#x3C;</span> first x<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (quick '( 4 7 8 3 9 2 7 3 92 7 1))\n</span><span class=\"code-line\">(1 2 3 3 4 7 7 7 8 9 92)</span></code></pre>\n<p>普通ですね．<br>\nただfilterで何度もリストの中身を舐めているのが嫌です．\nここでstreamを使ってみます．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>use util.stream<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>stream->list\n</span><span class=\"code-line\">   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>s <span class=\"synSpecial\">(</span>list->stream lst<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">         stream-null\n</span><span class=\"code-line\">         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span>stream-append <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&#x3C;</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                          <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&#x3C;</span> first x<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))))))))</span>\n</span></code></pre>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\">gosh> (quick '( 4 7 8 3 9 2 7 3 92 7 1))\n</span><span class=\"code-line\">(1 2 3 3 4 7 7 7 8 9 92)</span></code></pre>\n<p>リストからストリームへの変換とストリームからリストへの変換が入っているので<br>\n効率的になったのかどうか怪しいですが一応期待通りに動いていますね．<br>\nどうするのが正解なんでしょう？</p>"},"__N_SSG":true}