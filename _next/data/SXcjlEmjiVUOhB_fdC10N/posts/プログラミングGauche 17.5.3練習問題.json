{"pageProps":{"post":{"data":{"title":"プログラミングGauche 17.5.3練習問題","published":"2015/09/24","tags":["scheme","gauche"]},"content":"\n<ul>\n<li><code>&lt;logger-generic&gt;</code>のログ出力のon/offを切り替えられるようにする.<br/>\n<code>&lt;logger-generic&gt;</code>クラスに<code>printing</code>スロットを追加してその真偽で処理を分ければよい．\n<code>printing</code>スロットの値を後で変えられるように<code>printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>と<code>not-printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>も追加した．</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>define-class <span class=\"synConstant\">&lt;logger-generic&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">&lt;generic&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>printing :init-value <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>define-method apply-generic <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;args: ~s\\n&quot;</span> args<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>return-value <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;result: ~s\\n&quot;</span> return-value<span class=\"synSpecial\">)</span>\n               return-value<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>define-method not-printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>define-method printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 17.5.3練習問題"},"content":"<ul>\n<li><code>&#x3C;logger-generic></code>のログ出力のon/offを切り替えられるようにする.<br>\n<code>&#x3C;logger-generic></code>クラスに<code>printing</code>スロットを追加してその真偽で処理を分ければよい．\n<code>printing</code>スロットの値を後で変えられるように<code>printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>と<code>not-printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>も追加した．</li>\n</ul>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>define-class <span class=\"synConstant\">&#x3C;logger-generic></span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">&#x3C;generic></span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">((</span>printing :init-value <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>define-method apply-generic <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&#x3C;logger-generic></span><span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">\"args: ~s\\n\"</span> args<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>return-value <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">\"result: ~s\\n\"</span> return-value<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">               return-value<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>define-method not-printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&#x3C;logger-generic></span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>define-method printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&#x3C;logger-generic></span><span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">))</span>\n</span></code></pre>"},"__N_SSG":true}