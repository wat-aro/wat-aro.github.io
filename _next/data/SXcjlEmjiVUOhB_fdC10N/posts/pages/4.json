{"pageProps":{"posts":[{"data":{"title":"SICP 5.5.5 翻訳系","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>の式を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシンのシミュレータの命令列に翻訳するコード．<br/>\n理解するためにコメントを出来るだけつけた</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; make-branchのための手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> label-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>new-label-number<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> label-counter<span class=\"synSpecial\">))</span>\n  label-counter<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-label name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-&gt;symbol</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> name<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number-&gt;string</span> <span class=\"synSpecial\">(</span>new-label-number<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; make-compileに必要な機械演算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-compiled-procedure entry env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compiled-procedure entry env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compiled-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>compiled-procedure<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compiled-procedure-entry c-proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> c-proc<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compiled-procedure-env c-proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> c-proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> all-regs <span class=\"synSpecial\">'(</span>env proc val argl continue<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type -- COMPILE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-instruction-sequence needs modifies statements<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> needs modifies statements<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-instruction-sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synComment\">;;; 接続コードの翻訳</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-linkage linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>continue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n                                    <span class=\"synSpecial\">'((</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>empty-instruction-sequence<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span>\n                                    <span class=\"synSpecial\">`((</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;;; 命令の最後に次の計算の行き先を入れる．</span>\n<span class=\"synComment\">;;; preservingがあるのでlinkageがreturnでinstruction-sequenceでcontinueを変更しても</span>\n<span class=\"synComment\">;;; save, restoreされるので問題ない</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>end-with-linkage linkage instruction-sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>continue<span class=\"synSpecial\">)</span>\n              instruction-sequence\n              <span class=\"synSpecial\">(</span>compile-linkage linkage<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; 単純な式のコンパイル</span>\n<span class=\"synComment\">;;; targetにexpを代入して次の計算への命令を作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>end-with-linkage\n   linkage\n   <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>exp<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; targetに(cadr exp)を代入して次の計算への命令を作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>end-with-linkage\n   linkage\n   <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;;; variableを環境から探してきて，見つかった値をtargetに代入して，次の計算への命令を足して返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>end-with-linkage\n   linkage\n   <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                                        <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>exp<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>get-value-code                 <span class=\"synComment\">;valを求めるための命令．</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage\n     linkage\n     <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;valを求める間に環境が変わると困る</span>\n                 get-value-code         <span class=\"synComment\">;代入する値を求め，valに代入される．seq1</span>\n                 <span class=\"synComment\">;; valに代入された値をvarに代入する．seq2</span>\n                 <span class=\"synSpecial\">(</span>make-instruction-sequence\n                  <span class=\"synComment\">;;  ;代入するので元々の環境と代入する値を必要とする．</span>\n                  <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                  <span class=\"synComment\">;; targetに'okを入れて返すのでtargetは変更する</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">`((</span>perform <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>var<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synComment\">;;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;糖衣構文(f x)の場合でもfがvarに束縛される</span>\n        <span class=\"synSpecial\">(</span>get-value-code                 <span class=\"synComment\">;varに束縛する値を求める命令</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage\n     linkage\n     <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;valを求める間に環境が変わると困る</span>\n                 get-value-code\n                 <span class=\"synSpecial\">(</span>make-instruction-sequence\n                  <span class=\"synComment\">;;定義する元々の環境とget-value-codeで求めた値の入っているvalが必要</span>\n                  <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>         <span class=\"synComment\">;targetにokを入れて返す</span>\n                  <span class=\"synSpecial\">`((</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>var<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synComment\">;;; 条件式</span>\n<span class=\"synComment\">;;; ifはtestがtrueならfalseに飛ぶ．</span>\n<span class=\"synComment\">;;; そのためlinkageがnextの場合，そのままだとtrueの後にfalseにいってしまう</span>\n<span class=\"synComment\">;;; falseを飛ばすためにtrueの後はafter-ifに飛ぶように</span>\n<span class=\"synComment\">;;; nextの場合はconsequenct-linkageにafter-ifを入れる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; make-branchで書くラベルにIDをつける</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>true-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>f-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>false-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>after-if <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-if<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>consequent-linkage           <span class=\"synComment\">;nextならafter-ifが入る</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-if linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>p-code <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span> <span class=\"synComment\">;術後を生成する</span>\n            <span class=\"synSpecial\">(</span>c-code\n             <span class=\"synSpecial\">(</span>compile\n              <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target consequent-linkage<span class=\"synSpecial\">))</span> <span class=\"synComment\">;consequenct節の命令の生成</span>\n            <span class=\"synSpecial\">(</span>a-code\n             <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;alterenative節の命令の生成</span>\n        <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>env continue<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;環境とcontinueは保護</span>\n                    p-code\n                    <span class=\"synSpecial\">(</span>append-instruction-sequences <span class=\"synComment\">;任意の数の式をつながりのある式として連結する</span>\n                     <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n                                                <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n                                                  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>f-branch<span class=\"synSpecial\">))))</span>\n                     <span class=\"synComment\">;; prallelで逐次実行でなくどちらかだけが実行される命令を作る</span>\n                     <span class=\"synComment\">;; これはどちらが選ばれるか実行時までわからないので</span>\n                     <span class=\"synComment\">;; neededとmodifiedの和集合をとる．</span>\n                     <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n                      <span class=\"synSpecial\">(</span>append-instruction-sequences t-branch c-code<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>append-instruction-sequences f-branch a-code<span class=\"synSpecial\">))</span>\n                     after-if<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; 並び</span>\n<span class=\"synComment\">;;; beginやlambdaのbodyで使う</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-sequence seq target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>preserving\n       <span class=\"synSpecial\">'(</span>env continue<span class=\"synSpecial\">)</span>                  <span class=\"synComment\">;環境と継続は保護</span>\n       <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> target <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> <span class=\"synComment\">;そのまま次の命令を実行するのでnext</span>\n       <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;再帰的に命令列を作る</span>\n\n<span class=\"synComment\">;;; lambda式</span>\n<span class=\"synComment\">;;; target(val)にコンパイルした式のラベルを束縛してlambda-linkageにジャンプ</span>\n<span class=\"synComment\">;;; 実際に式を呼び出すときにcompile-lambda-bodyで作るラベルにジャンプし，処理をする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-entry <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>entry<span class=\"synSpecial\">))</span> <span class=\"synComment\">;コンパイルされた式はこのentry-idのラベルで処理される</span>\n        <span class=\"synSpecial\">(</span>after-lambda <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-lambda<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>lambda-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-lambda linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synComment\">;; tack-onでend-with-linkageにcompile-lambda-bodyを連結．</span>\n       <span class=\"synComment\">;; neededとmodifiedはend-with-linkageのほうを使う</span>\n       <span class=\"synSpecial\">(</span>tack-on-instruction-sequence\n        <span class=\"synSpecial\">(</span>end-with-linkage\n         lambda-linkage\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                    <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-entry<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry<span class=\"synSpecial\">))</span>\n       after-lambda<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; コンパイルした手続きが実際に処理をするラベルの中身を作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>formals <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span> <span class=\"synComment\">;lambdaの引数はformalsに束縛</span>\n    <span class=\"synSpecial\">(</span>append-instruction-sequences\n     <span class=\"synSpecial\">(</span>make-instruction-sequence\n      <span class=\"synSpecial\">'(</span>env proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n      <span class=\"synComment\">;; 実際の処理をするラベル</span>\n      <span class=\"synSpecial\">`(,</span>proc-entry\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env                     <span class=\"synComment\">;ここで仮引数と実引数で環境を拡張</span>\n                <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>formals<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))</span>\n     <span class=\"synComment\">;; lambdaのbodyは式が複数のことがあるのでcompile-sequence</span>\n     <span class=\"synComment\">;; 呼び出し元に値を返さないと行けないのでlinkageはreturn</span>\n     <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; apply</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>\n        <span class=\"synComment\">;; operatorをコンパイルしたら次はoperandの評価をしなければいけないのでnext</span>\n        <span class=\"synSpecial\">(</span>proc-code <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>proc <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; operandは複数なのでそれぞれcompileしてリストにして保持</span>\n        <span class=\"synSpecial\">(</span>operand-codes\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile operand <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>preserving\n     <span class=\"synSpecial\">'(</span>env continue<span class=\"synSpecial\">)</span>\n     proc-code                          <span class=\"synComment\">;最初にoperatorを確定させる</span>\n     <span class=\"synSpecial\">(</span>preserving\n      <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>construct-arglist operand-codes<span class=\"synSpecial\">)</span> <span class=\"synComment\">;operandを評価してarglに代入するための命令の生成</span>\n      <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;</span>\n\n<span class=\"synComment\">;;; compile-applicationでoperand-codesはコンパイル済みなのでそれをarglに入れるための命令を生成</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>construct-arglist operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; reverseして連結していくので右から左に評価することになる</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>operand-codes <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> operand-codes<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> operand-codes<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; 引数がない場合はarglに'()を代入</span>\n        <span class=\"synSpecial\">(</span>make-instruction-sequence\n         <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">()))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-to-get-last-arg     <span class=\"synComment\">;最後のoperandが生成する命令</span>\n               <span class=\"synSpecial\">(</span>append-instruction-sequences\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>make-instruction-sequence\n                 <span class=\"synSpecial\">'(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>         <span class=\"synComment\">;arglの初期化が必要なのでこれだけ特別に処理</span>\n                 <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n              code-to-get-last-arg      <span class=\"synComment\">;cdrがnullなら最後のoperand</span>\n              <span class=\"synComment\">;; まだoperandが残っていればこちら</span>\n              <span class=\"synSpecial\">(</span>preserving\n               <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>                   <span class=\"synComment\">;環境は保持</span>\n               code-to-get-last-arg     <span class=\"synComment\">;引数の最後（reverseしているので先頭）からつなげる.</span>\n               <span class=\"synSpecial\">(</span>code-to-get-rest-args\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synComment\">;;; last-arg以外はここで処理する</span>\n<span class=\"synComment\">;;; operand-codesはコンパイル済み</span>\n<span class=\"synComment\">;;; arglには既に最後の引数が代入されているのでそこに先頭(reverseしてるので後ろ)から代入していく</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>code-to-get-rest-args operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-for-next-arg              <span class=\"synComment\">;先頭</span>\n         <span class=\"synSpecial\">(</span>preserving\n          <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>           <span class=\"synComment\">;valに先頭の要素のコンパイル結果を代入する命令</span>\n          <span class=\"synSpecial\">(</span>make-instruction-sequence\n           <span class=\"synSpecial\">'(</span>val argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'((</span>assign argl               <span class=\"synComment\">;valに入った(car operand)の値をarglに代入</span>\n                     <span class=\"synSpecial\">(</span>op cons<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n        code-for-next-arg\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n         code-for-next-arg\n         <span class=\"synSpecial\">(</span>code-to-get-rest-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-cods<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; operator, operandsを評価する命令を作った後に呼ばれる</span>\n<span class=\"synComment\">;;; この時点でprocにはoperatorのシンボル, arglにはoperandsが入っている</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>primitive-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>primitive-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compiled-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compiled-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>after-call <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-call<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>compiled-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-call linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>primitive-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; compiled-branchかprimitive-branchのどちらかだけが実行されるのでparallel</span>\n       <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         compiled-branch\n         <span class=\"synComment\">;; ここでtargetとlinkageに合わせた命令を生成</span>\n         <span class=\"synSpecial\">(</span>compile-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         primitive-branch\n         <span class=\"synSpecial\">(</span>end-with-linkage\n          linkage\n          <span class=\"synSpecial\">(</span>make-instruction-sequence\n           <span class=\"synSpecial\">'(</span>proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                     <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)))))))</span>\n       after-call<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 手続きの採用</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-proc-appl target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>\n         <span class=\"synComment\">;; linkageがreturnでなければlinkageにはいったlabelが値を返す場所</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))</span> <span class=\"synComment\">;計算した値をvalに入れたらこのlinkageにジャンプ</span>\n            <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))</span>\n        <span class=\"synComment\">;; targetがvalでないのでproc-returnでtargetにvalを代入しないといけない</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-return <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>proc-return<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>make-instruction-sequence\n            <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n            <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-return<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">,</span>proc-return\n              <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;targetがvalでないので，ここでtargetにvalを代入</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))))))</span>\n        <span class=\"synComment\">;; targetがvalでreturnなら計算の後，continueに行けばいいので余計な処理はない</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;return linkage, target not val -- COMPILE&quot;</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 命令列の組み合わせ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>registers-needed s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>registers-modified s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>statements s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>needs-register? seq reg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> reg <span class=\"synSpecial\">(</span>registers-needed seq<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>modifies-register? seq reg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> reg <span class=\"synSpecial\">(</span>registers-modified seq<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; neededとmodifiedをうまく合成して新しい命令列を作る</span>\n<span class=\"synComment\">;;; これは人つながりの命令にする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append-instruction-sequences <span class=\"synSpecial\">.</span> seqs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append-2-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>make-instruction-sequence\n     <span class=\"synComment\">;; needed</span>\n     <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-needed seq2<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq1で変更してseq2がそれを必要とする</span>\n                                  <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;ならseq1の時点では必要ない</span>\n     <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>registers-modified seq2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>statements seq2<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append-seq-list seqs<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seqs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>empty-instruction-sequence<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>append-2-sequences <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seqs<span class=\"synSpecial\">)</span>  <span class=\"synComment\">;nullじゃなければこっち．</span>\n                            <span class=\"synSpecial\">(</span>append-seq-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seqs<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>append-seq-list seqs<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; 集合演算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-union s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-difference s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; regsの中にseq1で変更してseq2でしようするレジスタがあれば</span>\n<span class=\"synComment\">;;; seq1の前後でsave, restoreする命令を作る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;first-regが</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>needs-register? seq2 first-reg<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq2に必要なレジスタで</span>\n                 <span class=\"synSpecial\">(</span>modifies-register? seq1 first-reg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;seq1が変更するレジスタなら</span>\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>make-instruction-sequence\n              <span class=\"synComment\">;; needs ここでsaveするのでfirst-regが必要になるのでlist-union</span>\n              <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; modify saveしてのseq2の前にrestoreするのでseq2から見ればfirst-reg変更無し</span>\n              <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; statements 条件を満たすfirst-regの場合はseq1をsaveとrestoreで挟む</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n             seq2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span> seq1 seq2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; seqとbodyとbody-seqをつなげる．neededとmodifiedはseqのまま</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tack-on-instruction-sequence seq body-seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-instruction-sequence\n   <span class=\"synSpecial\">(</span>registers-needed seq<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>registers-modified seq<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>statements seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>statements body-seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; neededとmodifiedは和集合を取る．</span>\n<span class=\"synComment\">;;; ifのconsequentとalternative, や</span>\n<span class=\"synComment\">;;; 手続きのcompiled, primitiveの違いのようにどちらかだけが実行されるようなラベルを作るときに使う</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parallel-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-instruction-sequence\n   <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>registers-needed seq2<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>registers-modified seq2<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>statements seq2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 5.5.5 翻訳系"},{"data":{"title":"SICP 問題 5.37","published":"2016/02/07","tags":["scheme","SICP"]},"content":"\n<p>preservingを修正して常にsaveとrestoreをさせ，修正前と後を比較する．</p>\n\n<p>修正前</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;first-regが</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>needs-register? seq2 first-reg<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq2に必要なレジスタで</span>\n                 <span class=\"synSpecial\">(</span>modifies-register? seq1 first-reg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;seq1が変更するレジスタなら</span>\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>make-instruction-sequence\n              <span class=\"synComment\">;; needs ここでsaveするのでfirst-regが必要になるのでlist-union</span>\n              <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; modify saveしてのseq2の前にrestoreするのでseq2から見ればfirst-reg変更無し</span>\n              <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; statements 条件を満たすfirst-regの場合はseq1をsaveとrestoreで挟む</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n             seq2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span> seq1 seq2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>必要ないsaveやrestoreは一切されない，賢いpreserving．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (compile\n       &#39;(define (f a b)\n          (+ a b))\n       &#39;val &#39;next)\n((env)\n (val)\n ((assign val (op make-compiled-procedure) (label entry34) (reg env))\n  (goto (label after-lambda35))\n  entry34\n  (assign env (op compiled-procedure-env) (reg proc))\n  (assign env (op extend-environment) (const (a b)) (reg argl) (reg env))\n  (assign proc (op lookup-variable-value) (const +) (reg env))\n  (assign val (op lookup-variable-value) (const a) (reg env))\n  (assign argl (op list) (reg val))\n  (assign val (op lookup-variable-value) (const b) (reg env))\n  (assign val (op list) (reg val))\n  (assign argl (op append) (reg argl) (reg val))\n  (test (op primitive-procedure?) (reg proc))\n  (branch (label primitive-branch36))\n  compiled-branch37\n  (assign val (op compiled-procedure-entry) (reg proc))\n  (goto (reg val))\n  primitive-branch36\n  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))\n  (goto (reg continue))\n  after-call38\n  after-lambda35\n  (perform (op define-variable!) (const f) (reg val) (reg env))\n  (assign val (const ok))\n  ))</pre>\n\n\n<p>修正後</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n         seq2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f a b<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>+ a b<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>continue env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;まずcontinueを必要とするようになっている．</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでsave continueするから</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでさらにsave continueしている．</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry41<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;ここで復帰．</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda42<span class=\"synSpecial\">))</span>         <span class=\"synComment\">;ここまでで無駄なsave 3. 無駄なrestore 1</span>\n  entry41\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでまたsave continue</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;env</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;continue</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save p</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;save e</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save a</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore a</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore p</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch43<span class=\"synSpecial\">))</span>\n  compiled-branch44\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch43\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call45\n  after-lambda42\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e 最初のenv</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;最初のcontinue</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.37"},{"data":{"title":"SICP 問題 5.36","published":"2016/02/07","tags":["scheme","SICP"]},"content":"\n<p>本文の被<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の適用順はoperandをreverseしてから連結していくので右から左になっている．<br/>\nこれを左から右に変更する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 最初のreverseをなくす</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>construct-arglist operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> operand-codes<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-instruction-sequence\n       <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">()))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-to-get-last-arg\n             <span class=\"synSpecial\">(</span>append-instruction-sequences\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>make-instruction-sequence\n               <span class=\"synSpecial\">'(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n            code-to-get-last-arg\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n             code-to-get-last-arg\n             <span class=\"synSpecial\">(</span>code-to-get-rest-args\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>code-to-get-rest-args operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-for-next-arg\n         <span class=\"synSpecial\">(</span>preserving\n          <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>make-instruction-sequence\n           <span class=\"synSpecial\">'(</span>val argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'((</span>assign val <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;valをリスト化する</span>\n             <span class=\"synSpecial\">(</span>assign argl\n                     <span class=\"synSpecial\">(</span>op append<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))))</span> <span class=\"synComment\">;appendで順番通りにつなげる</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n        code-for-next-arg\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n         code-for-next-arg\n         <span class=\"synSpecial\">(</span>code-to-get-rest-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-cods<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>問題5.35で求めた式を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>してみる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>+ x <span class=\"synSpecial\">(</span>g <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry23<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda24<span class=\"synSpecial\">))</span>\n  entry23\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;元はgからだった</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const g<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;次の(g ...)にいく．</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;左の引数のxから</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>                <span class=\"synComment\">;次に2</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch25<span class=\"synSpecial\">))</span>\n  compiled-branch26\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call27<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch25\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call27\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch28<span class=\"synSpecial\">))</span>\n  compiled-branch29\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call30<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch28\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call30\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch31<span class=\"synSpecial\">))</span>\n  compiled-branch32\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch31\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call33\n  after-lambda24\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>appendは一つ目のリストの末尾まで辿ってから後ろにリストをつなげていくので非効率になる．<br/>\nよってこの場合効率を考えるなら右から左に評価するほうがよい．</p>\n\n","slug":"SICP 問題 5.36"},{"data":{"title":"SICP 問題 5.35","published":"2016/02/07","tags":["scheme","SICP"]},"content":"\n<p>本文の図5.18 の翻訳出力の例から翻訳前の式を導く．</p>\n\n<p>答え</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>+ x <span class=\"synSpecial\">(</span>g <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>実行結果（整形済み）</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry12<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda13<span class=\"synSpecial\">))</span>\n  entry12\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const g<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch14<span class=\"synSpecial\">))</span>\n  compiled-branch15\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call16<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch14\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call16\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch17<span class=\"synSpecial\">))</span>\n  compiled-branch18\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call19<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch17\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call19\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch20<span class=\"synSpecial\">))</span>\n  compiled-branch21\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch20\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call22\n  after-lambda13\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>本文のコードとlabelの番号以外は一致．</p>\n\n","slug":"SICP 問題 5.35"},{"data":{"title":"SICP 問題 5.34","published":"2016/02/06","tags":["scheme","SICP"]},"content":"\n<p>反復的階乗手続きを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>し，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>版との本質的な違いを示せ．<br/>\n　<br/>\n反復的階乗手続きの内容を説明する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>&gt; counter n<span class=\"synSpecial\">)</span>\n          product\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>* counter product<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>+ counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>して，説明をつけた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>\n  <span class=\"synComment\">;; 手続きを構成し，本体のコードを飛び越す</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry18<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda19<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; factorialの呼び出しの開始．</span>\n  entry18\n  <span class=\"synComment\">;; procの環境をenvに代入</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; factorialの実引数をfactorialの引数nと対応づけて環境を拡張</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 内部定義に進む．valを(compiled-procedure entry20 env)の形にする．</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry20<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda21<span class=\"synSpecial\">))</span>\n\n  entry20\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; product counterをそれぞれ1に束縛した環境を作る</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>product counter<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 手続き本体の開始</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)の計算</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch25<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここに飛ぶ．</span>\n  compiled-branch26\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call27<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch25\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)の次</span>\n  after-call27                          <span class=\"synComment\">;valには(&gt; couner n)の値が入っている</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;手続き本体のenvとcontinueを復帰</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch23<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)がtrueの時，productの値をvalに入れて，大本のcontinueへ．</span>\n  true-branch22\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)がfalseの時</span>\n  false-branch23\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; (+ counter 1)を計算するためにcontinue, proc, envを退避</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; (+ counter 1)の計算開始</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch31<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n  compiled-branch32\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call33<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (+ counter 1)を実際に計算</span>\n  primitive-branch31\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call33\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>     <span class=\"synComment\">;arglに今計算した値をリストにして代入</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;大本の環境の復帰</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;(+ counter 1)の結果のリストを退避</span>\n  <span class=\"synComment\">;; (* counter product)の計算開始</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch28<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n  compiled-branch29\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call30<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (* counter product)を実際に計算</span>\n  primitive-branch28\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call30\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;(+ counter 1)の復帰</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;arglに((* counter product) (+ counter 1))を代入</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;iterを復帰</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;呼び出し元に返るcontinueを復元</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch34<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ジャンプしない</span>\n  compiled-branch35\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;entry20へのラベルをvalに代入</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch34\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call36\n  after-if24\n\n  <span class=\"synComment\">;; entry18からジャンプ</span>\n  after-lambda21\n  <span class=\"synComment\">;; iterを(compiled-procedure entry20 env)と定義．</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; ここから(iter 1 1)の処理．</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; arglは(1)になる</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl =&gt; (1 1)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;=&gt;false</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch37<span class=\"synSpecial\">))</span>\n\n  compiled-branch38\n  <span class=\"synComment\">;; valにiterに対応付けられてるラベルを代入する</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; entry20へgoto</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  primitive-branch37\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call39\n  after-lambda19\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>反復的階乗計算では次の繰り返しに行く前に引数の計算が行われ，環境や継続はすべて大本の状態に復元してから次の繰り返しに向かう．<br/>\n前の問題で見たように<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算ではprocとenvを退避させ，さらに戻ってくる場所をcontinueによって保持し続けないといけない．<br/>\nそのために繰り返しが増えるほどにスタックが深くなっていく．</p>\n\n","slug":"SICP 問題 5.34"},{"data":{"title":"SICP 問題 5.33","published":"2016/02/06","tags":["scheme","SICP"]},"content":"\n<p>以下の２つの翻訳結果を比較してその相違を説明する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>一つ目を出力して整形したのが以下になる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n  entry1\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n  compiled-branch7\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch6\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call8\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n  true-branch3\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  false-branch4\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch9<span class=\"synSpecial\">))</span>\n  compiled-branch10\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call11<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch9\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call11\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch12<span class=\"synSpecial\">))</span>\n  compiled-branch13\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call14<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch12\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call14\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch15<span class=\"synSpecial\">))</span>\n  compiled-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch15\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call17\n  after-if5\n  after-lambda2\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを5.33a.scmとして保存し，二つ目を5.33b.scmとして保存し，diffを取った．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>--- 5.33a.scm    2016-02-06 19:25:30.000000000 +0900\n+++ 5.33b.scm   2016-02-06 19:26:35.000000000 +0900\n@@ -32,9 +32,7 @@\n   (assign proc (op lookup-ariable-value) (const *) (reg env))\n   (save continue)\n   (save proc)\n-  (assign val (op lookup-ariable-value) (const n) (reg env))\n-  (assign argl (op list) (reg val))\n-  (save argl)\n+  (save env)\n   (assign proc (op lookup-ariable-value) (const factorial) (reg env))\n   (save proc)\n   (assign proc (op lookup-ariable-value) (const -) (reg env))\n@@ -62,7 +60,9 @@\n   primitive-branch12\n   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))\n   after-call14\n-  (restore argl)\n+  (assign argl (op list) (reg val))\n+  (restore env)\n+  (assign val (op lookup-ariable-value) (const n) (reg env))\n   (assign argl (op cons) (reg val) (reg argl))\n   (restore proc)\n   (restore continue)</pre>\n\n\n<p>construct-arglistでoperandをまずreverseしているので，<br/>\n書かれた引数とは逆順に処理していくことになる．</p>\n\n<p>一箇所目のdiffはfalse-branch4の中，二箇所目はprimitive-brach12にある．<br/>\n5.33aはfalse-branchでまずnの値を求める．<br/>\nそして値をリスト化し，arglに代入してsaveする．<br/>\nprimitive-branchでvalの値は(factorial (- n 1))を翻訳したものになっている．<br/>\nそこでarglをrestoreして，valとconsしてarglを完成させている．<br/>\n　<br/>\n一方5.33bはまずenvを保存するところから始まる．<br/>\n(factorial (- n 1))を評価するときに環境が変更されたら困るからだ．<br/>\nそしてprimitive-branchに来たところで5.33aと同じく，valの値は(factorial (- n 1))になっている．<br/>\n5.33bはvalをリスト化してarglに保存する．<br/>\nそして環境を(factorial (- n 1))を評価する前の状態に戻し，nを評価する．<br/>\n評価した値とarglをconsしてarglは完成する．<br/>\n　</p>\n\n<p>一箇所目は5.33aも5.33bも一回saveし，二箇所目で一回restoreする．<br/>\n5.33bは一箇所目で二回assignし，5.33aは二箇所目で二回assignする．<br/>\nsave箇所が同じでassignする場所が違うだけなので，効率はかわらない．</p>\n\n","slug":"SICP 問題 5.33"},{"data":{"title":"SICP 問題 5.32","published":"2016/02/04","tags":["scheme","SICP"]},"content":"\n<p>a: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>が記号である場合の組み合わせの式を別のクラスと認識し，そういう式を最適化する．</p>\n\n<p>operatorがvariableであればenvをsaveしない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-symbol-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-symbol-operator\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-symbol-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-symbol-operator\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\nb: 評価器にこのような翻訳系の最適化のすべてを組み込むことができ，翻訳系の利点をすべて除けるという考えについて<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E0%BC%A1\">逐次</a>評価する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>ではどうしても翻訳系ほどの最適化は出来ない．</p>\n\n","slug":"SICP 問題 5.32"},{"data":{"title":"SICP 問題 5.31","published":"2016/02/04","tags":["scheme","SICP"]},"content":"\n<p>どのタイミングで以下の式を評価する際にどのタイミング何を退避して復帰するか</p>\n\n<p>(f 'x 'y)<br/>\n'x 'yはシンボルなのでこれ以上の評価が必要ないので<br/>\n何も退避しなくてよい．<br/>\n　<br/>\n((f) 'x 'y)<br/>\n'x 'yがシンボルなので上と同じく退避の必要ない．<br/>\n　<br/>\n(f (g 'x) y)<br/>\nfを評価する前にenvを退避する．<br/>\n評価が終わればenvは復帰，procとenvとarglを退避して(g 'x) を評価．<br/>\nyを評価する前にすべて復帰し，arglを退避して評価．<br/>\narglを復帰して適用.<br/>\n　<br/>\n(f (g 'x) 'y)<br/>\nfの評価の前にenvを退避．<br/>\nその後，envを復帰，procを退避し， (g 'x)を評価<br/>\n評価が終わればprocを復帰し，適用する．</p>\n\n","slug":"SICP 問題 5.31"},{"data":{"title":"SICP 問題 5.30b","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>primitive-procedure のエラーもECEVAL上で扱えるようにする．  <br/>\nまず基盤の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>から手続きを登録するときに事前チェックするように変更する．  <br/>\nもしエラーになるような引数が与えられた時には('failed . '<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-syntax-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>)を返す．  <br/>\nprimitive-applyでvalにapplyした値を代入した後primitive-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>でチェック．  <br/>\ncarが'failedならprimitive-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>にジャンプしてvalの値を'<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-syntax-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>にしてsignal-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>にジャンプ．<br/>\n'<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-syntax-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>を出力した後にREPLの最初に戻り，stackはイニシャライズされる．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; ecevalの評価の前にこれを評価する．</span>\n<span class=\"synComment\">;;; primitive-procedure用のerrorチェック</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;;ここでprimitive-procedureは一度チェックしてから使う手続きに変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>car-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cdr-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cons-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null?\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>null-syntax-error<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>=\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>=-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">)</span>\n                                                          y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">=</span> lst<span class=\"synSpecial\">))</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>/-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">/</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&gt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&gt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&gt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&lt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&lt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>     ;; eceval中で\n     primitive-apply\n     (assign val (op apply-primitive-procedure)\n             (reg proc)\n             (reg argl))\n     (test (op primitive-error?) (reg val))        ;errorチェック\n     (branch (label primitive-error))\n     (restore continue)\n     (goto (reg continue))\n\n     primitive-error\n     (assign val (op cdr) (reg val))\n     (goto (label signal-error))</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>/1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\nunknown-variable-error\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">)</span>\ncons-syntax-error\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n\na\nunknown-variable-error\n</pre>\n\n\n<p>全部は網羅していないがこのようにECEVALのREPLから離れずにエラーが返ってくる．  <br/>\n　<br/>\n最後の全文を掲載する．　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 初めてassignするレジスタを登録していくタイプ</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arg-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>*unassigned*-variable-error\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>unknown-variable-error\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>*unassigned*-variable-error val<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>unknown-variable-error val<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">2</span> x <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-error? <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>variable-error? <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; primitive-procedure用のerrorチェック</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;;ここでprimitive-procedureは一度チェックしてから使う手続きに変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>car-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cdr-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cons-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null?\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>null-syntax-error<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>=\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>=-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">)</span>\n                                                          y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">=</span> lst<span class=\"synSpecial\">))</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>/-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">/</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&gt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&gt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&gt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&lt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&lt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and? and?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and-&gt;if and-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or? or?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or-&gt;if or-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*? let*?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*-&gt;nested-lets let*-&gt;nested-lets<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec? letrec?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec-&gt;let letrec-&gt;let<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable-error? variable-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-error? lambda-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-error? begin-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-error? if-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-error? let-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-error? assignment-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-error? definition-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-error? primitive-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op and?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-and<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op or?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-or<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let*?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let*<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op letrec?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-letrec<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;valにエラーコードが入っているのでそのままsignal-errorへ</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label lambda-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;lambda-errorに飛び，valにエラーコードを入れる</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     lambda-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const lambda-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     ev-appl-operand-loop\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     primitive-apply\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;errorチェック</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     primitive-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label begin-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     begin-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const begin-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label if-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     if-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const if-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-and\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op and-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-or\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op or-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-let*\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let*-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let*-&gt;nested-lets<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let*-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let*-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-letrec\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op letrec-&gt;let<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label assignment-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     assignment-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const set!-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label definition-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     definition-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const definition-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.30b"},{"data":{"title":"SICP 問題 5.30a","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>評価プロセスでのエラーを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>でなくecevalで捕まえてREPLを継続する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 初めてassignするレジスタを登録していくタイプ</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arg-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;　ここから新しく追加した手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>*unassigned*-variable-error\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>unknown-variable-error\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>*unassigned*-variable-error val<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>unknown-variable-error val<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">2</span> x <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-error? <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>variable-error? <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and? and?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and-&gt;if and-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or? or?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or-&gt;if or-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*? let*?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*-&gt;nested-lets let*-&gt;nested-lets<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec? letrec?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec-&gt;let letrec-&gt;let<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable-error? variable-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-error? lambda-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-error? begin-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-error? if-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-error? let-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-error? assignment-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-error? definition-error?<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op and?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-and<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op or?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-or<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let*?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let*<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op letrec?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-letrec<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;valにエラーコードが入っているのでそのままsignal-errorへ</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label lambda-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;lambda-errorに飛び，valにエラーコードを入れる</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     lambda-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const lambda-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     ev-appl-operand-loop\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     primitive-apply\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label begin-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     begin-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const begin-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label if-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     if-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const if-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-and\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op and-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-or\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op or-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-let*\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let*-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let*-&gt;nested-lets<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let*-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let*-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-letrec\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op letrec-&gt;let<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label assignment-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     assignment-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const set!-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label definition-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     definition-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const definition-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.30a"},{"data":{"title":"SICP 問題 5.29","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>a: n≧2の時のfib(n)を計算するのに必要なスタックの最大深さのnを使った式を与えよ．<br/>\nb: 同じ条件でfib(n)のプッシュの総数を求める</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">0</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">72</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">128</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">408</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">688</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">8</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1136</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">13</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1864</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">21</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3040</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">34</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4944</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>a: 最大深さは5n+3<br/>\nb: プッシュ総数S(n)=S(n-1)+S(n-2)+40<br/>\nオーバーヘッド定数kは40.</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160203165046\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160203/20160203165046.jpg\" alt=\"f:id:wat-aro:20160203165046j:image\" title=\"f:id:wat-aro:20160203165046j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 5.29"},{"data":{"title":"SICP 問題 5.28","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>ev-sequenceで行っていた末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化をやめた場合のfactorialの比較．<br/>\n最適化をやめると反復的factorialはプッシュ回数が37n+1, 最大深さが3n+11.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的factorialはそれぞれ，34n-16, 8n+3となった．<br/>\n末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がないと末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に書いても最大深さが線形に成長する．<br/>\n末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がある場合は\n反復的factorial 35n+34, 10\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的factorial 32n-16, 5n+3.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> counter n<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> counter product<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">75</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">17</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">112</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">149</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">186</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">26</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">223</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">29</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">260</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">32</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">297</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">35</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">334</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">371</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">41</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">408</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">44</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial-recur n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial-recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">11</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">52</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">19</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">86</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">27</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">120</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">35</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">154</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">188</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">51</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">222</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">59</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">256</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">67</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">290</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">75</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">324</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">83</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n","slug":"SICP 問題 5.28"},{"data":{"title":"SICP 問題 5.27","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>5.26と同じことを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算で．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial-recur n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial-recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">80</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">112</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">144</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">176</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">208</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">272</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">304</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ回数は32n-16, 最大深さは5n+3.<br/>\n反復的階乗計算はプッシュ回数が35n+34, 最大深さ10だったので，\nプッシュ回数は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算のほうが少なく，最大深さは反復的階乗計算のほうが少ない．<br/>\n階乗計算は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なほうが早く計算できるがその分メモリの消費量が大きくなり，<br/>\n反復的計算のほうが時間は少しだけかかるがメモリの消費量は定数に抑えられる．</p>\n\n","slug":"SICP 問題 5.27"},{"data":{"title":"SICP 問題 5.26","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>監視つきスタックを使い，評価器の末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的特性を検討する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> counter n<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> counter product<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">34</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">69</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">104</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">139</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">174</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">209</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">244</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">279</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">314</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">349</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">384</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>この末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>階乗計算のプッシュ回数は35n+34，最大深さは10と推定できる．</p>\n\n","slug":"SICP 問題 5.26"},{"data":{"title":"SICP 問題 5.25","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>4.2節の遅延評価器に基づいた正規順序の評価が使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 初めてassignするレジスタを登録していくタイプ</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arg-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; 正規順序の評価器用の機械演算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk? obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-value evaluated-thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-env thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-exp thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> thunk<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and? and?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and-&gt;if and-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or? or?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or-&gt;if or-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*? let*?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*-&gt;nested-lets let*-&gt;nested-lets<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec? letrec?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec-&gt;let letrec-&gt;let<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk? thunk?<span class=\"synSpecial\">)</span>          <span class=\"synComment\">;thunk?を追加</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-car! <span class=\"synIdentifier\">set-car!</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-cdr! <span class=\"synIdentifier\">set-cdr!</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>evaluated-thunk? evaluated-thunk?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-value thunk-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>list <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-env thunk-env<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-exp thunk-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environent procedure-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op and?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-and<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op or?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-or<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let*?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let*<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op letrec?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-letrec<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n\n\n     delay-it\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     actual-value\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label force-it<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     force-it\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op thunk?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-thunk<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op evaluated-thunk?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-evaluated<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-thunk\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label set-evaluated-thunk<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op thunk-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op thunk-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     <span class=\"synComment\">;; メモ化する．</span>\n     set-evaluated-thunk\n     <span class=\"synComment\">;; (evaluated value)の形にする．</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;valがsaveした値をexpで受け取る</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-cdr!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-car!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const evaluated-thunk<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-evaluated\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;ここのrestoreが抜けてるのがわからずにずっとデバグ</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op thunk-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label list-of-arg-values<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operands\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n\n     list-of-arg-values\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label list-of-arg-values<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-did-operands<span class=\"synSpecial\">))</span>\n\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label list-of-delayed-args<span class=\"synSpecial\">))</span>\n\n     list-of-delayed-args\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label delay-last-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label delay-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label delay-it<span class=\"synSpecial\">))</span>\n\n     delay-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label list-of-delayed-args<span class=\"synSpecial\">))</span>\n\n     delay-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label delay-appl-accum-last-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label delay-it<span class=\"synSpecial\">))</span>\n\n     delay-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label delay-appl-did-operands<span class=\"synSpecial\">))</span>\n\n     delay-appl-did-operands\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-and\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op and-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-or\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op or-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let*\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let*-&gt;nested-lets<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-letrec\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op letrec-&gt;let<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n            y\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>c d<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c d<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless condition usual-value exceptional-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> condition exceptional-value usual-value<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>try <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n</pre>\n\n\n","slug":"SICP 問題 5.25"},{"data":{"title":"SICP 問題 5.24","published":"2016/02/02","tags":["scheme","SICP"]},"content":"\n<p>condを派生式ではなく構文として実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; unevがcondの本体を保存．expはevalされる．</span>\n ev-cond\n   <span class=\"synSpecial\">(</span>assing unev <span class=\"synSpecial\">(</span>op cond-clauses<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;((p1 e1) (p2 e2) ...)の形にする．</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;cond後の継続をsave</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;現在の環境をsave</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;ev-cond-loopで復元できるようにsave</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n\n ev-cond-test\n   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevの内容がexpにコピーされる．</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-null<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;(p1 e1)の形に．</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond-else-clause?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>        <span class=\"synComment\">;(else e1)なら</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-else<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;ev-cond-elseへ</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-cond-loop<span class=\"synSpecial\">))</span> <span class=\"synComment\">;eval-dispatchの後ev-cond-loopに戻れるように代入</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-value<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;環境を元に戻す</span>\n   <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;残りのclausesへ</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n\n\n ev-cond-else\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence-&gt;exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-value\n   <span class=\"synComment\">;; expはpredicateを評価した値になってる．</span>\n   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevが持っていたcond本体をexpがrestore</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synComment\">;;((p1 e1 e1' ...) (p2 e2 e2' ...) ...)という形なのでcarを取る．</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>  <span class=\"synComment\">;(e1 e1' ...)にする．</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence-&gt;exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-null\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const cond-null-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c d e f<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\ncond-null-error\n</pre>\n\n\n","slug":"SICP 問題 5.24"},{"data":{"title":"SICP 問題 5.23","published":"2016/02/02","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシン上に実装した評価器でcondとletを実装する．<br/>\ncond->ifのような構文変換器が機械演算として仮定してよいので，let->lambdaも使用する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>eval-dispatch\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>          <span class=\"synComment\">;cond?を追加</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n ev-cond\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-let\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.23"},{"data":{"title":"SICP 5.4.4 積極制御評価器","published":"2016/02/02","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 事前に登録したレジスタを使用するのではなく，初めてassignするレジスタを登録していく(問題5.13).</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoiin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arglist <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; 積極制御評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     ev-appl-operand-loop\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     primitive-apply\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 5.4.4 積極制御評価器"},{"data":{"title":"SICP 問題 5.22","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n<p>appendとappend!を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシン上に実装する．<br/>\n　<br/>\nappend</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n      y\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">append</span>\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>x y val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label append-done<span class=\"synSpecial\">))</span>\n     x-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n     after-x\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n     construct\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op cons<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     append-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>　<br/>\nappend!</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append! x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>last-pair x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> append!\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>x y temp<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-cdr! <span class=\"synIdentifier\">set-cdr!</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n     x-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save temp<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n     after-loop\n       <span class=\"synSpecial\">(</span>restore temp<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-cdr!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n     append!-done <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start append!<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents append! <span class=\"synSpecial\">'</span>x<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.22"},{"data":{"title":"SICP 問題 5.21","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>で書いた手続きの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシンを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; a</span>\n<span class=\"synComment\">;;; 再帰的count-leaves</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-leaves tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>count-leaves <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>coutn-leaves <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> recur-count-leaves-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>tree val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pair? <span class=\"synIdentifier\">pair?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label count-leaves-done<span class=\"synSpecial\">))</span>\n     car-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label null<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op pair?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label pair<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     pair\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-car<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-car\n       <span class=\"synSpecial\">(</span>restore tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-cdr<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-cdr\n       <span class=\"synComment\">;; valの値を一時的にtreeに入れて，後に計算する．goto先はaftercount-carなので</span>\n       <span class=\"synComment\">;; そこでtreeはrestoreされる．</span>\n       <span class=\"synSpecial\">(</span>restore tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     null\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     count-leaves-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! recur-count-leaves-machine <span class=\"synSpecial\">'</span>tree <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start recur-count-leaves-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents recur-count-leaves-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">4</span>\ngosh&gt; recur-count-leaves-machine\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! recur-count-leaves-machine <span class=\"synSpecial\">'</span>tree <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start recur-count-leaves-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents recur-count-leaves-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; b</span>\n<span class=\"synComment\">;;; カウンタを陽に持つ再帰的count-leaves</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-leaves tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-iter tree n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>count-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>count-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>count-iter tree <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count-n-leaves\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>tree continue n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pair? <span class=\"synIdentifier\">pair?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label count-leaves-done<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n     car-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label null<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op pair?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label pair<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     pair\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-car<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-car\n       <span class=\"synSpecial\">(</span>restore tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-cdr<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-cdr\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     <span class=\"synComment\">;; branchは(reg continue)が出来ないので，一度ここに飛ばしてからcontinueに飛ぶ</span>\n     null\n      <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     count-leaves-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! count-n-leaves <span class=\"synSpecial\">'</span>tree <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start count-n-leaves<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents count-n-leaves <span class=\"synSpecial\">'</span>n<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\n</pre>\n\n\n","slug":"SICP 問題 5.21"}],"currentPage":4,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}