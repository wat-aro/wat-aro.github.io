{"pageProps":{"post":{"data":{"title":"Scheme修行のtryについて","published":"2016/06/04","tags":["gauche","scheme"]},"content":"\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41t9gbUu52L._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Scheme修行\" title=\"Scheme修行\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\">Scheme修行</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman and Matthias Felleisen,元吉文男,横山晶一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2011/06/15</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 3人 <span class=\"hatena-asin-detail-label\">クリック</span>: 46回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274068536/wataro-22\" target=\"_blank\">この商品を含むブログ (10件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>p89の欄外で補足されているtryについて．<br/>\nこれが出てきたのは <code>rember1*</code> の実装の中です．<br/>\n<code>rember1*</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a> aとリストlを引数に取ります． <br/>\nlの中で最初に出てきたaと同じアトムを削除して新しいリストを返す手続きです．</p>\n\n<p>tryを使う前の実装は以下になります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? <span class=\"synSpecial\">(</span>let/cc oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)))</span>\n        l\n        <span class=\"synSpecial\">(</span>rm a l <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> <span class=\"synSpecial\">())))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-car\n             <span class=\"synSpecial\">(</span>let/cc oh\n               <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? new-car<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> new-car <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n<p>リストの中で最後まで探し終わってlがnullになれば継続に<code>(quote no)</code>を渡します．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>であればcarにリストはないのでcdrを探します．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に探して，aと同じものがあれば，それを取り除いた残りのリストを返します．<br/>\n取り除くのは最初に見つかったものだけです．<br/>\nこのコードをtryを使うとこうなります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>try oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)</span> l<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span>try oh2\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>tryについてはここでページ欄外に</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>try x <span class=\"synError\">α</span> <span class=\"synError\">β</span><span class=\"synSpecial\">)</span>\n<span class=\"synIdentifier\">=</span>\n<span class=\"synSpecial\">(</span>let/cc success\n  <span class=\"synSpecial\">(</span>let/cc x\n    <span class=\"synSpecial\">(</span>success a<span class=\"synSpecial\">))</span>\n  b<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>と書かれています．<br/>\nここがなかなかわかりませんでした．</p>\n\n<p>まず中のlet/ccから考えます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>let/cc x\n  <span class=\"synSpecial\">(</span>success <span class=\"synError\">α</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>α内で継続xが使われているはずです．<br/>\n継続xに値γが渡されると，<code>(let/cc x γ)</code>となり，次の計算βに進みます．</p>\n\n<p>継続xに値が渡されない場合はαの値が継続successに渡され，そこで計算が終了しこの式の値はαとなります．<br/>\nつまり，tryはα内で継続xに値が渡されればβの値が返り，<br/>\n渡されなければαの値が返るわけです．<br/>\n元の式で継続に値が渡されたのを判別するために<code>(quote no)</code>を継続に渡して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>?で判別していたものを<br/>\n継続が返ってくるかこないかで判別できるようになっています．</p>\n\n<p>継続難しいです．<br/>\nでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>修行で少しずつわかってきた気がします．</p>\n\n","slug":"Scheme修行のtryについて"},"content":"<p></p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41t9gbUu52L._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Scheme修行\" title=\"Scheme修行\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\">Scheme修行</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman and Matthias Felleisen,元吉文男,横山晶一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2011/06/15</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 3人 <span class=\"hatena-asin-detail-label\">クリック</span>: 46回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274068536/wataro-22\" target=\"_blank\">この商品を含むブログ (10件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div><p></p>\n<p>p89の欄外で補足されているtryについて．<br>\nこれが出てきたのは <code>rember1*</code> の実装の中です．<br>\n<code>rember1*</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a> aとリストlを引数に取ります． <br>\nlの中で最初に出てきたaと同じアトムを削除して新しいリストを返す手続きです．</p>\n<p>tryを使う前の実装は以下になります．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? <span class=\"synSpecial\">(</span>let/cc oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">        l\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span>rm a l <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> <span class=\"synSpecial\">())))))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-car\n</span><span class=\"code-line\">             <span class=\"synSpecial\">(</span>let/cc oh\n</span><span class=\"code-line\">               <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? new-car<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                  <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> new-car <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))))))</span>\n</span></code></pre>\n<p>リストの中で最後まで探し終わってlがnullになれば継続に<code>(quote no)</code>を渡します．<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>であればcarにリストはないのでcdrを探します．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に探して，aと同じものがあれば，それを取り除いた残りのリストを返します．<br>\n取り除くのは最初に見つかったものだけです．<br>\nこのコードをtryを使うとこうなります．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>try oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)</span> l<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n</span><span class=\"code-line\">     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n</span><span class=\"code-line\">      <span class=\"synSpecial\">(</span>try oh2\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh2<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\">                 <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">)))))))</span>\n</span></code></pre>\n<p>tryについてはここでページ欄外に</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>try x <span class=\"synError\">α</span> <span class=\"synError\">β</span><span class=\"synSpecial\">)</span>\n</span><span class=\"code-line\"><span class=\"synIdentifier\">=</span>\n</span><span class=\"code-line\"><span class=\"synSpecial\">(</span>let/cc success\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>let/cc x\n</span><span class=\"code-line\">    <span class=\"synSpecial\">(</span>success a<span class=\"synSpecial\">))</span>\n</span><span class=\"code-line\">  b<span class=\"synSpecial\">)</span>\n</span></code></pre>\n<p>と書かれています．<br>\nここがなかなかわかりませんでした．</p>\n<p>まず中のlet/ccから考えます．</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink=\"\"><code class=\"code-highlight\"><span class=\"code-line\"><span class=\"synSpecial\">(</span>let/cc x\n</span><span class=\"code-line\">  <span class=\"synSpecial\">(</span>success <span class=\"synError\">α</span><span class=\"synSpecial\">))</span>\n</span></code></pre>\n<p>α内で継続xが使われているはずです．<br>\n継続xに値γが渡されると，<code>(let/cc x γ)</code>となり，次の計算βに進みます．</p>\n<p>継続xに値が渡されない場合はαの値が継続successに渡され，そこで計算が終了しこの式の値はαとなります．<br>\nつまり，tryはα内で継続xに値が渡されればβの値が返り，<br>\n渡されなければαの値が返るわけです．<br>\n元の式で継続に値が渡されたのを判別するために<code>(quote no)</code>を継続に渡して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>?で判別していたものを<br>\n継続が返ってくるかこないかで判別できるようになっています．</p>\n<p>継続難しいです．<br>\nでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>修行で少しずつわかってきた気がします．</p>"},"__N_SSG":true}