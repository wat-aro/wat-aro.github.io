{"pageProps":{"title":"json で nom のお勉強","published":"2022/05/16","tags":["Rust","nom"],"content":"<p>旧ブログの <code>movable type</code> を <code>markdown</code> に変換したい。<br>\n<a href=\"https://github.com/Geal/nom\">nom</a> でパースしようと思ったが Readme を読んでもいまいちしっくりこない。<br>\nparsec と同じようにはできませんか。\nとりあえず練習がてら何かをパースしてみる。<br>\n仕様があるほうが嬉しいので探してみると <a href=\"https://www.json.org/json-ja.html\">json</a> がよさそうだった。<br>\nまずは <code>digits</code> を書いてみた。<br>\n<a href=\"https://docs.rs/nom/latest/nom/character/complete/fn.digit1.html\">digit1</a> を使えば終わりなのだが、それでは練習にならないため定義通りに実装。</p>\n<p><a href=\"https://github.com/wat-aro/wjson\">https://github.com/wat-aro/wjson</a></p>\n<pre class=\"language-rust\"><code class=\"language-rust code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">zero</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">IResult</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u64</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>c<span class=\"token closure-punctuation punctuation\">|</span></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">onenine</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">IResult</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u64</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">        <span class=\"token function\">alt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">            <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">        <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>c<span class=\"token closure-punctuation punctuation\">|</span></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">digit</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">IResult</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u64</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token function\">alt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> onenine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">digits</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">IResult</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u64</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">many1</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">let</span> str_vec<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>d<span class=\"token closure-punctuation punctuation\">|</span></span> d<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">,</span> str_vec<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>まだ <code>Rust</code> を書き慣れていないけれど楽しい。</p>","slug":"study-nom-by-json","rawContent":"\n旧ブログの `movable type` を `markdown` に変換したい。  \n[nom](https://github.com/Geal/nom) でパースしようと思ったが Readme を読んでもいまいちしっくりこない。  \nparsec と同じようにはできませんか。\nとりあえず練習がてら何かをパースしてみる。  \n仕様があるほうが嬉しいので探してみると [json](https://www.json.org/json-ja.html) がよさそうだった。  \nまずは `digits` を書いてみた。  \n[digit1](https://docs.rs/nom/latest/nom/character/complete/fn.digit1.html) を使えば終わりなのだが、それでは練習にならないため定義通りに実装。\n\nhttps://github.com/wat-aro/wjson\n\n```rust\nfn zero(input: &str) -> IResult<&str, u64> {\n    map(char('0'), |c| c.to_string().parse::<u64>().unwrap())(input)\n}\n\nfn onenine(input: &str) -> IResult<&str, u64> {\n    map(\n        alt((\n            char('1'),\n            char('2'),\n            char('3'),\n            char('4'),\n            char('5'),\n            char('6'),\n            char('7'),\n            char('8'),\n            char('9'),\n        )),\n        |c| c.to_string().parse::<u64>().unwrap(),\n    )(input)\n}\n\npub fn digit(input: &str) -> IResult<&str, u64> {\n    alt((zero, onenine))(input)\n}\n\npub fn digits(input: &str) -> IResult<&str, u64> {\n    let (rest, v) = many1(digit)(input)?;\n    let str_vec: String = v.iter().map(|d| d.to_string()).collect::<String>();\n\n    Ok((rest, str_vec.parse().unwrap()))\n}\n```\n\nまだ `Rust` を書き慣れていないけれど楽しい。\n"},"__N_SSG":true}