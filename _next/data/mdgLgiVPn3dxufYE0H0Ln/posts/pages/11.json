{"pageProps":{"posts":[{"data":{"title":"SICP 問題 3.72","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n<p>sum-squareのところで間違えて立方数をたしていたせいで，<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-ref triple-way-sum-square-number 0)\n87539319</pre>\n\n\n<p>って出てきて驚きました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-square x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>triple-way-sum-square stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>s2 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>s3 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>w1 <span class=\"synSpecial\">(</span>sum-square s1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>sum-square s2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>w3 <span class=\"synSpecial\">(</span>sum-square s3<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> w1 w2 w3<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>cons-stream w1\n                          <span class=\"synSpecial\">(</span>triple-way-sum-square\n                           <span class=\"synSpecial\">(</span>stream-cdr <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>triple-way-sum-square <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> triple-way-sum-square-number\n  <span class=\"synSpecial\">(</span>triple-way-sum-square <span class=\"synSpecial\">(</span>weighted-pairs integers integers sum-square<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>gosh> (stream-head triple-way-sum-square-number 20)\n325\n425\n650\n725\n845\n850\n925\n1025\n1105\n1250\n1300\n1325\n1445\n1450\n1525\n1625\n1690\n1700\n1825\n1850\ndone</p>\n\n","slug":"SICP 問題 3.72"},{"data":{"title":"SICP 問題 3.71","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n<p>問題文通りに．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%DE%A5%CC%A5%B8%A5%E3%A5%F3\">ラマヌジャン</a>数のストリームを作る．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-cube x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a a a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b b b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ramanujan stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>s2 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>weight1 <span class=\"synSpecial\">(</span>sum-cube s1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>weight2 <span class=\"synSpecial\">(</span>sum-cube s2<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> weight1 weight2<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>cons-stream weight1\n                          <span class=\"synSpecial\">(</span>ramanujan <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>ramanujan <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ramanujan-number\n  <span class=\"synSpecial\">(</span>ramanujan <span class=\"synSpecial\">(</span>weighted-pairs integers integers sum-cube<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head ramanujan-number 6)\n1729\n4104\n13832\n20683\n32832\n39312\ndone</pre>\n\n\n","slug":"SICP 問題 3.71"},{"data":{"title":"SICP 問題 3.70","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; mergeを参考にして重みをつけてmerge-weightedを定義する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s2car\n                                    <span class=\"synSpecial\">(</span>merge s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span>\n                                           <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge-weighted s1 s2 weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>w1 <span class=\"synSpecial\">(</span>weight s1car<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>weight s2car<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n                   <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> w1 w2<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>cons-stream s1car\n                                 <span class=\"synSpecial\">(</span>merge-weighted <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2 weight<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                    <span class=\"synSpecial\">(</span>cons-stream s2car\n                                 <span class=\"synSpecial\">(</span>merge-weighted s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synComment\">;; pairsを参考にweighted-pairsを定義する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weighted-pairs s t weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>merge-weighted\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>weighted-pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)</span>\n    weight<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> i+j <span class=\"synSpecial\">(</span>weighted-pairs integers integers <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synError\">2i+3j+5ij</span>\n  <span class=\"synSpecial\">(</span>weighted-pairs integers integers\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 重みづけがちゃんと機能しているかを確認する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-head-weight s n weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>s s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>n n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>done\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head-weight i+j 20 (lambda (x) (+ (car x) (cadr x))))\n(1 1) : 2\n(1 2) : 3\n(2 2) : 4\n(1 3) : 4\n(2 3) : 5\n(1 4) : 5\n(3 3) : 6\n(2 4) : 6\n(1 5) : 6\n(3 4) : 7\n(2 5) : 7\n(1 6) : 7\n(4 4) : 8\n(3 5) : 8\n(2 6) : 8\n(1 7) : 8\n(4 5) : 9\n(3 6) : 9\n(2 7) : 9\n(1 8) : 9\ndone\ngosh&gt; (stream-head-weight 2i+3j+5ij 20 (lambda (x) (+ (* 2 (car x))\n                                                      (* 3 (cadr x))\n                                                      (* 5 (car x) (cadr x)))))\n(1 1) : 10\n(1 2) : 18\n(1 3) : 26\n(2 2) : 30\n(1 4) : 34\n(1 5) : 42\n(2 3) : 43\n(1 6) : 50\n(2 4) : 56\n(1 7) : 58\n(3 3) : 60\n(1 8) : 66\n(2 5) : 69\n(1 9) : 74\n(3 4) : 78\n(2 6) : 82\n(1 10) : 82\n(1 11) : 90\n(2 7) : 95\n(3 5) : 96\ndone</pre>\n\n\n","slug":"SICP 問題 3.70"},{"data":{"title":"SICP 問題 3.68","published":"2015/12/15","tags":["scheme","SICP"]},"content":"\n<p>元のpairsと違ってcons-streamを使っていないためdelayされないので無限ループになる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>interleave\n   <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n               t<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.68"},{"data":{"title":"SICP 問題 3.67","published":"2015/12/15","tags":["scheme","SICP"]},"content":"\n<p>二通りやってみました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; interleave</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave\n    <span class=\"synSpecial\">(</span>interleave <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                            <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head (pairs integers integers) 20)\n(1 1)\n(1 2)\n(2 2)\n(2 1)\n(2 3)\n(1 3)\n(3 3)\n(3 1)\n(3 2)\n(1 4)\n(3 4)\n(4 1)\n(2 4)\n(1 5)\n(4 4)\n(5 1)\n(4 2)\n(1 6)\n(4 3)\n(6 1)\ndone</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 三つのストリームを混ぜるinterleave</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>interleave3 s1 s2 s3<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>interleave s2 s3<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>interleave3 s2 s3 <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; interleave3を使う</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave3\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head (pairs integers integers) 20)\n(1 1)\n(1 2)\n(2 1)\n(2 2)\n(1 3)\n(3 1)\n(2 3)\n(1 4)\n(4 1)\n(3 2)\n(1 5)\n(5 1)\n(3 3)\n(1 6)\n(6 1)\n(2 4)\n(1 7)\n(7 1)\n(4 2)\n(1 8)\ndone</pre>\n\n\n","slug":"SICP 問題 3.67"},{"data":{"title":"EmacsのインストールとCommandとOptionの設定","published":"2015/12/15","tags":["Emacs","mac"]},"content":"\n<p>これの通りにインストール<br/>\n<a href=\"http://wikemacs.org/wiki/Installing_Emacs_on_OS_X\">Installing Emacs on OS X - WikEmacs</a></p>\n\n<p><a href=\"https://www.naney.org/diki/d/2015-07-24-Emacs.html\">Homebrew &#x3067; IME &#x30A4;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x30D1;&#x30C3;&#x30C1;&#x3092;&#x5F53;&#x3066;&#x305F; Emacs 24.5.1 &#x3092;&#x5165;&#x308C;&#x308B; | nDiki</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>をaliasするときに-nwをつけて端末で動くようにする．</p>\n\n<p>iterm2で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>を使うときはここの設定に合わせる．</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fhayamiz%2Fitems%2F0f0b7a012ec730351678\" title=\"MacのiTerm/Emacsでメタキーを快適に使いたい - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/hayamiz/items/0f0b7a012ec730351678\">qiita.com</a></cite></p>\n\n<p>command+spaceもiterm2に補足されないようにするといい．</p>\n\n","slug":"EmacsのインストールとCommandとOptionの設定"},{"data":{"title":"SICP 問題 3.65","published":"2015/12/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ln2-summands n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1.0</span> n<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>ln2-summands <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ln2-stream\n  <span class=\"synSpecial\">(</span>partial-sums <span class=\"synSpecial\">(</span>ln2-summands <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head ln2-stream 20)\n1.0\n0.5\n0.8333333333333333\n0.5833333333333333\n0.7833333333333332\n0.6166666666666666\n0.7595238095238095\n0.6345238095238095\n0.7456349206349207\n0.6456349206349207\n0.7365440115440116\n0.6532106782106782\n0.7301337551337552\n0.6587051837051838\n0.7253718503718505\n0.6628718503718505\n0.7216953797836152\n0.6661398242280596\n0.718771403175428\n0.6687714031754279\ndone\ngosh&gt; (stream-head (euler-transform ln2-stream) 20)\n0.7\n0.6904761904761905\n0.6944444444444444\n0.6924242424242424\n0.6935897435897436\n0.6928571428571428\n0.6933473389355742\n0.6930033416875522\n0.6932539682539683\n0.6930657506744464\n0.6932106782106783\n0.6930967180967181\n0.6931879423258734\n0.6931137858557215\n0.6931748806748808\n0.6931239512121866\n0.6931668512550866\n0.6931303775344023\n0.693161647077867\n0.6931346368409872\ndone\ngosh&gt; (stream-head (accelerated-sequence euler-transform ln2-stream) 20)\n1.0\n0.7\n0.6932773109243697\n0.6931488693329254\n0.6931471960735491\n0.6931471806635636\n0.6931471805604039\n0.6931471805599445\n0.6931471805599427\n0.6931471805599454\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\ndone</pre>\n\n\n<p>3.66はパス</p>\n\n","slug":"SICP 問題 3.65"},{"data":{"title":"SICP 問題 3.64","published":"2015/12/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-improve guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>average guess <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x guess<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>average x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-limit s tolerance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>s2 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> tolerance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> s1 s2<span class=\"synSpecial\">)))</span>\n        s2\n        <span class=\"synSpecial\">(</span>stream-limit <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> tolerance<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x tolerance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-limit <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">)</span> tolerance<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>1.4142156862745097\ngosh&gt; (sqrt 2 0.0001)\n1.4142135623746899</pre>\n\n\n","slug":"SICP 問題 3.64"},{"data":{"title":"SICP 問題 3.63","published":"2015/12/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> guesses\n    <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1.0</span>\n                 <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>guess<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span>sqrt-improve guess x<span class=\"synSpecial\">))</span>\n                             guesses<span class=\"synSpecial\">)))</span>\n  guesses<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1.0</span>\n               <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>guess<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>sqrt-improve guess x<span class=\"synSpecial\">))</span>\n                           <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>後者は毎回ストリームを作る．\n前者はメモ化されているので一度作られたストリームを使い回す．</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%E2%A5%E9%A5%A4%A5%BA\">メモライズ</a>をやめると両者の効率は同じになる．</p>\n\n","slug":"SICP 問題 3.63"},{"data":{"title":"SICP 問題 3.62","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n<p>二つのべき<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%E9%BF%F4\">級数</a>を割る手続きdiv-stream</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-stream s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> s2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ZERO-DIVISOR&quot;</span> s2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>mul-streams s1\n                   <span class=\"synSpecial\">(</span>invert-unit-series s2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.62"},{"data":{"title":"SICP 問題 3.61","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n<p>べき<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%E9%BF%F4\">級数</a>Sの逆数を求める手続きinvert-unit-seriesを定義する．<br/>\n問題文の通りですね．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>invert-unit-series stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span>\n               <span class=\"synSpecial\">(</span>mul-series <span class=\"synSpecial\">(</span>scale-stream <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">-1</span><span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>invert-unit-series stream<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.61"},{"data":{"title":"SICP 問題 3.60","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-head s n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>s s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>n n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>done\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; &quot;</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-series s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>add-streams\n                <span class=\"synSpecial\">(</span>scale-stream <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>mul-series <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> circles <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>mul-series sine-series sine-series<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>mul-series cosine-series cosine-series<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head circles 10)\n1 0 0 0 0 0 0 0 0 0 done</pre>\n\n\n","slug":"SICP 問題 3.60"},{"data":{"title":"SICP 問題 3.59","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synComment\">;; 引数としてべき級数を表現するストリームをとり，級数の積分の定数項を除いた項の係数のストリーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integrate-series stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">/</span> stream integers<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> exp-series\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>integrate-series exp-series<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 余弦の微分は正弦なので</span>\n<span class=\"synComment\">;; cos xの微分は-sin x</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> cosine-series\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>integrate-series sine-series<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 正弦の微分は余弦</span>\n<span class=\"synComment\">;; sin xの微分は cos x</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> sine-series\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>integrate-series cosine-series<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.59"},{"data":{"title":"SICP 問題 3.58","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand num den radix<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">quotient</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> num radix<span class=\"synSpecial\">)</span> den<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>expand <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> num radix<span class=\"synSpecial\">)</span> den<span class=\"synSpecial\">)</span> den radix<span class=\"synSpecial\">)))</span>\n\n<span class=\"synError\">#|</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> num den<span class=\"synSpecial\">)</span><span class=\"synError\">を表す少数を生成する．</span>\n<span class=\"synSpecial\">(</span>expand <span class=\"synConstant\">1</span> <span class=\"synConstant\">7</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span><span class=\"synError\">は</span>\n<span class=\"synConstant\">1</span>\n<span class=\"synConstant\">4</span>\n<span class=\"synConstant\">2</span>\n<span class=\"synConstant\">8</span>\n<span class=\"synConstant\">5</span>\n<span class=\"synConstant\">7</span>\n\n<span class=\"synSpecial\">(</span>expand <span class=\"synConstant\">3</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span><span class=\"synError\">は</span>\n<span class=\"synConstant\">3</span>\n<span class=\"synConstant\">7</span>\n<span class=\"synConstant\">5</span>\n<span class=\"synConstant\">0</span>\n\n<span class=\"synError\">つまり0.375で割り切れる．</span>\n<span class=\"synError\">|#</span>\n</pre>\n\n\n","slug":"SICP 問題 3.58"},{"data":{"title":"SICP 問題 3.57","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>メモ化しているので(add-streams (stream-cdr fibs) fibs)の部分で加算が一回行われるだけで済んでいる．<br/>\nこれがメモ化していない場合はfibsの値も(stream-cdr fibs)の値も0番目と1番目の値から加算して求めなくてはならない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fibs\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span>\n               <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span>\n                            <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>stream-cdr fibs<span class=\"synSpecial\">)</span>\n                                         fibs<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.57"},{"data":{"title":"SICP 問題 3.56","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s2car\n                                    <span class=\"synSpecial\">(</span>merge s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span>\n                                           <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> S <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>scale-stream S <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>scale-stream S <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>scale-stream S <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-ref S 0)\n1\ngosh&gt; (stream-ref S 1)\n2\ngosh&gt; (stream-ref S 2)\n3\ngosh&gt; (stream-ref S 3)\n4\ngosh&gt; (stream-ref S 4)\n5\ngosh&gt; (stream-ref S 5)\n6\ngosh&gt; (stream-ref S 6)\n8\ngosh&gt; (stream-ref S 7)\n9\ngosh&gt; (stream-ref S 8)\n10</pre>\n\n\n","slug":"SICP 問題 3.56"},{"data":{"title":"SICP 問題 3.55","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>s0, s0 + s1, s0 + s1 + s2, ...<br/>\nという要素なのでstreamの次の要素とsum-integersの今の要素を足したものがsum-integersの次の要素となる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>partial-sums stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span>\n                            sum-integers<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> sum-integers\n  <span class=\"synSpecial\">(</span>partial-sums integers<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-ref sum-integers 0)\n1\ngosh&gt; (stream-ref sum-integers 1)\n3\ngosh&gt; (stream-ref sum-integers 2)\n6\ngosh&gt; (stream-ref sum-integers 3)\n10\ngosh&gt; (stream-ref sum-integers 4)\n15</pre>\n\n\n","slug":"SICP 問題 3.55"},{"data":{"title":"SICP 問題 3.54","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>mul-streamsを定義して，0から始まるn番目の階乗，factorialsを定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-streams s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">*</span> s1 s2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorials <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>mul-streams factorials\n                                               <span class=\"synSpecial\">(</span>integers-starting-from <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.54"},{"data":{"title":"SICP 問題 3.53","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-streams s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">+</span> s1 s2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> s <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>add-streams s s<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>sは2のn乗のストリームを作る．</p>\n\n","slug":"SICP 問題 3.53"},{"data":{"title":"SICP 問題 3.52","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>sum:210\nメモ化しているためにseqを何回呼び出してもsumに何度も加算されることがない．\nメモ化していない場合はseqを参照するたびにsumに加算されていく．</p>\n\n","slug":"SICP 問題 3.52"}],"currentPage":11,"pages":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},"__N_SSG":true}