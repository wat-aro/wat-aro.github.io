{"pageProps":{"posts":[{"data":{"title":"Arch Linux で日本語 man ページと英語 man ページを使い分ける","published":"2022/05/29","tags":["Linux","Arch"]},"content":"\n普段コードを書く環境ではエラーメッセージのググラビリティを考えて locale を英語にしています。\n日本語でエラーメッセージを表示しても同じ問題にひっかかっている issue や StackOverFlow などが出てきづらくなるためです。\nでも man ページを読む際には日本語のほうが楽ですよね。\nしかし日本語の man ページしか見れなくなるのも他の人に共有する際に困ってしまいます。\nここでは日本語と英語の man ページをいい感じに共存する方法を紹介します。\n\nと言ってもやることは単純で\n\n```shell\n$ LANG=ja_JP.UTF-8 yay -S man-pages-ja\n```\n\nで日本語 man をインストールし、\n\n```fish\nabbr --add jman \"LANG=ja_JP.UTF-8 man\"\n```\n\nのように `abbr` を登録するか\n\n```bash\nalias jman='LANG=ja_JP.UTF-8 man'\n```\n\nのように `alias` を登録するだけです。\n`PKGBUILD` を見るとわかるのですが、`man-pages-ja` では環境変数 `LANG` の値を見て日本語 man をインストールするディレクトリを判定しています。\n\n```shell\npackage() {\n    mkdir -p ${pkgdir}/usr/share/man/${LANG}\n    cd ${srcdir}/${pkgname}-${pkgver}\n    make install\n}\n```\n\nそのため `yay -S` する際に `LANG` を渡すことで任意のディレクトリに日本語 man をインストールできるわけです。\nこうすると `man` を叩けばオリジナルの man ページが、\n`jman` を叩くと日本語の man ページが表示できるようになります。\n\nめでたしめでたし。\n","slug":"japanese-man-page"},{"data":{"title":"JSON parser を書いた","published":"2022/05/27","tags":["Rust","nom"]},"content":"\nyak shaving で作っていた JSON parser が一応完成。  \nRust 楽しいすなあ。\n\nHaskell の parsec の感覚で使えるかと思って [nom](https://github.com/Geal/nom) を使ってみたけれど、最初はなかなかとっつきづらく。  \nまあだいたい慣れることができたのでよし！\n\nせっかくなので [crates.io](https://crates.io/) に公開したのだけれど、  \nhttps://doc.rust-jp.rs/book-ja/ch14-02-publishing-to-crates-io.html を見ながら `cargo publish` すると他の crate と比べて表示が足りない。  \n`Cargo.toml` に `respository` や `documentation` を追加する必要があったのね。\n\nhttps://crates.io/crates/wson\n\n名前は `wat-aro` の json parser で `wson` にした。  \nテストがめんどうでした。  \n[json.org](https://www.json.org/json-en.html)にはお世話になりました。\n\nさっさと movable type を変換するぞ！\n","slug":"wson"},{"data":{"title":"Playwright で OGP 画像を生成する","published":"2022/05/24","tags":["Next.js","TypeScript"]},"content":"\nブログ記事のインポートをしたかったはずなのに json parser を作る yak shaving が楽しい。  \n次は Scheme のインタプリタを作りたくなってきた。危ない。\n\nさて、表題のとおりブログの OGP 画像を [Playwright](https://github.com/microsoft/playwright) で生成するようにした。  \nこのサイトは [Next.js](https://nextjs.org/) で作って、[GitHub Pages](https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages) でホスティングしている。  \nソースコードは[ここ](https://github.com/wat-aro/wat-aro.github.io)にある。\n\nブログ記事のタイトルと slug から OGP 画像を生成している。\n\n```ts\nimport { chromium } from 'playwright';\nimport { getHtml } from './getHtml';\n\ntype Params = {\n  title: string;\n  slug: string;\n};\n\nexport const takeScreenshot = async ({ title, slug }: Params) => {\n  const browser = await chromium.launch();\n  const context = await browser.newContext({\n    viewport: { width: 1200, height: 630 },\n  });\n  const page = await context.newPage();\n  const html = getHtml({ title });\n  await page.setContent(html, { waitUntil: 'load' });\n  await page.screenshot({\n    path: `public/og-images/${slug}.png`,\n    fullPage: true,\n  });\n  await browser.close();\n};\n```\n\n`await page.setContent(html, { waitUntil: 'load' });` の `load` を指定するのが味噌。  \nまた、`setContent` に渡す html 内で画像を使う場合は[データ URL](https://developer.mozilla.org/ja/docs/Web/HTTP/Basics_of_HTTP/Data_URLs) に base64 エンコードされた画像を渡す必要がある。  \n`setContent` には文字列を渡しているだけなためファイルパスでは Playwright は画像を特定できない。  \n後は html と css を書いたら完成。  \nこれくらいの用途だと Playwright でも Puppeteer でも変わらないね。\n\nまだまだサイトに実装しないといけないことが盛り沢山なのでがんばるぞい\n","slug":"generate-ogimage-by-playwright"},{"data":{"title":"json で nom のお勉強","published":"2022/05/16","tags":["Rust","nom"]},"content":"\n旧ブログの `movable type` を `markdown` に変換したい。  \n[nom](https://github.com/Geal/nom) でパースしようと思ったが Readme を読んでもいまいちしっくりこない。  \nparsec と同じようにはできませんか。\nとりあえず練習がてら何かをパースしてみる。  \n仕様があるほうが嬉しいので探してみると [json](https://www.json.org/json-ja.html) がよさそうだった。  \nまずは `digits` を書いてみた。  \n[digit1](https://docs.rs/nom/latest/nom/character/complete/fn.digit1.html) を使えば終わりなのだが、それでは練習にならないため定義通りに実装。\n\nhttps://github.com/wat-aro/wjson\n\n```rust\nfn zero(input: &str) -> IResult<&str, u64> {\n    map(char('0'), |c| c.to_string().parse::<u64>().unwrap())(input)\n}\n\nfn onenine(input: &str) -> IResult<&str, u64> {\n    map(\n        alt((\n            char('1'),\n            char('2'),\n            char('3'),\n            char('4'),\n            char('5'),\n            char('6'),\n            char('7'),\n            char('8'),\n            char('9'),\n        )),\n        |c| c.to_string().parse::<u64>().unwrap(),\n    )(input)\n}\n\npub fn digit(input: &str) -> IResult<&str, u64> {\n    alt((zero, onenine))(input)\n}\n\npub fn digits(input: &str) -> IResult<&str, u64> {\n    let (rest, v) = many1(digit)(input)?;\n    let str_vec: String = v.iter().map(|d| d.to_string()).collect::<String>();\n\n    Ok((rest, str_vec.parse().unwrap()))\n}\n```\n\nまだ `Rust` を書き慣れていないけれど楽しい。\n","slug":"study-nom-by-json"},{"data":{"title":"ブログを移転しました","published":"2022/05/15"},"content":"\nhttps://wat-aro.hatenablog.com/ のブログを移転。\n`github.io` 用にドメインは前から取得していたが、やっとサイトを作成する気になった。\n今後はこちらに書いていくつもり。\n\n使用技術は\n\n- Next.js\n- TypeScript\n- Tailwind CSS\n- github.io\n\nNext.js の開発体験はいいね。  \nあまり難しいことはやらないつもりだけど、 `webassembly` まわりの何かを仕込んでみたい。  \n残作業は\n\n- 旧ブログのデータのインポート\n- OGP の設定\n- reveal.js で書いたスライドをこのサイトで表示できるようにする\n\n### 旧ブログのデータのインポート\n\nはてなブログは `Movable Type` でデータをエクスポートできる。  \nこれを `markdown` に変換して移行する予定。  \n`Rust` の練習にちょうどいいかなーと思ってる。\n\n### OGP の設定\n\n[puppeteer](https://github.com/puppeteer/puppeteer) を使う予定。  \n`next export` を叩く前に `markdown` のファイルごとにスクリーンショットを取ればいけるかと。  \n若干めんどくさくなっているが、最後まで頑張ろう。\n\n### reveal.js で書いたスライドをこのサイトで表示できるようにする\n\nプロフィールにリンクはあるけれど、これを `Next.js` で管理できるようにしたい。  \nしばらくは [About](https://wat-aro.dev/about) に書いたままにする。\n\n### 最後に\n\n数年まともにブログを書いてこなかったので今後はちゃんと書いていくつもり。  \nやるぞ！\n","slug":"moved-my-blog-to-github-io"},{"data":{"title":"RSPレジスタに対する勘違い","published":"2021/09/16"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSP\">RSP</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>とスタックについて勘違いしていた。</p>\n\n<p>スタックが下に伸びていくという話から実際のデータも大きいアドレスから小さいアドレスへと順に入っているとイメージしてしまっていた。<br />\nこのような状態では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSP\">RSP</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>がスタックトップに入っているデータの先頭を指していると考えると、スタックトップよりも先にスタックトップが示すデータが入ってしまっている。<br />\n仮にこのスタックに更にpushした場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSP\">RSP</a>を進めるまえに、現在のスタックトップに入っているデータ分、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSP\">RSP</a>を進める必要が出てしまい、現在のデータの大きさをどこかに保持していないとだめになってしまう。<br />\nこの状態でスタックの計算を考えていたため混乱してしまった。</p>\n\n<p>実際にはデータはアドレスの小さいほうから大きいほうに向かって入っている。<br />\nこの場合<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSP\">RSP</a>が指すスタックトップはデータのある領域とデータのない領域の境目を指すことになる。<br />\n変数のデータ領域を確保するために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSP\">RSP</a>を減算する時は変数のバイトサイズ分引くだけでよい。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20210916/20210916221321.png\" alt=\"f:id:wat-aro:20210916221321p:plain\" width=\"826\" height=\"583\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>低レイヤわからん</p>\n\n","slug":"RSPレジスタに対する勘違い"},{"data":{"title":"container 内で wasm-pack test を実行すると bind() failed: Cannot assign requested address (99) になる","published":"2021/08/25"},"content":"\n<p>wasm-pack を使える Docker 環境を作成し、その中で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB\">チュートリアル</a>をしていたところ、タイトルのようなエラーが出て <code>wasm-pack test</code> が実行できなかった。<br />\nこのコンテナでは rust, wasm-pack, npm が使えるだけの状態で、コンテナ内に <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a> がインストールされていないことが原因だった。<br />\nDockerfile に <code>google-chrome-stable</code> を追加すると無事実行できるようになりました。</p>\n\n<pre class=\"code lang-diff\" data-lang=\"diff\" data-unlink><span class=\"synSpecial\">-RUN apt-get update -qq \\</span>\n<span class=\"synSpecial\">- &amp;&amp; apt-get install -y libnss3</span>\n<span class=\"synIdentifier\">+RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add \\</span>\n<span class=\"synIdentifier\">+  &amp;&amp; echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list \\</span>\n<span class=\"synIdentifier\">+  &amp;&amp; apt-get update -qq \\</span>\n<span class=\"synIdentifier\">+  &amp;&amp; apt-get install -y google-chrome-stable libnss3 libgconf-2-4</span>\n</pre>\n\n\n<p>chromedriver が <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ipv6\">ipv6</a> の subnet を探しているんじゃないかなどかなり回り道をしてしまった</p>\n\n","slug":"container 内で wasm-pack test を実行すると bind() failed: Cannot assign requested address (99) になる"},{"data":{"title":"Chrome などで Emacs キーバインディングを使う","published":"2020/02/24"},"content":"\n<p><code>~/.config/gtk-3.0/settings.ini</code> に追記する</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>[Settings]\ngtk-key-theme-name = Emacs</pre>\n\n\n<p><a href=\"https://askubuntu.com/questions/124815/how-do-i-enable-emacs-keybindings-in-apps-such-as-google-chrome/918962#918962\">gtk - How do I enable Emacs keybindings in apps, such as Google Chrome? - Ask Ubuntu</a></p>\n\n","slug":"Chrome などで Emacs キーバインディングを使う"},{"data":{"title":"emacs で fcitx-mozc を使う","published":"2020/02/23","tags":["Arch","mozc","emacs","fcitx"]},"content":"\n<p>今はこの記事のやり方のほうがよい</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fain0204.hatenablog.com%2Fentry%2F2016%2F08%2F12%2F235206\" title=\"Arch Linuxにemacs-mozcをインストールした話 - twitterよりちょっと長いの\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://ain0204.hatenablog.com/entry/2016/08/12/235206\">ain0204.hatenablog.com</a></cite></p>\n\n<hr />\n\n<p>以下は今だとうまく動かない</p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ yay -G fcitx-mozc</pre>\n\n\n<p><code>PKGBUILD</code> を編集する。</p>\n\n<pre class=\"code lang-diff\" data-lang=\"diff\" data-unlink><span class=\"synSpecial\">-  _targets=&quot;server/server.gyp:mozc_server gui/gui.gyp:mozc_tool unix/fcitx/fcitx.gyp:fcitx-mozc&quot;</span>\n<span class=\"synIdentifier\">+  _targets=&quot;server/server.gyp:mozc_server gui/gui.gyp:mozc_tool unix/fcitx/fcitx.gyp:fcitx-mozc unix/emacs/emacs.gyp:mozc_emacs_helper&quot;</span>\n\n   install -D -m 755 out_linux/${_bldtype}/mozc_server &quot;${pkgdir}/usr/lib/mozc/mozc_server&quot;\n   install    -m 755 out_linux/${_bldtype}/mozc_tool   &quot;${pkgdir}/usr/lib/mozc/mozc_tool&quot;\n\n<span class=\"synIdentifier\">+  install -D -m 755 out_linux/${_bldtype}/mozc_emacs_helper &quot;${pkgdir}/usr/bin/mozc_emacs_helper&quot;</span>\n<span class=\"synIdentifier\">+</span>\n   install -d &quot;${pkgdir}/usr/share/licenses/$pkgname/&quot;\n   install -m 644 LICENSE data/installer/*.html &quot;${pkgdir}/usr/share/licenses/${pkgname}/&quot;\n</pre>\n\n\n<p>手動でインストール</p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ cd fcitx-mozc\n$ makepkg -si\n\n# 不明な公開鍵についてのエラーがでる\n$ sudo pacman-key --recv-keys &lt;keyid&gt;\n$ gpg --recv-keys &lt;keyid&gt;\n\n$ makepkg -si</pre>\n\n\n<p>これで <code>/usr/bin/mozc_emacs_helper</code> が入る。\nあとは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>の設定をする。</p>\n\n<pre class=\"code elisp\" data-lang=\"elisp\" data-unlink>(use-package mozc\n  :init\n  (setq default-input-method &#34;japanese-mozc&#34;)\n  :custom\n  (mozc-candidate-style &#39;overlay))</pre>\n\n\n","slug":"emacs で fcitx-mozc を使う"},{"data":{"title":"X1 Carbon Gen 7th に Arch Linux をインストール","published":"2020/02/11","tags":["Arch"]},"content":"\n<p>基本的にはインストールガイドのとおり\n<a href=\"https://wiki.archlinux.jp/index.php/\">https://wiki.archlinux.jp/index.php/</a>インストールガイド\nWindowManager は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/XMonad\">XMonad</a></p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%C6%A5%A3%A5%B7%A5%E7%A5%F3\">パーティション</a></h2>\n\n<p>funtoo を参考\n<a href=\"https://www.funtoo.org/Install/GPT_Partitioning\">https://www.funtoo.org/Install/GPT_Partitioning</a></p>\n\n<h2>フォーマット</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># mkfs.fat -F32 /dev/nvme0n1p1 # ESP\n# fatlabel /dev/nvme0n1p1 efi\n# mkfs.btrfs -L root /dev/nvme0n1p3 # Root\n# mkswap /dev/nvme0n1p2\n# swapon /dev/nvme0n1p2</pre>\n\n\n<h2>マウント</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># mount /dev/nvme0n1p3 /mnt\n# mkdir /mnt/boot\n# mount /dev/nvme0n1p1 /mnt/boot</pre>\n\n\n<h2>システムクロックの更新</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># timedatectl set-ntp true</pre>\n\n\n<h2>インストール</h2>\n\n<p>Japanのミラーのみを使うように変更</p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># vim /etc/pacman.d/mirrorlist</pre>\n\n\n\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># pacstrap /mnt base linux linux-firmware</pre>\n\n\n<h2>システムの設定</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># genfstab -L /mnt &gt;&gt; /mnt/etc/fstab\n# cat /mnt/etc/fstab</pre>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/chroot\">chroot</a></h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># arch-chroot /mnt</pre>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3\">タイムゾーン</a></h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n# hwclock --systohc --utc</pre>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%ED%A5%B1%A1%BC%A5%EB\">ロケール</a></h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># pacman -S neovim\n# nvim /etc/locale.gen</pre>\n\n\n<p><code>ja_JP.UTF-8 UTF-8</code> と <code>en_US.UTF-8 UTF-8</code> をアンコメント</p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># locale-gen\n# echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</pre>\n\n\n<h2>ネットワーク</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># pacman -S networkmanager\n# systemctl enable NetworkManager.service</pre>\n\n\n<h2>Rootパスワード</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># passwd</pre>\n\n\n<h2>ブート</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># pacman -S efibootmgr\n# efibootmgr -d /dev/nvme0n1 -p 1 -c -L &#34;Arch Linux&#34; -l /vmlinuz-linux -u &#34;root=/dev/nvme0n1p3 rw initrd=/initramfs-linux.img&#34;\n# exit\n# reboot</pre>\n\n\n<h2>ユーザ追加</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># pass\n# useradd -m -g users -G wheel -s /bin/bash wat-aro\n# passwd wat-aro\n# groupadd wat-aro\n# gpasswd -a wat-aro wat-aro\nid wat-aro</pre>\n\n\n<h2>sudo</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink># pacman -S sudo\n# EDITOR=nvim visudo</pre>\n\n\n<p>以下を追記</p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>%wheel ALL=(ALL) ALL</pre>\n\n\n<h2>Yay</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ sudo pacman -S git\n$ sudo pacman -S base-devel\n$ git clone https://aur.archlinux.org/yay.git\n$ cd yay\n$ makepkg -si</pre>\n\n\n<h2>man</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ yay -S man-db\n$ mandb</pre>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Xorg\">Xorg</a></h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ yay -S xorg-server\n$ lspci | grep -e VGA -e 3D\n$ yay -S xf86-video-intel\n$ yay -S xorg-xrdb rxvt-unicode xorg-xmodmap</pre>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a> 準備</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/uim\">uim</a> の設定が終わるまで <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xmonad\">xmonad</a> がちゃんと動かない</p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ git clone https://github.com/wat-aro/dotfiles\n$ cd dotfiles\n$ ./install.sh\n$ yay -S xmonad xmonad-contrib dmenu xmobar\n$ xmonad --recompile</pre>\n\n\n<h2>日本語入力</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ yay -S uim anthy gtk3\n$ uim-pref-gtk3</pre>\n\n\n<h2>ブラウザ</h2>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ yay -S noto-fonts noto-fonts-cjk noto-fonts-emoji\n$ yay -S google-chrome</pre>\n\n\n<h2>フォント</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ricty\">Ricty</a> を手動で入れる</p>\n\n<h2>LightDM</h2>\n\n<p><a href=\"https://wiki.archlinux.jp/index.php/LightDM\">LightDM - ArchWiki</a></p>\n\n<p><a href=\"https://qiita.com/Hayao0819/items/7784178c7fd568291905\">&#x3010;ArchLinux&#x3011;&#x6700;&#x9AD8;&#x306E;&#x30ED;&#x30B0;&#x30A4;&#x30F3;&#x753B;&#x9762; - Qiita</a></p>\n\n<p>を参考</p>\n\n<h2>オーディオ</h2>\n\n<p>オーディオを有効にするためには <code>sof-firmware</code> も必要</p>\n\n<p><a href=\"https://www.reddit.com/r/archlinux/comments/e5rpxv/thinkpad_x1_carbon_gen_7_audio_broken_on_541arch11/\">Thinkpad X1 Carbon Gen 7 audio broken on 5.4.1-arch1-1 : archlinux</a></p>\n\n<pre class=\"code shell\" data-lang=\"shell\" data-unlink>$ yay -S alsa-utils sof-firmware pulseaudio pavucontrol</pre>\n\n\n","slug":"X1 Carbon Gen 7th に Arch Linux をインストール"},{"data":{"title":"ActiveModel::Attributesでカスタムタイプを使う","published":"2018/08/07"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a> 5.2.0 で入ったActiveModel::Attributes <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a> 最高ですよね。</p>\n\n<p>でもカスタムタイプのドキュメントが見つからないんですよね。 <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute\">ActiveRecord::Attributes API のカスタムタイプ</a> ならあるのですが。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9\">ソースコード</a>見たところ簡単に作れるのがわかったので紹介します。</p>\n\n<p>まず型の登録部分ですが、<a href=\"https://github.com/rails/rails/blob/5-2-0/activemodel/lib/active_model/type.rb#L20-L53\">lib/active_model/type.rb</a> で定義されています。</p>\n\n<p>また、<a href=\"https://github.com/rails/rails/blob/5-2-0/activemodel/lib/active_model/type/boolean.rb\">ActiveModelで使われているデフォルトタイプの実装</a>を見ると <code>cast_value</code> メソッドがあればよさそうです。</p>\n\n<p><a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute\">ActiveRecord::Attributes API</a> と同様に実装します。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">class</span> <span class=\"synType\">MoneyType</span> &lt; <span class=\"synType\">ActiveModel</span>::<span class=\"synType\">Type</span>::<span class=\"synType\">Integer</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">cast_value</span>(value)\n    <span class=\"synStatement\">if</span> !value.kind_of?(<span class=\"synType\">Numeric</span>) &amp;&amp; value.include?(<span class=\"synSpecial\">'</span><span class=\"synConstant\">$</span><span class=\"synSpecial\">'</span>)\n      price_in_dollars = value.gsub(<span class=\"synSpecial\">/\\$/</span>, <span class=\"synSpecial\">''</span>).to_f\n      <span class=\"synStatement\">super</span>(price_in_dollars * <span class=\"synConstant\">100</span>)\n    <span class=\"synStatement\">else</span>\n      <span class=\"synStatement\">super</span>\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synComment\"># config/initializers/types.rb</span>\n<span class=\"synType\">ActiveModel</span>::<span class=\"synType\">Type</span>.register(<span class=\"synConstant\">:money</span>, <span class=\"synType\">MoneyType</span>)\n\n<span class=\"synComment\"># app/models/store_listing.rb</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">StoreListing</span>\n  <span class=\"synPreProc\">include</span> <span class=\"synType\">ActiveModel</span>::<span class=\"synType\">Model</span>\n  <span class=\"synPreProc\">include</span> <span class=\"synType\">ActiveModel</span>::<span class=\"synType\">Attributes</span>\n\n  attribute <span class=\"synConstant\">:price_in_cents</span>, <span class=\"synConstant\">:money</span>\n<span class=\"synPreProc\">end</span>\n\nstore_listing = <span class=\"synType\">StoreListing</span>.new(<span class=\"synConstant\">price_in_cents</span>: <span class=\"synSpecial\">'</span><span class=\"synConstant\">$10.00</span><span class=\"synSpecial\">'</span>)\nstore_listing.price_in_cents <span class=\"synComment\"># =&gt; 1000</span>\n</pre>\n\n\n<p>このように ActiveModel::Attributes でカスタムタイプを使うことができます。</p>\n\n","slug":"ActiveModel::Attributesでカスタムタイプを使う"},{"data":{"title":"http-conduit で取得したデータを日本語表示する","published":"2018/02/27","tags":["Haskell"]},"content":"\n<p>簡単な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/cli\">cli</a>ツールを書こうとしたら http-conduit で取得したデータの日本語表示でハマってしまいました。</p>\n\n<p><code>http-conduit</code> の <code>httpLbs</code> で取得したデータをそのままターミナルに出力します。<br/>\n必要なパッケージは <code>http-conduit</code> <code>bytestring</code> <code>utf8-string</code> の３つ。</p>\n\n<pre class=\"code lang-haskell\" data-lang=\"haskell\" data-unlink><span class=\"synSpecial\">{-# LANGUAGE OverloadedStrings #-}</span>\n\n<span class=\"synPreProc\">import</span> <span class=\"synPreProc\">qualified</span> Codec.Binary.UTF8.String <span class=\"synPreProc\">as</span> Codec\n<span class=\"synPreProc\">import</span>           Data.ByteString.Char8    (unpack)\n<span class=\"synPreProc\">import</span>           Data.ByteString.Lazy     (toStrict)\n<span class=\"synPreProc\">import</span> <span class=\"synPreProc\">qualified</span> Network.HTTP.Simple      <span class=\"synPreProc\">as</span> Simple\n\nmain <span class=\"synStatement\">::</span> IO ()\nmain <span class=\"synStatement\">=</span> <span class=\"synStatement\">do</span>\n    res <span class=\"synStatement\">&lt;-</span> Simple.httpLbs <span class=\"synConstant\">&quot;https://twitter.com/&quot;</span>\n\n    putStrLn <span class=\"synStatement\">$</span> Codec.decodeString <span class=\"synStatement\">$</span> unpack <span class=\"synStatement\">$</span> toStrict <span class=\"synStatement\">$</span> Simple.getResponseBody res\n</pre>\n\n\n<p><code>httpLbs</code> を使い取得したデータは <code>Reponse</code> 型で包まれているので <code>getResponseBody</code> で <code>ByteString</code> を取得し、 <code>String</code> に変換して出力します。<br/>\nなぜか <code>ByteString</code> でなく <code>ByteString.Lazy</code> になっていたので <code>toStrict</code> で変換。<br/>\nそして <code>unpack</code> しても日本語が表示されないため、 <code>Codec.Binary.UTF8.String</code> の <code>decodeString</code> で変換してから表示。</p>\n\n<p>文字列難しい</p>\n\n<p>[参考]</p>\n\n<p><a href=\"https://qiita.com/lotz/items/f8440fa08a62d1c44e1a\">Haskell&#x304B;&#x3089;&#x7C21;&#x5358;&#x306B;Web API&#x3092;&#x53E9;&#x304F;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p><a href=\"https://qiita.com/satosystems/items/e07e9907e4da9ab853fc\">Haskell &#x6587;&#x5B57;&#x5217;&#x5909;&#x63DB;&#x5165;&#x9580; - Qiita</a></p>\n\n","slug":"http-conduit で取得したデータを日本語表示する"},{"data":{"title":"プログラミング Coq 証明駆動開発(1)","published":"2017/05/11"},"content":"\n<p><a href=\"http://www.iij-ii.co.jp/lab/techdoc/coqt/coqt8.html\">&#x8A3C;&#x660E;&#x99C6;&#x52D5;&#x958B;&#x767A;&#x5165;&#x9580;(1)</a></p>\n\n<p><code>何かを読む会</code> という社内勉強会が発足されました。\n読んだ本の内容を共有しよう。\n一人で勉強していてもダレるので共有することで無理やり進捗を出そう。\n他の人の発表を聞いて読んだ気になろう。\nっていう緩めの会です。\n途中まで読んで放置していたプログラミング Coq の続きを読んでまとめました。</p>\n\n<h1>挿入ソートを証明する。</h1>\n\n<p>証明したいことは次の二点。</p>\n\n<ul>\n<li>挿入前と挿入後で要素に変化がないこと(isort_permutation)</li>\n<li>挿入後に要素が整列されていること(isort_sorted)</li>\n</ul>\n\n\n<p>上記を型で示すと以下のようになる。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>isort_permutation : forall (l : list nat), Permutation l (insertion_sort l)\nisort_sorted      : forall (l : list nat), LocallySorted le (insertion_sort l)</pre>\n\n\n<h2>実装</h2>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Require Import List.\nRequire Import Arith.\n\nFixpoint insert (a : nat) (l : list nat) : list nat :=\n  match l with\n  | nil =&gt; a :: nil\n  | x :: xs =&gt; if leb a x then a :: l else x :: insert a xs\n  end.\n\nFixpoint insertion_sort (l : list nat) : list nat :=\n  match l with\n  | nil =&gt; nil\n  | x :: xs =&gt; insert x (insertion_sort xs)\n  end.</pre>\n\n\n<h2>要素の変化がないこと</h2>\n\n<p>あるリストがあるリストと同じ要素で成り立っているのは以下のモジュールで定義されている。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Inductive Permutation : list A -&gt; list A -&gt; Prop :=\n  | perm_nil: Permutation [] []\n  | perm_skip x l l&#39; : Permutation l l&#39; -&gt; Permutation (x::l) (x::l&#39;)\n  | perm_swap x y l : Permutation (y::x::l) (x::y::l)\n  | perm_trans l l&#39; l&#39;&#39; : Permutation l l&#39; -&gt; Permutation l&#39; l&#39;&#39; -&gt; Permutation l l&#39;&#39;.</pre>\n\n\n<ol>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> と <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> は同じ要素から成り立つ</li>\n<li>l と l' が同じ要素から成り立つならば x :: l と x :: l' も同じ要素から成り立つ</li>\n<li>y :: x :: l と x :: y :: l は同じ要素から成り立つ</li>\n<li>(l と l' が同じ要素から成り立ち、l' と l'&lsquo; が同じ要素から成り立つ) ならば l と l&rsquo;&lsquo; も同じ要素から成り立つ</li>\n</ol>\n\n\n<h2>isort_permutation の証明</h2>\n\n<p>isort_permutation の型</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall (l : list nat), Permutation l (insertion_sort l)</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1\">帰納法</a>を使う。\nl が <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> の時は insertion_sort l は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> なので\nPermutation <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> となり自明。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1\">帰納法</a>のため、nの場合にあたる仮定は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall (l : list nat), Permutation xs (insertion_sort xs)</pre>\n\n\n<p>n + 1 に当たる命題は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall (l : list nat), Permutation x :: xs (insertion_sort x::xs)</pre>\n\n\n<p>となり、</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall (l : list nat), Permutation x :: xs (insert x (insertion_sort xs)</pre>\n\n\n<p>と変形できる。</p>\n\n<p>つまり</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall (l : list nat), Permuation x :: xs (x :: insertion_sort xs)</pre>\n\n\n<p>と</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall (l : lsit nat), Permutation (x :: insertion_sort xs) (insert x (insertion_sort xs)</pre>\n\n\n<p>を示すことで perm_trans から</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>forall l l&#39; l&#39;&#39; , Permutation l l&#39; -&gt; Permutation l&#39; l&#39;&#39; -&gt; Permutation l l&#39;&#39;</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Permutation (x :: xs) (x :: insertion_sort xs) -&gt;\n  Permutation (x :: insertion_sort xs) (insert x (insertion_sort xs)) -&gt;\n    Permutation (x :: xs) (insert x (insertion_sort xs))</pre>\n\n\n<p>となり、導ける。</p>\n\n<p>A  については 仮定と Permutation のコンストラクタ</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>perm_skip : forall x l l&#39;, Permutation l l&#39; -&gt; Permutation (x :: l) (x :: l&#39;)</pre>\n\n\n<p>から導ける。</p>\n\n<p>まず B を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%E4%C2%EA\">補題</a>として証明する。</p>\n\n<p>isort_permutaiton の証明は以下。</p>\n\n<table>\n<thead>\n<tr>\n<th> 命令 </th>\n<th> 説明 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> intros </td>\n<td> forall などから変数を仮定へ移動する </td>\n</tr>\n<tr>\n<td> simpl </td>\n<td> 簡約 </td>\n</tr>\n<tr>\n<td> apply </td>\n<td> 仮定や定理などを適用 </td>\n</tr>\n<tr>\n<td> destruct </td>\n<td> 条件分岐しているものなどを subgoal に分ける </td>\n</tr>\n<tr>\n<td> induction </td>\n<td> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1\">帰納法</a>を実施するために subgoal に分ける </td>\n</tr>\n</tbody>\n</table>\n\n\n<p>どういうふうに証明が進むかは coq <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ide\">ide</a> や proof-general 使って見てください。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Require Import List.\nRequire Import Arith.\nRequire Import Sorting.Permutation.\nRequire Import Sorting.Sorted.\n\n(* isort_permutation *)\n\nLemma insert_perm : forall (x : nat)(l : list nat), Permutation (x :: l) (insert x l).\n  induction l.\n  intros.\n  simpl.\n  apply Permutation_refl.\n\n  intros.\n  simpl.\n  destruct (leb x a).\n\n  apply Permutation_refl.\n\n  apply perm_trans with (a :: x :: l).\n  apply perm_swap.\n\n  apply perm_skip.\n  apply IHl.\nQed.\n\nTheorem isort_permutation : forall (l : list nat), Permutation l (insertion_sort l).\n  induction l.\n  apply perm_nil.\n  simpl.\n  apply perm_trans with (a :: insertion_sort l).\n  apply perm_skip.\n  apply IHl.\n  apply insert_perm.\nQed.</pre>\n\n\n<h2>整列の定義</h2>\n\n<p>リスト l が整列されていることはSorting.Sortedモジュールで定義されている.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Induction LocallySorted (A : Type) (R : A -&gt; A -&gt; Prop) : list A :=\n  | LSorted_nil : LocallySorted R nil\n  | LSorted_cons1 : forall a : A, LocallySorted R (a :: nil)\n  | LSorted_consn : forall (a b : A) (l : list A),\n    LocallySorted R (b :: l) -&gt;\n      R a b -&gt; LocallySorted R (a :: b :: l)</pre>\n\n\n<p>上の定義は次のような意味です。\nR a b は a &lt; b のようなものです。</p>\n\n<ol>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> は整列している</li>\n<li>x :: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> は整列している</li>\n<li>b :: l が整列しているとき, R a b ならば a :: b :: l は整列している</li>\n</ol>\n\n\n<h2>整列されていることの証明</h2>\n\n<p>こちらでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1\">帰納法</a>で考える。\nまず l が <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> の場合は insertion_sort <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> = <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> となり、LSorted_<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> : LocallySorted le <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a> から明らか。</p>\n\n<p>LocallySort le (insertion_sort l) -> LocallySort le (insertion_sort (a :: l)) の場合を考える。\nLocallySort le (insertion_sort (a ::l) は LocallySort le (insert a (insertion_sort l))と変形できる。\nこの時、insertion_sort l は仮定より整列しているため、</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>insert_sorted : forall (a : nat) (l : list a), LocallySort le l -&gt; LocallySorted le (insert a l)</pre>\n\n\n<p>を示すことができれば証明できる。</p>\n\n<p>これを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%E4%C2%EA\">補題</a>として証明をすすめる。</p>\n\n<h2>整列の証明</h2>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Lemma insert_sorted : forall (a : nat) (l : list nat),\n    LocallySorted le l -&gt; LocallySorted le (insert a l).\n  induction l.\n  constructor.\n\n  intro.\n  simpl.\n  remember (leb a a0).\n  destruct b.\n\n  apply LSorted_consn.\n  apply H.\n  apply leb_complete.\n  congruence.\n\n  inversion H.\n  simpl.\n  apply LSorted_consn.\n  apply LSorted_cons1.\n  apply lt_le_weak.\n  apply leb_complete_conv.\n  congruence.\n\n  subst.\n  simpl.\n  simpl in IHl.\n  remember (leb a b).\n\n  destruct b0.\n  apply LSorted_consn.\n  apply IHl.\n  apply H2.\n\n  apply lt_le_weak.\n  apply leb_complete_conv.\n  congruence.\n\n  apply LSorted_consn.\n  apply IHl.\n  apply H2.\n  apply H3.\nQed.</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Theorem isort_sorted : forall (l : list nat) , LocallySorted le (insertion_sort l).\n  induction l.\n  constructor.\n\n  simpl.\n\n  apply insert_sorted.\n  apply IHl.\nQed.</pre>\n\n\n<p>これで isertion_sort はソートの前後で要素が変わらないことと、ソート後に整列されていることが証明できた。</p>\n\n","slug":"プログラミング Coq 証明駆動開発(1)"},{"data":{"title":"プログラミング Coq (証明駆動開発 2)","published":"2017/05/11"},"content":"\n<p><a href=\"http://www.iij-ii.co.jp/lab/techdoc/coqt/coqt9.html\">&#x8A3C;&#x660E;&#x99C6;&#x52D5;&#x958B;&#x767A;&#x5165;&#x9580;(2)</a></p>\n\n<p>上記ページの勉強メモです。</p>\n\n<h1>Extraction</h1>\n\n<p>coq から <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a> のコードを出力する。<br></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> にコードを出力するにはそのまま<br></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction map.</pre>\n\n\n<p>とすればいい。<br>\nこれで</p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synComment\">(** val map : ('a1 -&gt; 'a2) -&gt; 'a1 list -&gt; 'a2 list **)</span>\n\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> map f <span class=\"synStatement\">=</span> <span class=\"synStatement\">function</span>\n<span class=\"synStatement\">|</span> <span class=\"synConstant\">Nil</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">Nil</span>\n<span class=\"synStatement\">|</span> <span class=\"synConstant\">Cons</span> <span class=\"synStatement\">(</span>a, t<span class=\"synStatement\">)</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">Cons</span> <span class=\"synStatement\">((</span>f a<span class=\"synStatement\">)</span>, <span class=\"synStatement\">(</span>map f t<span class=\"synStatement\">))</span>\n</pre>\n\n\n<p>と出力される。（proof-general を使っています。coq-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ide\">ide</a>の場合はcommand pane で実行）<br></p>\n\n<p>この時、list が <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> 組み込みのリストでなく coq で定義された list になっている。<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> 組み込みのリストを使うには<br></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extract Inductive list =&gt; &#34;list&#34; [&#34;[]&#34; &#34;(::)&#34;].</pre>\n\n\n<p>を実行する。こうすると<br></p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synComment\">(** val map : ('a1 -&gt; 'a2) -&gt; 'a1 list -&gt; 'a2 list **)</span>\n\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> map f <span class=\"synStatement\">=</span> <span class=\"synStatement\">function</span>\n<span class=\"synStatement\">|</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">[]</span>\n<span class=\"synStatement\">|</span> a<span class=\"synStatement\">::</span>t <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">(</span>f a<span class=\"synStatement\">)::(</span>map f t<span class=\"synStatement\">)</span>\n</pre>\n\n\n<p>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> 組み込みのリストを使ったmap関数が生成される。<br></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>  や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a> に出力するにはそれぞれ<br>\n<code>Extraction Language Haskell.</code> <code>Extraction Language Scheme.</code> としてから<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>の場合と同じように出力する。<br></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction Language Haskell.\nExtract Inductive list =&gt; &#34;list&#34; [&#34;[]&#34; &#34;(::)&#34;].\nExtraction map.</pre>\n\n\n\n\n<pre class=\"code lang-haskell\" data-lang=\"haskell\" data-unlink>map <span class=\"synStatement\">::</span> (a1 <span class=\"synStatement\">-&gt;</span> a2) <span class=\"synStatement\">-&gt;</span> (list a1) <span class=\"synStatement\">-&gt;</span> list a2\nmap f l <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">case</span> l <span class=\"synStatement\">of</span> {\n   [] <span class=\"synStatement\">-&gt;</span> [];\n   (<span class=\"synStatement\">::</span>) a t <span class=\"synStatement\">-&gt;</span> (<span class=\"synStatement\">::</span>) (f a) (map f t)}\n</pre>\n\n\n<p>正しいけど、あまり綺麗なコードじゃない。<br></p>\n\n<pre class=\"code lang-haskell\" data-lang=\"haskell\" data-unlink>map <span class=\"synStatement\">::</span> (a <span class=\"synStatement\">-&gt;</span> b) <span class=\"synStatement\">-&gt;</span> (list a) <span class=\"synStatement\">-&gt;</span> list b\nmap f [] <span class=\"synStatement\">=</span> []\nmap f x<span class=\"synStatement\">::</span>xs <span class=\"synStatement\">=</span> (f x) <span class=\"synStatement\">::</span> (map f xs)\n</pre>\n\n\n<p>くらいには変換してほしいけど、元の形からすると厳しいのかな。<br></p>\n\n<p>次は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>.<br></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction Language Scheme.\nExtraction map.</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span>lambdas <span class=\"synSpecial\">(</span>f l<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>match l\n     <span class=\"synSpecial\">((</span>Nil<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">`(</span>Nil<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">Cons</span> a t<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">`(</span>Cons <span class=\"synSpecial\">,(</span>f a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">,(</span>@ <span class=\"synIdentifier\">map</span> f t<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>おお。lambdas ってなんだ。match なんて RnRSにないぞ。というか、準クオート使ってるし、<code>,</code>使った式展開も入ってる。<br>\nCoq Extension <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a> っていうのがあって、lambdas マクロやmatch マクロ、@マクロが定義されているわけか。<br>\nlambdas マクロと @マクロはなかなかよい。<br>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> っぽく書きたい時は便利そう。<br>\nmatch マクロは define-syntax みたいな感じかな？<br>\n直接変換するならたしかにこういうマクロ欲しくなるな。<br></p>\n\n<h2>insertion_sort の変換</h2>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>の場合</h3>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction Language Ocaml.\n\nExtract Inductive list =&gt; &#34;list&#34; [&#34;[]&#34; &#34;(::)&#34;].\nExtract Inductive bool =&gt; &#34;bool&#34; [&#34;true&#34; &#34;false&#34;].\nExtract Inductive nat =&gt; int [&#34;0&#34; &#34;succ&#34;] &#34;(fun fO fS n -&gt; if n = 0 then f O () else fS (n-1))&#34;.\nExtraction insert.\nExtraction insertion_sort.</pre>\n\n\n\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synComment\">(** val insert : int -&gt; int list -&gt; int list **)</span>\n\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> insert a l <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> l <span class=\"synStatement\">with</span>\n<span class=\"synStatement\">|</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> a<span class=\"synStatement\">::</span><span class=\"synConstant\">[]</span>\n<span class=\"synStatement\">|</span> x<span class=\"synStatement\">::</span>xs <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">if</span> <span class=\"synPreProc\">Nat</span>.leb a x <span class=\"synStatement\">then</span> a<span class=\"synStatement\">::</span>l <span class=\"synStatement\">else</span> x<span class=\"synStatement\">::(</span>insert a xs<span class=\"synStatement\">)</span>\n\n<span class=\"synComment\">(** val insertion_sort : int list -&gt; int list **)</span>\n\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> insertion_sort <span class=\"synStatement\">=</span> <span class=\"synStatement\">function</span>\n<span class=\"synStatement\">|</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">[]</span>\n<span class=\"synStatement\">|</span> x<span class=\"synStatement\">::</span>xs <span class=\"synStatement\">-&gt;</span> insert x <span class=\"synStatement\">(</span>insertion_sort xs<span class=\"synStatement\">)</span>\n</pre>\n\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>の場合</h3>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction Language Haskell.\n\nExtract Inductive list =&gt; &#34;([])&#34; [&#34;[]&#34; &#34;(:)&#34;].\nExtract Inductive bool =&gt; &#34;Bool&#34; [&#34;True&#34; &#34;False&#34;].\nExtract Inductive nat =&gt; Int [&#34;0&#34; &#34;succ&#34;] &#34;(\\fO fS n -&gt; if n == 0 then fO () else fS (n-1))&#34;.</pre>\n\n\n\n\n<pre class=\"code lang-haskell\" data-lang=\"haskell\" data-unlink>insert <span class=\"synStatement\">::</span> Int <span class=\"synStatement\">-&gt;</span> (([]) Int) <span class=\"synStatement\">-&gt;</span> ([]) Int\ninsert a l <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">case</span> l <span class=\"synStatement\">of</span> {\n   [] <span class=\"synStatement\">-&gt;</span> (<span class=\"synStatement\">:</span>) a [];\n   (<span class=\"synStatement\">:</span>) x xs <span class=\"synStatement\">-&gt;</span>\n    <span class=\"synStatement\">case</span> leb a x <span class=\"synStatement\">of</span> {\n     True <span class=\"synStatement\">-&gt;</span> (<span class=\"synStatement\">:</span>) a l;\n     False <span class=\"synStatement\">-&gt;</span> (<span class=\"synStatement\">:</span>) x (insert a xs)}}\n\ninsertion_sort <span class=\"synStatement\">::</span> (([]) Int) <span class=\"synStatement\">-&gt;</span> ([]) Int\ninsertion_sort l <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">case</span> l <span class=\"synStatement\">of</span> {\n   [] <span class=\"synStatement\">-&gt;</span> [];\n   (<span class=\"synStatement\">:</span>) x xs <span class=\"synStatement\">-&gt;</span> insert x (insertion_sort xs)}\n</pre>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>の場合</h2>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction Language Scheme.\n\nExtraction insert.\nExtraction insertion_sort.</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> insert <span class=\"synSpecial\">(</span>lambdas <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>match l\n     <span class=\"synSpecial\">((</span>Nil<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">`(</span>Cons <span class=\"synSpecial\">,</span>a <span class=\"synSpecial\">,`(</span>Nil<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">Cons</span> x xs<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>match <span class=\"synSpecial\">(</span>@ leb a x<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span>True<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">`(</span>Cons <span class=\"synSpecial\">,</span>a <span class=\"synSpecial\">,</span>l<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span>False<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">`(</span>Cons <span class=\"synSpecial\">,</span>x <span class=\"synSpecial\">,(</span>@ insert a xs<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> insertion_sort <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>l<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>match l\n     <span class=\"synSpecial\">((</span>Nil<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">`(</span>Nil<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">Cons</span> x xs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>@ insert x <span class=\"synSpecial\">(</span>insertion_sort xs<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<h2>ファイルへの出力</h2>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Extraction Language Ocaml.\nExtraction &#34;insertion_sort.ml&#34; insertion_sort.</pre>\n\n\n<p>と入力して proof-general で C-c C-n すると以下のようなファイルが生成された。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Nat =\n struct\n  (** val leb : Int -&gt; Int -&gt; Bool **)\n\n  let rec leb n m =\n    (\\fO fS n -&gt; if n == 0 then fO () else fS (n-1))\n      (fun _ -&gt;\n      True)\n      (fun n&#39; -&gt;\n      (\\fO fS n -&gt; if n == 0 then fO () else fS (n-1))\n        (fun _ -&gt;\n        False)\n        (fun m&#39; -&gt;\n        leb n&#39; m&#39;)\n        m)\n      n\n end\n\n(** val insert : Int -&gt; Int ([]) -&gt; Int ([]) **)\n\nlet rec insert a l = match l with\n| [] -&gt; a:[]\n| x:xs -&gt;\n  (match Nat.leb a x with\n   | True -&gt; a:l\n   | False -&gt; x:(insert a xs))\n\n(** val insertion_sort : Int ([]) -&gt; Int ([]) **)\n\nlet rec insertion_sort = function\n| [] -&gt; []\n| x:xs -&gt; insert x (insertion_sort xs)</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Nat :\n sig\n  val leb : Int -&gt; Int -&gt; Bool\n end\n\nval insert : Int -&gt; Int ([]) -&gt; Int ([])\n\nval insertion_sort : Int ([]) -&gt; Int ([])</pre>\n\n\n<p>lebも作ってくれるのか。\nまあないとコードにならないもんな。</p>\n\n<h2>証明駆動開発のステップ</h2>\n\n<ol>\n<li>まず書こうとしているプログラムがどういう性質をみたすべきかを記述し、</li>\n<li>Coq でそれをみたすようなプログラムを書き、</li>\n<li>実際に最初に考えた性質を証明し、</li>\n<li>Extraction して他の言語のコードに変換する</li>\n</ol>\n\n\n<h2>感想</h2>\n\n<p>形式証明が慣れてないからなのかとても難しかった。<br>\nただ、証明のステップを追うのはとても気持ちよかった。<br></p>\n\n<p>次は、最近発売された純粋関数型データ構造読むかなって気分。<br>\nSML で書かれているらしいから、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> に置き換えながら写経するのが楽かな？<br>\nそれとも付録に <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> 実装があるらしいので <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> に置き換えながら写経して、書けたら答え合わせするほうがいいかな。<br>\n悩ましい。</p>\n\n","slug":"プログラミング Coq (証明駆動開発 2)"},{"data":{"title":"技術書典2に行ってきた","published":"2017/04/09"},"content":"\n<p>お昼頃に予定があったので行くか迷っていたが、14時くらいには空いてきたということで技術書典2に行ってきた。</p>\n\n<p>目当ての一つだったインターネットの闇さんの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の本は既に完売と向かってる最中の電車の中で知る。\nCoqに興味があったのでCoqによる定理証明が買えるといいなと思いながら突入。</p>\n\n<p>16時過ぎでもう終わりかけなのになかなか賑わっていた。\n案の定、既に完売で何も片付けられているスペースもチラホラと。\nCoqによる定理証明のスペースを見つけたので、中身を見させてもらいながらCoqについて色々と教えていただいた。\n入門書かと思っていたけど違った。\n３部出ているうちの、一番簡単そうな2014年出版のものを買った。\nまずは入門して、そして読まねば。</p>\n\n<p>その後ぶらぶらしていたら、インターネットの闇さんのスペースを見つけたので、見本を見させてもらいながら色々話した。\n見本に載っている<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>のコードはとても読みやすかったので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%C5%BB%D2%BD%F1%C0%D2\">電子書籍</a>版を期待していると伝え、またフラフラと。</p>\n\n<p>移動してすぐに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Fortran\">Fortran</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE\">オブジェクト指向</a>プログラミングをするという尖ったことをしているところで声をかけられて <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Fortran\">Fortran</a> の話を聞いた。\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Fortran\">Fortran</a> については、科学技術計算で主に使用されていることと、現在使われている<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>の中で最も古い言語の一つってことくらいしか知らなかったのでおもしろかった。\n結局バグを減らしたかったり、大学みたいに人が入れ替わる環境だと既存のコードがすぐにレガシーになるので、可読性を高めたいということだった。\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Fortran\">Fortran</a>自体に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE\">オブジェクト指向</a>が導入されたのはFortran2003かららしいが、ユーザが少ないらしく最適化が後回しにされたりすることもあるらしい。\n自分が実際に触ることはないだろうけど、知らない言語の話を聞くのは面白かった。\n入門部分も書かれているという第一部を買った。\n速習する部分があったので、そこくらいは読んでおきたい。</p>\n\n<p>出不精なので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BD%A9%CD%D5%B8%B6\">秋葉原</a>までの遠出はつらかったが、普段聞けないことを色々聞けてよかった。</p>\n\n","slug":"技術書典2に行ってきた"},{"data":{"title":"Pathname#joinの不思議な挙動","published":"2017/01/12","tags":["ruby"]},"content":"\n<p>空のPathname同士をjoinした時に期待と違う挙動があった。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> $ ruby -v\nruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin16]</pre>\n\n\n<p>期待していたのは次の動作。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>path = <span class=\"synType\">Pathname</span>.new(<span class=\"synSpecial\">''</span>)         <span class=\"synComment\"># =&gt; #&lt;Pathname:&gt;</span>\npath.join(path)                 <span class=\"synComment\"># =&gt; #&lt;Pathname:&gt;</span>\n</pre>\n\n\n<p>でも実際はこうなっていた。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>path = <span class=\"synType\">Pathname</span>.new(<span class=\"synSpecial\">''</span>)         <span class=\"synComment\"># =&gt; #&lt;Pathname:&gt;</span>\npath.join(path)                 <span class=\"synComment\"># =&gt; #&lt;Pathname:.&gt;</span>\n</pre>\n\n\n<p>空のPathnameと空のPathnameをjoinしてるんだから空のPathnameが欲しかったのに、 <code>.</code> がどこからか出てきてる。<br/>\nなぜこうなっているんだろう。</p>\n\n","slug":"Pathname#joinの不思議な挙動"},{"data":{"title":"剰余を使わないFizzBuzz","published":"2016/11/25","tags":["Haskell"]},"content":"\n<p>先日ESMで開かれた<a href=\"https://yochiyochihs.doorkeeper.jp/events/54217\">よちよち.hs</a>に参加しました．<br/>\nそこで剰余を使わずにzip3と無限リストを使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/FizzBuzz\">FizzBuzz</a>を書く話があったので書いてみました．</p>\n\n<pre class=\"code lang-haskell\" data-lang=\"haskell\" data-unlink>fizzbuzz <span class=\"synStatement\">=</span> map fizzbuzz' <span class=\"synStatement\">$</span> zip3 [<span class=\"synConstant\">1</span><span class=\"synStatement\">..</span>] (cycle [<span class=\"synConstant\">&quot;&quot;</span>,<span class=\"synConstant\">&quot;&quot;</span>,<span class=\"synConstant\">&quot;Fizz&quot;</span>]) (cycle [<span class=\"synConstant\">&quot;&quot;</span>, <span class=\"synConstant\">&quot;&quot;</span>, <span class=\"synConstant\">&quot;&quot;</span>, <span class=\"synConstant\">&quot;&quot;</span>,<span class=\"synConstant\">&quot;Buzz&quot;</span>])\n  <span class=\"synType\">where</span> fizzbuzz' (_, <span class=\"synConstant\">&quot;Fizz&quot;</span>, <span class=\"synConstant\">&quot;Buzz&quot;</span>) <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;FizzBuzz&quot;</span>\n        fizzbuzz' (_, <span class=\"synConstant\">&quot;Fizz&quot;</span>, _) <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;Fizz&quot;</span>\n        fizzbuzz' (_, _, <span class=\"synConstant\">&quot;Buzz&quot;</span>) <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;Buzz&quot;</span>\n        fizzbuzz' (n, _, _) <span class=\"synStatement\">=</span> show n\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>*Main&gt; take 100 fizzbuzz\n[&#34;1&#34;,&#34;2&#34;,&#34;Fizz&#34;,&#34;4&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;7&#34;,&#34;8&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;,&#34;11&#34;,&#34;Fizz&#34;,&#34;13&#34;,&#34;14&#34;,&#34;FizzBuzz&#34;,&#34;16&#34;,&#34;17&#34;,&#34;Fizz&#34;,&#34;19&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;22&#34;,&#34;23&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;,&#34;26&#34;,&#34;Fizz&#34;,&#34;28&#34;,&#34;29&#34;,&#34;FizzBuzz&#34;,&#34;31&#34;,&#34;32&#34;,&#34;Fizz&#34;,&#34;34&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;37&#34;,&#34;38&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;,&#34;41&#34;,&#34;Fizz&#34;,&#34;43&#34;,&#34;44&#34;,&#34;FizzBuzz&#34;,&#34;46&#34;,&#34;47&#34;,&#34;Fizz&#34;,&#34;49&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;52&#34;,&#34;53&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;,&#34;56&#34;,&#34;Fizz&#34;,&#34;58&#34;,&#34;59&#34;,&#34;FizzBuzz&#34;,&#34;61&#34;,&#34;62&#34;,&#34;Fizz&#34;,&#34;64&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;67&#34;,&#34;68&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;,&#34;71&#34;,&#34;Fizz&#34;,&#34;73&#34;,&#34;74&#34;,&#34;FizzBuzz&#34;,&#34;76&#34;,&#34;77&#34;,&#34;Fizz&#34;,&#34;79&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;82&#34;,&#34;83&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;,&#34;86&#34;,&#34;Fizz&#34;,&#34;88&#34;,&#34;89&#34;,&#34;FizzBuzz&#34;,&#34;91&#34;,&#34;92&#34;,&#34;Fizz&#34;,&#34;94&#34;,&#34;Buzz&#34;,&#34;Fizz&#34;,&#34;97&#34;,&#34;98&#34;,&#34;Fizz&#34;,&#34;Buzz&#34;]</pre>\n\n\n<p>無限リストが扱いやすくていいですね．<br/>\nこういう書き方もあったとは</p>\n\n","slug":"剰余を使わないFizzBuzz"},{"data":{"title":"Rollbarでbotが出すエラーを無視する","published":"2016/10/19","tags":["Rollbar"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/bot\">bot</a>から既に削除されたURLへのアクセスがあり，Rollbarのエラーログのノイズがひどかったので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/bot\">bot</a>からのアクセスで起こった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ActiveRecord\">ActiveRecord</a>::RecordNotFoundを無視する設定を書きました．</p>\n\n<p>上部のバーからSettingsをクリックします．\n<a href=\"https://gyazo.com/0de19f13528995a168e36aeb10adc72b\"><img src=\"https://i.gyazo.com/0de19f13528995a168e36aeb10adc72b.png\" alt=\"https://gyazo.com/0de19f13528995a168e36aeb10adc72b\" /></a></p>\n\n<p>次に画面左からGroupingをクリック．\n<a href=\"https://gyazo.com/991020fcbc82e6e917285dcafbbf5a14\"><img src=\"https://i.gyazo.com/991020fcbc82e6e917285dcafbbf5a14.png\" alt=\"https://gyazo.com/991020fcbc82e6e917285dcafbbf5a14\" /></a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>でCustom Groupを定義します．\n<a href=\"https://gyazo.com/3f613693a8210aed7ea79e12f3674b08\"><img src=\"https://i.gyazo.com/3f613693a8210aed7ea79e12f3674b08.png\" alt=\"https://gyazo.com/3f613693a8210aed7ea79e12f3674b08\" /></a></p>\n\n<p>ボットからのアクセスで起こった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ActiveRecord\">ActiveRecord</a>::RecordNotFoundをグルーピングするには次のような<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>で定義できます．</p>\n\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">[</span>\n  <span class=\"synSpecial\">{</span>\n    &quot;<span class=\"synStatement\">title</span>&quot;: &quot;<span class=\"synConstant\">Bot error</span>&quot;,\n    &quot;<span class=\"synStatement\">fingerprint</span>&quot;: &quot;<span class=\"synConstant\">bot-error</span>&quot;,\n    &quot;<span class=\"synStatement\">condition</span>&quot;: <span class=\"synSpecial\">{</span>\n      &quot;<span class=\"synStatement\">all</span>&quot;: <span class=\"synSpecial\">[</span>\n        <span class=\"synSpecial\">{</span> &quot;<span class=\"synStatement\">path</span>&quot;: &quot;<span class=\"synConstant\">request.headers.User-Agent</span>&quot;,\n          &quot;<span class=\"synStatement\">in</span>&quot;: <span class=\"synSpecial\">[</span>\n            &quot;<span class=\"synConstant\">Mozilla/5.0 (compatible; AhrefsBot/5.1; +http://ahrefs.com/robot/)</span>&quot;,\n            &quot;<span class=\"synConstant\">Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)</span>&quot;,\n            &quot;<span class=\"synConstant\">Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</span>&quot;,\n            &quot;<span class=\"synConstant\">Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)</span>&quot;,\n            &quot;<span class=\"synConstant\">Mozilla/5.0 (compatible; Exabot/3.0; +http://www.exabot.com/go/robot)</span>&quot;\n          <span class=\"synSpecial\">]</span>\n        <span class=\"synSpecial\">}</span>,\n        <span class=\"synSpecial\">{</span> &quot;<span class=\"synStatement\">path</span>&quot;: &quot;<span class=\"synConstant\">body.trace.exception.class</span>&quot;,\n          &quot;<span class=\"synStatement\">eq</span>&quot;: &quot;<span class=\"synConstant\">ActiveRecord::RecordNotFound</span>&quot; <span class=\"synSpecial\">}</span>\n      <span class=\"synSpecial\">]</span>\n    <span class=\"synSpecial\">}</span>\n  <span class=\"synSpecial\">}</span>\n<span class=\"synSpecial\">]</span>\n</pre>\n\n\n<p>このpathはOccurrenceのRawJSONで出力されているログのパス。\nリファレンスはこちら。\nin以外にもeqやcontainなどがあります．</p>\n\n<p><a href=\"https://rollbar.com/docs/custom-grouping/\">https://rollbar.com/docs/custom-grouping/</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>が書けたら入力欄左下にあるボックスにoccurrence IDを入力してマッチさせたいエラーにマッチするか確認できます．\n<a href=\"https://gyazo.com/fa47f8f31caf1ed6cd28c083010b112f\"><img src=\"https://i.gyazo.com/fa47f8f31caf1ed6cd28c083010b112f.png\" alt=\"https://gyazo.com/fa47f8f31caf1ed6cd28c083010b112f\" /></a></p>\n\n<p> 次にエラーが起こると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Bot\">Bot</a> errorとしてグルーピングされるのでそれをmuteすると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Dashboard\">Dashboard</a>に表示されなくなります．\n逆に特定のエラーグループのlevelをwarningからcriticalに上げることもできたりもします．</p>\n\n","slug":"Rollbarでbotが出すエラーを無視する"},{"data":{"title":"anagramの別解考えた","published":"2016/10/04","tags":["ruby"]},"content":"\n<p>まず二つの文字列のサイズを計測して，それらが等しくなければfalseを返す．\n同じ場合は一文字ずつカウントしながらハッシュに入れていく．\nこの時，s1の文字はインクリメントして，s2の文字はデクリメントする．\n最後にハッシュのバリューを取りだして，すべてゼロならtrue.\nひとつでもゼロでなければfalse.\nそれで書いたのが以下．</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">anagram</span>(s1, s2)\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">false</span> <span class=\"synStatement\">if</span> s1.size != s2.size\n\n  compare(s1.downcase, s2.downcase, s1.size)\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">compare</span>(s1, s2, size)\n  counts = <span class=\"synType\">Hash</span>.new(<span class=\"synConstant\">0</span>)\n  <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> <span class=\"synConstant\">0</span>..(size-<span class=\"synConstant\">1</span>) <span class=\"synStatement\">do</span>\n    counts[s1[i]] += <span class=\"synConstant\">1</span>\n    counts[s2[i]] -= <span class=\"synConstant\">1</span>\n  <span class=\"synStatement\">end</span>\n\n  counts.values.all?{ |<span class=\"synIdentifier\">value</span>| value == <span class=\"synConstant\">0</span> }\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n<p>んー</p>\n\n<p>追記\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>の積を取るやり方を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/reddit\">reddit</a>で教えてもらったので．</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">str_product</span>(str)\n  <span class=\"synType\">PRIMES</span> = [<span class=\"synConstant\">2</span>,   <span class=\"synConstant\">3</span>,  <span class=\"synConstant\">5</span>,  <span class=\"synConstant\">7</span>, <span class=\"synConstant\">11</span>, <span class=\"synConstant\">13</span>, <span class=\"synConstant\">17</span>, <span class=\"synConstant\">19</span>, <span class=\"synConstant\">23</span>, <span class=\"synConstant\">29</span>,\n            <span class=\"synConstant\">31</span>, <span class=\"synConstant\">37</span>, <span class=\"synConstant\">41</span>, <span class=\"synConstant\">43</span>, <span class=\"synConstant\">47</span>, <span class=\"synConstant\">53</span>, <span class=\"synConstant\">59</span>, <span class=\"synConstant\">61</span>, <span class=\"synConstant\">67</span>, <span class=\"synConstant\">71</span>,\n            <span class=\"synConstant\">73</span>, <span class=\"synConstant\">79</span>, <span class=\"synConstant\">83</span>, <span class=\"synConstant\">89</span>, <span class=\"synConstant\">97</span>, <span class=\"synConstant\">101</span>, <span class=\"synConstant\">103</span>, <span class=\"synConstant\">107</span>, <span class=\"synConstant\">109</span>, <span class=\"synConstant\">113</span>,\n            <span class=\"synConstant\">127</span>, <span class=\"synConstant\">131</span>, <span class=\"synConstant\">137</span>, <span class=\"synConstant\">139</span>, <span class=\"synConstant\">149</span>, <span class=\"synConstant\">151</span>, <span class=\"synConstant\">157</span>, <span class=\"synConstant\">163</span>, <span class=\"synConstant\">167</span>, <span class=\"synConstant\">173</span>,\n            <span class=\"synConstant\">179</span>, <span class=\"synConstant\">181</span>, <span class=\"synConstant\">191</span>, <span class=\"synConstant\">193</span>, <span class=\"synConstant\">197</span>, <span class=\"synConstant\">199</span>, <span class=\"synConstant\">211</span>, <span class=\"synConstant\">223</span>, <span class=\"synConstant\">227</span>, <span class=\"synConstant\">229</span>,\n            <span class=\"synConstant\">233</span>, <span class=\"synConstant\">239</span>, <span class=\"synConstant\">241</span>, <span class=\"synConstant\">251</span>, <span class=\"synConstant\">257</span>, <span class=\"synConstant\">263</span>, <span class=\"synConstant\">269</span>, <span class=\"synConstant\">271</span>, <span class=\"synConstant\">277</span>, <span class=\"synConstant\">281</span>,\n            <span class=\"synConstant\">283</span>, <span class=\"synConstant\">293</span>, <span class=\"synConstant\">307</span>, <span class=\"synConstant\">311</span>, <span class=\"synConstant\">313</span>, <span class=\"synConstant\">317</span>, <span class=\"synConstant\">331</span>, <span class=\"synConstant\">337</span>, <span class=\"synConstant\">347</span>, <span class=\"synConstant\">349</span>,\n            <span class=\"synConstant\">353</span>, <span class=\"synConstant\">359</span>, <span class=\"synConstant\">367</span>, <span class=\"synConstant\">373</span>, <span class=\"synConstant\">379</span>, <span class=\"synConstant\">383</span>, <span class=\"synConstant\">389</span>, <span class=\"synConstant\">397</span>, <span class=\"synConstant\">401</span>, <span class=\"synConstant\">409</span>,\n            <span class=\"synConstant\">419</span>, <span class=\"synConstant\">421</span>, <span class=\"synConstant\">431</span>, <span class=\"synConstant\">433</span>, <span class=\"synConstant\">439</span>, <span class=\"synConstant\">443</span>, <span class=\"synConstant\">449</span>, <span class=\"synConstant\">457</span>, <span class=\"synConstant\">461</span>, <span class=\"synConstant\">463</span>,\n            <span class=\"synConstant\">467</span>, <span class=\"synConstant\">479</span>, <span class=\"synConstant\">487</span>, <span class=\"synConstant\">491</span>, <span class=\"synConstant\">499</span>, <span class=\"synConstant\">503</span>, <span class=\"synConstant\">509</span>, <span class=\"synConstant\">521</span>, <span class=\"synConstant\">523</span>, <span class=\"synConstant\">541</span>,\n            <span class=\"synConstant\">547</span>, <span class=\"synConstant\">557</span>, <span class=\"synConstant\">563</span>, <span class=\"synConstant\">569</span>, <span class=\"synConstant\">571</span>, <span class=\"synConstant\">577</span>, <span class=\"synConstant\">587</span>, <span class=\"synConstant\">593</span>, <span class=\"synConstant\">599</span>, <span class=\"synConstant\">601</span>,\n            <span class=\"synConstant\">607</span>, <span class=\"synConstant\">613</span>, <span class=\"synConstant\">617</span>, <span class=\"synConstant\">619</span>, <span class=\"synConstant\">631</span>, <span class=\"synConstant\">641</span>, <span class=\"synConstant\">643</span>, <span class=\"synConstant\">647</span>, <span class=\"synConstant\">653</span>, <span class=\"synConstant\">659</span>,\n            <span class=\"synConstant\">661</span>, <span class=\"synConstant\">673</span>, <span class=\"synConstant\">677</span>, <span class=\"synConstant\">683</span>, <span class=\"synConstant\">691</span>, <span class=\"synConstant\">701</span>, <span class=\"synConstant\">709</span>, <span class=\"synConstant\">719</span>]\n  result = <span class=\"synConstant\">0</span>\n  (<span class=\"synConstant\">0</span>..(str.size - <span class=\"synConstant\">1</span>)).each <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">i</span>|\n    result +=<span class=\"synType\">PRIMES</span>[str[i].downcase.ord]\n  <span class=\"synStatement\">end</span>\n  result\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">anagram</span>(s1, s2)\n  str_product(s1) == str_product(s2)\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n<p>これはいい</p>\n\n","slug":"anagramの別解考えた"},{"data":{"title":"Githubにpushした時に他の人がpushしたと通知される","published":"2016/09/26","tags":["github"]},"content":"\n<p>転職して配属されたプロジェクトの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>ーで，僕がpushしてるのに他の人がpushしてると通知される不具合がありました．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Github\">Github</a>の設定や.gitconfigを見てもおかしいところはなく，どうしようかと思っていたらStackOverFlowにちょうど同じ症状の質問がありました．</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F21615431%2Fgit-pushes-with-wrong-user-from-terminal\" title=\"git pushes with wrong user from terminal\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://stackoverflow.com/questions/21615431/git-pushes-with-wrong-user-from-terminal\">stackoverflow.com</a></cite></p>\n\n<ol>\n<li><code>Command + Space</code> で spotlight を開く</li>\n<li><code>keychain</code> と入力しEnterを押して Keychain <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Access\">Access</a>.appを起動</li>\n<li>左のカラムから<code>ログイン</code>と<code>パスワード</code>の2つの項目を選択</li>\n<li><code>github.com</code>を削除する</li>\n<li>remoteが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ssh\">ssh</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/https\">https</a>に変更されているので <code>git remote set-url ...</code> で登録しなおす．</li>\n</ol>\n\n\n<p>これで解決できました．</p>\n\n","slug":"Githubにpushした時に他の人がpushしたと通知される"},{"data":{"title":"RubyKaigiの弁当のコードを実行してみた","published":"2016/09/09","tags":["ruby"]},"content":"\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>                <span class=\"synStatement\">eval</span>(\n               <span class=\"synSpecial\">%w(</span><span class=\"synConstant\"> put</span>\n<span class=\"synConstant\">             s(([   2*7,</span>\n<span class=\"synConstant\">            2*31     ,1,3</span>\n<span class=\"synConstant\">           *3*5       ,2*2</span>\n<span class=\"synConstant\">          *2*2          *3].</span>\n<span class=\"synConstant\">         map{            |c|c</span>\n<span class=\"synConstant\">        .to_          s(5*7</span>\n<span class=\"synConstant\">       ).gs        ub(&quot;1    &quot;,&quot;</span>\n<span class=\"synConstant\">      \\s&quot;)      .upca        se}.</span>\n<span class=\"synConstant\">     zip(     [2*5*           61*1</span>\n<span class=\"synConstant\">    801,    2*5*3              931,</span>\n<span class=\"synConstant\">   811*   1871,                 2*11</span>\n<span class=\"synConstant\">  *350  27,7*                    11*1</span>\n<span class=\"synConstant\"> 259* 20389                       *764</span>\n<span class=\"synConstant\">171].map{|c|c.to_s(2*2*3*3)}))*&quot;&quot;)</span><span class=\"synSpecial\">)</span>*<span class=\"synSpecial\">&quot;&quot;</span>)\n<span class=\"synComment\"># &gt;&gt; Enjoy Ruby with Agile Development</span>\n</pre>\n\n\n","slug":"RubyKaigiの弁当のコードを実行してみた"},{"data":{"title":"OSXにGaucheのHEADをインストール","published":"2016/08/07","tags":["gauche","scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>のHEADをインストールするにはリリースされた最新の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>が必要です． <br/>\nここにはまりました． <br/>\nなぜか最新版の0.9.4でもビルドできなかったので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/brew\">brew</a>でインストールしてから後で消しています．<br/>\n<code>make install</code> の後に<code>brew uninstall gauche</code>をすると必要なusr/local/share以下のファイルなどが消されてしまうので\n必ず<code>make install</code> の前に<code>brew uninstall gauche</code>しましょう．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ brew install gauche\n$ git clone git@github.com:shirok/Gauche.git\n$ cd Gauche\n$ ./DIST gen\n$ ./configure --enable-threads=pthreads\n$ make</pre>\n\n\n<p>ここで</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>warning: unrecognized encoding name `utf-8’</pre>\n\n\n<p>と表示されますが無視．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ make check\n$ brew uninstall gauche\n$ make install</pre>\n\n\n<p>これでインストールできました．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ gosh -V\nGauche scheme shell, version 0.9.5_pre2 [utf-8,pthreads], x86_64-apple-darwin15.6.0\n$ gosh\ngosh&gt; (+ 1 1)\n2</pre>\n\n\n<p>無事動いていますね．これで完了です．</p>\n\n<p>今後HEADをビルドするにはダウンロードした<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リで</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ git pull\n$ gauche-config --reconfigure | sh &amp;&amp; make &amp;&amp; make check &amp;&amp; make install</pre>\n\n\n<p>するだけで済みます．</p>\n\n","slug":"OSXにGaucheのHEADをインストール"},{"data":{"title":"MacでSticky ShiftにするためのKarabinerの設定","published":"2016/07/29","tags":["mac","キーボード","emacs","skk","karabiner"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SKK\">SKK</a>を使いはじめました．<br/>\nそうするとシフトキーを多用するのでもっと楽に入力したくなります．<br/>\nそこでSticky Shiftです．<br/>\n「シフトキーを押したまま他のキーを入力する」のではなく，「一度シフトキーを押して離した直後に押したキーが大文字になってくれます．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SKK\">SKK</a>を使っていなくてもCamelCaseなどの入力がとても楽になります．<br/>\n左手小指はControlキーのためにありますからね．<br/>\n全国一千万人の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>愛好家にとっては譲れませんよね．</p>\n\n<p>Karabinerに標準でSticky Shiftの設定項目はありませんが，private.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を編集することで設定できるようになります．  <br/>\nただ <code>private.xml</code> の記述方法がわかりづらかったので書いておきます．  <br/>\n僕はセミコロンをSticky Shiftにして右シフトをセミコロンにしています．  <br/>\nそのかわりに右シフトをセミコロンに当てています．</p>\n\n<p>~/Library/Application\\ Support/Karabiner/private.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を編集します．</p>\n\n<pre class=\"code lang-xml\" data-lang=\"xml\" data-unlink><span class=\"synComment\">&lt;?</span><span class=\"synType\">xml version</span>=<span class=\"synConstant\">&quot;1.0&quot;</span><span class=\"synComment\">?&gt;</span>\n<span class=\"synIdentifier\">&lt;root&gt;</span>\n  <span class=\"synIdentifier\">&lt;item&gt;</span>\n    <span class=\"synIdentifier\">&lt;name&gt;</span>Common<span class=\"synIdentifier\">&lt;/name&gt;</span>\n    <span class=\"synIdentifier\">&lt;item&gt;</span>\n      <span class=\"synIdentifier\">&lt;name&gt;</span>Sticky Shift<span class=\"synIdentifier\">&lt;/name&gt;</span>\n      <span class=\"synIdentifier\">&lt;appendix&gt;</span>Use semicolon to Sticky Shift_L<span class=\"synIdentifier\">&lt;/appendix&gt;</span>\n      <span class=\"synIdentifier\">&lt;identifier&gt;</span>private.semicolon_to_sticky_shift_l<span class=\"synIdentifier\">&lt;/identifier&gt;</span>\n      <span class=\"synIdentifier\">&lt;autogen&gt;</span>\n        --KeyToKey-- KeyCode::SEMICOLON, ModifierFlag::NONE,\n        KeyCode::VK_STICKY_SHIFT_L\n      <span class=\"synIdentifier\">&lt;/autogen&gt;</span>\n    <span class=\"synIdentifier\">&lt;/item&gt;</span>\n    <span class=\"synIdentifier\">&lt;item&gt;</span>\n      <span class=\"synIdentifier\">&lt;name&gt;</span>Change Shift_R2Semicoron<span class=\"synIdentifier\">&lt;/name&gt;</span>\n      <span class=\"synIdentifier\">&lt;appendix&gt;</span>Use Shift_R to Semicolon<span class=\"synIdentifier\">&lt;/appendix&gt;</span>\n      <span class=\"synIdentifier\">&lt;identifier&gt;</span>private.dhift_r_to_semicolon<span class=\"synIdentifier\">&lt;/identifier&gt;</span>\n      <span class=\"synIdentifier\">&lt;autogen&gt;</span>--KeyToKey-- KeyCode::SHIFT_R, KeyCode::SEMICOLON<span class=\"synIdentifier\">&lt;/autogen&gt;</span>\n    <span class=\"synIdentifier\">&lt;/item&gt;</span>\n  <span class=\"synIdentifier\">&lt;/item&gt;</span>\n<span class=\"synIdentifier\">&lt;/root&gt;</span>\n</pre>\n\n\n<p>これでKarabinerでSticky Shiftをチェックできるようになります．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SKK\">SKK</a>を使っていなくてもSticky Shiftは便利なので是非設定しましょう．</p>\n\n","slug":"MacでSticky ShiftにするためのKarabinerの設定"},{"data":{"title":"リモートのブランチにローカルでチェックアウトする","published":"2016/07/13","tags":["git"]},"content":"\n<p>まずリモートブランチをfetchします．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ git fetch</pre>\n\n\n<p>次にリモートブランチを確認します．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> $ git branch -a\n* master\n  remotes/origin/01_untested\n  remotes/origin/02_setup\n  remotes/origin/03_models\n  remotes/origin/04_factories\n  remotes/origin/05_controller_basics\n  remotes/origin/06_advanced_controllers\n  remotes/origin/07_controller_cleanup\n  remotes/origin/08_features\n  remotes/origin/09_speedup\n  remotes/origin/11_tdd\n  remotes/origin/HEAD -&gt; origin/master\n  remotes/origin/master</pre>\n\n\n<p>ここでチェックアウトしたいのは<code>02_setup</code>です．<br/>\nローカルブランチ名を指定してリモートブランチをチェックアウトします．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> $ git co -b 02_setup origin/02_setup\nBranch 02_setup set up to track remote branch 02_setup from origin.\nSwitched to a new branch &#39;02_setup&#39;</pre>\n\n\n<p>これでリモートブランチにチェックアウトすることができました．</p>\n\n","slug":"リモートのブランチにローカルでチェックアウトする"},{"data":{"title":"Railsのnew, build, createの違い","published":"2016/07/13","tags":["Ruby on Rails"]},"content":"\n<p><a href=\"http://railsdoc.com/references/build\">build - &#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9; - - Rails&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>\n\n<h2>new</h2>\n\n<p>モデルオブジェクトを生成する．<br/>\n生成するだけで，保存はされていないためsaveメソッドなどを使用して保存する．</p>\n\n<h2>build</h2>\n\n<p>new の alias</p>\n\n<h2>create</h2>\n\n<p>モデルオブジェクトを生成して保存する．</p>\n\n","slug":"Railsのnew, build, createの違い"},{"data":{"title":"Scheme修行のtryについて","published":"2016/06/04","tags":["gauche","scheme"]},"content":"\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41t9gbUu52L._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Scheme修行\" title=\"Scheme修行\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068536/wataro-22/\">Scheme修行</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman and Matthias Felleisen,元吉文男,横山晶一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2011/06/15</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 3人 <span class=\"hatena-asin-detail-label\">クリック</span>: 46回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274068536/wataro-22\" target=\"_blank\">この商品を含むブログ (10件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>p89の欄外で補足されているtryについて．<br/>\nこれが出てきたのは <code>rember1*</code> の実装の中です．<br/>\n<code>rember1*</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a> aとリストlを引数に取ります． <br/>\nlの中で最初に出てきたaと同じアトムを削除して新しいリストを返す手続きです．</p>\n\n<p>tryを使う前の実装は以下になります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? <span class=\"synSpecial\">(</span>let/cc oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)))</span>\n        l\n        <span class=\"synSpecial\">(</span>rm a l <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> <span class=\"synSpecial\">())))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-car\n             <span class=\"synSpecial\">(</span>let/cc oh\n               <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>atom? new-car<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> new-car <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n<p>リストの中で最後まで探し終わってlがnullになれば継続に<code>(quote no)</code>を渡します．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>であればcarにリストはないのでcdrを探します．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に探して，aと同じものがあれば，それを取り除いた残りのリストを返します．<br/>\n取り除くのは最初に見つかったものだけです．<br/>\nこのコードをtryを使うとこうなります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rember1*\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>try oh <span class=\"synSpecial\">(</span>rm a l oh<span class=\"synSpecial\">)</span> l<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rm\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a l oh<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>oh <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> no<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">((</span>atom? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">))))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span>try oh2\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> oh2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>rm a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> oh<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>tryについてはここでページ欄外に</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>try x <span class=\"synError\">α</span> <span class=\"synError\">β</span><span class=\"synSpecial\">)</span>\n<span class=\"synIdentifier\">=</span>\n<span class=\"synSpecial\">(</span>let/cc success\n  <span class=\"synSpecial\">(</span>let/cc x\n    <span class=\"synSpecial\">(</span>success a<span class=\"synSpecial\">))</span>\n  b<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>と書かれています．<br/>\nここがなかなかわかりませんでした．</p>\n\n<p>まず中のlet/ccから考えます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>let/cc x\n  <span class=\"synSpecial\">(</span>success <span class=\"synError\">α</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>α内で継続xが使われているはずです．<br/>\n継続xに値γが渡されると，<code>(let/cc x γ)</code>となり，次の計算βに進みます．</p>\n\n<p>継続xに値が渡されない場合はαの値が継続successに渡され，そこで計算が終了しこの式の値はαとなります．<br/>\nつまり，tryはα内で継続xに値が渡されればβの値が返り，<br/>\n渡されなければαの値が返るわけです．<br/>\n元の式で継続に値が渡されたのを判別するために<code>(quote no)</code>を継続に渡して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/atom\">atom</a>?で判別していたものを<br/>\n継続が返ってくるかこないかで判別できるようになっています．</p>\n\n<p>継続難しいです．<br/>\nでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>修行で少しずつわかってきた気がします．</p>\n\n","slug":"Scheme修行のtryについて"},{"data":{"title":"Schemeでクイックソート","published":"2016/05/14","tags":["scheme"]},"content":"\n<p>先日の納会でソートの話が少し出たので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%A4%A5%C3%A5%AF%A5%BD%A1%BC%A5%C8\">クイックソート</a>を書いてみました．<br/>\n書きやすいので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>で．</p>\n\n<p>まず普通に書いてみます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>quick <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> first x<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (quick &#39;( 4 7 8 3 9 2 7 3 92 7 1))\n(1 2 3 3 4 7 7 7 8 9 92)</pre>\n\n\n<p>普通ですね．<br/>\nただfilterで何度もリストの中身を舐めているのが嫌です．\nここでstreamを使ってみます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use util.stream<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-&gt;list\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>s <span class=\"synSpecial\">(</span>list-&gt;stream lst<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n         stream-null\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>stream-append <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x first<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> first x<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (quick &#39;( 4 7 8 3 9 2 7 3 92 7 1))\n(1 2 3 3 4 7 7 7 8 9 92)</pre>\n\n\n<p>リストからストリームへの変換とストリームからリストへの変換が入っているので<br/>\n効率的になったのかどうか怪しいですが一応期待通りに動いていますね．<br/>\nどうするのが正解なんでしょう？</p>\n\n","slug":"Schemeでクイックソート"},{"data":{"title":"once-onlyマクロの解読","published":"2016/04/09","tags":["Common Lisp"]},"content":"\n<p>実践<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Common%20Lisp\">Common Lisp</a> p100にあるonce-onlyマクロの解読に挑戦．\n<div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274067211/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51LYivxTpSL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"実践Common Lisp\" title=\"実践Common Lisp\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274067211/wataro-22/\">実践Common Lisp</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Peter Seibel,佐野匡俊,水丸淳,園城雅之,金子祐介</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2008/07/26</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 8人 <span class=\"hatena-asin-detail-label\">クリック</span>: 192回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274067211/wataro-22\" target=\"_blank\">この商品を含むブログ (69件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div>\n　<br/>\n　<br/>\n　</p>\n\n<h3>マクロのコードは以下のとおり．</h3>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">defmacro</span> onece-only <span class=\"synSpecial\">((</span><span class=\"synType\">&amp;rest</span> names<span class=\"synSpecial\">)</span> <span class=\"synType\">&amp;body</span> body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n       <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n          ,<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names for g in gensyms collect <span class=\"synPreProc\">`(</span>,n ,g<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                ,@body<span class=\"synSpecial\">)</span><span class=\"synPreProc\">))</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<h3>一行ずつ解読していく</h3>\n\n<p>まずは</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>の部分から．<br/>\nバッククォートがないので何がgensymsに束縛されるかをREPLで確かめる．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n           gensyms<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synType\">#:G884</span> <span class=\"synType\">#:G885</span> <span class=\"synType\">#:G886</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>namesの数と同じだけのユニークなシンボルを作成している．\n　<br/>\n　<br/>\n次の行は</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>gensymsは一行目の処理でユニークなシンボルのリストになっている．<br/>\ngensymsのそれぞれの要素と(gensym)をペアにしていく．<br/>\nここまでを実行してみる．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span><span class=\"synType\">#:G887</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G888</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G889</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>　<br/>\n三行目．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>とうとう`,が二重に．<br/>\n１つずつ見ていく．\n二行目の`(let　の式の中で `(letとなっているのでここは出力後の形が`(letとなってほしいはず．<br/>\n,,@となっているのは二行目のバッククォート，三行目頭のバッククォートと二回バッククォートされているので\n二度展開しなといloopが展開されない．\nこれでloop内は展開されるようになった．\n次は``(,,g ,,n)．二重にバッククォートするのは先ほどと同じように`(foo bar) という形のリストにしたいから．<br/>\n(,,g ,,n)になっているのはloopでgensymsの要素をgに，namesの要素をnに対応付けているから．<br/>\n`(,gensymsの要素 ,nameの要素)という形に変換しようとしている．<br/>\n　　<br/>\nここまでを展開するとこうなる</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>names <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n             <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@<span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                   <span class=\"synPreProc\">))</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span><span class=\"synType\">#:G937</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G938</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G939</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synPreProc\">`(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">(</span>,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G937</span> ,A<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G938</span> ,B<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G939</span> ,C<span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n     <span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時には新たに(gensym)で作られたユニークなシンボルにnamesの値が束縛されるようになる．<br/>\n　<br/>\n　<br/>\n最後に４行目．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>,<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names for g in gensyms collect <span class=\"synPreProc\">`(</span>,n ,g<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>二行目と三行目でバッククォートされてるので,先頭のカンマは展開されず(let ...という形になる．  <br/>\n,@の部分は既に先頭で一度カンマがあった後なのでそのまま展開出来る．<br/>\n`(,n ,g)の部分で実際にAにAの値を束縛するという部分を作る．  <br/>\nなのでここではバッククォートが一つ．<br/>\nここのgには３行目で値に束縛したユニークなシンボルが入る．<br/>\n実際に展開する．<br/>\n最後なのですべて展開するとこうなる.</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>CL-USER&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>names <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'(</span>body<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>gensyms <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names collect <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">))))</span>\n             <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@<span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms collect <span class=\"synPreProc\">`(</span>,g <span class=\"synSpecial\">(</span><span class=\"synStatement\">gensym</span><span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                <span class=\"synPreProc\">`(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for g in gensyms for n in names collect `<span class=\"synPreProc\">`(</span>,,g ,,n<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                   ,<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>,@ <span class=\"synSpecial\">(</span><span class=\"synStatement\">loop</span> for n in names for g in gensyms collect <span class=\"synPreProc\">`(</span>,n ,g<span class=\"synPreProc\">)</span><span class=\"synSpecial\">))</span>\n                         ,@body<span class=\"synSpecial\">)</span><span class=\"synPreProc\">))</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span><span class=\"synType\">#:G934</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G935</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synType\">#:G936</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">GENSYM</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synPreProc\">`(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">(</span>,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G934</span> ,A<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G935</span> ,B<span class=\"synPreProc\">)</span> ,<span class=\"synPreProc\">`(</span>,<span class=\"synType\">#:G936</span> ,C<span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n     ,<span class=\"synSpecial\">(</span><span class=\"synStatement\">LET</span> <span class=\"synSpecial\">((</span>A <span class=\"synType\">#:G934</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>B <span class=\"synType\">#:G935</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>C <span class=\"synType\">#:G936</span><span class=\"synSpecial\">))</span>\n        BODY<span class=\"synSpecial\">)</span><span class=\"synPreProc\">)</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<h3>まとめ</h3>\n\n<p>まずnamesと同じ数だけ(gensym)でユニークなシンボルを作り，それをgensymsというリストにする．<br/>\ngensymsの各要素を新たに(gensym)に束縛するlet式を作る．<br/>\nこの(gensym)はonce-onlyを使うマクロの展開時に新しくユニークなシンボルを作る．<br/>\ngensymsの各要素を評価すると新しく作られるユニークなシンボルを返すようになる．\nこのユニークなシンボルにnamesの各値を束縛するようにする．<br/>\nそれが本体の三行目に当たる．\n四行目ではnamesのシンボルにgensymsの各要素を対応付ける．<br/>\ngensymsの各要素は新たに作られたユニークなシンボルに束縛され，そのユニークなシンボルはnameの値に束縛される．<br/>\n以上で終わり．\n　<br/>\n　<br/>\n高階マクロで名前の衝突を回避して，評価順序を保つのはこんなに大変なんですね．</p>\n\n","slug":"once-onlyマクロの解読"},{"data":{"title":"shibuya.lispで発表しました","published":"2016/03/31"},"content":"\n<p>ゆるわな感じです．</p>\n\n<p><a href=\"http://lisp.connpass.com/event/28429/\">Lisp Meet Up presented by Shibuya.lisp #38 - connpass</a></p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fniconare.nicovideo.jp%2Fwatch%2Fkn1307\" title=\"プログラミング初心者が 計算機プログラムの構造と解釈を読んだら / wat-aro さん - ニコナレ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://niconare.nicovideo.jp/watch/kn1307\">niconare.nicovideo.jp</a></cite></p>\n\n<p>反省点は聞いてる人のほうを向いて喋れなかったことですね．\n自分のPCのモニタばかり見てました．\n次どこかで発表するときはそこを改善したいですね．\n後もっとましなスライドを作れるようになりたい．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"shibuya.lispで発表しました"},{"data":{"title":"Emacsのhtmlizeを使ってコードのシンタックスハイライトを保ったままKeynoteにコピペ","published":"2016/03/25"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>のコードを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Keynote\">Keynote</a>に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>ハイライトを保ってコピペする方法がわからずに困っていたら\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>で教えてもらいました．</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a> マンなら htmlize で <a href=\"https://t.co/A8sNim2GAI\">https://t.co/A8sNim2GAI</a></p>&mdash; 齊藤敦志 (@SaitoAtsushi) <a href=\"https://twitter.com/SaitoAtsushi/status/713011495500513282\">2016年3月24日</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>でhtmlizeでHTMLを出力してそれを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>で開く．<br/>\n　<br/>\n　</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160324/20160324235611.png\" alt=\"f:id:wat-aro:20160324235611p:plain\" title=\"f:id:wat-aro:20160324235611p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　<br/>\n　<br/>\n　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Keynote\">Keynote</a>へコピペ</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160324/20160324235830.png\" alt=\"f:id:wat-aro:20160324235830p:plain\" title=\"f:id:wat-aro:20160324235830p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>おおー！これはいい！<br/>\nちなみに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>で開くとうまくいきませんでした．<br/>\nGistからコピペするのと違ってこれなら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>ハイライトのままコピペできるのがいいですね．<br/>\nありがたや〜</p>\n\n","slug":"Emacsのhtmlizeを使ってコードのシンタックスハイライトを保ったままKeynoteにコピペ"},{"data":{"title":"Rubyで言語処理100本ノック 00-04","published":"2016/03/17","tags":["ruby"]},"content":"\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.cl.ecei.tohoku.ac.jp%2Fnlp100%2F\" title=\"言語処理100本ノック 2015\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www.cl.ecei.tohoku.ac.jp/nlp100/\">www.cl.ecei.tohoku.ac.jp</a></cite></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>の練習のために始めました．<br/>\n4章からは難しそうなので3章まで頑張りたい．でも飽きたらやめるかも．<br/>\nコードを書く基礎が足りない気がするのでもっと書かないと．<br/>\n始めるにあって，とりあえず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> 2.2.3のStringクラスは一通り目を通してきました．<br/>\n全体的に末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>でなんとかしようとしてます．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>は末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がないって聞いたんですがどうなんですかね？\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>っぽい書き方がわからないので，Rubocop先生に出来るだけ怒られないように書いてます．</p>\n\n<h2>00</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 00 文字列を受け取り，末尾から順に表示する</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">my_reverse</span>\n    size = length\n    result = <span class=\"synSpecial\">''</span>\n    <span class=\"synStatement\">while</span> size &gt; <span class=\"synConstant\">0</span>\n      size -= <span class=\"synConstant\">1</span>\n      result &lt;&lt; <span class=\"synConstant\">self</span>[size]\n    <span class=\"synStatement\">end</span>\n    result\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synComment\"># Like tail call</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter_reverse</span>\n    iter(<span class=\"synSpecial\">''</span>, length)\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str, str_len)\n    <span class=\"synStatement\">if</span> str_len &gt; <span class=\"synConstant\">0</span>\n      iter(str + <span class=\"synConstant\">self</span>[str_len - <span class=\"synConstant\">1</span>], str_len - <span class=\"synConstant\">1</span>)\n    <span class=\"synStatement\">else</span>\n      str\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.my_reverse                <span class=\"synComment\"># =&gt; &quot;esrever&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.my_reverse                      <span class=\"synComment\"># =&gt; &quot;a&quot;</span>\n<span class=\"synSpecial\">''</span>.my_reverse                       <span class=\"synComment\"># =&gt; &quot;&quot;</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">reverse</span><span class=\"synSpecial\">'</span>.iter_reverse          <span class=\"synComment\"># =&gt; &quot;esrever&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">'</span>.iter_reverse                <span class=\"synComment\"># =&gt; &quot;a&quot;</span>\n<span class=\"synSpecial\">''</span>.iter_reverse                 <span class=\"synComment\"># =&gt; &quot;&quot;</span>\n</pre>\n\n\n<h2>01</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 01 文字列の奇数番目だけ取り出した新しい文字列を返す</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">str_odd</span>\n    iter(<span class=\"synConstant\">0</span>, <span class=\"synSpecial\">''</span>)\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(index, str)\n    <span class=\"synStatement\">if</span> index &lt; length\n      <span class=\"synStatement\">if</span> index.even?\n        iter(index + <span class=\"synConstant\">1</span>, str + <span class=\"synConstant\">self</span>[index])\n      <span class=\"synStatement\">else</span>\n        iter(index + <span class=\"synConstant\">1</span>, str)\n      <span class=\"synStatement\">end</span>\n    <span class=\"synStatement\">else</span>\n      str\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">hello</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># =&gt; &quot;hlo&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">abcde</span><span class=\"synSpecial\">'</span>.str_odd                <span class=\"synComment\"># =&gt; &quot;ace&quot;</span>\n<span class=\"synSpecial\">'</span><span class=\"synConstant\">パタトクカシーー</span><span class=\"synSpecial\">'</span>.str_odd     <span class=\"synComment\"># =&gt; &quot;パトカー&quot;</span>\n</pre>\n\n\n<h2>02</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 02 ２つの文字列を受け取り，先頭から交互に混ぜた文字列をつくる</span>\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">comb_str</span>(str1, str2)\n  iter(str1, str2, <span class=\"synSpecial\">''</span>)\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">iter</span>(str1, str2, result)\n  <span class=\"synStatement\">if</span> str1.empty?\n    result + str2\n  <span class=\"synStatement\">elsif</span> str2.empty?\n    result + str1\n  <span class=\"synStatement\">else</span>\n    iter(str1[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], str2[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>], result + str1[<span class=\"synConstant\">0</span>] + str2[<span class=\"synConstant\">0</span>])\n  <span class=\"synStatement\">end</span>\n<span class=\"synPreProc\">end</span>\n\ncomb_str(<span class=\"synSpecial\">'</span><span class=\"synConstant\">パトカー</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">タクシー</span><span class=\"synSpecial\">'</span>) <span class=\"synComment\"># =&gt; &quot;パタトクカシーー&quot;</span>\n</pre>\n\n\n<h2>03</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 03 文字列から数字のリストをつくる</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pi</span>\n    split.map(&amp;<span class=\"synConstant\">:length</span>)\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.</span><span class=\"synSpecial\">&quot;</span>.pi\n <span class=\"synComment\"># =&gt; [3, 1, 4, 1, 6, 9, 2, 7, 5, 3, 5, 8, 9, 7, 10]</span>\n</pre>\n\n\n<h2>04</h2>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synComment\"># 04 文字列を受け取り，単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字</span>\n<span class=\"synComment\"># それ以外の単語は先頭に2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列を返す</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">element</span>\n    recur(split, <span class=\"synConstant\">1</span>, [])\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synStatement\">private</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">helper</span>(str, i)\n    <span class=\"synStatement\">case</span> i\n    <span class=\"synStatement\">when</span> <span class=\"synConstant\">1</span>, <span class=\"synConstant\">5</span>, <span class=\"synConstant\">6</span>, <span class=\"synConstant\">7</span>, <span class=\"synConstant\">8</span>, <span class=\"synConstant\">9</span>, <span class=\"synConstant\">15</span>, <span class=\"synConstant\">16</span>, <span class=\"synConstant\">19</span>\n      [str[<span class=\"synConstant\">0</span>], i]\n    <span class=\"synStatement\">else</span>\n      [str[<span class=\"synConstant\">0</span>, <span class=\"synConstant\">2</span>], i]\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">recur</span>(arr, index, result)\n    <span class=\"synStatement\">if</span> arr.empty?\n      result\n    <span class=\"synStatement\">else</span>\n      recur(arr.drop(<span class=\"synConstant\">1</span>), index + <span class=\"synConstant\">1</span>, result.push(helper(arr[<span class=\"synConstant\">0</span>], index)))\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.</span><span class=\"synSpecial\">&quot;</span>.element\n<span class=\"synComment\"># =&gt; [[&quot;H&quot;, 1], [&quot;He&quot;, 2], [&quot;Li&quot;, 3], [&quot;Be&quot;, 4], [&quot;B&quot;, 5], [&quot;C&quot;, 6], [&quot;N&quot;, 7], [&quot;O&quot;, 8], [&quot;F&quot;, 9], [&quot;Ne&quot;, 10], [&quot;Na&quot;, 11], [&quot;Mi&quot;, 12], [&quot;Al&quot;, 13], [&quot;Si&quot;, 14], [&quot;P&quot;, 15], [&quot;S&quot;, 16], [&quot;Cl&quot;, 17], [&quot;Ar&quot;, 18], [&quot;K&quot;, 19], [&quot;Ca&quot;, 20]]</span>\n</pre>\n\n\n<p>Stringクラスを一読するのに時間がかかったので今日はこれだけ．</p>\n\n","slug":"Rubyで言語処理100本ノック 00-04"},{"data":{"title":"OSX クリーンインストール前の準備","published":"2016/03/14","tags":["mac"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/yosemite\">yosemite</a>からEl Capitanへアップデートする前の準備．</p>\n\n<h2>dotfilesの準備</h2>\n\n<p>.bashrcや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/.emacs\">.emacs</a>.dなどインストール後に必要になりそうなものをここに入れてしまいます．<br/>\n他にも次の環境に必要なものはここに入れてしまいます．<br/>\nそして<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%DC%A5%EA%A5%C3%A5%AF%A5%EA%A5%F3%A5%AF\">シンボリックリンク</a>を貼る<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>をつけておきます．</p>\n\n<p><a href=\"http://qiita.com/b4b4r07/items/b70178e021bef12cd4a2\">&#x6700;&#x5F37;&#x306E; dotfiles &#x99C6;&#x52D5;&#x958B;&#x767A;&#x3068; GitHub &#x3067;&#x7BA1;&#x7406;&#x3059;&#x308B;&#x904B;&#x7528;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p>ここの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>を少し変更して</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink><span class=\"synComment\">#!/bin/bash</span>\n<span class=\"synStatement\">for </span>f <span class=\"synStatement\">in</span> .??*\n<span class=\"synStatement\">do</span>\n    <span class=\"synIdentifier\">filepath</span>=<span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">${PWD}</span><span class=\"synConstant\">/</span><span class=\"synPreProc\">${f}</span><span class=\"synStatement\">&quot;</span>\n    <span class=\"synIdentifier\">homefile</span>=<span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">${HOME}</span><span class=\"synConstant\">/</span><span class=\"synPreProc\">${f}</span><span class=\"synStatement\">&quot;</span>\n    \n    <span class=\"synSpecial\">[[</span> <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$f</span><span class=\"synStatement\">&quot;</span> <span class=\"synStatement\">==</span> <span class=\"synConstant\">&quot;.git&quot;</span> <span class=\"synSpecial\">]]</span> <span class=\"synStatement\">&amp;&amp;</span> <span class=\"synStatement\">continue</span>\n    <span class=\"synSpecial\">[[</span> <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$f</span><span class=\"synStatement\">&quot;</span> <span class=\"synStatement\">==</span> <span class=\"synConstant\">&quot;.DS_Store&quot;</span> <span class=\"synSpecial\">]]</span> <span class=\"synStatement\">&amp;&amp;</span> <span class=\"synStatement\">continue</span>\n    \n    ln <span class=\"synSpecial\">-snf</span> <span class=\"synPreProc\">$filepath</span> <span class=\"synPreProc\">$homefile</span>\n<span class=\"synStatement\">done</span>\n</pre>\n\n\n<p>これを実行すればホームディレクトリに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%DC%A5%EA%A5%C3%A5%AF%A5%EA%A5%F3%A5%AF\">シンボリックリンク</a>が張られます．</p>\n\n<h2>Homebrewでインストールしたもののリスト，tap先を保存する  </h2>\n\n<p>Homebrewで何を入れたかなんて覚えていられませんね．<br/>\ntapで何を追加したのかも覚えていられません．<br/>\nなのでファイルに書き出しておきます．<br/>\nここから抜き出して一気にインストールなんてことが出来るかは知りません．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A1%BC%A5%F3%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%EB\">クリーンインストール</a>後に調べます．</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>$ brew tap <span class=\"synStatement\">&gt;</span> ~/dotfiles/brewtaplist\n$ brew list <span class=\"synStatement\">&gt;</span> ~/dotfiles/brewlist\n</pre>\n\n\n<p>これで全て書きだされます．  <br/>\nさっきの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%C3%A5%C8%A5%D5%A5%A1%A5%A4%A5%EB\">ドットファイル</a>以外の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%DC%A5%EA%A5%C3%A5%AF%A5%EA%A5%F3%A5%AF\">シンボリックリンク</a>は作らないのでこれらのリンクは作られません．</p>\n\n<h2>iTerm2の設定のエクスポート  </h2>\n\n<p>iTerm2の設定も覚えていられませんね．  <br/>\n未来を見てきたらこういうのです．(timemachineで戻ってきました)  <br/>\nなので設定ファイルをエクスポートしておきます．</p>\n\n<p><a href=\"http://qiita.com/reoring/items/a0f3d6186efd11c87f1b\">iTerm2&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x30A4;&#x30F3;&#x30DD;&#x30FC;&#x30C8;&#x30FB;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p>ここを見てきてください．<br/>\nPreferences > General > Prefeences のLoad preferences ... の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9\">チェックボックス</a>をクリックしてホームディレクトリのdotfilesにします．    <br/>\nディレクトリを確認して <code>com.googlecode.iterm2.plist</code> があればOK．  <br/>\nなければもう一度保存先のディレクトリ名があってるか確認してください．</p>\n\n<h2>Karabinerの設定のエクスポート  </h2>\n\n<p>Karabinerの設定も覚えていられませんね．  <br/>\n快適な環境を維持するためにこれもエクスポートして次の環境に持って行きましょう．</p>\n\n<p><a href=\"http://qiita.com/icb54615/items/9c7a5366e23496bfacd5\">Karabiner&#x306E;&#x8A2D;&#x5B9A;&#x79FB;&#x884C; - Qiita</a></p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>$ /Applications/Karabiner.app/Contents/Library/bin/karabiner <span class=\"synStatement\">export</span><span class=\"synIdentifier\"> </span><span class=\"synStatement\">&gt;</span><span class=\"synIdentifier\"> ~/dotfiles/karabiner.sh</span>\n</pre>\n\n\n<p>これで大丈夫です．</p>\n\n<h2>最後に</h2>\n\n<p>以上の作業で作ったdotfilesを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/github\">github</a>に上げるなり，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/dropbox\">dropbox</a>に上げるなり，外付けHDDに入れるなりして次の環境に送りましょう．  <br/>\n準備完了です．</p>\n\n","slug":"OSX クリーンインストール前の準備"},{"data":{"title":"初めてのgem","published":"2016/03/11","tags":["ruby"]},"content":"\n<p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fwat-aro%2Fcase_converter\" title=\"wat-aro/case_converter\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/wat-aro/case_converter\">github.com</a></cite></p>\n\n<p>キャメルケース，スネークケース，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%B9%A5%AB%A5%EB\">パスカル</a>ケースを相互に変換するgemを書きました．<br/>\n書き方わからずに色々やってたら最初にリリースした分は盛大にバグってました．<br/>\nとりあえずバグが取れたのでまたgemに．<br/>\n一応 <code>gem install case_converter</code> で入れられます．</p>\n\n<p>使い方はこんな感じ</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">camel_case</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel                 <span class=\"synComment\"># =&gt; &quot;camelCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">string ca_mel_case string</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel  <span class=\"synComment\"># =&gt; &quot;string caMelCase string&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">pascal_case</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel                <span class=\"synComment\"># =&gt; &quot;pascalCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">string pas_cal_case string</span><span class=\"synSpecial\">&quot;</span>.snake_to_camel <span class=\"synComment\"># =&gt; &quot;string pasCalCase string&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">snakeCase</span><span class=\"synSpecial\">&quot;</span>.camel_to_snake                  <span class=\"synComment\"># =&gt; &quot;snake_case&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo snakeCase bar</span><span class=\"synSpecial\">&quot;</span>.camel_to_snake          <span class=\"synComment\"># =&gt; &quot;foo snake_case bar&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">pascalCase</span><span class=\"synSpecial\">&quot;</span>.camel_to_pascal                <span class=\"synComment\"># =&gt; &quot;PascalCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo pasCalCase bar</span><span class=\"synSpecial\">&quot;</span>.camel_to_snake         <span class=\"synComment\"># =&gt; &quot;foo pas_cal_case bar&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">SnakeCase</span><span class=\"synSpecial\">&quot;</span>.pascal_to_snake                 <span class=\"synComment\"># =&gt; &quot;snake_case&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo SnaKeCase bar</span><span class=\"synSpecial\">&quot;</span>.pascal_to_snake         <span class=\"synComment\"># =&gt; &quot;foo sna_ke_case bar&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">CamelCase</span><span class=\"synSpecial\">&quot;</span>.pascal_to_camel                 <span class=\"synComment\"># =&gt; &quot;camelCase&quot;</span>\n\n<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">foo CaMelCase bar</span><span class=\"synSpecial\">&quot;</span>.pascal_to_camel         <span class=\"synComment\"># =&gt; &quot;foo caMelCase bar&quot;</span>\n</pre>\n\n\n<p>初心者でもこれなら簡単に書ける！</p>\n\n","slug":"初めてのgem"},{"data":{"title":"Nginxでsites-enabledが読み込まれない","published":"2016/03/10"},"content":"\n<p>nginx version: nginx/1.8.1</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww26.atwiki.jp%2Fnginx%2Fpages%2F13.html\" title=\"nginx @ ウィキ - nginx　バーチャルホスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www26.atwiki.jp/nginx/pages/13.html\">www26.atwiki.jp</a></cite></p>\n\n<p>ここを見ながらnginxでVirtual Host を構築しようとしていました．<br/>\nただここのやり方では <code>/etc/nginx/conf.d/default.conf</code> が読み込まれてしまうのその対処方法を書きます．</p>\n\n<p><code>/etc/nginx/nginx.conf</code>を開くとこうなっているはずです．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;\n                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;\n                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}</pre>\n\n\n<p>http内のincludeの次の行に新しくincludeを追加します．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;\n                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;\n                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}</pre>\n\n\n","slug":"Nginxでsites-enabledが読み込まれない"},{"data":{"title":"Debian 8 に MySQL 5.7.11をインストール","published":"2016/03/09"},"content":"\n<p><a href=\"http://dev.mysql.com/downloads/repo/apt/\">MySQL :: Download MySQL APT Repository</a></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309021040.png\" alt=\"f:id:wat-aro:20160309021040p:plain\" title=\"f:id:wat-aro:20160309021040p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\nここの数字を確認する．\n数字が変わっていれば以下の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>-apt-config_NUMBER_all.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/deb\">deb</a>のNUMBER部分を変更する．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ mkdir ~/src\n$ cd ~/src\n$ wget http://dev.mysql.com/get/mysql-apt-config_0.6.0-1_all.deb</pre>\n\n\n<p>　<br/>\n次にこのダウンロードした<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/deb\">deb</a>パッケージをdpkgでインストールする.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sudo dpkg -i mysql-apt-config_0.6.0-1_all.deb</pre>\n\n\n<p>　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>-5.7を選択\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309022815.png\" alt=\"f:id:wat-aro:20160309022815p:plain\" title=\"f:id:wat-aro:20160309022815p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>-5.7を選択\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309022822.png\" alt=\"f:id:wat-aro:20160309022822p:plain\" title=\"f:id:wat-aro:20160309022822p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　<br/>\napplyを選択\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160309/20160309022829.png\" alt=\"f:id:wat-aro:20160309022829p:plain\" title=\"f:id:wat-aro:20160309022829p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># リポジトリのアップデート\n$ sudo apt-get update\n# mysqlのインストール\n$ sudo apt-get install mysql-server</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>サーバのrootのpasswordを聞かれるので入力する．\n　</p>\n\n<h2>インストールの確認</h2>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sudo service mysql status\n$ sudo service mysql stop\n$ sudo service mysql start</pre>\n\n\n<p>　<br/>\n問題がなければ完了．\n/etc/init.d/mysqld がないけど，5.7ではないの？<br/>\nよくわからず5時間くらい探しまわった．</p>\n\n<p>ここに書いた内容は公式サイトから．</p>\n\n<p><a href=\"http://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/\">MySQL :: A Quick Guide to Using the MySQL APT Repository</a></p>\n\n","slug":"Debian 8 に MySQL 5.7.11をインストール"},{"data":{"title":"MySQL5.7.11でユーザを追加できない．","published":"2016/03/08","tags":["MySQL"]},"content":"\n<p>環境はdebian8, mysql5.7.11.</p>\n\n<pre class=\"code lang-mysql\" data-lang=\"mysql\" data-unlink>mysql&gt; <span class=\"synStatement\">grant</span> <span class=\"synStatement\">all</span> <span class=\"synStatement\">on</span> blog_app.* <span class=\"synStatement\">to</span> <span class=\"synConstant\">'foo'</span><span class=\"synIdentifier\">@localhost</span> <span class=\"synStatement\">identified</span> <span class=\"synStatement\">by</span> <span class=\"synConstant\">'hogehoge'</span>;\nERROR <span class=\"synConstant\">1054</span> (42S22): Unknown <span class=\"synStatement\">column</span> <span class=\"synConstant\">'password_last_changed'</span> <span class=\"synStatement\">in</span> <span class=\"synConstant\">'mysql.user'</span>\n</pre>\n\n\n<p>以上のようなエラーが出ました．<br/>\n対処方法は以下になります．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sudo mysql_upgrade -u root -p\n\n$ sudo systemctl restart mysql</pre>\n\n\n<p><a href=\"http://stackoverflow.com/questions/29455181/mysql-unknown-column-password-last-changed\">MySQL unknown column &#39;password_last_changed&#39; - Stack Overflow</a></p>\n\n","slug":"MySQL5.7.11でユーザを追加できない．"},{"data":{"title":"Rubyの正規表現でそれぞれのケースへの変換","published":"2016/03/05","tags":["ruby","正規表現"]},"content":"\n<p>今日は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>に苦しんだので練習しました。<br/>\nsnake_case、camel_Case、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Pascal\">Pascal</a>_Caseのそれぞれへの変換です。<br/>\ncapitalizeなくても書けるけど一応。<br/>\n<code>m[0].upcase + m[1..-1]</code>はちょっと汚いですしね。  <br/>\n<a href=\"http://rubular.com/\">Rubular</a>使えばテストケースが期待通りのマッチになるまで簡単に\nトライ＆エラーが出来ていいです。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">class</span> <span class=\"synType\">String</span>\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_camel</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]/</span>) { |<span class=\"synIdentifier\">m</span>| m[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>].capitalize}\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">snake_to_pascal</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*[</span><span class=\"synConstant\">a-z_</span><span class=\"synSpecial\">\\d]*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.capitalize }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_snake</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">&quot;</span> + m.downcase }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">camel_to_pascal</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">]+[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.capitalize\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_snake</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">_</span><span class=\"synSpecial\">&quot;</span> + m }.downcase[<span class=\"synConstant\">1</span>..<span class=\"synConstant\">-1</span>]\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n\n  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">pascal_to_camel</span>\n    <span class=\"synConstant\">self</span>.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+([</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]+)*\\b/</span>) <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">match</span>|\n      match.gsub(<span class=\"synSpecial\">/\\b[</span><span class=\"synConstant\">A-Z</span><span class=\"synSpecial\">][</span><span class=\"synConstant\">a-z</span><span class=\"synSpecial\">\\d]*/</span>) { |<span class=\"synIdentifier\">m</span>| m.downcase }\n    <span class=\"synStatement\">end</span>\n  <span class=\"synPreProc\">end</span>\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n","slug":"Rubyの正規表現でそれぞれのケースへの変換"},{"data":{"title":"FLEXBOX FROGGYチートシート","published":"2016/02/28","tags":["css","Flexbox"]},"content":"\n<p><a href=\"http://flexboxfroggy.com/\">FLEXBOX FROGGY</a>をクリアしたのでやりながらまとめたものを貼ります．<br/>\nFlexboxはここでやった部分しかしりませんが，これだけでも便利ですね．</p>\n\n<h1>コンテナ全体</h1>\n\n<ul>\n<li>justify-content 水平方向への寄せなど\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-start: 左寄せ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-end: 右寄せ</li>\n<li>center: 中央寄せ</li>\n<li>space-between: 要素間にスペースを入れる</li>\n<li>space-around: 要素の前後にスペースを入れる</li>\n</ul>\n</li>\n<li>align-content 垂直方向への寄せなど\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-start 上寄せ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-end 下寄せ</li>\n<li>center 中央寄せ</li>\n<li>space-between: 要素間にスペースを入れる</li>\n<li>space-around: 要素の前後にスペースを入れる</li>\n</ul>\n</li>\n<li>align-items\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-start: 上部に表示</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-end: 下部に表示</li>\n<li>center: 上下の中央に表示</li>\n<li>baseline: コンテナのベースラインに表示</li>\n<li>stretch: よくわからない</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-direction (先頭の方向を変えるのでjustify-content, align-itemsの挙動が変わる)\n\n<ul>\n<li>row: 左から右に並べる</li>\n<li>row-reverse: 右から左に並べる</li>\n<li>column: 上から下に並べる</li>\n<li>column-reverse: 下から上に並べる</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-wrap\n\n<ul>\n<li>nowrap: 一行で表示</li>\n<li>wrap: 行端までいくと新たに行を追加して表示する</li>\n<li>wrap-reverse: 反対から表示し，行端までいけば新たに行を追加して表示する</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-flow\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-directionと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/flex\">flex</a>-wrapを同時に使える．値はスペスで区切って書く．</li>\n</ul>\n</li>\n</ul>\n\n\n<h1>個別の要素に対して</h1>\n\n<ul>\n<li>order\n\n<ul>\n<li>現在位置を 0 として順番をずらす．一つ後ろにずらすなら1,一つ前なら-1.</li>\n</ul>\n</li>\n<li>align-self\n\n<ul>\n<li>垂直方向の位置を変える．コマンドはalign-itemsと同じ.</li>\n</ul>\n</li>\n</ul>\n\n\n","slug":"FLEXBOX FROGGYチートシート"},{"data":{"title":"fjordのリモートインターンに参加しました","published":"2016/02/25"},"content":"\n<p>昨日別ブログにも書きましたが，向こうはやめてこっちに書いていきます．<br/>\nコードを書いてごはんが食べられるように頑張ります．</p>\n\n","slug":"fjordのリモートインターンに参加しました"},{"data":{"title":"プログラミングの基礎を読み終わった．","published":"2016/02/20","tags":["プログラミングの基礎","OCaml"]},"content":"\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4781911609/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51FBsJHo4EL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"プログラミングの基礎 (Computer Science Library)\" title=\"プログラミングの基礎 (Computer Science Library)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4781911609/wataro-22/\">プログラミングの基礎 (Computer Science Library)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%F5%B0%E6%B7%F2%B0%EC\">浅井健一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B5%A5%A4%A5%A8%A5%F3%A5%B9%BC%D2\">サイエンス社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2007/03</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 17人 <span class=\"hatena-asin-detail-label\">クリック</span>: 409回</li><li><a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\" target=\"_blank\">この商品を含むブログ (126件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>演習問題をほぼ解いて一週間くらいかかりました．\n　　  <br/>\nタイトルどおりに丁寧にプログラミングの基礎を習得出来る本でした．<br/>\nデザインレシピを通して，プログラムの書き方を学んでいきます．<br/>\nこのデザインレシピがよく出来ていて，<br/>\n簡単な関数ならこのやり方のまま迷わずに書いていけます．<br/>\nさらに実行して期待する型が出力できる段階まで書けると，テストを書くようになっているので．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%A5%D5%A5%A1%A1%BC%A5%B9%A5%C8\">テストファースト</a>も体験できます．<br/>\n何度も問題を解いていくうちに型をちゃんと意識するようになりました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>やっていた時も面倒なバグは大体型がおかしくなっていることに起因していたのですごくためになります．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>やリスト操作自体は慣れていましたが，パターンマッチによって操作していくのはおもしろかったです． <br/>\nプログラミング初心者にも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%B8%C0%B8%EC\">関数型言語</a>初心者にもおすすめな内容だと思います．</p>\n\n","slug":"プログラミングの基礎を読み終わった．"},{"data":{"title":"プログラミングの基礎　16.4 最初の完動プログラム","published":"2016/02/16","tags":["OCaml","プログラミングの基礎"]},"content":"\n<p>プログラミングの基礎で作ったメトロネットワーク最短路問題の解答．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%AF%A5%B9%A5%C8%A5%E9\">ダイクストラ</a>法を使い求める．<br/>\nここまでのメトロネットワーク最短路問題に関係する問題の解答すべてここに書いてある．</p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synComment\">(* サポートページからダウンロードしたglobal_ekimei_listとglobal_ekikan_list *)</span>\n<span class=\"synPreProc\">#use</span> <span class=\"synConstant\">&quot;metro.ml&quot;</span>\n\n<span class=\"synComment\">(* 目的：ekimei_t型のデータを受け取り，「路線名，駅名（かな）」を返す *)</span>\n<span class=\"synComment\">(* hyoji : ekimei_t -&gt; string *)</span>\n<span class=\"synStatement\">let</span> hyoji ekimei <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> ekimei <span class=\"synStatement\">with</span>\n    <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> kanji<span class=\"synStatement\">;</span>\n     kana <span class=\"synStatement\">=</span> kana<span class=\"synStatement\">;</span>\n     romaji <span class=\"synStatement\">=</span> romaji<span class=\"synStatement\">;</span>\n     shozoku <span class=\"synStatement\">=</span> shozoku<span class=\"synStatement\">;}</span>\n    <span class=\"synStatement\">-&gt;</span> shozoku <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;，&quot;</span> <span class=\"synStatement\">^</span> kanji <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;（&quot;</span> <span class=\"synStatement\">^</span> kana <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;）&quot;</span><span class=\"synStatement\">;;</span>\n\n\n\n<span class=\"synComment\">(* hyoji test *)</span>\nprint_string <span class=\"synConstant\">&quot;hyouji test&quot;</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> hyoji <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;茗荷谷&quot;</span><span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;みょうがだに&quot;</span><span class=\"synStatement\">;</span>\n                   romaji <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;myogadani&quot;</span><span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;丸ノ内線&quot;</span><span class=\"synStatement\">}</span>\n  <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;丸ノ内線，茗荷谷（みょうがだに）&quot;</span>\n\n\n<span class=\"synComment\">(* 目的：ローマ字の駅名（文字列）と駅名リスト(ekimei_t list 型)を受け取り</span>\n<span class=\"synComment\">   園駅の漢字表記を返す *)</span>\n<span class=\"synComment\">(* romaji_to_kanji -&gt; string -&gt; ekimei_t list -&gt; string *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> romaji_to_kanji name lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">&quot;&quot;</span>\n  <span class=\"synStatement\">|</span> <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> kanji<span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> kana<span class=\"synStatement\">;</span> romaji <span class=\"synStatement\">=</span> romaji<span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> shozoku<span class=\"synStatement\">}</span> <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n     <span class=\"synStatement\">if</span> name <span class=\"synStatement\">=</span> romaji\n     <span class=\"synStatement\">then</span> kanji\n     <span class=\"synStatement\">else</span> romaji_to_kanji name rest\n\n<span class=\"synComment\">(* romaji_to_kanji test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;&quot;</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;myogadani&quot;</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;myogadani&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;茗荷谷&quot;</span>\n<span class=\"synStatement\">let</span> test5 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;aoyamaicchome&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span>\n<span class=\"synStatement\">let</span> test6 <span class=\"synStatement\">=</span> romaji_to_kanji <span class=\"synConstant\">&quot;heiwadai&quot;</span> global_ekimei_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;平和台&quot;</span>\n\n\n<span class=\"synComment\">(* 目的：漢字の駅名を２つと駅間リストを受け取ったら，駅間リストの中からその２駅間の距離を返す *)</span>\n<span class=\"synComment\">(* get_ekikan_kyori : string -&gt; string -&gt; ekikan_t list -&gt; float *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> get_ekikan_kyori eki1 eki2 lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> infinity\n  <span class=\"synStatement\">|</span> <span class=\"synStatement\">{</span>kiten <span class=\"synStatement\">=</span> kiten<span class=\"synStatement\">;</span> shuten <span class=\"synStatement\">=</span> shuten<span class=\"synStatement\">;</span> keiyu <span class=\"synStatement\">=</span> keiyu<span class=\"synStatement\">;</span> kyori <span class=\"synStatement\">=</span> kyori<span class=\"synStatement\">;</span> jikan <span class=\"synStatement\">=</span> jikan<span class=\"synStatement\">}</span> <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n     <span class=\"synStatement\">if</span> eki1 <span class=\"synStatement\">=</span> kiten <span class=\"synStatement\">&amp;&amp;</span> eki2 <span class=\"synStatement\">=</span> shuten\n     <span class=\"synStatement\">then</span> kyori\n     <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> eki2 <span class=\"synStatement\">=</span> kiten <span class=\"synStatement\">&amp;&amp;</span> eki1 <span class=\"synStatement\">=</span> shuten\n     <span class=\"synStatement\">then</span> kyori\n     <span class=\"synStatement\">else</span> get_ekikan_kyori eki1 eki2 rest\n\n\n\n<span class=\"synComment\">(* get_ekikan_kyori test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;錦糸町&quot;</span> <span class=\"synConstant\">&quot;住吉&quot;</span> <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;錦糸町&quot;</span> <span class=\"synConstant\">&quot;&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;&quot;</span> <span class=\"synConstant\">&quot;錦糸町&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;横浜駅&quot;</span> <span class=\"synConstant\">&quot;錦糸町&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> infinity\n<span class=\"synStatement\">let</span> test5 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;大手町&quot;</span> <span class=\"synConstant\">&quot;三越前&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span>\n<span class=\"synStatement\">let</span> test6 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;三越前&quot;</span> <span class=\"synConstant\">&quot;大手町&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span>\n<span class=\"synStatement\">let</span> test7 <span class=\"synStatement\">=</span> get_ekikan_kyori <span class=\"synConstant\">&quot;霞ヶ関&quot;</span> <span class=\"synConstant\">&quot;日比谷&quot;</span> global_ekikan_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.2</span>\n\n\n<span class=\"synComment\">(* 目的：ローマ字の駅名を２つ受け取り，その間の距離を調べ，つながっている場合は</span>\n<span class=\"synComment\">   「A駅からB駅までのはｘｋｍです」と返し，繋がっていない場合は</span>\n<span class=\"synComment\">   「A駅からB駅はつながっていません」と返す*)</span>\n<span class=\"synStatement\">let</span> kyori_wo_hyoji r1 r2 <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">let</span> k1 <span class=\"synStatement\">=</span> romaji_to_kanji r1 global_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> k2 <span class=\"synStatement\">=</span> romaji_to_kanji r2 global_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> not_exist <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;という駅は存在しません&quot;</span> <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">if</span> k1 <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n  <span class=\"synStatement\">then</span> r1 <span class=\"synStatement\">^</span> not_exist\n  <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> k2 <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n  <span class=\"synStatement\">then</span> r2 <span class=\"synStatement\">^</span> not_exist\n  <span class=\"synStatement\">else</span> <span class=\"synStatement\">let</span> kyori <span class=\"synStatement\">=</span> get_ekikan_kyori k1 k2 global_ekikan_list <span class=\"synStatement\">in</span>\n       <span class=\"synStatement\">if</span> kyori <span class=\"synStatement\">=</span> infinity\n       <span class=\"synStatement\">then</span> k1 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅と&quot;</span> <span class=\"synStatement\">^</span> k2 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅はつながっていません&quot;</span>\n       <span class=\"synStatement\">else</span> k1 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅から&quot;</span> <span class=\"synStatement\">^</span> k2 <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;駅までは&quot;</span> <span class=\"synStatement\">^</span> string_of_float kyori <span class=\"synStatement\">^</span> <span class=\"synConstant\">&quot;kmです&quot;</span>\n\n<span class=\"synComment\">(* kyori_wo_hyoji test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;otemachi&quot;</span> <span class=\"synConstant\">&quot;hibiya&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町駅と日比谷駅はつながっていません&quot;</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;&quot;</span> <span class=\"synConstant\">&quot;kinsityo&quot;</span>  <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;という駅は存在しません&quot;</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;yokohama&quot;</span> <span class=\"synConstant\">&quot;kinsityo&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;yokohamaという駅は存在しません&quot;</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;otemachi&quot;</span> <span class=\"synConstant\">&quot;mitsukoshimae&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町駅から三越前駅までは0.7kmです&quot;</span>\n<span class=\"synStatement\">let</span> test5 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;mitsukoshimae&quot;</span> <span class=\"synConstant\">&quot;otemachi&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前駅から大手町駅までは0.7kmです&quot;</span>\n<span class=\"synStatement\">let</span> test6 <span class=\"synStatement\">=</span> kyori_wo_hyoji <span class=\"synConstant\">&quot;kasumigaseki&quot;</span> <span class=\"synConstant\">&quot;hibiya&quot;</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;霞ヶ関駅から日比谷駅までは1.2kmです&quot;</span>\n\n<span class=\"synStatement\">type</span> eki_t <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>\n  namae : <span class=\"synType\">string</span><span class=\"synStatement\">;</span>               <span class=\"synComment\">(* 駅名（漢字の文字列） *)</span>\n  saitan_kyori : <span class=\"synType\">float</span><span class=\"synStatement\">;</span>         <span class=\"synComment\">(* 最短距離（実数） *)</span>\n  temae_list : <span class=\"synType\">string</span> <span class=\"synType\">list</span><span class=\"synStatement\">;</span>     <span class=\"synComment\">(* 駅名（漢字の文字列）のリスト *)</span>\n<span class=\"synStatement\">}</span>\n\n<span class=\"synComment\">(* 目的：string型の駅名(漢字)とekimei_t list型を受け取り，</span>\n<span class=\"synComment\">   ekimei_t listをeki_t listに変え，その際駅名と一致する駅についてはshokikaする *)</span>\n<span class=\"synComment\">(* make_initial_eki_list : string -&gt; ekimei_t list -&gt; eki_t list *)</span>\n<span class=\"synStatement\">let</span> make_initial_eki_list name lst <span class=\"synStatement\">=</span>\n  <span class=\"synPreProc\">List</span>.map <span class=\"synStatement\">(fun</span> eki <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">match</span> eki <span class=\"synStatement\">with</span>\n    <span class=\"synStatement\">{</span>kanji <span class=\"synStatement\">=</span> k<span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> a<span class=\"synStatement\">;</span> romaji <span class=\"synStatement\">=</span> r<span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> s<span class=\"synStatement\">}</span>\n    <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> name\n      <span class=\"synStatement\">then</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> k<span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>k<span class=\"synStatement\">]}</span>\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> k<span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">})</span>\n    lst<span class=\"synStatement\">;;</span>\n\n<span class=\"synComment\">(* make_initial_eki_list test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> make_initial_eki_list <span class=\"synConstant\">&quot;代々木上原&quot;</span> <span class=\"synStatement\">[{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;よよぎうえはら&quot;</span><span class=\"synStatement\">;</span>\n                                                 romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;yoyogiuehara&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">]}];;</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> make_initial_eki_list <span class=\"synConstant\">&quot;明治神宮前&quot;</span> <span class=\"synStatement\">[{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;代々木公園&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;よよぎこうえん&quot;</span><span class=\"synStatement\">;</span>\n                                                romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;yoyogikouen&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">};</span>\n                                               <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;明治神宮前&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;めいじじんぐうまえ&quot;</span><span class=\"synStatement\">;</span>\n                                                romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;meijijinguumae&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;代々木公園&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;明治神宮前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;明治神宮前&quot;</span><span class=\"synStatement\">]}];;</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> make_initial_eki_list <span class=\"synConstant\">&quot;赤坂&quot;</span> <span class=\"synStatement\">[{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;表参道&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;おもてさんどう&quot;</span><span class=\"synStatement\">;</span>\n                                           romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;omotesandou&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">};</span>\n                                          <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;乃木坂&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;のぎざか&quot;</span><span class=\"synStatement\">;</span>\n                                           romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;nogizaka&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">};</span>\n                                          <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;赤坂&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;あかさか&quot;</span><span class=\"synStatement\">;</span>\n                                           romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;akasaka&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;表参道&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;乃木坂&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;赤坂&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;赤坂&quot;</span><span class=\"synStatement\">]}];;</span>\n\n\n\n\n\n<span class=\"synComment\">(* 目的：ekimei_t型のレコードとekimei_t型のリストを受け取ったら，平仮名の昇順となる位置に</span>\n<span class=\"synComment\">   ekimei_t型のレコードを挿入する．同じ駅がリストにあれば挿入しない．</span>\n<span class=\"synComment\">   seiretsuのための補助関数*)</span>\n<span class=\"synComment\">(* ekimei_isnert : -&gt; ekimei_t -&gt; ekimei_t list -&gt; ekimei_t list *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> ekimei_insert eki lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">[</span>eki<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">|</span> <span class=\"synStatement\">({</span>kanji <span class=\"synStatement\">=</span> kanji<span class=\"synStatement\">;</span> kana <span class=\"synStatement\">=</span> kana<span class=\"synStatement\">;</span> romaji <span class=\"synStatement\">=</span> romaji<span class=\"synStatement\">;</span> shozoku <span class=\"synStatement\">=</span> shozoku<span class=\"synStatement\">;}</span> <span class=\"synStatement\">as</span> first<span class=\"synStatement\">)</span> <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n     <span class=\"synStatement\">if</span> kana <span class=\"synStatement\">=</span> eki.kana\n     <span class=\"synStatement\">then</span> lst                   <span class=\"synComment\">(* リストにあったほうが残る *)</span>\n     <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> eki.kana <span class=\"synStatement\">&lt;</span> kana    <span class=\"synComment\">(* 駅のkana &lt; first のkana *)</span>\n     <span class=\"synStatement\">then</span> eki <span class=\"synStatement\">::</span> lst\n     <span class=\"synStatement\">else</span> first <span class=\"synStatement\">::</span> ekimei_insert eki rest\n\n<span class=\"synComment\">(* test data *)</span>\n<span class=\"synStatement\">let</span> yoyogiuehara_tiyodasen <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;代々木上原&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;よよぎうえはら&quot;</span><span class=\"synStatement\">;</span>\n                              romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;yoyogiuehara&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> otemachi_tiyodasen <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;おおてまち&quot;</span><span class=\"synStatement\">;</span>\n                         romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;otemachi&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;千代田線&quot;</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> otemachi_hanzoumonsen <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>kanji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> kana<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;おおてまち&quot;</span><span class=\"synStatement\">;</span>\n                             romaji<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;otemachi&quot;</span><span class=\"synStatement\">;</span> shozoku<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;半蔵門線&quot;</span><span class=\"synStatement\">}</span>\n\n\n<span class=\"synComment\">(* test *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> ekimei_insert otemachi_tiyodasen <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> ekimei_insert otemachi_tiyodasen <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">]</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> ekimei_insert otemachi_tiyodasen <span class=\"synStatement\">[</span>yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n    <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> ekimei_insert yoyogiuehara_tiyodasen <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">]</span>\n    <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n\n\n<span class=\"synComment\">(* 目的：ekimei_t型のリストを受け取ったら，それを平仮名の順に整列し，</span>\n<span class=\"synComment\">   さらに駅の重複を取り除いたekimei_t型のリストを返す *)</span>\n<span class=\"synComment\">(* seiretsu : ekimei_t -&gt; ekimei_t *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> seiretsu lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">[]</span>\n  <span class=\"synStatement\">|</span> first <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span> ekimei_insert first <span class=\"synStatement\">(</span>seiretsu rest<span class=\"synStatement\">)</span>\n\n\n\n\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> seiretsu <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test3 <span class=\"synStatement\">=</span> seiretsu <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> otemachi_hanzoumonsen<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">]</span>\n<span class=\"synStatement\">let</span> test4 <span class=\"synStatement\">=</span> seiretsu <span class=\"synStatement\">[</span>otemachi_tiyodasen<span class=\"synStatement\">;</span> otemachi_hanzoumonsen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span>otemachi_hanzoumonsen<span class=\"synStatement\">;</span> yoyogiuehara_tiyodasen<span class=\"synStatement\">]</span>\n\n\n\n\n<span class=\"synStatement\">let</span> otemachi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]}</span>\n<span class=\"synStatement\">let</span> mitsukoshimae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> shibuya <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> aoyamaichome <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n\n\n\n<span class=\"synComment\">(* 目的：直前に確定した駅 p (eki_t型)と味覚手の役のリスト v (eki_t list型)を受け取り</span>\n<span class=\"synComment\">   必要な更新処理を行った後の未確定の駅のリストを返す*)</span>\n<span class=\"synComment\">(* koushin -&gt; eki_t -&gt; eki_t list -&gt; ekikan_t list -&gt; eki_t list *)</span>\n<span class=\"synStatement\">let</span> koushin p v ekikan <span class=\"synStatement\">=</span>\n  <span class=\"synPreProc\">List</span>.map\n    <span class=\"synStatement\">(fun</span> q <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">let</span> kyori <span class=\"synStatement\">=</span> get_ekikan_kyori p.namae q.namae ekikan <span class=\"synStatement\">in</span>\n      <span class=\"synStatement\">if</span> kyori <span class=\"synStatement\">=</span> infinity\n      <span class=\"synStatement\">then</span> q\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">let</span> p_keiyu_q_kyori <span class=\"synStatement\">=</span> p.saitan_kyori +. kyori <span class=\"synStatement\">in</span>\n           <span class=\"synStatement\">if</span>  p_keiyu_q_kyori  <span class=\"synStatement\">&lt;</span> q.saitan_kyori\n           <span class=\"synStatement\">then</span> <span class=\"synStatement\">{</span> namae <span class=\"synStatement\">=</span> q.namae<span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> p_keiyu_q_kyori<span class=\"synStatement\">;</span>\n                  temae_list <span class=\"synStatement\">=(</span>q.namae<span class=\"synStatement\">)</span> <span class=\"synStatement\">::</span> p.temae_list<span class=\"synStatement\">}</span>\n           <span class=\"synStatement\">else</span> q<span class=\"synStatement\">)</span>\n    v<span class=\"synStatement\">;;</span>\n\n\n<span class=\"synComment\">(* test data *)</span>\n<span class=\"synStatement\">let</span> otemachi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span>.<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]}</span>\n<span class=\"synStatement\">let</span> mitsukoshimae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> shibuya <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> aoyamaichome <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> nagatacho <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;永田町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n<span class=\"synStatement\">let</span> shinochanomizu <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n\n<span class=\"synComment\">(* koushin test *)</span>\n<span class=\"synStatement\">let</span> koushin_test1 <span class=\"synStatement\">=</span> koushin otemachi\n  <span class=\"synStatement\">[</span>mitsukoshimae<span class=\"synStatement\">;</span> shibuya<span class=\"synStatement\">;</span> shinochanomizu<span class=\"synStatement\">;</span> aoyamaichome<span class=\"synStatement\">]</span> global_ekikan_list\n  <span class=\"synStatement\">=[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span><span class=\"synStatement\">;</span>\n     temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n    <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};</span>\n    <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.3</span><span class=\"synStatement\">;</span>\n     temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n    <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}];;</span>\n\n\n\n<span class=\"synComment\">(* 目的：eki_t list型のリストを受け取り，「最短距離最小の駅」と</span>\n<span class=\"synComment\">   「最短距離最小の駅以外からなるリスト」の組を返す *)</span>\n<span class=\"synComment\">(* saitan_wo_bunri : eki_t list -&gt; eki_t * eki_t list *)</span>\n<span class=\"synStatement\">let</span> saitan_wo_bunri eki_list <span class=\"synStatement\">=</span>\n  <span class=\"synPreProc\">List</span>.fold_right\n    <span class=\"synStatement\">(fun</span> first rest_saitan <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">let</span> <span class=\"synStatement\">(</span>minimum, lst<span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span> rest_saitan <span class=\"synStatement\">in</span>\n      <span class=\"synStatement\">if</span> minimum.namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span>\n      <span class=\"synStatement\">then</span> <span class=\"synStatement\">(</span>first, lst<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> first.saitan_kyori <span class=\"synStatement\">&lt;=</span> minimum.saitan_kyori\n      <span class=\"synStatement\">then</span> <span class=\"synStatement\">(</span>first, minimum <span class=\"synStatement\">::</span> lst<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">else</span> <span class=\"synStatement\">(</span>minimum, first <span class=\"synStatement\">::</span> lst<span class=\"synStatement\">))</span>\n    eki_list\n    <span class=\"synStatement\">({</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>, <span class=\"synConstant\">[]</span><span class=\"synStatement\">)</span>\n\n\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> saitan_wo_bunri <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span><span class=\"synStatement\">;</span>\n                              temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n                             <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.3</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">]};</span>\n                             <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.3</span><span class=\"synStatement\">;</span>\n                              temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n                             <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span>\n                              temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}]</span>\n  <span class=\"synStatement\">=({</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.3</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">]}</span>,\n    <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">0.7</span><span class=\"synStatement\">;</span>\n     temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.3</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;新御茶ノ水&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}]);;</span>\n\n\n<span class=\"synComment\">(* 目的：eki_t list型の未確定の駅のリストとekikan_t list型の駅間のリストを受け取り</span>\n<span class=\"synComment\">   ダイクストラのアルゴリズムにしたがって各駅について</span>\n<span class=\"synComment\">   最短距離と最短経路が正しく入ったリストを返す *)</span>\n<span class=\"synComment\">(* dijkstra_main : eki_t list -&gt; ekikan_t list -&gt; eki_t list *)</span>\n<span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> dijkstra_main  eki_list ekikan <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> eki_list <span class=\"synStatement\">with</span>\n    <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">[]</span>\n  <span class=\"synStatement\">|</span> first <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">match</span> <span class=\"synStatement\">(</span>saitan_wo_bunri eki_list<span class=\"synStatement\">)</span> <span class=\"synStatement\">with</span>\n    <span class=\"synStatement\">(</span>saitan1, <span class=\"synConstant\">[]</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">[</span>saitan1<span class=\"synStatement\">]</span>\n    <span class=\"synStatement\">|</span> <span class=\"synStatement\">(</span>saitan2, rest<span class=\"synStatement\">)</span> <span class=\"synStatement\">-&gt;</span> saitan2 <span class=\"synStatement\">::</span> <span class=\"synStatement\">(</span>dijkstra_main <span class=\"synStatement\">(</span>koushin saitan2 rest ekikan<span class=\"synStatement\">)</span> ekikan<span class=\"synStatement\">)</span> <span class=\"synStatement\">;;</span>\n\n\n\n<span class=\"synComment\">(* test_data *)</span>\n<span class=\"synStatement\">let</span> otemachi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.7</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};;</span>\n<span class=\"synStatement\">let</span> mitsukoshimae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n<span class=\"synStatement\">let</span> suitenguumae <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n<span class=\"synStatement\">let</span> kiyosumishirakawa <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n<span class=\"synStatement\">let</span> sumiyoshi <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;住吉&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">};;</span>\n\n<span class=\"synStatement\">let</span> dijkstra_test1 <span class=\"synStatement\">=</span> dijkstra_main <span class=\"synStatement\">[</span>otemachi<span class=\"synStatement\">;</span> mitsukoshimae<span class=\"synStatement\">;</span> suitenguumae<span class=\"synStatement\">;</span>\n                                    kiyosumishirakawa<span class=\"synStatement\">;</span> sumiyoshi<span class=\"synStatement\">]</span>\n  global_ekikan_list\n  <span class=\"synStatement\">=</span> <span class=\"synStatement\">[{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;大手町&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">1.7</span><span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">2.4</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">3.7</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">5.4</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span> <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]};</span>\n     <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;住吉&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">7.30000000000000071</span><span class=\"synStatement\">;</span>\n      temae_list <span class=\"synStatement\">=</span>\n         <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;住吉&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;清澄白河&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;水天宮前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;三越前&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;神保町&quot;</span><span class=\"synStatement\">]}];;</span>\n\n<span class=\"synComment\">(* 目的：始点の駅名（ローマ字の文字列）と終点の駅名（ローマ字の文字列）を受け取り</span>\n<span class=\"synComment\">   seiretsuを使ってglobal_ekimei_list の重複を取り除き，</span>\n<span class=\"synComment\">   romaji_to_kanji を使って始点と終点の漢字表記を求め</span>\n<span class=\"synComment\">   make_initial_eki_listを使って駅のリストを作り，</span>\n<span class=\"synComment\">   dijkstra_mainを使って各駅までの最短路を確定し，</span>\n<span class=\"synComment\">   その中空終点の駅のレコード(eki_t型)を返す*)</span>\n<span class=\"synComment\">(* dijkstra : string -&gt; string -&gt; eki_t *)</span>\n<span class=\"synStatement\">let</span> dijkstra siten shuten <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">let</span> sorted_ekimei_list <span class=\"synStatement\">=</span> seiretsu global_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> siten_kanji <span class=\"synStatement\">=</span> romaji_to_kanji siten sorted_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> shuten_kanji <span class=\"synStatement\">=</span> romaji_to_kanji shuten sorted_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> initialized_list <span class=\"synStatement\">=</span> make_initial_eki_list siten_kanji sorted_ekimei_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> saitan_list <span class=\"synStatement\">=</span> dijkstra_main initialized_list global_ekikan_list <span class=\"synStatement\">in</span>\n  <span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> serch item lst <span class=\"synStatement\">=</span> <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span>\n      <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> infinity<span class=\"synStatement\">;</span> temae_list <span class=\"synStatement\">=</span> <span class=\"synConstant\">[]</span><span class=\"synStatement\">}</span>\n    <span class=\"synStatement\">|</span> first <span class=\"synStatement\">::</span> rest <span class=\"synStatement\">-&gt;</span>\n       <span class=\"synStatement\">if</span> first.namae <span class=\"synStatement\">=</span> item\n       <span class=\"synStatement\">then</span> first\n       <span class=\"synStatement\">else</span> serch item rest\n  <span class=\"synStatement\">in</span> serch shuten_kanji saitan_list<span class=\"synStatement\">;;</span>\n\n<span class=\"synComment\">(* test *)</span>\n<span class=\"synComment\">(* サポートページからのコピペ *)</span>\n<span class=\"synStatement\">let</span> test1 <span class=\"synStatement\">=</span> dijkstra <span class=\"synConstant\">&quot;shibuya&quot;</span> <span class=\"synConstant\">&quot;gokokuji&quot;</span> <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;護国寺&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">9.8</span><span class=\"synStatement\">;</span>\n   temae_list <span class=\"synStatement\">=</span>\n     <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;護国寺&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;江戸川橋&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;飯田橋&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;市ヶ谷&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;麹町&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;永田町&quot;</span><span class=\"synStatement\">;</span>\n      <span class=\"synConstant\">&quot;青山一丁目&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;表参道&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;渋谷&quot;</span><span class=\"synStatement\">]}</span>\n<span class=\"synStatement\">let</span> test2 <span class=\"synStatement\">=</span> dijkstra <span class=\"synConstant\">&quot;myogadani&quot;</span> <span class=\"synConstant\">&quot;meguro&quot;</span> <span class=\"synStatement\">=</span>\n  <span class=\"synStatement\">{</span>namae <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;目黒&quot;</span><span class=\"synStatement\">;</span> saitan_kyori <span class=\"synStatement\">=</span> <span class=\"synConstant\">12.7000000000000028</span><span class=\"synStatement\">;</span>\n   temae_list <span class=\"synStatement\">=</span>\n     <span class=\"synStatement\">[</span><span class=\"synConstant\">&quot;目黒&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;白金台&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;白金高輪&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;麻布十番&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;六本木一丁目&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;溜池山王&quot;</span><span class=\"synStatement\">;</span>\n      <span class=\"synConstant\">&quot;永田町&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;麹町&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;市ヶ谷&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;飯田橋&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;後楽園&quot;</span><span class=\"synStatement\">;</span> <span class=\"synConstant\">&quot;茗荷谷&quot;</span><span class=\"synStatement\">]}</span>\n</pre>\n\n\n","slug":"プログラミングの基礎　16.4 最初の完動プログラム"},{"data":{"title":"OCamlの無名関数は再帰を定義できない？","published":"2016/02/15","tags":["プログラミングの基礎","OCaml"]},"content":"\n<p>わたろーです．<br/>\n今<a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\">プログラミングの基礎 (Computer Science Library)</a>を読んでいます．<br/>\nこれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>とデザインレシピでプログラミングの基礎を学ぶという内容なのですが，<br/>\n名前のない関数という節で気になる文章がありました．<br/>\n14.4 名前のない関数 p145</p>\n\n<blockquote><p>名前のない関数で定義できるのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>をしていない関数だけです．</p></blockquote>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%E0%A5%C0%B7%D7%BB%BB\">ラムダ計算</a>を元にしていると思っていたので驚きました．<br/>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>出来ないのって思ったので試してみました．<br/>\nY<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>は<a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\">計算機プログラムの構造と解釈 第2版</a>p233 問題4.21に載っていたものを使います．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; SICP</span>\n<span class=\"synComment\">;;; 階乗計算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n         <span class=\"synConstant\">1</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>実行すると</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                <span class=\"synConstant\">1</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n       <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">120</span>\n</pre>\n\n\n<p>　<br/>\nこれを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>で書いてみます．</p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-&gt;</span>\n  <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-&gt;</span>\n    fact fact n<span class=\"synStatement\">)</span>\n    <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-&gt;</span>\n      <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n      <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n      <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n            <span class=\"synConstant\">Characters</span> <span class=\"synConstant\">33</span>-<span class=\"synConstant\">37</span>:\n      fact fact n<span class=\"synError\">)</span>\n           <span class=\"synStatement\">^^^^</span>\n<span class=\"synConstant\">Error</span>: <span class=\"synConstant\">This</span> expression has <span class=\"synStatement\">type</span> 'a <span class=\"synStatement\">-&gt;</span> 'b <span class=\"synStatement\">-&gt;</span> 'c\n       but an expression was expected <span class=\"synStatement\">of</span> <span class=\"synStatement\">type</span> 'a\n       <span class=\"synConstant\">The</span> <span class=\"synStatement\">type</span> variable 'a occurs inside 'a <span class=\"synStatement\">-&gt;</span> 'b <span class=\"synStatement\">-&gt;</span> 'c\n</pre>\n\n\n<p>エラーですね．<br/>\n型が解決されていないのでしょうか．<br/>\nググッてみると -rectypesを使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>を起動すれば出来るようです．</p>\n\n<p><a href=\"http://d.hatena.ne.jp/sumii/20051203/1133575324\">&#x4E0D;&#x52D5;&#x70B9;&#x6F14;&#x7B97;&#x5B50;&#x3075;&#x305F;&#x305F;&#x3073; - sumii&#x306E;&#x65E5;&#x8A18;</a></p>\n\n<pre class=\"code lang-ocaml\" data-lang=\"ocaml\" data-unlink><span class=\"synPreProc\">#</span> <span class=\"synStatement\">(fun</span> n<span class=\"synStatement\">-&gt;</span>\n    <span class=\"synStatement\">(fun</span> fact <span class=\"synStatement\">-&gt;</span>\n      fact fact n<span class=\"synStatement\">)</span>\n      <span class=\"synStatement\">(fun</span> ft k <span class=\"synStatement\">-&gt;</span>\n        <span class=\"synStatement\">if</span> k <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span>\n        <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span>\n        <span class=\"synStatement\">else</span> k <span class=\"synStatement\">*</span> <span class=\"synStatement\">(</span>ft ft <span class=\"synStatement\">(</span>k - <span class=\"synConstant\">1</span><span class=\"synStatement\">))))</span> <span class=\"synConstant\">5</span><span class=\"synStatement\">;;</span>\n\n            - : <span class=\"synType\">int</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">120</span>\n</pre>\n\n\n<p>おお，動いた．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>型っていうのが必要になるわけなんですね．<br/>\nまだまだわからないことだらけですが，型もおもしろそうです．<br/>\nこの辺探すのに行き着いたこのページのTaPLのまとめがすごくおもしろそうです．</p>\n\n<p><iframe src=\"http://mint.hateblo.jp/embed/2014/12/24/211543\" title=\"おいお前ら、TAPL読むぞ！ - ミントフレーバー緑茶\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://mint.hateblo.jp/entry/2014/12/24/211543\">mint.hateblo.jp</a></cite></p>\n\n<p>おもしろそう．読みたい．すごく読みたい．\nでもまだ自分には厳しそう．</p>\n\n<p>その前に<a href=\"http://d.hatena.ne.jp/asin/4781912850/wataro-22\">プログラミング言語の基礎概念 (ライブラリ情報学コア・テキスト)</a>を読みたい．<br/>\nしかしその時間を作れるか．<br/>\nそろそろお仕事探しのために動かないといけないかもって思ってきています．<br/>\n勉強だけしていたい．</p>\n\n","slug":"OCamlの無名関数は再帰を定義できない？"},{"data":{"title":"プログラミング初心者がSICP(計算機プログラムの構造と解釈)を読んでみた","published":"2016/02/13","tags":["scheme","SICP"]},"content":"\n<h1>読む前の状態と動機</h1>\n\n<ul>\n<li>読み始めた時点でプログラミング歴約１年</li>\n<li><a href=\"http://www.shido.info/lisp/idx_scm.html\">もうひとつのscheme入門</a>でプログラミングに入門するも，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4\">高階関数</a>で挫折．</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>本二冊，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a> Tutorialを二周．</li>\n<li>他読み始めたけど途中で飽きた本が何冊か．</li>\n<li>仕事（非IT)が忙しく，プログラミング始めて一年でこれくらいしか出来なかった．</li>\n<li>基本的なところがしっくりこない．</li>\n<li>でもコード書くのは楽しいし，出来ればそれを仕事にしたいので基礎を身に着けたい．</li>\n<li>無職になって時間もあるから基礎を身につけるために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>を読もう．<br/>\n　</li>\n</ul>\n\n\n\n\n\n<p>\n　</p>\n\n<h1>読むための準備</h1>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>手習いとプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>を読んでから<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>にとりかかった．</li>\n<li>メインで読んだのは2版の和田訳．読んでわからない時は原著や1版の元吉訳に当たる．</li>\n<li>後半になると<a href=\"https://github.com/hiroshi-manabe/sicp-pdf\">真鍋訳</a>が登場したためこちらにも助けられた．<br/>\n　<br/>\n　\n\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>を読む過程で得たもの</h1></li>\n<li>括弧が気にならなくなった</li>\n<li>S式のほうが読みやすいのになんで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E6%C3%D6%B5%AD%CB%A1\">中置記法</a>のほうがメジャーなの？</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的プロセスと反復的プロセス</li>\n<li>第一級手続き</li>\n<li>抽象の壁</li>\n<li>メッセージパッシング</li>\n<li>型によるディスパッチと強制型変換</li>\n<li>イベントドリヴン</li>\n<li>制約の拡散</li>\n<li>破壊的代入が怖くなった</li>\n<li>ストリーム</li>\n<li>遅延評価</li>\n<li>超循環評価器の実装を通して評価戦略を理解した．</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシンのシミュレータによって低レベルで何が行われているのか理解した．</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>の効率の違い<br/>\n　\n\n<h1>感想</h1>\n\n<p>４ヶ月半近くかかった．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>は基礎と聞いていたけど，やっぱり基礎でした．<br/>\n今の段階で読んでおいてよかった．<br/>\n問題全部解くつもりはなかったけど，だんだんと自力で解きたくなってきたため結局ほとんど自力で解いていた．<br/>\n解けないと悔しい．<br/>\n問題やってみて思うのは，時間がめちゃくちゃかかるけど解かないと理解できなかった．<br/>\n特に４章からは本文のコードを動かすにも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>が大変で，問題解くにも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>が大変．<br/>\nでもその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>を通して何度もコードや本文を読むことでそこで何をしているのか理解していけた．<br/>\n最後はソースがコメントだらけになった．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>でやる問題が２問残っているのでCを勉強してから解きたい．<br/>\nプログラミング楽しい！に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>おもしろい！も追加された．<br/>\nプログラミング初心者からプログラミング初級者へレベルアップできた・・・はず．<br/>\n　<br/>\nこれから読む人には<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>手習いを読んでおくことを勧めたい．<br/>\n読みにくいし後半急激に難しくなるけど，そこで継続を渡すことを覚えておくと楽になる．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>方法も覚えておかないと４章から辛いので<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>使うならプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>にも一通り目を通しておいたほうがいい．<br/>\n　<br/>\nかなり苦しんだけど，それでも楽しい・おもしろいのほうが勝ってる．<br/>\nまだ半年は生きていけそうなのでまだまだ勉強してコード書く仕事につけるように頑張ります．<br/>\nとりあえず<a href=\"http://d.hatena.ne.jp/asin/4781911609/wataro-22\">プログラミングの基礎 (Computer Science Library)</a>でMLとデザインレシピに触れてからK&amp;Rを読もうと思ってます．</p></li>\n</ul>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068269/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41OG665OkZL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Scheme手習い\" title=\"Scheme手習い\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274068269/wataro-22/\">Scheme手習い</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman,Matthias Felleisen,元吉文男,横山晶一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2\">オーム社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2010/10/22</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 5人 <span class=\"hatena-asin-detail-label\">クリック</span>: 129回</li><li><a href=\"http://d.hatena.ne.jp/asin/4274068269/wataro-22\" target=\"_blank\">この商品を含むブログ (33件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51Exg14b4uL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"プログラミングGauche\" title=\"プログラミングGauche\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\">プログラミングGauche</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Kahua\">Kahua</a>プロジェクト,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%EE%B9%E7%BB%CB%CF%AF\">川合史朗</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3\">オライリージャパン</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2008/03/14</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 22人 <span class=\"hatena-asin-detail-label\">クリック</span>: 713回</li><li><a href=\"http://d.hatena.ne.jp/asin/4873113482/wataro-22\" target=\"_blank\">この商品を含むブログ (272件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"プログラミング初心者がSICP(計算機プログラムの構造と解釈)を読んでみた"},{"data":{"title":"SICP 問題 5.50","published":"2016/02/12","tags":["scheme","SICP"]},"content":"\n<p>4.1節の超循環評価器を5.5で作った翻訳系で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>する．<br/>\n　</p>\n\n<p><a href=\"http://www.serendip.ws/archives/4020\">&#x554F;&#x984C;5.50 &ndash; SICP&#xFF08;&#x8A08;&#x7B97;&#x6A5F;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x69CB;&#x9020;&#x3068;&#x89E3;&#x91C8;&#xFF09;&#x305D;&#x306E;302 : Serendip - Web&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;</a></p>\n\n<p><a href=\"http://himoiku.cocolog-nifty.com/blog/2008/07/sicp550_f385.html\">http://himoiku.cocolog-nifty.com/blog/2008/07/sicp550_f385.html</a></p>\n\n<p>ここを参考にしました．<br/>\nまずここに書いてるmapが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%B0%A4%EB\">バグる</a>っていうのがわからないところからスタート．<br/>\nエラーメッセージを見ても原因がmapだとは気づかず，<br/>\nこの２つのブログを参考にしながら修正するも，翻訳系がダメなのか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>がダメなのかもなかなかわからず．<br/>\n　<br/>\n三日間いろいろなバグに出会いながら最後まで残ったのが２つ．<br/>\n一つ目はどこかで環境の保護がされていないために，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>のベースケースから戻ってきても環境が回復されずその後の計算がおかしくなるバグ．<br/>\n二つ目はレキシカルアドレッシングで翻訳時環境から得たアドレスが狂うバグ．<br/>\n一つ目は最終的にソースをenvで検索してpreservingまたはmake-instruction-sequenceでenvが足らないところがないか探しました．<br/>\nレキシカルアドレッシングの実装時に，作ったcompile-variablesとcompile-assignmentのmake-instruction-sequenceのneededにenvが入っていないためでした．\n二つ目の原因は内部定義でした．<br/>\n翻訳時環境が拡張されるのはcompile-lambda-bodyだけなので，内部定義でフレームが拡張されず，<br/>\nfind-variableが指すアドレスがこのシンボルがない時の環境でのアドレスなので実行時環境では違うものを指してしまいバグっていました．<br/>\nこれの解決策として，scan-out-definesでmake-letを使い内部定義を全てletに吐き出し，<br/>\nそれをlet->combinationでlambdaに変換することで解決しました．<br/>\n根本的な解決ではないですが，とりあえず，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>については問題なく動きます．<br/>\n　<br/>\n以下はテスト．\n翻訳系のREPLのEC-COMPからdriver-loopを呼び出し，<br/>\n翻訳系で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>のREPL，MC-Evalに入っています．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;;EC-COMP input:</span>\n<span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'((</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>product <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n count<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> count<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> count product<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fact <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter count product<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n count<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> count<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> count product<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; MC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fact <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; MC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n</pre>\n\n\n","slug":"SICP 問題 5.50"},{"data":{"title":"SICP 問題 5.49","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p>compileとassembleを機械計算として持ち，REPLを行う<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>計算機を設計する．<br/>\n　<br/>\nはじめ，assembleを命令列の上でやる方法がわからずに，compile-and-assembleという手続きを作り，<br/>\nそれを機械演算として登録してRCEPLを実装したが，</p>\n\n<p><a href=\"http://www.serendip.ws/archives/4005\">&#x554F;&#x984C;5.49 &ndash; SICP&#xFF08;&#x8A08;&#x7B97;&#x6A5F;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x69CB;&#x9020;&#x3068;&#x89E3;&#x91C8;&#xFF09;&#x305D;&#x306E;301 : Serendip - Web&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;</a></p>\n\n<p>ここでそれをうまく回避していたので真似た．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./compiler.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eceval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rcepl<span class=\"synSpecial\">)</span> RCEPL<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rcepl-proc\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> eceval-procedure\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compile compile<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assemble assemble<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rcepl rcepl<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>statements statements<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> RCEPL\n  <span class=\"synSpecial\">(</span>make-machine\n   rcepl-proc\n   <span class=\"synSpecial\">'((</span>assign machine <span class=\"synSpecial\">(</span>op rcepl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;直接RCEPLを指せないので</span>\n     read-compile-execute-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;;EC-COMP input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-compile-execute<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;;EC-COMP value&quot;</span>:<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-compile-execute-print-loop<span class=\"synSpecial\">))</span>\n\n     read-compile-execute\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compile<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const return<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">()))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op statements<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op assemble<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg machine<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-rcepl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>start RCEPL<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ntest</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start-rcepl<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;;EC-COMP input:</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n            n\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;;EC-COMP value</span>\nok\n\n<span class=\"synComment\">;;;EC-COMP input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">78</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">40</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;;EC-COMP value</span>\n<span class=\"synConstant\">2432902008176640000</span>\n</pre>\n\n\n","slug":"SICP 問題 5.49"},{"data":{"title":"SICP 問題 5.48","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p>ECEVALのrepl上で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>出来るようにする．<br/>\nこれで動くかなって思ったら動いた．<br/>\nただトレースした命令列を見ると，<br/>\napply-dispatchからprimitive-procedureにジャンプせずに先頭に戻っている．<br/>\nなぜそうなるのかわからない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 環境を拡張してprimitive-procedureとしてcompile-and-run を登録</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment-with-compile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extend-environment\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compile-and-run<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive compile-and-run<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; setup-environment-with-compileの環境からecevalに入るようにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-and-go expression<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>instructions\n         <span class=\"synSpecial\">(</span>assemble <span class=\"synSpecial\">(</span>statements\n                    <span class=\"synSpecial\">(</span>compile expression <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">'()))</span>\n                   eceval<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment-with-compile<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>val instructions<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>flag true<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">; ; and-goとは違い環境の初期設定はいらない．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-and-run expression<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>instructions\n         <span class=\"synSpecial\">(</span>assemble <span class=\"synSpecial\">(</span>statements\n                    <span class=\"synSpecial\">(</span>compile expression <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">'()))</span>\n                   eceval<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>val instructions<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>flag true<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 環境をwith-compileのほうにしてflagをfalseにしてからecevalに入る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-eceval<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment-with-compile<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>set-register-contents! eceval <span class=\"synSpecial\">'</span>flag false<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.48"},{"data":{"title":"SICP 問題 5.47","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した手続きから積極制御評価器で定義した手続きを使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>primitive-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>primitive-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compiled-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compiled-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compound-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compound-branch<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; compound-branchの作成</span>\n        <span class=\"synSpecial\">(</span>after-call <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-call<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>compiled-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-call linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>primitive-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; compiled-branchへの分岐を追加</span>\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op compiled-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>compiled-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; primitiveでもcompiledでもなかったらcompoundとして処理．</span>\n       <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         compound-branch\n         <span class=\"synComment\">;; compiledと同じようにcompound-proc-applで命令を作る</span>\n         <span class=\"synSpecial\">(</span>compound-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             compiled-branch\n             <span class=\"synSpecial\">(</span>compile-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             primitive-branch\n             <span class=\"synSpecial\">(</span>end-with-linkage\n              linkage\n              <span class=\"synSpecial\">(</span>make-instruction-sequence\n               <span class=\"synSpecial\">'(</span>proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                         <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))))))))</span>\n       after-call<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; ほとんどcompile-proc-applと同じで，continueをセーブしてからcompappにジャンプする．</span>\n<span class=\"synComment\">;; compappには(label procedure-apply)が入っている．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-proc-appl target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'()</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-return <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>proc-return<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>make-instruction-sequence\n            <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n            <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-return<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">,</span>proc-return\n              <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>save continue<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg compapp<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;return linkage, target not val -- COMPILE&quot;</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; ec-evalの命令の先頭でcompappを初期化する．</span>\n   <span class=\"synSpecial\">'((</span>assign compapp <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span> <span class=\"synComment\">;追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label external-entry<span class=\"synSpecial\">))</span>\n     read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ntest</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>begin\n          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">10</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">12</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">22</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">4</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した定義の上書き，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>していない定義へのアクセスの両方がうまくいっている．</p>\n\n","slug":"SICP 問題 5.47"},{"data":{"title":"SICP 問題 5.46","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p>5.45と同様に今度は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%A3%A5%DC%A5%CA%A5%C3%A5%C1%BF%F4%CE%F3\">フィボナッチ数列</a>の計算でそれぞれ比べる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib  <span class=\"synComment\">;;一回目以外は省略</span>\n        <span class=\"synSpecial\">(</span>make-machine\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">'(</span>controller\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n           fib-loop\n           <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n           <span class=\"synComment\">;; Fib(n-1)を計算するよう設定</span>\n           <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;n の昔の値を退避</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>   <span class=\"synComment\">;n を n-1 に変える</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>               <span class=\"synComment\">;再帰呼び出しを実行</span>\n           afterfib-n-1                <span class=\"synComment\">;戻った時 Fib(n-1) は val にある</span>\n           <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n           <span class=\"synComment\">;; Fib(n-2)を計算するよう設定</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;Fib(n-1) を退避</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n           afterfib-n-2            <span class=\"synComment\">;戻った時 Fib(n-2) の値は val にある</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;n には Fib(n-2) がある</span>\n           <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>           <span class=\"synComment\">;val には Fib(n-1) がある</span>\n           <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign val                   <span class=\"synComment\">;Fib(n-1) + Fib(n-2)</span>\n                   <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;呼び出し側に戻る．答えは val にある</span>\n           immediate-answer\n           <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>          <span class=\"synComment\">;基底の場合: Fib(n)=n</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n           fib-done\n           <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\n\nfib\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">5</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">5</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">8</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">80</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">13</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">132</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">21</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">216</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">34</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">352</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>　<br/>\n翻訳系</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>&lt; n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n              n\n              <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">15</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">39</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">63</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">11</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">103</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">8</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">167</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">15</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">13</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">271</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">17</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">21</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">439</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">19</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">34</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">711</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">21</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>　<br/>\n積極制御評価器</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ec-fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ec-fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>ec-fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">72</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">128</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">408</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">688</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">8</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1136</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">13</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1864</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">21</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3040</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">34</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-fib <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4944</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>プッシュ数</p>\n\n<table>\n<thead>\n<tr>\n<th> n   </th>\n<th style=\"text-align:right;\"> 計算機 </th>\n<th style=\"text-align:right;\"> 翻訳系 </th>\n<th style=\"text-align:right;\"> 評価器 </th>\n<th style=\"text-align:right;\"> 評/機 </th>\n<th style=\"text-align:right;\"> 翻/機 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 3   </td>\n<td style=\"text-align:right;\">    8 </td>\n<td style=\"text-align:right;\">  23 </td>\n<td style=\"text-align:right;\">   128  </td>\n<td style=\"text-align:right;\"> 16.0 </td>\n<td style=\"text-align:right;\"> 2.87 </td>\n</tr>\n<tr>\n<td> 4 </td>\n<td style=\"text-align:right;\"> 16 </td>\n<td style=\"text-align:right;\">  39 </td>\n<td style=\"text-align:right;\"> 240 </td>\n<td style=\"text-align:right;\"> 15.0 </td>\n<td style=\"text-align:right;\"> 2.43 </td>\n</tr>\n<tr>\n<td>5 </td>\n<td style=\"text-align:right;\"> 28 </td>\n<td style=\"text-align:right;\"> 63 </td>\n<td style=\"text-align:right;\"> 408 </td>\n<td style=\"text-align:right;\"> 14.57</td>\n<td style=\"text-align:right;\"> 2.25 </td>\n</tr>\n<tr>\n<td>6 </td>\n<td style=\"text-align:right;\"> 48</td>\n<td style=\"text-align:right;\"> 103 </td>\n<td style=\"text-align:right;\"> 688 </td>\n<td style=\"text-align:right;\"> 14.33 </td>\n<td style=\"text-align:right;\">2.14</td>\n</tr>\n<tr>\n<td>7 </td>\n<td style=\"text-align:right;\"> 80 </td>\n<td style=\"text-align:right;\"> 167</td>\n<td style=\"text-align:right;\"> 1136 </td>\n<td style=\"text-align:right;\">14.2</td>\n<td style=\"text-align:right;\">2.08</td>\n</tr>\n<tr>\n<td>8</td>\n<td style=\"text-align:right;\">132</td>\n<td style=\"text-align:right;\">271</td>\n<td style=\"text-align:right;\">1864</td>\n<td style=\"text-align:right;\"> 14.12</td>\n<td style=\"text-align:right;\">2.05</td>\n</tr>\n<tr>\n<td>9</td>\n<td style=\"text-align:right;\">216</td>\n<td style=\"text-align:right;\">439</td>\n<td style=\"text-align:right;\">3040</td>\n<td style=\"text-align:right;\">14.07</td>\n<td style=\"text-align:right;\"> 2.03</td>\n</tr>\n<tr>\n<td>10</td>\n<td style=\"text-align:right;\">352</td>\n<td style=\"text-align:right;\">711</td>\n<td style=\"text-align:right;\">4944</td>\n<td style=\"text-align:right;\">14.04</td>\n<td style=\"text-align:right;\">2.01|</td>\n</tr>\n<tr>\n<td>20</td>\n<td style=\"text-align:right;\">43780</td>\n<td style=\"text-align:right;\">87567</td>\n<td style=\"text-align:right;\">612936</td>\n<td style=\"text-align:right;\">14.0</td>\n<td style=\"text-align:right;\">2.0</td>\n</tr>\n</tbody>\n</table>\n\n\n<p>　<br/>\n 最大スタック深さ</p>\n\n<table>\n<thead>\n<tr>\n<th> 計算機</th>\n<th> 翻訳系</th>\n<th> 評価器 </th>\n<th>評/機</th>\n<th> 翻/機</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2n-2</td>\n<td>2n+1</td>\n<td>5n+3</td>\n<td>2.500</td>\n<td>1.00</td>\n</tr>\n</tbody>\n</table>\n\n\n","slug":"SICP 問題 5.46"},{"data":{"title":"SICP 問題 5.45","published":"2016/02/10","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した階乗計算，積極制御評価器の階乗計算，特殊目的計算機のプッシュ数，最大スタック深さを調べて比較する．</p>\n\n<p>まずは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>したものから</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile-and-go\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">5</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">7</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">9</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">11</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">15</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">17</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">19</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">21</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ数は2n+3<br/>\n最大スタック深さは2n-2<br/>\n　<br/>\n次に積極制御評価器で計測する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ec-factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>ec-factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">80</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">112</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">144</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">176</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">208</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">272</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>ec-factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">304</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ数は32n-16<br/>\n最大スタック深さは5n+3<br/>\n　<br/>\n最後に階乗計算のための特殊計算機で計測する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fact  <span class=\"synComment\">;; 二回目以降の初期化は省略</span>\n        <span class=\"synSpecial\">(</span>make-machine\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">'(</span>controller\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n           fact-loop\n           <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n           after-fact\n           <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n           base-case\n           <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n           fact-done\n           <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\nfact\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">24</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">120</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">720</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">5040</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">40320</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">362880</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>done\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ数が2n-2\n最大スタック深さが2n-2．</p>\n\n<p>比べると，積極制御評価器は<br/>\ntotal: 32n-16<br/>\nmax: 5n+3<br/>\n　<br/>\n翻訳系は<br/>\ntotal: 2n+3<br/>\nmax: 2n-2<br/>\n　<br/>\n階乗計算機は<br/>\ntotal: 2n-2<br/>\nmax: 2n-2<br/>\n　<br/>\n本来はここで翻訳系と階乗計算機のほうがはるかに優れていることを確認するはずが<br/>\nここまでの問題で最適化したため，ほとんど性能差がなくなっている．<br/>\n比率を出すと積極制御評価器とは<br/>\ntotalが1:16<br/>\nmaxは2:5の性能差になる．</p>\n\n<p>ここで本当に翻訳系が2nで収まっているのか確認のために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>した命令列を出力させる．<br/>\nsaveしているところを確認する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n        entry1\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n        true-branch3\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        false-branch4\n        <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>  <span class=\"synComment\">;; false-branchのcontinue</span>\n        <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>          <span class=\"synComment\">;; false-branchのenv</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n        compiled-branch7\n        <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label proc-return9<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        proc-return9\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n        primitive-branch6\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        after-call8\n        <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-if5\n        after-lambda2\n        <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>false-branchでcontinueとenvをsaveしているだけなので最大スタック深さが2n-2なのは確かなようだ．<br/>\nプッシュ数が2n+3なのは(factorial 1)でも5回プッシュされてるところを見ると，<br/>\n引数を適用する段階でされているのでこれ以上は無理だろう．<br/>\nfactorialは基本計算しか使っていないので，open-code最適化がかなり効いてるためのこれだけ性能がよくなってると思われる．</p>\n\n","slug":"SICP 問題 5.45"},{"data":{"title":"SICP 問題 5.44","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>基本手続きの名前を含む式の正しいコードを翻訳するため，翻訳時環境を調べるようにする．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>  (cond ((self-evaluating? exp)\n         (compile-self-evaluating exp target linkage))\n        ((variable? exp)\n         (compile-variable exp target linkage ct-env))\n        ((quoted? exp) (compile-quoted exp target linkage))\n        ((assignment? exp)\n         (compile-assignment exp target linkage ct-env))\n        ((definition? exp)\n         (compile-definition exp target linkage ct-env))\n        ((if? exp) (compile-if exp target linkage ct-env))\n        ((lambda? exp)\n         (compile-lambda exp target linkage ct-env))\n        ((let? exp)\n         (compile (let-&gt;combination exp) target linkage ct-env))\n        ((begin? exp)\n         (compile-sequence (begin-actions exp)\n                           target linkage ct-env))\n        ((cond? exp) (compile (cond-&gt;if exp) target linkage ct-env))\n        ((open-code? exp ct-env)           ;ct-envも渡して翻訳時環境に上書きされていないか調べる\n         (compile-open-code exp target linkage ct-env))\n        ((application? exp)\n         (compile-application exp target linkage ct-env))\n        (else\n         (error &#34;Unknown expression type -- COMPILE&#34; exp))))\n\n(define (not-overwrite? op ct-env)\n  (let ((address (find-variable op ct-env )))\n    (eq? address &#39;not-found)))\n\n(define (open-code? exp ct-env)\n  (and (memq (car exp) &#39;(= * - +))\n       (not-overwrite? (car exp) ct-env)))</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry14<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda15<span class=\"synSpecial\">))</span>\n  entry14\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここで+を探すのにct-envの中身から探しているので成功.open-codeになっていない．</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch19<span class=\"synSpecial\">))</span>\n  compiled-branch20\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call21<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch19\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call21\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> a b x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch16<span class=\"synSpecial\">))</span>\n  compiled-branch17\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call18<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call18\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch22<span class=\"synSpecial\">))</span>\n  compiled-branch23\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch22\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call24\n  after-lambda15\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.44"},{"data":{"title":"SICP 問題 5.43","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>内部定義を吐き出して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>する．<br/>\nまず4.16で作ったscan-out-definesがこれ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-defines proc-body defines non-defines<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> defines<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> non-defines<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>split-defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> defines<span class=\"synSpecial\">)</span> non-defines<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>split-defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span> defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> non-defines<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>splits <span class=\"synSpecial\">(</span>split-defines body <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> splits<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>non-defines <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> splits<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> defines<span class=\"synSpecial\">)</span>\n          non-defines\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                              defines<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                        <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                      defines<span class=\"synSpecial\">)</span>\n                                 non-defines<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>　<br/>\nこれをcompile-lambda-bodyで使う</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>formals <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>append-instruction-sequences\n     <span class=\"synSpecial\">(</span>make-instruction-sequence\n      <span class=\"synSpecial\">'(</span>env proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n\n      <span class=\"synSpecial\">`(,</span>proc-entry\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env\n                <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>formals<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))</span>\n     <span class=\"synComment\">;; ここでscan-out-definesでlambda-bodyを変換してからcompile-sequenceに渡す</span>\n     <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> formals ct-env<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>　　<br/>\nこれはletに変換するのでcompileにletを追加する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                           <span class=\"synComment\">; letの追加</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>open-code? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>               <span class=\"synComment\">;open-code?でdispatch</span>\n         <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type -- COMPILE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test\nまずはscan-out-definesから．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">(</span>lambda-body <span class=\"synSpecial\">'(</span>lambda <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>define x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>y c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x c<span class=\"synSpecial\">))</span>\n                                        <span class=\"synSpecial\">(</span>+ a b y<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">let</span>\n     <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> y <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x c<span class=\"synSpecial\">)))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b y<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>　<br/>\n期待通りに動いている．<br/>\n次にcompile．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>後の命令列を追ったのでコメントをつけた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'((</span>lambda <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>define x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>y c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ x c<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>+ a b <span class=\"synSpecial\">(</span>y <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>env proc argl continue val<span class=\"synSpecial\">)</span>\n       <span class=\"synComment\">;; procにentry56の手続き</span>\n       <span class=\"synSpecial\">((</span>assign proc <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry56<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda57<span class=\"synSpecial\">))</span>\n        entry56\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; (a b)を(5 6)に対応して拡張</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; proc: entry58</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry58<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda59<span class=\"synSpecial\">))</span>\n        entry58\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; (x y)に(*unassigned* *unassigned*)を対応付け</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; x のオブジェクトを1にする</span>\n        <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; val: entry60</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry60<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda61<span class=\"synSpecial\">))</span>\n        entry60\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; ((c) (6))</span>\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>c<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; arg1: 1</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; arg2: 2</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; val: (+ 1 2) = 3</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-lambda61\n        <span class=\"synComment\">;; y &lt;= entry60</span>\n        <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;aftercall71</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;(+ a b) =&gt;(+ 5 6) =&gt; 11</span>\n        <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (2)</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch62<span class=\"synSpecial\">))</span>\n        compiled-branch63\n        <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label proc-return65<span class=\"synSpecial\">))</span> <span class=\"synComment\">;continue: proc-return65</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        proc-return65\n        <span class=\"synComment\">;; arg2: 7</span>\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-call64<span class=\"synSpecial\">))</span>\n        primitive-branch62\n        <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        after-call64\n        <span class=\"synComment\">;; val: (+ 11 3) = 14</span>\n        <span class=\"synSpecial\">(</span>assin val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>              <span class=\"synComment\">;aftercall71</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-lambda59\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (*unassigned* *unassigned*)</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch66<span class=\"synSpecial\">))</span>\n        compiled-branch67\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;val: entry58</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        primitive-branch66\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n        after-call68\n        after-lambda57\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">6</span><span class=\"synSpecial\">))</span>          <span class=\"synComment\">;val: 6</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (6)</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>          <span class=\"synComment\">;val: 5</span>\n        <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl: (5 6)</span>\n        <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;no</span>\n        <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch69<span class=\"synSpecial\">))</span>\n        compiled-branch70\n        <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call71<span class=\"synSpecial\">))</span> <span class=\"synComment\">;continue: aftercall71</span>\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;val: entry56</span>\n        <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n        primitive-branch69\n        <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n        after-call71                    <span class=\"synComment\">;val 14</span>\n        <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>期待通りに内部定義を吐き出してlambdaで<em>unassigned</em>として受け取り，<br/>\nbodyで実際の値（手続き）にset!している．</p>\n\n","slug":"SICP 問題 5.43"},{"data":{"title":"SICP 問題 5.42","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>compile-variableとcompile-assignmentを文面アドレスを使った検索に対応</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>address <span class=\"synSpecial\">(</span>find-variable <span class=\"synIdentifier\">exp</span> ct-env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage\n     linkage\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> address <span class=\"synSpecial\">'</span>not-found<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n          <span class=\"synComment\">;; targetなら変更しても問題ないので一時的に帯域環境を入れる</span>\n          <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target\n                    <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>exp<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">,</span>target<span class=\"synSpecial\">))))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                    <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>address<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>get-value-code                 <span class=\"synComment\">;valを求めるための命令．</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>address <span class=\"synSpecial\">(</span>find-variable var ct-env<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span>end-with-linkage\n      linkage\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n                  get-value-code <span class=\"synComment\">;代入する値を求め，valに代入される．seq1</span>\n                  <span class=\"synComment\">;; valに代入された値をvarに代入する．seq2</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> address <span class=\"synSpecial\">'</span>not-found<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>make-instruction-sequence\n                       <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                       <span class=\"synComment\">;; 一度targetにglobal-environmentを代入してからsetする</span>\n                       <span class=\"synSpecial\">`((</span>assign target <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>var<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">,</span>target<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span>make-instruction-sequence\n                       <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">`((</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>address<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))))))))</span>\n</pre>\n\n\n<p>test<br/>\nこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>の式自体はバグってる．<br/>\nただし，test自体は出来るのでそのまま</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>lambda <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>+\n             <span class=\"synSpecial\">(</span>+ x a<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>* y b<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>set! x a<span class=\"synSpecial\">)</span> <span class=\"synComment\">;; +の中でset!してるので 'okが返ってバグる</span>\n             <span class=\"synSpecial\">(</span>set! z b<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">'</span>val\n       <span class=\"synSpecial\">'</span>next\n       <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry24<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda25<span class=\"synSpecial\">))</span>\n  entry24\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry26<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  entry26\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op lexical-address-set!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; arg2 = ok</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; (+ arg1 ok)なのでバグる</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lexical-address-lookup<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assin val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-lambda27\n  after-lambda25<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.42"},{"data":{"title":"SICP 問題 5.41","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>翻訳時環境に対する変数の文面アドレスを返す手続きfind-variableの実装</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-variable var ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop frame-address env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan variable-address frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> frame<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> frame-address <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> frame-address variable-address<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> variable-address <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>not-found\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synConstant\">0</span> frame<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>env-loop <span class=\"synConstant\">0</span> ct-env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>find-variable <span class=\"synSpecial\">'</span>c <span class=\"synSpecial\">'((</span>y z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b c d e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>find-variable <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'((</span>y z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b c d e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>find-variable <span class=\"synSpecial\">'</span>w <span class=\"synSpecial\">'((</span>y z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a b c d e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)))</span>\nnot-found\n</pre>\n\n\n","slug":"SICP 問題 5.41"},{"data":{"title":"SICP 問題 5.40","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>翻訳時環境を維持し，compile-lambda-bodyで拡張するように変更する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry ct-env<span class=\"synSpecial\">)</span> <span class=\"synComment\">;; ct-envを追加</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>formals <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>append-instruction-sequences\n     <span class=\"synSpecial\">(</span>make-instruction-sequence\n      <span class=\"synSpecial\">'(</span>env proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n\n      <span class=\"synSpecial\">`(,</span>proc-entry\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env\n                <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>formals<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> formals ct-env<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;; ct-envを拡張</span>\n</pre>\n\n\n<p>後はcompileするときに引数にct-envを取るように書く手続きを変更する．</p>\n\n","slug":"SICP 問題 5.40"},{"data":{"title":"SICP 問題 5.39","published":"2016/02/09","tags":["scheme","SICP"]},"content":"\n<p>文面アドレスと実行時環境とり値を検索するlexical-address-lookupと\n値を変更するlexical-address-set!を実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 文面アドレスを使って変数の値を探す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-lookup lex-add r-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> val <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span><span class=\"synSpecial\">)</span>\n          val<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 文面アドレスにある値を変更する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lexical-address-set! lex-add val r-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>frame-values <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> r-env <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lex-add<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter frame count<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame val<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lex-add<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-env <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">'(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">))</span>\nmy-env\ngosh&gt; my-env\n<span class=\"synSpecial\">(((</span>x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">&gt;</span> <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">#f</span>\n  <span class=\"synConstant\">#t</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cdr&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cons&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> null?&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synStatement\">=&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">-&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">+&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> *&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> /&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> &gt;&gt;<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synConstant\">&lt;&gt;</span><span class=\"synSpecial\">)))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>scheme my-env<span class=\"synSpecial\">)</span>\nok\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\nscheme\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-set! <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>SICP my-env<span class=\"synSpecial\">)</span>\nok\ngosh&gt; <span class=\"synSpecial\">(</span>lexical-address-lookup <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> my-env<span class=\"synSpecial\">)</span>\nSICP\n</pre>\n\n\n","slug":"SICP 問題 5.39"},{"data":{"title":"SICP 問題 5.38d","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p>+と*について任意個の被<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の式が使えるように拡張する．<br/>\n　<br/>\nここに書いた手続きを変更もしくは追加する．<br/>\n３つ以上の引数の時はarg1に畳み込んで計算していく．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-open-code-operand <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>*<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>compile-open-code-operand-2\n          <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage ct-env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;invalid application: &quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code-operand <span class=\"synIdentifier\">exp</span> target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>args <span class=\"synSpecial\">(</span>spread-arguments <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> ct-env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage linkage\n                      <span class=\"synSpecial\">(</span>preserving\n                       <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">)</span>\n                       <span class=\"synComment\">;; co-arg2がopen-code式だった場合にarg1が上書きされるので退避させる．</span>\n                       <span class=\"synSpecial\">(</span>preserving\n                        <span class=\"synSpecial\">'(</span>arg1 env<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>make-instruction-sequence\n                         <span class=\"synSpecial\">'(</span>arg1 arg2 env<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synComment\">;;; operandが無くてprocが+なら1を，*なら0をtargetに代入．</span>\n<span class=\"synComment\">;;; operandが一つだけならそのままの値をtargetに入れる．</span>\n<span class=\"synComment\">;;; operandが３つ以上なら</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code-operand-2 proc operands target linkage ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> proc <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synConstant\">0</span> target linkage<span class=\"synSpecial\">)</span> <span class=\"synComment\">;+なら0</span>\n             <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synConstant\">1</span> target linkage<span class=\"synSpecial\">)))</span>   <span class=\"synComment\">;*なら1</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operands<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>end-with-linkage linkage\n                           <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> target <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>                           <span class=\"synComment\">;引数が３つ以上ならこちらで処理</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>operand <span class=\"synSpecial\">(</span>spread-arguments operands ct-env<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>end-with-linkage\n            linkage\n            <span class=\"synSpecial\">(</span>append-instruction-sequences\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>compile-open-code-operand-3 proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand<span class=\"synSpecial\">)</span> target<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;;; ここに渡されるseqはコンパイルされた引数のリスト．</span>\n<span class=\"synComment\">;;; last-seqだとarg1を保護しながら最後の引数をarg2に代入して</span>\n<span class=\"synComment\">;;; 最後にarg1, arg2をprocした結果をvalに代入する．</span>\n<span class=\"synComment\">;;; まだ残っているときはarg1を保護しながら引数をarg2に代入して</span>\n<span class=\"synComment\">;;; arg1とarg2をprocした結果をarg1に代入する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code-operand-3 proc seq target<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>last-seq? seq<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>preserving\n       <span class=\"synSpecial\">'(</span>arg1 env<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>arg1 arg2 env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">`((</span>assin <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>preserving\n        <span class=\"synSpecial\">'(</span>arg1 env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>arg1 arg2 env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>arg1<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">`((</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))))</span>\n       <span class=\"synSpecial\">(</span>compile-open-code-operand-3 proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; operandが0または1以外の時はここでcompileする．</span>\n<span class=\"synComment\">;;; 一つ目だけarg1に代入し，残りはarg2に代入する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>spread-arguments operand ct-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>operand <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg1 <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> operand<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> result<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg2 <span class=\"synSpecial\">'</span>next ct-env<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-seq? seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>*<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>cont <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>* <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>cont <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>* <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>* <span class=\"synSpecial\">(</span>* <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assin target <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>おかしいところはなく動いている．</p>\n\n","slug":"SICP 問題 5.38d"},{"data":{"title":"SICP 問題 5.38c","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p>元のcompileによる出力と5.38abでcompile-open-codeを追加した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の出力を比べる．<br/>\n命令列が約半分になっている．</p>\n\n<p>compile-open-codeを追加した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の出力</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n  entry1\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n  true-branch3\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  false-branch4\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n  compiled-branch7\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label proc-return9<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  proc-return9\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n  primitive-branch6\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call8\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-if5\n  after-lambda2\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>元のcompileによる出力</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n  entry1\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n  compiled-branch7\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch6\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call8\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n  true-branch3\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  false-branch4\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch9<span class=\"synSpecial\">))</span>\n  compiled-branch10\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call11<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch9\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call11\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch12<span class=\"synSpecial\">))</span>\n  compiled-branch13\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call14<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch12\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call14\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch15<span class=\"synSpecial\">))</span>\n  compiled-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch15\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call17\n  after-if5\n  after-lambda2\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.38c"},{"data":{"title":"SICP 問題 5.38ab","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p>+ - * = はopen-codeとして\n(reg val (op +)  (reg arg1) (reg arg2))\nの形で処理できるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>open-code? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>= * - +<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>open-code? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>               <span class=\"synComment\">;open-code?でdispatch</span>\n         <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type -- COMPILE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>spread-arguments operand<span class=\"synSpecial\">)</span>      <span class=\"synComment\">;それぞれコンパイルしてリストにして返す</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>co-arg1 <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg1 <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>co-arg2 <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>arg2 <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> co-arg1 co-arg2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-open-code <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>args <span class=\"synSpecial\">(</span>spread-arguments <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>end-with-linkage linkage\n                          <span class=\"synSpecial\">(</span>append-instruction-sequences\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">)</span>\n                           <span class=\"synComment\">;; co-arg2がopen-code式だった場合にarg1が上書きされるので退避させる．</span>\n                           <span class=\"synSpecial\">(</span>preserving\n                            <span class=\"synSpecial\">'(</span>arg1<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>make-instruction-sequence\n                             <span class=\"synSpecial\">'(</span>arg1 arg2<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">,</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))))))))</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;require 2 operand&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">'(</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(()</span>\n <span class=\"synSpecial\">(</span>arg1 arg2 val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign arg1 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign arg2 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore arg1<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg arg2<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.38ab"},{"data":{"title":"SICP 5.5.5 翻訳系","published":"2016/02/08","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>の式を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシンのシミュレータの命令列に翻訳するコード．<br/>\n理解するためにコメントを出来るだけつけた</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; make-branchのための手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> label-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>new-label-number<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> label-counter<span class=\"synSpecial\">))</span>\n  label-counter<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-label name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-&gt;symbol</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> name<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number-&gt;string</span> <span class=\"synSpecial\">(</span>new-label-number<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; make-compileに必要な機械演算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-compiled-procedure entry env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compiled-procedure entry env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compiled-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>compiled-procedure<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compiled-procedure-entry c-proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> c-proc<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compiled-procedure-env c-proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> c-proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> all-regs <span class=\"synSpecial\">'(</span>env proc val argl continue<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type -- COMPILE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-instruction-sequence needs modifies statements<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> needs modifies statements<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-instruction-sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synComment\">;;; 接続コードの翻訳</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-linkage linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>continue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n                                    <span class=\"synSpecial\">'((</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>empty-instruction-sequence<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span>\n                                    <span class=\"synSpecial\">`((</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;;; 命令の最後に次の計算の行き先を入れる．</span>\n<span class=\"synComment\">;;; preservingがあるのでlinkageがreturnでinstruction-sequenceでcontinueを変更しても</span>\n<span class=\"synComment\">;;; save, restoreされるので問題ない</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>end-with-linkage linkage instruction-sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>continue<span class=\"synSpecial\">)</span>\n              instruction-sequence\n              <span class=\"synSpecial\">(</span>compile-linkage linkage<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; 単純な式のコンパイル</span>\n<span class=\"synComment\">;;; targetにexpを代入して次の計算への命令を作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-self-evaluating <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>end-with-linkage\n   linkage\n   <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>exp<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; targetに(cadr exp)を代入して次の計算への命令を作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-quoted <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>end-with-linkage\n   linkage\n   <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;;; variableを環境から探してきて，見つかった値をtargetに代入して，次の計算への命令を足して返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-variable <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>end-with-linkage\n   linkage\n   <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                                        <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>exp<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-assignment <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>get-value-code                 <span class=\"synComment\">;valを求めるための命令．</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage\n     linkage\n     <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;valを求める間に環境が変わると困る</span>\n                 get-value-code         <span class=\"synComment\">;代入する値を求め，valに代入される．seq1</span>\n                 <span class=\"synComment\">;; valに代入された値をvarに代入する．seq2</span>\n                 <span class=\"synSpecial\">(</span>make-instruction-sequence\n                  <span class=\"synComment\">;;  ;代入するので元々の環境と代入する値を必要とする．</span>\n                  <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                  <span class=\"synComment\">;; targetに'okを入れて返すのでtargetは変更する</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">`((</span>perform <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>var<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synComment\">;;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-definition <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;糖衣構文(f x)の場合でもfがvarに束縛される</span>\n        <span class=\"synSpecial\">(</span>get-value-code                 <span class=\"synComment\">;varに束縛する値を求める命令</span>\n         <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>end-with-linkage\n     linkage\n     <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;valを求める間に環境が変わると困る</span>\n                 get-value-code\n                 <span class=\"synSpecial\">(</span>make-instruction-sequence\n                  <span class=\"synComment\">;;定義する元々の環境とget-value-codeで求めた値の入っているvalが必要</span>\n                  <span class=\"synSpecial\">'(</span>env val<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>         <span class=\"synComment\">;targetにokを入れて返す</span>\n                  <span class=\"synSpecial\">`((</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>var<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synComment\">;;; 条件式</span>\n<span class=\"synComment\">;;; ifはtestがtrueならfalseに飛ぶ．</span>\n<span class=\"synComment\">;;; そのためlinkageがnextの場合，そのままだとtrueの後にfalseにいってしまう</span>\n<span class=\"synComment\">;;; falseを飛ばすためにtrueの後はafter-ifに飛ぶように</span>\n<span class=\"synComment\">;;; nextの場合はconsequenct-linkageにafter-ifを入れる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-if <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; make-branchで書くラベルにIDをつける</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>true-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>f-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>false-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>after-if <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-if<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>consequent-linkage           <span class=\"synComment\">;nextならafter-ifが入る</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-if linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>p-code <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span> <span class=\"synComment\">;術後を生成する</span>\n            <span class=\"synSpecial\">(</span>c-code\n             <span class=\"synSpecial\">(</span>compile\n              <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target consequent-linkage<span class=\"synSpecial\">))</span> <span class=\"synComment\">;consequenct節の命令の生成</span>\n            <span class=\"synSpecial\">(</span>a-code\n             <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;alterenative節の命令の生成</span>\n        <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">'(</span>env continue<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;環境とcontinueは保護</span>\n                    p-code\n                    <span class=\"synSpecial\">(</span>append-instruction-sequences <span class=\"synComment\">;任意の数の式をつながりのある式として連結する</span>\n                     <span class=\"synSpecial\">(</span>make-instruction-sequence <span class=\"synSpecial\">'(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n                                                <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n                                                  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>f-branch<span class=\"synSpecial\">))))</span>\n                     <span class=\"synComment\">;; prallelで逐次実行でなくどちらかだけが実行される命令を作る</span>\n                     <span class=\"synComment\">;; これはどちらが選ばれるか実行時までわからないので</span>\n                     <span class=\"synComment\">;; neededとmodifiedの和集合をとる．</span>\n                     <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n                      <span class=\"synSpecial\">(</span>append-instruction-sequences t-branch c-code<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>append-instruction-sequences f-branch a-code<span class=\"synSpecial\">))</span>\n                     after-if<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; 並び</span>\n<span class=\"synComment\">;;; beginやlambdaのbodyで使う</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-sequence seq target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>preserving\n       <span class=\"synSpecial\">'(</span>env continue<span class=\"synSpecial\">)</span>                  <span class=\"synComment\">;環境と継続は保護</span>\n       <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> target <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> <span class=\"synComment\">;そのまま次の命令を実行するのでnext</span>\n       <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> target linkage<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;再帰的に命令列を作る</span>\n\n<span class=\"synComment\">;;; lambda式</span>\n<span class=\"synComment\">;;; target(val)にコンパイルした式のラベルを束縛してlambda-linkageにジャンプ</span>\n<span class=\"synComment\">;;; 実際に式を呼び出すときにcompile-lambda-bodyで作るラベルにジャンプし，処理をする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-entry <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>entry<span class=\"synSpecial\">))</span> <span class=\"synComment\">;コンパイルされた式はこのentry-idのラベルで処理される</span>\n        <span class=\"synSpecial\">(</span>after-lambda <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-lambda<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>lambda-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-lambda linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synComment\">;; tack-onでend-with-linkageにcompile-lambda-bodyを連結．</span>\n       <span class=\"synComment\">;; neededとmodifiedはend-with-linkageのほうを使う</span>\n       <span class=\"synSpecial\">(</span>tack-on-instruction-sequence\n        <span class=\"synSpecial\">(</span>end-with-linkage\n         lambda-linkage\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                    <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-entry<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry<span class=\"synSpecial\">))</span>\n       after-lambda<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; コンパイルした手続きが実際に処理をするラベルの中身を作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-lambda-body <span class=\"synIdentifier\">exp</span> proc-entry<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>formals <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span> <span class=\"synComment\">;lambdaの引数はformalsに束縛</span>\n    <span class=\"synSpecial\">(</span>append-instruction-sequences\n     <span class=\"synSpecial\">(</span>make-instruction-sequence\n      <span class=\"synSpecial\">'(</span>env proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n      <span class=\"synComment\">;; 実際の処理をするラベル</span>\n      <span class=\"synSpecial\">`(,</span>proc-entry\n        <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>assign env                     <span class=\"synComment\">;ここで仮引数と実引数で環境を拡張</span>\n                <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">,</span>formals<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))))</span>\n     <span class=\"synComment\">;; lambdaのbodyは式が複数のことがあるのでcompile-sequence</span>\n     <span class=\"synComment\">;; 呼び出し元に値を返さないと行けないのでlinkageはreturn</span>\n     <span class=\"synSpecial\">(</span>compile-sequence <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; apply</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-application <span class=\"synIdentifier\">exp</span> target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">(</span>\n        <span class=\"synComment\">;; operatorをコンパイルしたら次はoperandの評価をしなければいけないのでnext</span>\n        <span class=\"synSpecial\">(</span>proc-code <span class=\"synSpecial\">(</span>compile <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>proc <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span>\n        <span class=\"synComment\">;; operandは複数なのでそれぞれcompileしてリストにして保持</span>\n        <span class=\"synSpecial\">(</span>operand-codes\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>compile operand <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>preserving\n     <span class=\"synSpecial\">'(</span>env continue<span class=\"synSpecial\">)</span>\n     proc-code                          <span class=\"synComment\">;最初にoperatorを確定させる</span>\n     <span class=\"synSpecial\">(</span>preserving\n      <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>construct-arglist operand-codes<span class=\"synSpecial\">)</span> <span class=\"synComment\">;operandを評価してarglに代入するための命令の生成</span>\n      <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;</span>\n\n<span class=\"synComment\">;;; compile-applicationでoperand-codesはコンパイル済みなのでそれをarglに入れるための命令を生成</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>construct-arglist operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; reverseして連結していくので右から左に評価することになる</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>operand-codes <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> operand-codes<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> operand-codes<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; 引数がない場合はarglに'()を代入</span>\n        <span class=\"synSpecial\">(</span>make-instruction-sequence\n         <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">()))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-to-get-last-arg     <span class=\"synComment\">;最後のoperandが生成する命令</span>\n               <span class=\"synSpecial\">(</span>append-instruction-sequences\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>make-instruction-sequence\n                 <span class=\"synSpecial\">'(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>         <span class=\"synComment\">;arglの初期化が必要なのでこれだけ特別に処理</span>\n                 <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n              code-to-get-last-arg      <span class=\"synComment\">;cdrがnullなら最後のoperand</span>\n              <span class=\"synComment\">;; まだoperandが残っていればこちら</span>\n              <span class=\"synSpecial\">(</span>preserving\n               <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>                   <span class=\"synComment\">;環境は保持</span>\n               code-to-get-last-arg     <span class=\"synComment\">;引数の最後（reverseしているので先頭）からつなげる.</span>\n               <span class=\"synSpecial\">(</span>code-to-get-rest-args\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synComment\">;;; last-arg以外はここで処理する</span>\n<span class=\"synComment\">;;; operand-codesはコンパイル済み</span>\n<span class=\"synComment\">;;; arglには既に最後の引数が代入されているのでそこに先頭(reverseしてるので後ろ)から代入していく</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>code-to-get-rest-args operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-for-next-arg              <span class=\"synComment\">;先頭</span>\n         <span class=\"synSpecial\">(</span>preserving\n          <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>           <span class=\"synComment\">;valに先頭の要素のコンパイル結果を代入する命令</span>\n          <span class=\"synSpecial\">(</span>make-instruction-sequence\n           <span class=\"synSpecial\">'(</span>val argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'((</span>assign argl               <span class=\"synComment\">;valに入った(car operand)の値をarglに代入</span>\n                     <span class=\"synSpecial\">(</span>op cons<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n        code-for-next-arg\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n         code-for-next-arg\n         <span class=\"synSpecial\">(</span>code-to-get-rest-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-cods<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;; operator, operandsを評価する命令を作った後に呼ばれる</span>\n<span class=\"synComment\">;;; この時点でprocにはoperatorのシンボル, arglにはoperandsが入っている</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-procedure-call target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>primitive-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>primitive-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>compiled-branch <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>compiled-branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>after-call <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>after-call<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>compiled-linkage\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span> after-call linkage<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences\n       <span class=\"synSpecial\">(</span>make-instruction-sequence\n        <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">`((</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>primitive-branch<span class=\"synSpecial\">))))</span>\n       <span class=\"synComment\">;; compiled-branchかprimitive-branchのどちらかだけが実行されるのでparallel</span>\n       <span class=\"synSpecial\">(</span>parallel-instruction-sequences\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         compiled-branch\n         <span class=\"synComment\">;; ここでtargetとlinkageに合わせた命令を生成</span>\n         <span class=\"synSpecial\">(</span>compile-proc-appl target compiled-linkage<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>append-instruction-sequences\n         primitive-branch\n         <span class=\"synSpecial\">(</span>end-with-linkage\n          linkage\n          <span class=\"synSpecial\">(</span>make-instruction-sequence\n           <span class=\"synSpecial\">'(</span>proc argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> target<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">`((</span>assign <span class=\"synSpecial\">,</span>target\n                     <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)))))))</span>\n       after-call<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 手続きの採用</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compile-proc-appl target linkage<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>\n         <span class=\"synComment\">;; linkageがreturnでなければlinkageにはいったlabelが値を返す場所</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))</span> <span class=\"synComment\">;計算した値をvalに入れたらこのlinkageにジャンプ</span>\n            <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))</span>\n        <span class=\"synComment\">;; targetがvalでないのでproc-returnでtargetにvalを代入しないといけない</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc-return <span class=\"synSpecial\">(</span>make-label <span class=\"synSpecial\">'</span>proc-return<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>make-instruction-sequence\n            <span class=\"synSpecial\">'(</span>proc<span class=\"synSpecial\">)</span> all-regs\n            <span class=\"synSpecial\">`((</span>assign continue <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>proc-return<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">,</span>proc-return\n              <span class=\"synSpecial\">(</span>assign <span class=\"synSpecial\">,</span>target <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;targetがvalでないので，ここでtargetにvalを代入</span>\n              <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label <span class=\"synSpecial\">,</span>linkage<span class=\"synSpecial\">))))))</span>\n        <span class=\"synComment\">;; targetがvalでreturnなら計算の後，continueに行けばいいので余計な処理はない</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">'(</span>proc continue<span class=\"synSpecial\">)</span> all-regs\n          <span class=\"synSpecial\">`((</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> linkage <span class=\"synSpecial\">'</span>return<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;return linkage, target not val -- COMPILE&quot;</span> target<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 命令列の組み合わせ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>registers-needed s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>registers-modified s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>statements s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>needs-register? seq reg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> reg <span class=\"synSpecial\">(</span>registers-needed seq<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>modifies-register? seq reg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> reg <span class=\"synSpecial\">(</span>registers-modified seq<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; neededとmodifiedをうまく合成して新しい命令列を作る</span>\n<span class=\"synComment\">;;; これは人つながりの命令にする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append-instruction-sequences <span class=\"synSpecial\">.</span> seqs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append-2-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>make-instruction-sequence\n     <span class=\"synComment\">;; needed</span>\n     <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-needed seq2<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq1で変更してseq2がそれを必要とする</span>\n                                  <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;ならseq1の時点では必要ない</span>\n     <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>registers-modified seq2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>statements seq2<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append-seq-list seqs<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seqs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>empty-instruction-sequence<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>append-2-sequences <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seqs<span class=\"synSpecial\">)</span>  <span class=\"synComment\">;nullじゃなければこっち．</span>\n                            <span class=\"synSpecial\">(</span>append-seq-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seqs<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>append-seq-list seqs<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; 集合演算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-union s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-difference s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s1<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; regsの中にseq1で変更してseq2でしようするレジスタがあれば</span>\n<span class=\"synComment\">;;; seq1の前後でsave, restoreする命令を作る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;first-regが</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>needs-register? seq2 first-reg<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq2に必要なレジスタで</span>\n                 <span class=\"synSpecial\">(</span>modifies-register? seq1 first-reg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;seq1が変更するレジスタなら</span>\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>make-instruction-sequence\n              <span class=\"synComment\">;; needs ここでsaveするのでfirst-regが必要になるのでlist-union</span>\n              <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; modify saveしてのseq2の前にrestoreするのでseq2から見ればfirst-reg変更無し</span>\n              <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; statements 条件を満たすfirst-regの場合はseq1をsaveとrestoreで挟む</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n             seq2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span> seq1 seq2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; seqとbodyとbody-seqをつなげる．neededとmodifiedはseqのまま</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tack-on-instruction-sequence seq body-seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-instruction-sequence\n   <span class=\"synSpecial\">(</span>registers-needed seq<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>registers-modified seq<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>statements seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>statements body-seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; neededとmodifiedは和集合を取る．</span>\n<span class=\"synComment\">;;; ifのconsequentとalternative, や</span>\n<span class=\"synComment\">;;; 手続きのcompiled, primitiveの違いのようにどちらかだけが実行されるようなラベルを作るときに使う</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parallel-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-instruction-sequence\n   <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>registers-needed seq2<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>registers-modified seq2<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>statements seq2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 5.5.5 翻訳系"},{"data":{"title":"SICP 問題 5.37","published":"2016/02/07","tags":["scheme","SICP"]},"content":"\n<p>preservingを修正して常にsaveとrestoreをさせ，修正前と後を比較する．</p>\n\n<p>修正前</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;first-regが</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>needs-register? seq2 first-reg<span class=\"synSpecial\">)</span> <span class=\"synComment\">;seq2に必要なレジスタで</span>\n                 <span class=\"synSpecial\">(</span>modifies-register? seq1 first-reg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;seq1が変更するレジスタなら</span>\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>make-instruction-sequence\n              <span class=\"synComment\">;; needs ここでsaveするのでfirst-regが必要になるのでlist-union</span>\n              <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; modify saveしてのseq2の前にrestoreするのでseq2から見ればfirst-reg変更無し</span>\n              <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n              <span class=\"synComment\">;; statements 条件を満たすfirst-regの場合はseq1をsaveとrestoreで挟む</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n             seq2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>preserving <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span> seq1 seq2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>必要ないsaveやrestoreは一切されない，賢いpreserving．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (compile\n       &#39;(define (f a b)\n          (+ a b))\n       &#39;val &#39;next)\n((env)\n (val)\n ((assign val (op make-compiled-procedure) (label entry34) (reg env))\n  (goto (label after-lambda35))\n  entry34\n  (assign env (op compiled-procedure-env) (reg proc))\n  (assign env (op extend-environment) (const (a b)) (reg argl) (reg env))\n  (assign proc (op lookup-variable-value) (const +) (reg env))\n  (assign val (op lookup-variable-value) (const a) (reg env))\n  (assign argl (op list) (reg val))\n  (assign val (op lookup-variable-value) (const b) (reg env))\n  (assign val (op list) (reg val))\n  (assign argl (op append) (reg argl) (reg val))\n  (test (op primitive-procedure?) (reg proc))\n  (branch (label primitive-branch36))\n  compiled-branch37\n  (assign val (op compiled-procedure-entry) (reg proc))\n  (goto (reg val))\n  primitive-branch36\n  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))\n  (goto (reg continue))\n  after-call38\n  after-lambda35\n  (perform (op define-variable!) (const f) (reg val) (reg env))\n  (assign val (const ok))\n  ))</pre>\n\n\n<p>修正後</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>preserving regs seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> regs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-instruction-sequences seq1 seq2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> regs<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> regs<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-instruction-sequence\n          <span class=\"synSpecial\">(</span>list-union <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>registers-needed seq1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>list-difference <span class=\"synSpecial\">(</span>registers-modified seq1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first-reg<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">`((</span>save <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>statements seq1<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">`((</span>restore <span class=\"synSpecial\">,</span>first-reg<span class=\"synSpecial\">))))</span>\n         seq2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f a b<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>+ a b<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>continue env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;まずcontinueを必要とするようになっている．</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでsave continueするから</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでさらにsave continueしている．</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry41<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;ここで復帰．</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda42<span class=\"synSpecial\">))</span>         <span class=\"synComment\">;ここまでで無駄なsave 3. 無駄なrestore 1</span>\n  entry41\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここでまたsave continue</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;env</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;continue</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save p</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;save e</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;save a</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore a</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;restore p</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch43<span class=\"synSpecial\">))</span>\n  compiled-branch44\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch43\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;save c</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;restore c</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call45\n  after-lambda42\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;restore e 最初のenv</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;最初のcontinue</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.37"},{"data":{"title":"SICP 問題 5.36","published":"2016/02/07","tags":["scheme","SICP"]},"content":"\n<p>本文の被<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の適用順はoperandをreverseしてから連結していくので右から左になっている．<br/>\nこれを左から右に変更する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 最初のreverseをなくす</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>construct-arglist operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> operand-codes<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-instruction-sequence\n       <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">()))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-to-get-last-arg\n             <span class=\"synSpecial\">(</span>append-instruction-sequences\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>make-instruction-sequence\n               <span class=\"synSpecial\">'(</span>val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">`((</span>assign argl <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n            code-to-get-last-arg\n            <span class=\"synSpecial\">(</span>preserving\n             <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n             code-to-get-last-arg\n             <span class=\"synSpecial\">(</span>code-to-get-rest-args\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>code-to-get-rest-args operand-codes<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>code-for-next-arg\n         <span class=\"synSpecial\">(</span>preserving\n          <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> operand-codes<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>make-instruction-sequence\n           <span class=\"synSpecial\">'(</span>val argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>argl<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'((</span>assign val <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span> <span class=\"synComment\">;valをリスト化する</span>\n             <span class=\"synSpecial\">(</span>assign argl\n                     <span class=\"synSpecial\">(</span>op append<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)))))))</span> <span class=\"synComment\">;appendで順番通りにつなげる</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-codes<span class=\"synSpecial\">))</span>\n        code-for-next-arg\n        <span class=\"synSpecial\">(</span>preserving\n         <span class=\"synSpecial\">'(</span>env<span class=\"synSpecial\">)</span>\n         code-for-next-arg\n         <span class=\"synSpecial\">(</span>code-to-get-rest-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> operand-cods<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>問題5.35で求めた式を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>してみる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>+ x <span class=\"synSpecial\">(</span>g <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry23<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda24<span class=\"synSpecial\">))</span>\n  entry23\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;元はgからだった</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const g<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;次の(g ...)にいく．</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;左の引数のxから</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>                <span class=\"synComment\">;次に2</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch25<span class=\"synSpecial\">))</span>\n  compiled-branch26\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call27<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch25\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call27\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch28<span class=\"synSpecial\">))</span>\n  compiled-branch29\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call30<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch28\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call30\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch31<span class=\"synSpecial\">))</span>\n  compiled-branch32\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch31\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call33\n  after-lambda24\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>appendは一つ目のリストの末尾まで辿ってから後ろにリストをつなげていくので非効率になる．<br/>\nよってこの場合効率を考えるなら右から左に評価するほうがよい．</p>\n\n","slug":"SICP 問題 5.36"},{"data":{"title":"SICP 問題 5.35","published":"2016/02/07","tags":["scheme","SICP"]},"content":"\n<p>本文の図5.18 の翻訳出力の例から翻訳前の式を導く．</p>\n\n<p>答え</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>+ x <span class=\"synSpecial\">(</span>g <span class=\"synSpecial\">(</span>+ x <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>実行結果（整形済み）</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry12<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda13<span class=\"synSpecial\">))</span>\n  entry12\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const g<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch14<span class=\"synSpecial\">))</span>\n  compiled-branch15\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call16<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch14\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call16\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch17<span class=\"synSpecial\">))</span>\n  compiled-branch18\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call19<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch17\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call19\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch20<span class=\"synSpecial\">))</span>\n  compiled-branch21\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch20\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call22\n  after-lambda13\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>本文のコードとlabelの番号以外は一致．</p>\n\n","slug":"SICP 問題 5.35"},{"data":{"title":"SICP 問題 5.34","published":"2016/02/06","tags":["scheme","SICP"]},"content":"\n<p>反復的階乗手続きを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>し，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>版との本質的な違いを示せ．<br/>\n　<br/>\n反復的階乗手続きの内容を説明する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>&gt; counter n<span class=\"synSpecial\">)</span>\n          product\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>* counter product<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>+ counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>して，説明をつけた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>\n  <span class=\"synComment\">;; 手続きを構成し，本体のコードを飛び越す</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry18<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda19<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; factorialの呼び出しの開始．</span>\n  entry18\n  <span class=\"synComment\">;; procの環境をenvに代入</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; factorialの実引数をfactorialの引数nと対応づけて環境を拡張</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 内部定義に進む．valを(compiled-procedure entry20 env)の形にする．</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry20<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda21<span class=\"synSpecial\">))</span>\n\n  entry20\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; product counterをそれぞれ1に束縛した環境を作る</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>product counter<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 手続き本体の開始</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)の計算</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch25<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここに飛ぶ．</span>\n  compiled-branch26\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call27<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch25\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)の次</span>\n  after-call27                          <span class=\"synComment\">;valには(&gt; couner n)の値が入っている</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;手続き本体のenvとcontinueを復帰</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch23<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)がtrueの時，productの値をvalに入れて，大本のcontinueへ．</span>\n  true-branch22\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (&gt; counter n)がfalseの時</span>\n  false-branch23\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; (+ counter 1)を計算するためにcontinue, proc, envを退避</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; (+ counter 1)の計算開始</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch31<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n  compiled-branch32\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call33<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (+ counter 1)を実際に計算</span>\n  primitive-branch31\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call33\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>     <span class=\"synComment\">;arglに今計算した値をリストにして代入</span>\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;大本の環境の復帰</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;(+ counter 1)の結果のリストを退避</span>\n  <span class=\"synComment\">;; (* counter product)の計算開始</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch28<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ここへジャンプ</span>\n  compiled-branch29\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call30<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; (* counter product)を実際に計算</span>\n  primitive-branch28\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call30\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;(+ counter 1)の復帰</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;arglに((* counter product) (+ counter 1))を代入</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;iterを復帰</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                    <span class=\"synComment\">;呼び出し元に返るcontinueを復元</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch34<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;ジャンプしない</span>\n  compiled-branch35\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;entry20へのラベルをvalに代入</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch34\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call36\n  after-if24\n\n  <span class=\"synComment\">;; entry18からジャンプ</span>\n  after-lambda21\n  <span class=\"synComment\">;; iterを(compiled-procedure entry20 env)と定義．</span>\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n\n  <span class=\"synComment\">;; ここから(iter 1 1)の処理．</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const iter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; arglは(1)になる</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span> <span class=\"synComment\">;argl =&gt; (1 1)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;=&gt;false</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch37<span class=\"synSpecial\">))</span>\n\n  compiled-branch38\n  <span class=\"synComment\">;; valにiterに対応付けられてるラベルを代入する</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; entry20へgoto</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n\n  primitive-branch37\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call39\n  after-lambda19\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>反復的階乗計算では次の繰り返しに行く前に引数の計算が行われ，環境や継続はすべて大本の状態に復元してから次の繰り返しに向かう．<br/>\n前の問題で見たように<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算ではprocとenvを退避させ，さらに戻ってくる場所をcontinueによって保持し続けないといけない．<br/>\nそのために繰り返しが増えるほどにスタックが深くなっていく．</p>\n\n","slug":"SICP 問題 5.34"},{"data":{"title":"SICP 問題 5.33","published":"2016/02/06","tags":["scheme","SICP"]},"content":"\n<p>以下の２つの翻訳結果を比較してその相違を説明する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>compile\n       <span class=\"synSpecial\">'(</span>define <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n              <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>* n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n       <span class=\"synSpecial\">'</span>val <span class=\"synSpecial\">'</span>next<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>一つ目を出力して整形したのが以下になる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">((</span>env<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op make-compiled-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>label entry1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label after-lambda2<span class=\"synSpecial\">))</span>\n  entry1\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op compiled-procedure-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch6<span class=\"synSpecial\">))</span>\n  compiled-branch7\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call8<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch6\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call8\n  <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op false?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label false-branch4<span class=\"synSpecial\">))</span>\n  true-branch3\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  false-branch4\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-ariable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch9<span class=\"synSpecial\">))</span>\n  compiled-branch10\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call11<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch9\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call11\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch12<span class=\"synSpecial\">))</span>\n  compiled-branch13\n  <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-call14<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch12\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  after-call14\n  <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-branch15<span class=\"synSpecial\">))</span>\n  compiled-branch16\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op compiled-procedure-entry<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n  primitive-branch15\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  after-call17\n  after-if5\n  after-lambda2\n  <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const factorial<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを5.33a.scmとして保存し，二つ目を5.33b.scmとして保存し，diffを取った．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>--- 5.33a.scm    2016-02-06 19:25:30.000000000 +0900\n+++ 5.33b.scm   2016-02-06 19:26:35.000000000 +0900\n@@ -32,9 +32,7 @@\n   (assign proc (op lookup-ariable-value) (const *) (reg env))\n   (save continue)\n   (save proc)\n-  (assign val (op lookup-ariable-value) (const n) (reg env))\n-  (assign argl (op list) (reg val))\n-  (save argl)\n+  (save env)\n   (assign proc (op lookup-ariable-value) (const factorial) (reg env))\n   (save proc)\n   (assign proc (op lookup-ariable-value) (const -) (reg env))\n@@ -62,7 +60,9 @@\n   primitive-branch12\n   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))\n   after-call14\n-  (restore argl)\n+  (assign argl (op list) (reg val))\n+  (restore env)\n+  (assign val (op lookup-ariable-value) (const n) (reg env))\n   (assign argl (op cons) (reg val) (reg argl))\n   (restore proc)\n   (restore continue)</pre>\n\n\n<p>construct-arglistでoperandをまずreverseしているので，<br/>\n書かれた引数とは逆順に処理していくことになる．</p>\n\n<p>一箇所目のdiffはfalse-branch4の中，二箇所目はprimitive-brach12にある．<br/>\n5.33aはfalse-branchでまずnの値を求める．<br/>\nそして値をリスト化し，arglに代入してsaveする．<br/>\nprimitive-branchでvalの値は(factorial (- n 1))を翻訳したものになっている．<br/>\nそこでarglをrestoreして，valとconsしてarglを完成させている．<br/>\n　<br/>\n一方5.33bはまずenvを保存するところから始まる．<br/>\n(factorial (- n 1))を評価するときに環境が変更されたら困るからだ．<br/>\nそしてprimitive-branchに来たところで5.33aと同じく，valの値は(factorial (- n 1))になっている．<br/>\n5.33bはvalをリスト化してarglに保存する．<br/>\nそして環境を(factorial (- n 1))を評価する前の状態に戻し，nを評価する．<br/>\n評価した値とarglをconsしてarglは完成する．<br/>\n　</p>\n\n<p>一箇所目は5.33aも5.33bも一回saveし，二箇所目で一回restoreする．<br/>\n5.33bは一箇所目で二回assignし，5.33aは二箇所目で二回assignする．<br/>\nsave箇所が同じでassignする場所が違うだけなので，効率はかわらない．</p>\n\n","slug":"SICP 問題 5.33"},{"data":{"title":"SICP 問題 5.32","published":"2016/02/04","tags":["scheme","SICP"]},"content":"\n<p>a: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>が記号である場合の組み合わせの式を別のクラスと認識し，そういう式を最適化する．</p>\n\n<p>operatorがvariableであればenvをsaveしない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-symbol-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-symbol-operator\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-symbol-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-symbol-operator\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\nb: 評価器にこのような翻訳系の最適化のすべてを組み込むことができ，翻訳系の利点をすべて除けるという考えについて<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E0%BC%A1\">逐次</a>評価する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>ではどうしても翻訳系ほどの最適化は出来ない．</p>\n\n","slug":"SICP 問題 5.32"},{"data":{"title":"SICP 問題 5.31","published":"2016/02/04","tags":["scheme","SICP"]},"content":"\n<p>どのタイミングで以下の式を評価する際にどのタイミング何を退避して復帰するか</p>\n\n<p>(f 'x 'y)<br/>\n'x 'yはシンボルなのでこれ以上の評価が必要ないので<br/>\n何も退避しなくてよい．<br/>\n　<br/>\n((f) 'x 'y)<br/>\n'x 'yがシンボルなので上と同じく退避の必要ない．<br/>\n　<br/>\n(f (g 'x) y)<br/>\nfを評価する前にenvを退避する．<br/>\n評価が終わればenvは復帰，procとenvとarglを退避して(g 'x) を評価．<br/>\nyを評価する前にすべて復帰し，arglを退避して評価．<br/>\narglを復帰して適用.<br/>\n　<br/>\n(f (g 'x) 'y)<br/>\nfの評価の前にenvを退避．<br/>\nその後，envを復帰，procを退避し， (g 'x)を評価<br/>\n評価が終わればprocを復帰し，適用する．</p>\n\n","slug":"SICP 問題 5.31"},{"data":{"title":"SICP 問題 5.30b","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>primitive-procedure のエラーもECEVAL上で扱えるようにする．  <br/>\nまず基盤の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>から手続きを登録するときに事前チェックするように変更する．  <br/>\nもしエラーになるような引数が与えられた時には('failed . '<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-syntax-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>)を返す．  <br/>\nprimitive-applyでvalにapplyした値を代入した後primitive-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>でチェック．  <br/>\ncarが'failedならprimitive-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>にジャンプしてvalの値を'<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-syntax-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>にしてsignal-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>にジャンプ．<br/>\n'<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-syntax-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/error\">error</a>を出力した後にREPLの最初に戻り，stackはイニシャライズされる．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; ecevalの評価の前にこれを評価する．</span>\n<span class=\"synComment\">;;; primitive-procedure用のerrorチェック</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;;ここでprimitive-procedureは一度チェックしてから使う手続きに変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>car-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cdr-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cons-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null?\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>null-syntax-error<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>=\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>=-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">)</span>\n                                                          y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">=</span> lst<span class=\"synSpecial\">))</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>/-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">/</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&gt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&gt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&gt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&lt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&lt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>     ;; eceval中で\n     primitive-apply\n     (assign val (op apply-primitive-procedure)\n             (reg proc)\n             (reg argl))\n     (test (op primitive-error?) (reg val))        ;errorチェック\n     (branch (label primitive-error))\n     (restore continue)\n     (goto (reg continue))\n\n     primitive-error\n     (assign val (op cdr) (reg val))\n     (goto (label signal-error))</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>/1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\nunknown-variable-error\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">)</span>\ncons-syntax-error\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n\na\nunknown-variable-error\n</pre>\n\n\n<p>全部は網羅していないがこのようにECEVALのREPLから離れずにエラーが返ってくる．  <br/>\n　<br/>\n最後の全文を掲載する．　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 初めてassignするレジスタを登録していくタイプ</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arg-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>*unassigned*-variable-error\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>unknown-variable-error\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>*unassigned*-variable-error val<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>unknown-variable-error val<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">2</span> x <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-error? <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>variable-error? <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; primitive-procedure用のerrorチェック</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;;ここでprimitive-procedureは一度チェックしてから使う手続きに変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>car-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cdr-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>cons-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null?\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>null-syntax-error<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>=\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>=-syntax-error<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">)</span>\n                                                          y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">=</span> lst<span class=\"synSpecial\">))</span>\n                                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> x<span class=\"synSpecial\">))</span> err<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>/-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">/</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&gt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&gt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&gt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt;\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> lst <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>err <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>failed <span class=\"synSpecial\">'</span>&lt;-syntax-error<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> err<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">((</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> lst<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synIdentifier\">&lt;</span> lst<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> err<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and? and?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and-&gt;if and-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or? or?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or-&gt;if or-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*? let*?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*-&gt;nested-lets let*-&gt;nested-lets<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec? letrec?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec-&gt;let letrec-&gt;let<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable-error? variable-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-error? lambda-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-error? begin-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-error? if-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-error? let-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-error? assignment-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-error? definition-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-error? primitive-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op and?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-and<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op or?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-or<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let*?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let*<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op letrec?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-letrec<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;valにエラーコードが入っているのでそのままsignal-errorへ</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label lambda-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;lambda-errorに飛び，valにエラーコードを入れる</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     lambda-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const lambda-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     ev-appl-operand-loop\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     primitive-apply\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;errorチェック</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     primitive-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label begin-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     begin-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const begin-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label if-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     if-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const if-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-and\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op and-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-or\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op or-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-let*\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let*-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let*-&gt;nested-lets<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let*-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let*-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-letrec\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op letrec-&gt;let<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label assignment-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     assignment-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const set!-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label definition-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     definition-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const definition-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.30b"},{"data":{"title":"SICP 問題 5.30a","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>評価プロセスでのエラーを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>でなくecevalで捕まえてREPLを継続する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 初めてassignするレジスタを登録していくタイプ</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arg-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;　ここから新しく追加した手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">'</span>*unassigned*-variable-error\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>unknown-variable-error\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable-error? val<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>*unassigned*-variable-error val<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">'</span>unknown-variable-error val<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">2</span> x <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-error? <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>variable-error? <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-error? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and? and?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and-&gt;if and-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or? or?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or-&gt;if or-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*? let*?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*-&gt;nested-lets let*-&gt;nested-lets<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec? letrec?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec-&gt;let letrec-&gt;let<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable-error? variable-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-error? lambda-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-error? begin-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-error? if-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-error? let-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-error? assignment-error?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-error? definition-error?<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op and?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-and<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op or?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-or<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let*?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let*<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op letrec?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-letrec<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;valにエラーコードが入っているのでそのままsignal-errorへ</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label lambda-error<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;lambda-errorに飛び，valにエラーコードを入れる</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     lambda-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const lambda-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     ev-appl-operand-loop\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     primitive-apply\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label begin-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     begin-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const begin-require-expression<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label if-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     if-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const if-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-and\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op and-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-or\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op or-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-let*\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label let*-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let*-&gt;nested-lets<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     let*-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const let*-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-letrec\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op letrec-&gt;let<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label assignment-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     assignment-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const set!-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition-error?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label definition-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     definition-error\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const definition-syntax-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.30a"},{"data":{"title":"SICP 問題 5.29","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>a: n≧2の時のfib(n)を計算するのに必要なスタックの最大深さのnを使った式を与えよ．<br/>\nb: 同じ条件でfib(n)のプッシュの総数を求める</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>fib <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">0</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">72</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">128</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">408</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">688</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">8</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1136</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">13</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1864</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">21</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3040</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">34</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4944</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n<p>a: 最大深さは5n+3<br/>\nb: プッシュ総数S(n)=S(n-1)+S(n-2)+40<br/>\nオーバーヘッド定数kは40.</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160203165046\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160203/20160203165046.jpg\" alt=\"f:id:wat-aro:20160203165046j:image\" title=\"f:id:wat-aro:20160203165046j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 5.29"},{"data":{"title":"SICP 問題 5.28","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>ev-sequenceで行っていた末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化をやめた場合のfactorialの比較．<br/>\n最適化をやめると反復的factorialはプッシュ回数が37n+1, 最大深さが3n+11.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的factorialはそれぞれ，34n-16, 8n+3となった．<br/>\n末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がないと末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に書いても最大深さが線形に成長する．<br/>\n末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>の最適化がある場合は\n反復的factorial 35n+34, 10\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的factorial 32n-16, 5n+3.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> counter n<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> counter product<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">75</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">17</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">112</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">149</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">186</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">26</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">223</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">29</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">260</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">32</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">297</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">35</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">334</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">371</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">41</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">408</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">44</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial-recur n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial-recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">11</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">52</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">19</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">86</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">27</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">120</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">35</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">154</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">188</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">51</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">222</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">59</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">256</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">67</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">290</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">75</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">324</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">83</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n","slug":"SICP 問題 5.28"},{"data":{"title":"SICP 問題 5.27","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>5.26と同じことを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算で．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial-recur n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>factorial-recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">13</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">80</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">112</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">23</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">144</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">28</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">176</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">33</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">208</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">38</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">240</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">43</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">272</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">48</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial-recur <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">304</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">53</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>プッシュ回数は32n-16, 最大深さは5n+3.<br/>\n反復的階乗計算はプッシュ回数が35n+34, 最大深さ10だったので，\nプッシュ回数は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的階乗計算のほうが少なく，最大深さは反復的階乗計算のほうが少ない．<br/>\n階乗計算は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なほうが早く計算できるがその分メモリの消費量が大きくなり，<br/>\n反復的計算のほうが時間は少しだけかかるがメモリの消費量は定数に抑えられる．</p>\n\n","slug":"SICP 問題 5.27"},{"data":{"title":"SICP 問題 5.26","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>監視つきスタックを使い，評価器の末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的特性を検討する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter product counter<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> counter n<span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> counter product<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">34</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">69</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">104</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">139</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">174</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">24</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">209</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">120</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">244</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">720</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">279</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">5040</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">314</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">40320</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">349</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">362880</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>factorial <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">384</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>この末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>階乗計算のプッシュ回数は35n+34，最大深さは10と推定できる．</p>\n\n","slug":"SICP 問題 5.26"},{"data":{"title":"SICP 問題 5.25","published":"2016/02/03","tags":["scheme","SICP"]},"content":"\n<p>4.2節の遅延評価器に基づいた正規順序の評価が使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 初めてassignするレジスタを登録していくタイプ</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arg-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; 正規順序の評価器用の機械演算</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk? obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-value evaluated-thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-env thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-exp thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> thunk<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and? and?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>and-&gt;if and-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or? or?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>or-&gt;if or-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*? let*?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let*-&gt;nested-lets let*-&gt;nested-lets<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec? letrec?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>letrec-&gt;let letrec-&gt;let<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk? thunk?<span class=\"synSpecial\">)</span>          <span class=\"synComment\">;thunk?を追加</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-car! <span class=\"synIdentifier\">set-car!</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-cdr! <span class=\"synIdentifier\">set-cdr!</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>evaluated-thunk? evaluated-thunk?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-value thunk-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>list <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-env thunk-env<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-exp thunk-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environent procedure-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op and?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-and<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op or?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-or<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let*?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let*<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op letrec?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-letrec<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n\n\n     delay-it\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     actual-value\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label force-it<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     force-it\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op thunk?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-thunk<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op evaluated-thunk?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-evaluated<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-thunk\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label set-evaluated-thunk<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op thunk-env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op thunk-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     <span class=\"synComment\">;; メモ化する．</span>\n     set-evaluated-thunk\n     <span class=\"synComment\">;; (evaluated value)の形にする．</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;valがsaveした値をexpで受け取る</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-cdr!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-car!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const evaluated-thunk<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-evaluated\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;ここのrestoreが抜けてるのがわからずにずっとデバグ</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op thunk-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label list-of-arg-values<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operands\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n\n     list-of-arg-values\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label list-of-arg-values<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-did-operands<span class=\"synSpecial\">))</span>\n\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label list-of-delayed-args<span class=\"synSpecial\">))</span>\n\n     list-of-delayed-args\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label delay-last-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label delay-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label delay-it<span class=\"synSpecial\">))</span>\n\n     delay-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label list-of-delayed-args<span class=\"synSpecial\">))</span>\n\n     delay-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label delay-appl-accum-last-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label delay-it<span class=\"synSpecial\">))</span>\n\n     delay-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label delay-appl-did-operands<span class=\"synSpecial\">))</span>\n\n     delay-appl-did-operands\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label actual-value<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-and\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op and-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-or\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op or-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let*\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let*-&gt;nested-lets<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-letrec\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op letrec-&gt;let<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n            y\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>c d<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c d<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless condition usual-value exceptional-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> condition exceptional-value usual-value<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span>try <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synConstant\">1</span>\n</pre>\n\n\n","slug":"SICP 問題 5.25"},{"data":{"title":"SICP 問題 5.24","published":"2016/02/02","tags":["scheme","SICP"]},"content":"\n<p>condを派生式ではなく構文として実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; unevがcondの本体を保存．expはevalされる．</span>\n ev-cond\n   <span class=\"synSpecial\">(</span>assing unev <span class=\"synSpecial\">(</span>op cond-clauses<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;((p1 e1) (p2 e2) ...)の形にする．</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;cond後の継続をsave</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;現在の環境をsave</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;ev-cond-loopで復元できるようにsave</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n\n ev-cond-test\n   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevの内容がexpにコピーされる．</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-null<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;(p1 e1)の形に．</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond-else-clause?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>        <span class=\"synComment\">;(else e1)なら</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-else<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;ev-cond-elseへ</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-cond-loop<span class=\"synSpecial\">))</span> <span class=\"synComment\">;eval-dispatchの後ev-cond-loopに戻れるように代入</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond-value<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;環境を元に戻す</span>\n   <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;残りのclausesへ</span>\n   <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-cond-test<span class=\"synSpecial\">))</span>\n\n\n ev-cond-else\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence-&gt;exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-value\n   <span class=\"synComment\">;; expはpredicateを評価した値になってる．</span>\n   <span class=\"synSpecial\">(</span>restore <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;unevが持っていたcond本体をexpがrestore</span>\n   <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synComment\">;;((p1 e1 e1' ...) (p2 e2 e2' ...) ...)という形なのでcarを取る．</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>  <span class=\"synComment\">;(e1 e1' ...)にする．</span>\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op sequence-&gt;exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-cond-null\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const cond-null-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>start eceval<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c d e f<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; EC-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; EC-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span>d e f<span class=\"synSpecial\">))</span>\ncond-null-error\n</pre>\n\n\n","slug":"SICP 問題 5.24"},{"data":{"title":"SICP 問題 5.23","published":"2016/02/02","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシン上に実装した評価器でcondとletを実装する．<br/>\ncond->ifのような構文変換器が機械演算として仮定してよいので，let->lambdaも使用する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>eval-dispatch\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>          <span class=\"synComment\">;cond?を追加</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n ev-cond\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n ev-let\n   <span class=\"synSpecial\">(</span>assign <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.23"},{"data":{"title":"SICP 5.4.4 積極制御評価器","published":"2016/02/02","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; 5.2 で実装したシミュレータ．トレース機能追加済み．</span>\n<span class=\"synComment\">;;; 事前に登録したレジスタを使用するのではなく，初めてassignするレジスタを登録していく(問題5.13).</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./register-machine-simulator.scm&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;;; 4.1で実装した評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">load</span> <span class=\"synConstant\">&quot;./eval.scm&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; 5.4.1-5.4.4までの注釈でかかれていた手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-global-environment<span class=\"synSpecial\">)</span> the-global-environment<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-more-exps? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-arglist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoiin-arg arg arg-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> arglist <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> arg<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-operand? ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; 積極制御評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> eceval\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>self-evaluating? self-evaluating?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>variable? variable?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quoted? quoted?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>text-of-quotation text-of-quotation<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment? assignment?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition? definition?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if? if?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>true? true?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond? cond?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda? lambda?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let? let?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin? begin?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>application? application?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lookup-variable-value lookup-variable-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-parameters lambda-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda-body lambda-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>make-procedure make-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operands operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>operator operator<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>empty-arglist empty-arglist<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>no-operands? no-operands?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-operand first-operand<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-operand? last-operand?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>adjoin-arg adjoin-arg<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-operands rest-operands<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive-procedure? primitive-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure? compound-procedure?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>apply-primitive-procedure apply-primitive-procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-parameters procedure-parameters<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-environment procedure-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>extend-environment extend-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure-body procedure-body<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>begin-actions begin-actions<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>first-exp first-exp<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>last-exp? last-exp?<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>rest-exps rest-exps<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-predicate if-predicate<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-alternative if-alternative<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if-consequent if-consequent<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cond-&gt;if cond-&gt;if<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>let-&gt;combination let-&gt;combination<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-variable assignment-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>assignment-value assignment-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-variable-value! set-variable-value!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-variable definition-variable<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>definition-value definition-value<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define-variable! define-variable!<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>prompt-for-input prompt-for-input<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>read <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>get-global-environment get-global-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>announce-output announce-output<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>user-print user-print<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>read-eval-print-loop\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op initialize-stack<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op prompt-for-input<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval input:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op read<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op get-global-environment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label print-result<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     eval-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op self-evaluating?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-self-eval<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op variable?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-variable<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op quoted?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-quoted<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op assignment?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-assignment<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op definition?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-definition<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op if?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op cond?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>        <span class=\"synComment\">;cond?を追加</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-cond<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op lambda?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-lambda<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op let?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-let<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op begin?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-begin<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op application?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-application<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-expression-type<span class=\"synSpecial\">))</span>\n\n     ev-self-eval\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-variable\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op lookup-variable-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-quoted\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op text-of-quotation<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-lambda\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op lambda-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op lambda-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op make-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-application\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op operator<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-did-operator<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-did-operator\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;非演算子</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op empty-arglist<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign proc <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op no-operands?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save proc<span class=\"synSpecial\">)</span>\n\n     ev-appl-operand-loop\n     <span class=\"synSpecial\">(</span>save argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-operand<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-operand?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-appl-last-arg<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;最後の引数の場合はここへ飛ぶ</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accumulate-arg<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accumulate-arg\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-operands<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-appl-operand-loop<span class=\"synSpecial\">))</span>\n\n     ev-appl-last-arg\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-appl-accum-last-arg<span class=\"synSpecial\">))</span> <span class=\"synComment\">;evalの後にここにいって引数を回復する．</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-appl-accum-last-arg\n     <span class=\"synSpecial\">(</span>restore argl<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign argl <span class=\"synSpecial\">(</span>op adjoin-arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore proc<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label apply-dispatch<span class=\"synSpecial\">))</span>\n\n     apply-dispatch\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op primitive-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label primitive-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op compound-procedure?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label compound-apply<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label unknown-procedure-type<span class=\"synSpecial\">))</span>\n\n     primitive-apply\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op apply-primitive-procedure<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     compound-apply\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op procedure-environment<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign env <span class=\"synSpecial\">(</span>op extend-environment<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg argl<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op procedure-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg proc<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-begin\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op begin-actions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op first-exp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op last-exp?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-sequence-last-exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-sequence-continue<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-sequence-continue\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op rest-exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label ev-sequence<span class=\"synSpecial\">))</span>\n\n     ev-sequence-last-exp\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if\n     <span class=\"synSpecial\">(</span>save exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-if-decide<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-predicate<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-decide\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore exp<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op true?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label ev-if-consequent<span class=\"synSpecial\">))</span>\n\n     ev-if-alternative\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-alternative<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-if-consequent\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op if-consequent<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-cond\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op cond-&gt;if<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-let\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op let-&gt;combination<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>\n\n     ev-assignment\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op assignment-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op assignment-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-assignment-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;代入する値を評価</span>\n\n     ev-assignment-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op set-variable-value!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     ev-definition\n     <span class=\"synSpecial\">(</span>assign unev <span class=\"synSpecial\">(</span>op definition-variable<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save unev<span class=\"synSpecial\">)</span>                        <span class=\"synComment\">;後のために変数を退避</span>\n     <span class=\"synSpecial\">(</span>assign exp <span class=\"synSpecial\">(</span>op definition-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg exp<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label ev-definition-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label eval-dispatch<span class=\"synSpecial\">))</span>       <span class=\"synComment\">;定義する値を評価</span>\n\n     ev-definition-1\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore env<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore unev<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op define-variable!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg unev<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const ok<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n     print-result\n     <span class=\"synSpecial\">(</span>perform\n      <span class=\"synSpecial\">(</span>op announce-output<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">&quot;;;; EC-Eval value:&quot;</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n\n     unknown-expression-type\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-expression-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     unknown-procedure-type\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                 <span class=\"synComment\">;スタックを掃除する</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const unknown-procedure-type-error<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label signal-error<span class=\"synSpecial\">))</span>\n\n     signal-error\n     <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op user-print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label read-eval-print-loop<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 5.4.4 積極制御評価器"},{"data":{"title":"SICP 問題 5.22","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n<p>appendとappend!を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシン上に実装する．<br/>\n　<br/>\nappend</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n      y\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">append</span>\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>x y val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label append-done<span class=\"synSpecial\">))</span>\n     x-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n     after-x\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label construct<span class=\"synSpecial\">))</span>\n     construct\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op cons<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     append-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start <span class=\"synIdentifier\">append</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents <span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>　<br/>\nappend!</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>append! x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>last-pair x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> append!\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>x y temp<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set-cdr! <span class=\"synIdentifier\">set-cdr!</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n     x-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label after-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save temp<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign temp <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label x-loop<span class=\"synSpecial\">))</span>\n     after-loop\n       <span class=\"synSpecial\">(</span>restore temp<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op set-cdr!<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg temp<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg y<span class=\"synSpecial\">))</span>\n     append!-done <span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! append! <span class=\"synSpecial\">'</span>y <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start append!<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents append! <span class=\"synSpecial\">'</span>x<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> a b c<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.22"},{"data":{"title":"SICP 問題 5.21","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>で書いた手続きの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>マシンを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; a</span>\n<span class=\"synComment\">;;; 再帰的count-leaves</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-leaves tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>count-leaves <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>coutn-leaves <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> recur-count-leaves-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>tree val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pair? <span class=\"synIdentifier\">pair?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label count-leaves-done<span class=\"synSpecial\">))</span>\n     car-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label null<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op pair?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label pair<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     pair\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-car<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-car\n       <span class=\"synSpecial\">(</span>restore tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-cdr<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-cdr\n       <span class=\"synComment\">;; valの値を一時的にtreeに入れて，後に計算する．goto先はaftercount-carなので</span>\n       <span class=\"synComment\">;; そこでtreeはrestoreされる．</span>\n       <span class=\"synSpecial\">(</span>restore tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     null\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     count-leaves-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! recur-count-leaves-machine <span class=\"synSpecial\">'</span>tree <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start recur-count-leaves-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents recur-count-leaves-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">4</span>\ngosh&gt; recur-count-leaves-machine\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! recur-count-leaves-machine <span class=\"synSpecial\">'</span>tree <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start recur-count-leaves-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents recur-count-leaves-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; b</span>\n<span class=\"synComment\">;;; カウンタを陽に持つ再帰的count-leaves</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-leaves tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-iter tree n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>count-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>count-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>count-iter tree <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count-n-leaves\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>tree continue n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pair? <span class=\"synIdentifier\">pair?</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label count-leaves-done<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n     car-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op null?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label null<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op pair?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label pair<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     pair\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-car<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op car<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-car\n       <span class=\"synSpecial\">(</span>restore tree<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign tree <span class=\"synSpecial\">(</span>op cdr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg tree<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label aftercount-cdr<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label car-loop<span class=\"synSpecial\">))</span>\n     aftercount-cdr\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     <span class=\"synComment\">;; branchは(reg continue)が出来ないので，一度ここに飛ばしてからcontinueに飛ぶ</span>\n     null\n      <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     count-leaves-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! count-n-leaves <span class=\"synSpecial\">'</span>tree <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start count-n-leaves<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents count-n-leaves <span class=\"synSpecial\">'</span>n<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\n</pre>\n\n\n","slug":"SICP 問題 5.21"},{"data":{"title":"SICP 問題 5.20","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>で作られたリスト構造の箱とポインタ表記，メモリーべ宇久田表現をかけ．<br/>\nfreeポインタは最初p1にあるとする．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160131170448\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160131/20160131170448.jpg\" alt=\"f:id:wat-aro:20160131170448j:image\" title=\"f:id:wat-aro:20160131170448j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span>\n最後freeポインタはp4を指している．<br/>\np1がxを，p2がyを表している．</p>\n\n","slug":"SICP 問題 5.20"},{"data":{"title":"SICP 問題 5.19","published":"2016/01/31","tags":["scheme","SICP"]},"content":"\n<p>ラベルから何番目の命令の直前に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8\">ブレークポイント</a>を入れられるようにする．<br/>\n実装した手続きのテストはREPLで試したが，テストの記述は省略．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-breakpoint machine label n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>set-breakpoint<span class=\"synSpecial\">)</span> label n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>proceed-machine machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>proceed<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-breakpoint machine label n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>cancel-breakpoint<span class=\"synSpecial\">)</span> label n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-all-breakpoints machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>cancel-all-breakpoints<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tracing-label <span class=\"synSpecial\">'</span>global<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>breakpoint <span class=\"synSpecial\">'())</span>                <span class=\"synComment\">;連想リストのリスト</span>\n        <span class=\"synSpecial\">(</span>label-number <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span>check-breakpoint breakpoint<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">&quot;break! ~s: ~s&quot;</span>\n                                                       tracing-label label-number<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadaar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> label-number<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>proceed<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdaar</span> insts<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> label-number <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> label-number<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n         <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-breakpoint label n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remove</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label n<span class=\"synSpecial\">)</span> breakpoint<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remove</span> x lis<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Cannot find in breakpoint&quot;</span> x<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remove</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cancel-all-breakpoints<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> breakpoint <span class=\"synSpecial\">'()))</span>\n      <span class=\"synComment\">;; breakpointを引数に取り，再帰で一致するものがないか調べる．</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>check-breakpoint breakpoint<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> breakpoint<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> breakpoint<span class=\"synSpecial\">)</span> tracing-label<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> breakpoint<span class=\"synSpecial\">)</span> label-number<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>check-breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> breakpoint<span class=\"synSpecial\">)))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>check-breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> breakpoint<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-breakpoint label n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> breakpoint <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label n<span class=\"synSpecial\">)</span> breakpoint<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> tracing-label<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set-breakpoint<span class=\"synSpecial\">)</span> set-breakpoint<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>proceed<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proceed<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>cancel-breakpoint<span class=\"synSpecial\">)</span> cancel-breakpoint<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>cancel-all-breakpoints<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>cancel-all-breakpoints<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.19"},{"data":{"title":"SICP 問題 5.18","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>の値をトレース出来るようにする</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; registerがtraceを持ち，trace-onがメッセージパッシングされたらトレースする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>contents <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unssaigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>contents value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>trace contents value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> contents value<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> trace <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>contents value<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;register: ~6s   oldv-value: ~s new-value: ~s\\n&quot;</span>\n                                   name contents value<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> trace <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>contents value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- REGISTER&quot;</span> message<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.18"},{"data":{"title":"SICP 問題 5.17","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>トレースログにラベルネームをつける．<br/>\n　<br/>\nextract-labelsでlabelを見つけた時に('label labe-name)の形でinsts, labels両方に登録する．<br/>\nmake-new-machineでtracing-labelを作り，そこに現在のラベルを登録する．<br/>\n<a href=\"#f-c0dd7cf5\" name=\"fn-c0dd7cf5\" title=\"'label label-name\">*1</a>の実行形式はそのまま(advanced-pc pc)でpcをすすめるだけ．<br/>\n後はexecuteを調整する</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>error\n                    <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span>\n                    label-name<span class=\"synSpecial\">)</span>\n                   <span class=\"synComment\">;; ここでlabelは('label . next-inst)の形でinstsに登録</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>label next-inst<span class=\"synSpecial\">))</span> insts<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span>receive insts\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                               labels<span class=\"synSpecial\">))))</span>\n               <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                              insts<span class=\"synSpecial\">)</span>\n                   labels<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tracing-label <span class=\"synSpecial\">'</span>global<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>label-exp? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-label <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdaar</span> insts<span class=\"synSpecial\">)))</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> tracing-label<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine\n                                  pc flag stack ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>label<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>start\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">)))))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>fib-machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\ntrace-on\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-1<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>fib-loop<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>immediate-answer<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>afterfib-n-2<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)(</span>fib-done<span class=\"synSpecial\">)</span> : <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op print-stack-statistics<span class=\"synSpecial\">))</span>\ndone\n</pre>\n\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-c0dd7cf5\" name=\"f-c0dd7cf5\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">'label label-name</span></p>\n</div>\n","slug":"SICP 問題 5.17"},{"data":{"title":"SICP 問題 5.16","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>命令トレースを出来るようにする．<br/>\nexecuteがtraceフラグを引数に取り，trace-onなら命令を印字し，trace-offなら#fを返す．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synComment\">;; tracing-flagを引数に取るようにする．</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">'</span>done\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>trace <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> insts<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;trace-onならここで命令を印字．offなら#fを返す.</span>\n                <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>execute trace<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> tracing-flag <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute tracing-flag<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-on<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>trace-off<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>trace-off<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>fact-machine <span class=\"synSpecial\">'</span>trace-on<span class=\"synSpecial\">)</span>\ntrace-on\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fact-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fact-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\ndone\n</pre>\n\n\n","slug":"SICP 問題 5.16"},{"data":{"title":"SICP 問題 5.15","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>命令数カウンタを追加する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>    <span class=\"synComment\">;counterの追加</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print-stack-statistics\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                        register-table<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">'</span>done\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> the-instruction-counter<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; ここでインクリメント</span>\n                <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>initialize-counter<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> instruction-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-counter<span class=\"synSpecial\">)</span> the-instruction-counter<span class=\"synSpecial\">)</span> <span class=\"synComment\">;counterの取得</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initilize-counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>initilize-counter<span class=\"synSpecial\">))</span> <span class=\"synComment\">;counterの初期化</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n      dispatch<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fact-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3628800</span>\ngosh&gt; <span class=\"synSpecial\">(</span>fact-machine <span class=\"synSpecial\">'</span>counter<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">104</span>\n</pre>\n\n\n","slug":"SICP 問題 5.15"},{"data":{"title":"SICP 問題 5.14","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fact-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>continue n val<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>print print<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n     fact-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n     after-fact\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     base-case\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fact-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>fact-machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-register-contents! fact-machine <span class=\"synSpecial\">'</span>n n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>start fact-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;factorial: ~2d = ~10d&quot;</span> n <span class=\"synSpecial\">(</span>get-register-contents fact-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">((</span>fact-machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>print-statistics<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-fact n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>fact k<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>fact k<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>display-fact <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">1</span> <span class=\"synIdentifier\">=</span>          <span class=\"synConstant\">1</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">2</span> <span class=\"synIdentifier\">=</span>          <span class=\"synConstant\">2</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">3</span> <span class=\"synIdentifier\">=</span>          <span class=\"synConstant\">6</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">4</span> <span class=\"synIdentifier\">=</span>         <span class=\"synConstant\">24</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">5</span> <span class=\"synIdentifier\">=</span>        <span class=\"synConstant\">120</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">6</span> <span class=\"synIdentifier\">=</span>        <span class=\"synConstant\">720</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">7</span> <span class=\"synIdentifier\">=</span>       <span class=\"synConstant\">5040</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">12</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">8</span> <span class=\"synIdentifier\">=</span>      <span class=\"synConstant\">40320</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">14</span><span class=\"synSpecial\">)</span>\nfactorial:  <span class=\"synConstant\">9</span> <span class=\"synIdentifier\">=</span>     <span class=\"synConstant\">362880</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">16</span><span class=\"synSpecial\">)</span>\nfactorial: <span class=\"synConstant\">10</span> <span class=\"synIdentifier\">=</span>    <span class=\"synConstant\">3628800</span>\n<span class=\"synSpecial\">(</span>total-pushes <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span> maximum-depth <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">18</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;undef&gt;</span>\n</pre>\n\n\n<p>total-depth, maximum-depthともに2(n-1)回になる．</p>\n\n","slug":"SICP 問題 5.14"},{"data":{"title":"SICP 問題 5.13","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>make-machineで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリストを登録するのではなく，  <br/>\n命令の中で初めてassignされるときに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>を登録するように変更する．<br/>\nmake-machineとmake-new-machineの変更だけですむ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; register-namesを削除</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-machine ops controller-text<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> ops<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddddr</span> insts<span class=\"synSpecial\">)))</span>\n      machine<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; lookupで見つからなければallocateで登録．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-types <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-label-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-saved-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-register-sources <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synComment\">;; 登録した後にそのレジスタを返す</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name reg<span class=\"synSpecial\">)</span>\n                               register-table<span class=\"synSpecial\">))</span>\n                   reg<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;; 見つからなければ新たに登録する．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-types types<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>regs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-label-registers regs<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>saved<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-saved-registers saved<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-register-sources sources<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">)</span> the-instruction-types<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">)</span> the-label-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">)</span> the-saved-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">)</span> the-register-sources<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synComment\">;; '(n val continue)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6765</span>\n</pre>\n\n\n","slug":"SICP 問題 5.13"},{"data":{"title":"SICP 問題 5.12","published":"2016/01/29","tags":["scheme","SICP"]},"content":"\n<p>シミュレータのメッセージパッシングインターフェースを拡張し，以下の情報にアクセスできるようにする．<br/>\n・命令の型で，格納されたすべての異なる命令のリスト<br/>\n・エントリポイントの保持に使った<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリスト<br/>\n・save, restoreされる異なる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>のリスト<br/>\n・各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>に対して，異なる代入元のリスト<br/>\n　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%E9\">アセンブラ</a>を拡張しろってことなのでextra-labelsの継続渡しの部分で上記４つのリストの雛形を作り，<br/>\nupdate-insts!で重複を削除し，ソートしてinstsと一緒に返すようにした．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract-labels controller-text\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>update-insts! insts labels machine type-insts\n                                   label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span> label-name<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>receive\n                       insts\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                             labels<span class=\"synSpecial\">)</span>\n                     type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>receive\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                         insts<span class=\"synSpecial\">)</span>\n                   labels\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> next-inst type-insts<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>add-label-reg next-inst label-regs<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>add-saved-reg next-inst saved-regs<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>add-reg-sources next-inst reg-sources<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-label-reg next-inst label-regs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>tagged-list? next-inst <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> next-inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>reg<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadadr</span> next-inst<span class=\"synSpecial\">)</span> label-regs<span class=\"synSpecial\">)</span>\n      label-regs<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-saved-reg next-inst saved-regs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>tagged-list? next-inst <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> next-inst<span class=\"synSpecial\">)</span> saved-regs<span class=\"synSpecial\">)</span>\n      saved-regs<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-reg-sources next-inst reg-sources<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>tagged-list? next-inst <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> next-inst<span class=\"synSpecial\">)</span> reg-sources<span class=\"synSpecial\">)</span>\n      reg-sources<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tag x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; 重複は既に排除されている．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sort-reg reg-sources<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>helper first items<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> first<span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>tag first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> first<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>helper first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>lst reg-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> result<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> lst<span class=\"synSpecial\">))))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>helper <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine type-insts label-regs saved-regs reg-sources<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine pc flag ops<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> insts\n          <span class=\"synSpecial\">(</span>sort-reg <span class=\"synSpecial\">(</span>delete-duplicates type-insts<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>delete-duplicates label-regs<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>delete-duplicates  saved-regs<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>sort-reg <span class=\"synSpecial\">(</span>delete-duplicates reg-sources<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-machine register-names ops controller-text<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>register-name<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> register-name<span class=\"synSpecial\">))</span>\n              register-names<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> ops<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>assemble controller-text machine<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> insts<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>machine <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddddr</span> insts<span class=\"synSpecial\">)))</span>\n      machine<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-instruction-types <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-label-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-saved-registers <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>the-register-sources <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                          register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-types<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>types<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-types types<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-label-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>regs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-label-registers regs<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-saved-registers<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>saved<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-saved-registers saved<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-register-sources<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sources<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-register-sources sources<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">)</span> the-instruction-types<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">)</span> the-label-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">)</span> the-saved-registers<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">)</span> the-register-sources<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-types machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>instruction-types<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-label-registers machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>label-registers<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-saved-registers machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>saved-registers<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-register-sources machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>register-sources<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 整形した</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-types fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>assign <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">((</span>label immediate-answer<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>save <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">((</span>label fib-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">((</span>reg continue<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>restore <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)))</span>\ngosh&gt; fib-machine\ngosh&gt; <span class=\"synSpecial\">(</span>get-types fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>assign <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">((</span>label immediate-answer<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>save <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">((</span>label fib-loop<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">((</span>reg continue<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>restore <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)))</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-label-registers fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>continue<span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-saved-registers fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>continue n val<span class=\"synSpecial\">)</span>\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-sources fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span>continue <span class=\"synSpecial\">((</span>label fib-done<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">((</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">((</span>label afterfib-n-2<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>n <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>reg val<span class=\"synSpecial\">)))</span>\n <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">((</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">((</span>reg n<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.12"},{"data":{"title":"SICP 問題 5.11-c","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n<p>各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>がスタックを持つようにしてpopやpushはそのスタックを使用するように修正する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; make-registerがstackを持つ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>contents <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassaigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>make-stack<span class=\"synSpecial\">)))</span>     <span class=\"synComment\">;;(make-stack)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> contents value<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">((</span>dispatch <span class=\"synSpecial\">'</span>set<span class=\"synSpecial\">)</span> val<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">((</span>stack <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span> contents<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- REGISTER&quot;</span> message<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; make-new-machineはstackを持たなくなった．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>make-register <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>the-instruction-sequence <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>register-table\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>pc pc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>flag flag<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>the-ops                    <span class=\"synComment\">;すべてのregisterに対してstackを初期化する手続きを入れる</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>initialize-stack\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>stack<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>initialize<span class=\"synSpecial\">))</span>\n                                     register-table<span class=\"synSpecial\">))))))</span>\n        <span class=\"synComment\">;; registerをregiter-tableに登録する．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>allocate-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Multiply defined rgister: &quot;</span> name<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> register-table\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> name <span class=\"synSpecial\">(</span>make-register name<span class=\"synSpecial\">))</span>\n                          register-table<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">'</span>register-allocated<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; registerの値をregister-tableから見つける．</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-register name<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> name register-table<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> val<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown register: &quot;</span> name<span class=\"synSpecial\">))))</span>\n        <span class=\"synComment\">;; pc内に保存された手続きを実行する</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>insts <span class=\"synSpecial\">(</span>get-contents pc<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> insts<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">'</span>done\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n                  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch message<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>start<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceをpcに保存してexecute</span>\n                 <span class=\"synSpecial\">(</span>set-contents! pc the-instruction-sequence<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>execute<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-instruction-sequence<span class=\"synSpecial\">)</span> <span class=\"synComment\">;the-instruction-sequenceにseqを登録</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-instruction-sequence seq<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>allocate-register<span class=\"synSpecial\">)</span> allocate-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>get-register<span class=\"synSpecial\">)</span> lookup-register<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>install-operations<span class=\"synSpecial\">)</span> <span class=\"synComment\">;新しいopをthe-opsに追加</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> the-ops <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> the-ops ops<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">)</span> stack<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> message <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)</span> the-ops<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MACHINE&quot;</span> message<span class=\"synSpecial\">))))</span>\n        dispatch<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine <span class=\"synComment\">;引数からstackを削除</span>\n                                  pc flag ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;引数からstackを削除</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;引数からstackを削除</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n         pc flag ops<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-save inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>push<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-restore inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test.\n5.11-bと同じくfib-machine2で動けばよく，fib-machineでは正しい答えが返らない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine2\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine2 <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine2<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine2 <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: Empty stack -- POP\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">1770</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span>reg <span class=\"synSpecial\">'</span>pop<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">1906</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">2</span>  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n        At line <span class=\"synConstant\">1810</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">3</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-c"},{"data":{"title":"SICP 問題 5.11-b","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; stackに退避するときにレジスタを指定しておき，そのレジスタにresotre出来るように修正する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>pop stack<span class=\"synSpecial\">)))</span>\n        <span class=\"synComment\">;; valのcarにregisterが入っているので呼び出し側のregと比較し#fならエラーを返す</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> val<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>set-contents! reg <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> val<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;RESTORE require the same register as save, but&quot;</span> reg<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>reg <span class=\"synSpecial\">(</span>get-register machine\n                           <span class=\"synSpecial\">(</span>stack-inst-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span>push stack <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> reg <span class=\"synSpecial\">(</span>get-contents reg<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;regも一緒にconsする．</span>\n      <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>ex5.11-aで作ったfib-machineでテスト．これは失敗してほしい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: operation <span class=\"synIdentifier\">-</span> is <span class=\"synIdentifier\">not</span> defined between <span class=\"synSpecial\">(</span><span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-register dispatch<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">((</span>restore n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-restore make-restore<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>save val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-save make-save<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-goto make-goto<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>restore n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-restore make-restore<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>restore continue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-restore make-restore<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-goto make-goto<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-assign make-assign<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">.</span> <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>make-goto make-goto<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">))</span> <span class=\"synStatement\">and</span> <span class=\"synConstant\">2</span>\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span>value-proc<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">341</span> of <span class=\"synConstant\">&quot;/Users//work/scheme/SICP/5.2.scm&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span>set-contents! target <span class=\"synSpecial\">(</span>value-proc<span class=\"synSpecial\">))</span>\n        At line <span class=\"synConstant\">341</span> of <span class=\"synConstant\">&quot;/Users//work/scheme/SICP/5.2.scm&quot;</span>\n  <span class=\"synConstant\">2</span>  <span class=\"synSpecial\">((</span>instruction-execution-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> insts<span class=\"synSpecial\">)))</span>\n        At line <span class=\"synConstant\">444</span> of <span class=\"synConstant\">&quot;(standard input)&quot;</span>\n  <span class=\"synConstant\">3</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n<p>ex5.06で作ったfib-machine2.これは成功してほしい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine2\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>               <span class=\"synComment\">;ここを消して</span>\n     <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;ここで(restore n)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine2 <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine2<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine2 <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-b"},{"data":{"title":"SICP 問題 5.11-a","published":"2016/01/28","tags":["scheme","SICP"]},"content":"\n<p>図5.12のfibonacci計算から1命令除去する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; ex5.06で変更したこれを使う．</span>\n<span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n  fib-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-2\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                <span class=\"synComment\">;ここを消して</span>\n    <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;ここで(restore n)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val\n            <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  immediate-answer\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n    fib-done<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 変更後</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fib-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>&lt; <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'(</span>controller\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n     fib-loop\n     <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op &lt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-1\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n     afterfib-n-2\n     <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>assign val\n             <span class=\"synSpecial\">(</span>op +<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     immediate-answer\n     <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     fib-done<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">8</span>\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! fib-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start fib-machine<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents fib-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">55</span>\n</pre>\n\n\n","slug":"SICP 問題 5.11-a"},{"data":{"title":"SICP 問題 5.10","published":"2016/01/27","tags":["scheme","SICP"]},"content":"\n<p>新しく構文を追加する．<br/>\n簡単にincrementとdecrementで．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-execution-procedure inst labels machine\n                                  pc flag stack ops<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assign<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-assign inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>test<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-test inst machine labels ops flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>branch<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-branch inst machine labels flag pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>goto<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-goto inst machine labels pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>save<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-save inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>restore<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-restore inst machine stack pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>perform<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-perform inst machine labels ops pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>increment<span class=\"synSpecial\">)</span>    <span class=\"synComment\">;increment</span>\n         <span class=\"synSpecial\">(</span>make-increment inst machine pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> inst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>decrement<span class=\"synSpecial\">)</span>    <span class=\"synComment\">;decrement</span>\n         <span class=\"synSpecial\">(</span>make-decrement inst machine pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown instruction type -- ASSEMBLE&quot;</span> inst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; 選択子</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>increment-reg-name name<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> name<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decrement-reg-name name<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> name<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-increment inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">(</span>increment-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>value <span class=\"synSpecial\">(</span>get-contents target<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> value <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;INCREMENT require number, but&quot;</span> value<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-decrement inst machine pc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">(</span>decrement-reg-name inst<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>value <span class=\"synSpecial\">(</span>get-contents target<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> value<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>set-contents! target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> value <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>advance-pc pc<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;DECREMENT require number, but&quot;</span> value<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> add-two\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">'(</span>controller\n     main\n     <span class=\"synSpecial\">(</span>increment a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>increment a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>increment a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>decrement a<span class=\"synSpecial\">)</span>\n     done<span class=\"synSpecial\">)))</span>\n\ngosh&gt; <span class=\"synSpecial\">(</span>set-register-contents! add-two <span class=\"synSpecial\">'</span>a <span class=\"synConstant\">200</span><span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>start add-two<span class=\"synSpecial\">)</span>\ndone\ngosh&gt; <span class=\"synSpecial\">(</span>get-register-contents add-two <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">202</span>\n</pre>\n\n\n","slug":"SICP 問題 5.10"},{"data":{"title":"SICP 問題 5.09","published":"2016/01/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 演算はレジスタと定数にだけ使えるという条件を強要する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-operation-exp <span class=\"synIdentifier\">exp</span> machine labels operations<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>op <span class=\"synSpecial\">(</span>lookup-prim <span class=\"synSpecial\">(</span>operation-exp-op <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> operations<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>aprocs\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>e<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>label-exp? e<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Operation can be used only with registers and constants -- ASSEMBLE&quot;</span> e<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>make-primitive-exp e machine labels<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>operation-exp-operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">))</span> aprocs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.09"},{"data":{"title":"SICP 問題 5.08","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>start\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label here<span class=\"synSpecial\">))</span>\nhere\n <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\nhere\n <span class=\"synSpecial\">(</span>assign a <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label there<span class=\"synSpecial\">))</span>\nthere\n</pre>\n\n\n<p>この時thereに達した時のaの値は何かという問題．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n                          <span class=\"synComment\">;; symbolであればlabel</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n                              <span class=\"synComment\">;; (receive insts labels)なのでsymbolならlabelsにcons</span>\n                              <span class=\"synComment\">;; falseならinstsにcons</span>\n                              <span class=\"synSpecial\">(</span>receive insts\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                                        labels<span class=\"synSpecial\">))</span>\n                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                                             insts<span class=\"synSpecial\">)</span>\n                                  labels<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>update-insts! insts labels machine<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pc <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>pc<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>flag <span class=\"synSpecial\">(</span>get-register machine <span class=\"synSpecial\">'</span>flag<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>stack <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>stack<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>ops <span class=\"synSpecial\">(</span>machine <span class=\"synSpecial\">'</span>operations<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>inst<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>set-instruction-execution-proc!\n        inst\n        <span class=\"synSpecial\">(</span>make-execution-procedure\n         <span class=\"synSpecial\">(</span>instruction-text inst<span class=\"synSpecial\">)</span> labels machine\n         pc flag stack ps<span class=\"synSpecial\">)))</span>\n     insts<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-label-entry label-name insts<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> label-name insts<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-label labels label-name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> label-name labels<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> val\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> val<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Undefined label -- ASSEMBLE&quot;</span> label-name<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>からlabelsは順番を保持してlabelsに登録されていく．\nlookup-labelではassocが使われているので先頭に近いものが先に選ばれる．<br/>\nそのため(goto (label here))で向かうのは最初のhere.\naには3が入っている．<br/>\n　<br/>\nこれを同じラベルを違う場所に登録しようとするとエラーとなるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract-labels text receive<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> text<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n      <span class=\"synSpecial\">(</span>extract-labels <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> text<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>insts labels<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-inst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> text<span class=\"synSpecial\">)))</span>\n                          <span class=\"synComment\">;; symbolであればlabel</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> next-inst<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> next-inst labels<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;labelsに既に登録されていればここでtrueが返る</span>\n                                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;The same label name is used to indicate two different location &quot;</span> label-name<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span>receive insts\n                                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-label-entry next-inst insts<span class=\"synSpecial\">)</span>\n                                            labels<span class=\"synSpecial\">)))</span>\n                              <span class=\"synSpecial\">(</span>receive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-instruction next-inst<span class=\"synSpecial\">)</span>\n                                             insts<span class=\"synSpecial\">)</span>\n                                  labels<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.08"},{"data":{"title":"SICP 問題 5.07","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; シミュレータを使い問題5.04で設計した計算機をテストせよ</span>\n\n<span class=\"synComment\">;; 再帰的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorial-recur-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>b n val continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'((</span>assign continue <span class=\"synSpecial\">(</span>label expt-done<span class=\"synSpecial\">))</span>\n     expt-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-expt<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\n     after-expt\n       <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     base-case\n       <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n     expt-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-recur-machine <span class=\"synSpecial\">'</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-recur-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start factorial-recur-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>get-register-contents factorial-recur-machine <span class=\"synSpecial\">'</span>val<span class=\"synSpecial\">)</span> <span class=\"synComment\">;=&gt; 1024が返ってくるはず</span>\n\n\n<span class=\"synComment\">;; 反復的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorial-iter-machine\n  <span class=\"synSpecial\">(</span>make-machine\n   <span class=\"synSpecial\">'(</span>b n product<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">'((</span>assign product <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n     expt-loop\n       <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op =<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n1 <span class=\"synSpecial\">(</span>op -<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign p1 <span class=\"synSpecial\">(</span>op *<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg n1<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>assigin product <span class=\"synSpecial\">(</span>reg p1<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\n     expt-done<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-iter-machine <span class=\"synSpecial\">'</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>set-register-contents! factorial-iter-machine <span class=\"synSpecial\">'</span>n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>start factorial-iter-machine<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>get-register-contents factorial-iter-machine <span class=\"synSpecial\">'</span>product<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.07"},{"data":{"title":"SICP 問題 5.06","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n<p>Fibonacci計算機の余分なsaveとrestoreを取り除く</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                  <span class=\"synComment\">;ここでcontinueをrestoreしているのに</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;ここでそのままcontinueをsaveして</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;ここでcontinueを上書きしている．</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>余分なところを削除すると</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>こうなる．\n全文は以下の通り．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n  fib-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-1\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-2\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val\n            <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  immediate-answer\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n    fib-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 5.06"},{"data":{"title":"SICP 問題 5.05","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n<p>階乗とFibonacci計算機を机上シミュレート.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的な階乗計算を机上シミュレートする．</span>\n<span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>\n  fact-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; nと continue を退避し再帰呼び出しを設定する．</span>\n    <span class=\"synComment\">;; 再帰呼び出しから戻るとき after-fact から</span>\n    <span class=\"synComment\">;; 計算が続行するように continue を設定</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n  after-fact\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  base-case\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n  fact-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (assign (reg n) (const 3))を既に実行済みであると仮定する．</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fact-done<span class=\"synSpecial\">))</span>     <span class=\"synComment\">;continue &lt;= fact-done</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(= 3 1) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;fact-done =&gt; stack =&gt; fact-done</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;3 =&gt; stack =&gt; 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 2</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;continue &lt;= after-fact</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(= 2 1) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;after-fact =&gt; stack =&gt; after-fact, 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;2 =&gt; stack =&gt; 2, after-fact, 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-fact<span class=\"synSpecial\">))</span>    <span class=\"synComment\">;continue &lt;= after-fact</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fact-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(= 1 1) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>                  <span class=\"synComment\">;val &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;goto after-fact</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 2 | stack =&gt; after-fact, 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= after-fact | stack =&gt; 3, fact-done</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;val &lt;= 2 &lt;= (* 2 1)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;goto after-fact</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 3 | stack fact-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= fact-done | stack =&gt; null</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;n &lt;= 6 &lt;= (* 2 3)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;goto fact-done</span>\n\nfact-done\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 次はfibonacci計算を机上シミュレートする．</span>\n<span class=\"synComment\">;; Fibonacci 数を計算する計算機の制御器</span>\n<span class=\"synSpecial\">(</span>controller\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n  fib-loop\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; Fib(n-1)を計算するよう設定</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                            <span class=\"synComment\">;n の昔の値を退避</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;n を n-1 に変える</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>             <span class=\"synComment\">;再帰呼び出しを実行</span>\n  afterfib-n-1                          <span class=\"synComment\">;戻った時 Fib(n-1) は val にある</span>\n    <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synComment\">;; Fib(n-2)を計算するよう設定</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                          <span class=\"synComment\">;Fib(n-1) を退避</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n  afterfib-n-2                          <span class=\"synComment\">;戻った時 Fib(n-2) の値は val にある</span>\n    <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                <span class=\"synComment\">;n には Fib(n-2) がある</span>\n    <span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                       <span class=\"synComment\">;val には Fib(n-1) がある</span>\n    <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>assign val                         <span class=\"synComment\">;Fib(n-1) + Fib(n-2)</span>\n            <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                 <span class=\"synComment\">;呼び出し側に戻る．答えは val にある</span>\n  immediate-answer\n    <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                <span class=\"synComment\">;基底の場合: Fib(n)=n</span>\n    <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\n    fib-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 階乗と同じく(assign n (const 3))を実行済みと仮定する</span>\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>      <span class=\"synComment\">;continue &lt;= fib-done</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 3 2) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;fib-done =&gt; stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-1</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;3 =&gt; stack =&gt; 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 2</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 2 2) =&gt; #f</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;afterfib-n-1 =&gt; stack =&gt; afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-1<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-1</span>\n\n<span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>                                <span class=\"synComment\">;2 =&gt; stack =&gt; 2, afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 1 2) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;val &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-1)</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 2 | stack =&gt; afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= afterfib-n-1 | stack =&gt; 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 0</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;afterfib-n-1 =&gt; stack =&gt;afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-2</span>\n\n<span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                              <span class=\"synComment\">;1 =&gt; stack =&gt; 1, afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 0 2) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;val &lt;= 0</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-2)</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;n &lt;= 0</span>\n\n<span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;val &lt;= 1 | stack =&gt; afterfib-n-1, 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= afterfib-n-1 | stack =&gt; 3, fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;val &lt;= 1 &lt;= (+ 1 0)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-1)</span>\n\n<span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>                             <span class=\"synComment\">;n &lt;= 3 | stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= fib-done | stack =&gt; null</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>     <span class=\"synComment\">;n &lt;= 1 &lt;= (- 3 2)</span>\n\n<span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>                         <span class=\"synComment\">;fib-done =&gt; stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label afterfib-n-2<span class=\"synSpecial\">))</span>  <span class=\"synComment\">;continue &lt;= afterfib-n-2</span>\n\n<span class=\"synSpecial\">(</span>save val<span class=\"synSpecial\">)</span>                              <span class=\"synComment\">;1 =&gt; stack =&gt; 1, fib-done</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label fib-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>         <span class=\"synComment\">;(&lt; 1 2) =&gt; #t</span>\n\n<span class=\"synSpecial\">(</span>brach <span class=\"synSpecial\">(</span>label immediate-answer<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;val &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto afterfib-n-2)</span>\n\n<span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>                    <span class=\"synComment\">;n &lt;= 1</span>\n\n<span class=\"synSpecial\">(</span>restore val<span class=\"synSpecial\">)</span>                           <span class=\"synComment\">;val &lt;= 1 | stack =&gt; fib-done</span>\n\n<span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>                      <span class=\"synComment\">;continue &lt;= fib-done</span>\n\n<span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>   <span class=\"synComment\">;val &lt;= 2 &lt;= (+ 1 1)</span>\n\n<span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>                   <span class=\"synComment\">;(goto fib-done)</span>\n\nfib-done\n</pre>\n\n\n","slug":"SICP 問題 5.05"},{"data":{"title":"SICP 問題 5.04","published":"2016/01/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a 再帰的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>controller\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label expt-done<span class=\"synSpecial\">))</span>\n expt-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label base-case<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>save continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>save n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign continue <span class=\"synSpecial\">(</span>label after-expt<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\nafter-expt\n   <span class=\"synSpecial\">(</span>restore n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>restore continue<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg val<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\nbase-case\n   <span class=\"synSpecial\">(</span>assign val <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>reg continue<span class=\"synSpecial\">))</span>\nexpt-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160123002736\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160123/20160123002736.jpg\" alt=\"f:id:wat-aro:20160123002736j:image\" title=\"f:id:wat-aro:20160123002736j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p>　<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; b 反復的べき乗</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expt-iter counter product<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        product\n        <span class=\"synSpecial\">(</span>expt-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> product<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>expt-iter n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>contoroller\n   <span class=\"synSpecial\">(</span>assign product <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n expt-loop\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label fib-done<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign n1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign p1 <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg b<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>reg n1<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assigin product <span class=\"synSpecial\">(</span>reg p1<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label expt-loop<span class=\"synSpecial\">))</span>\n expt-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160123002740\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160123/20160123002740.jpg\" alt=\"f:id:wat-aro:20160123002740j:image\" title=\"f:id:wat-aro:20160123002740j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 5.04"},{"data":{"title":"SICP 問題 5.03","published":"2016/01/22","tags":["scheme","SICP"]},"content":"\n<p>１章でやったNewton法で求めるsqrt手続き．<br/>\nこれをデータパス図で描き，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>計算機言語で定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>sqrt-iter <span class=\"synConstant\">1.0</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-iter guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n      guess\n      <span class=\"synSpecial\">(</span>sqrt-iter <span class=\"synSpecial\">(</span>improve guess x<span class=\"synSpecial\">)</span>\n                 x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>improve guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>average guess <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x guess<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>average x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>square guess<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\ngood-enough?, improveを使った場合\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160122185657\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160122/20160122185657.jpg\" alt=\"f:id:wat-aro:20160122185657j:image\" title=\"f:id:wat-aro:20160122185657j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p>定義</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; good-enough?, improveを使った場合</span>\n<span class=\"synSpecial\">(</span>controller\n <span class=\"synIdentifier\">sqrt</span>\n   <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n test-b\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op good-enough?<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label sqrt-done<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign t <span class=\"synSpecial\">(</span>op improve<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>reg t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label test-b<span class=\"synSpecial\">))</span>\n sqrt-done\n   <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op peinr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>　<br/>\ngood-enough?, improveを使わなかった場合\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160122185726\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160122/20160122185726.jpg\" alt=\"f:id:wat-aro:20160122185726j:image\" title=\"f:id:wat-aro:20160122185726j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span>\n　<br/>\n定義</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; good-enough?, improveを使わずに</span>\n<span class=\"synSpecial\">(</span>controller\n  <span class=\"synIdentifier\">sqrt</span>\n    <span class=\"synSpecial\">(</span>assign x <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n  good-enough?\n    <span class=\"synSpecial\">(</span>assign p <span class=\"synSpecial\">(</span>op square<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign diff <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign g <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">abs</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg diff<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&lt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg g<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label sqrt-done<span class=\"synSpecial\">))</span>\n  improve\n    <span class=\"synSpecial\">(</span>assign d <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign t <span class=\"synSpecial\">(</span>op average<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg d<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>assign guess <span class=\"synSpecial\">(</span>reg t<span class=\"synSpecial\">))</span>\n  sqrt-done\n    <span class=\"synSpecial\">(</span>perform <span class=\"synSpecial\">(</span>op print<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg guess<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 5.03"},{"data":{"title":"SICP 問題 5.02","published":"2016/01/22","tags":["scheme","SICP"]},"content":"\n<p>5.01の反復的な階乗計算機をレジスト計算機言語使って記述する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>controller\n factorial\n   <span class=\"synSpecial\">(</span>assign n <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign product <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign counter <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n test-b\n   <span class=\"synSpecial\">(</span>test <span class=\"synSpecial\">(</span>op <span class=\"synIdentifier\">&gt;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>branch <span class=\"synSpecial\">(</span>label factorial-done<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign t <span class=\"synSpecial\">(</span>op mul<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg counter<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign u <span class=\"synSpecial\">(</span>op sum<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>reg counter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>const <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign product <span class=\"synSpecial\">(</span>reg t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>assign counter <span class=\"synSpecial\">(</span>reg u<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>goto <span class=\"synSpecial\">(</span>label test<span class=\"synSpecial\">))</span>\n factorial-done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>基本的に制御器の流れ通り．<br/>\nreadする方法がわからないので多分こんな感じでしょうってやっつけ</p>\n\n","slug":"SICP 問題 5.02"},{"data":{"title":"SICP 問題 5.01","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160122154245\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160122/20160122154245.jpg\" alt=\"f:id:wat-aro:20160122154245j:image\" title=\"f:id:wat-aro:20160122154245j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 5.01"},{"data":{"title":"SICP 問題 4.77","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>簡略化して．<br/>\n(and (not A) B C)を(and B C (not A))に並び替えてからqevalしていく．<br/>\n入れ子になっていた場合もqevalでまたcojoinに送られるので対処出来る．<br/>\nただ問題文通りだと，必要な変数を満たす表明が現れたらすぐにnotを実行しなければいけないが，それは難しかったので妥協．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new <span class=\"synSpecial\">(</span>bring-filter-behind conjuncts<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? new<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts new<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct new<span class=\"synSpecial\">)</span>\n                      frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>filter? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>not<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lisp-value<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>bring-filter-behind conjuncts<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>conjuncts conjuncts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>infront <span class=\"synSpecial\">'())</span> <span class=\"synSpecial\">(</span>behind <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> conjuncts<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> infront behind<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>filter? <span class=\"synSpecial\">(</span>type first<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>iter rest infront <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> behind first<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                   <span class=\"synSpecial\">(</span>iter rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> infront first<span class=\"synSpecial\">)</span> behind<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n<p>4.78と4.79はパス．</p>\n\n","slug":"SICP 問題 4.77"},{"data":{"title":"SICP 問題 4.76","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>本文中のandはひとつ目の質問を満たす表明に対して次の質問を満たす表明をデータベースから探してくる．<br/>\nそれを２つの質問をそれぞれ満たすストリームをまず作り，<br/>\n矛盾がないようにそれらを組み合わせるconjoin特殊形式を実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? conjuncts<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>conjoin-frame-stream first rest<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-frame-stream fs1 fs2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-filter\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n   <span class=\"synSpecial\">(</span>stream-flatmap\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-map\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>conjoin-consistent frame1 frame2<span class=\"synSpecial\">))</span>\n       fs2<span class=\"synSpecial\">))</span>\n    fs1<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; f2をフレームと考え，f1のvarがf2にあるかを調べる．</span>\n<span class=\"synComment\">;; f2にあってf1のvarの値と同じならOK．違えばfailed.なければf2を拡張する．</span>\n<span class=\"synComment\">;; 上記手順はexend-if-possibleがやる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin-consistent f1 f2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> f1<span class=\"synSpecial\">)</span> f2\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>extend-frame2 <span class=\"synSpecial\">(</span>extend-if-possible <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> f1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> f1<span class=\"synSpecial\">)</span> f2<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> extend-frame2 <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">'</span>failed\n            <span class=\"synSpecial\">(</span>conjoin-consistent <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> f1<span class=\"synSpecial\">)</span> extend-frame2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 本文で定義されたextend-if-possible</span>\n<span class=\"synComment\">;; (? x)が値を指していればその値を返す．(? y)となっていれば，さらにその値を探す．</span>\n<span class=\"synComment\">;; varもvalも(? x)同じものを指していればfailedが返る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-possible var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;フレームからvarに対応するvalを探して束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>binding\n           <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> val frame<span class=\"synSpecial\">))</span>\n          <span class=\"synComment\">;; 上のletで探してきたvalもまた(? y)という形だった場合は更にフレームから探してくる．</span>\n          <span class=\"synSpecial\">((</span>var? val<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame val frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synSpecial\">(</span>unify-match var <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;見つからなければフレームを拡張</span>\n          <span class=\"synSpecial\">((</span>depends-on? val var frame<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;valとvarが同じく(? x)だった場合はfailed</span>\n           <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.76"},{"data":{"title":"SICP 問題 4.75","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>指定した質問を満足する項目がデータベースに一つしかないときに成功する特殊形式uniqueの実装．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; streamの個数を調べる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-length s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>stream s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>count <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n        count\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unique-query exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>uniquely-asserted contents frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>unique-query contents<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>stream-null? result<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>stream-length result<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n            result\n            the-empty-stream<span class=\"synSpecial\">)))</span>\n    frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>unique <span class=\"synSpecial\">'</span>qeval uniquely-asserted<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job ?x <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?x ?j<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job ?anyone ?j<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Aull DeWitt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration secretary<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Aull DeWitt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration secretary<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Cratchet Robert<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting scrivener<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Cratchet Robert<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting scrivener<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Scrooge Eben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting chief accountant<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Scrooge Eben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>accounting chief accountant<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Warbucks Oliver<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration big wheel<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Warbucks Oliver<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>administration big wheel<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Reasoner Louis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer programmer trainee<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Reasoner Louis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer programmer trainee<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Tweakit Lem E<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer technician<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Tweakit Lem E<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer technician<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>unique <span class=\"synSpecial\">(</span>job <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>computer wizard<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.75"},{"data":{"title":"SICP 問題 4.74","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; negate, lisp-value, singleton-streamはflatten-streamを変更して直列にしても問題ないのではという問題</span>\n<span class=\"synComment\">;; 元のflatten-stream</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>flatten-stream stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>flatten-stream <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; a 差し込みを使わないsimple-flattenの実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simbple-stream-flatmap proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>simple-flatten <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-flatten stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map stream-car\n              <span class=\"synSpecial\">(</span>stream-filter <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)))</span>\n                             stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; negate, lisp-valueはsinbleton-streamを取るので交互にしても直列にしても結果は変わらない．</span>\n<span class=\"synComment\">;; find-assertionsの場合はfetch-assertionsで対応する表明を集めてきているので同じく変わらない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.74"},{"data":{"title":"SICP 問題 4.73","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>flatten-streamが明示的にdelayを使うのはなぜか．<br/>\n　<br/>\nflatten-streamはストリームのストリームを引数にとる．<br/>\n4.71と同じく引数のストリームの中に無限ストリームがあると評価が終わらずになにも印字されないため．</p>\n\n","slug":"SICP 問題 4.73"},{"data":{"title":"SICP 問題 4.72","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>stream-appendだと最初のストリームが無限ストリームだった場合に次のストリームが評価されなくなる．\nなのでinterleaveにして交互に先頭の要素を評価することで，どちらかもしくは両方が無限ストリームの時に対応できるようにする．</p>\n\n","slug":"SICP 問題 4.72"},{"data":{"title":"SICP 問題 4.71","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文中のsimple-query</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">))))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 本文中のdisjoin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                       frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; Louis Reasonerが提案したsimple-query</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">)))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Louis Reasonerが提案したdisjoin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                frame-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; Louis Readonerの提案したものだとinterleaveの二つ目のストリームが遅延されていないので</span>\n<span class=\"synComment\">;; 評価が終わるまで印字されない．</span>\n<span class=\"synComment\">;; 仮にruleのほうで無限ループに陥った時に，delayする場合は一つ一つの評価結果を印字しながらループし</span>\n<span class=\"synComment\">;; delayがない場合は何も印字せずに無限ループする．</span>\n<span class=\"synComment\">;; 本文でも出てきたmarriedを使って試してみる．</span>\n\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; delayありの場合</span>\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Query result:</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>married Mickey Minnie<span class=\"synSpecial\">)</span>\n...\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; delayなしの場合</span>\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>married Minnie Mickey<span class=\"synSpecial\">))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>assert! <span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>married ?x ?y<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>married ?y ?x<span class=\"synSpecial\">)))</span>\n\nAssertion added to data base.\n\n<span class=\"synComment\">;;; Query input:</span>\n<span class=\"synSpecial\">(</span>married Mickey ?x<span class=\"synSpecial\">)</span>\n\n\n</pre>\n\n\n<p>;;; Query result:\nの表示も出てこない</p>\n\n","slug":"SICP 問題 4.71"},{"data":{"title":"SICP 4.4.4 質問システムの実装","published":"2016/01/21","tags":["scheme","SICP"]},"content":"\n<p>なかなか処理の流れがわからなかったのでコメントを多めにつけてみた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 駆動ループ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; Query input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; Query result:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>query-driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>       <span class=\"synComment\">;最初の印字</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>q <span class=\"synSpecial\">(</span>query-syntax-process <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>assertion-to-be-added? q<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>add-rule-or-assertion! <span class=\"synSpecial\">(</span>add-assertion-body q<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;Assertion added to data base.&quot;</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>query-driver-loop<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> output-prompt<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>display-stream\n            <span class=\"synComment\">;; このstream-mapで回答のストリームが作られる．</span>\n            <span class=\"synSpecial\">(</span>stream-map\n             <span class=\"synComment\">;; フレームを取り，変数を具体化したもともとの質問のコピーからなるストリームを作る</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>instantiate q frame\n                            <span class=\"synComment\">;; unbound-handlerに渡す部分．</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>v f<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>contract-question-mark v<span class=\"synSpecial\">))))</span>\n             <span class=\"synComment\">;; 質問を満たすフレームのストリーム</span>\n             <span class=\"synSpecial\">(</span>qeval q <span class=\"synSpecial\">(</span>singleton-stream <span class=\"synSpecial\">'()))))</span>\n           <span class=\"synSpecial\">(</span>query-driver-loop<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; qevalで作られたストリームのフレームをとqを取る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>instantiate <span class=\"synIdentifier\">exp</span> frame unbound-var-handler<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>copy <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>var? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synComment\">;; binding-in-frameで(? x)と対応した((? x) Aull DeWitt)のような形で取り出す．</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame <span class=\"synIdentifier\">exp</span> frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synComment\">;; 取り出した((? x) Aull DeWitt)を(Aull DeWitt)にしてcopyに渡す．</span>\n                 <span class=\"synSpecial\">(</span>copy <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">))</span>\n                 <span class=\"synComment\">;; (? 5 x)を?x-5に変える</span>\n                 <span class=\"synSpecial\">(</span>unbound-var-handler <span class=\"synIdentifier\">exp</span> frame<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>copy <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>copy <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;リストの形は維持したままcarとcdrをcopyする</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>copy <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 評価機</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>qeval query frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>qproc <span class=\"synSpecial\">(</span>get <span class=\"synSpecial\">(</span>type query<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>qeval<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;queryがandかorから始まるかのチェック</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> qproc\n        <span class=\"synSpecial\">(</span>qproc <span class=\"synSpecial\">(</span>contents query<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span> <span class=\"synComment\">;and, orで始まる場合</span>\n        <span class=\"synSpecial\">(</span>simple-query query frame-stream<span class=\"synSpecial\">))))</span>  <span class=\"synComment\">;それ以外</span>\n\n<span class=\"synComment\">;; 単純質問</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simple-query query-pattern frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synComment\">;; carがnullならcdrをforceするappend.find-assertionsでマッチするassertionがなければcdrへ．</span>\n     <span class=\"synSpecial\">(</span>stream-append-delayed\n      <span class=\"synSpecial\">(</span>find-assertions query-pattern frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>apply-rules query-pattern frame<span class=\"synSpecial\">))))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 合成質問</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conjoin conjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-conjunction? conjuncts<span class=\"synSpecial\">)</span>\n      frame-stream\n      <span class=\"synSpecial\">(</span>conjoin <span class=\"synSpecial\">(</span>rest-conjuncts conjuncts<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-conjunct conjuncts<span class=\"synSpecial\">)</span>\n                      frame-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>and <span class=\"synSpecial\">'</span>qeval conjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoin disjuncts frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-disjunction? disjuncts<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>first-disjunct disjuncts<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>disjoin <span class=\"synSpecial\">(</span>rest-disjuncts disjuncts<span class=\"synSpecial\">)</span>\n                       frame-stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>or <span class=\"synSpecial\">'</span>qeval disjoin<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; フィルタ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negate operands frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>negated-query operands<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">)</span>\n         the-empty-stream<span class=\"synSpecial\">))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>not <span class=\"synSpecial\">'</span>qeval negate<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lisp-value call frame-stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>execute <span class=\"synSpecial\">(</span>instantiate call\n                               frame\n                               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>v f<span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown pat var -- LISP-VALUE&quot;</span> v<span class=\"synSpecial\">))))</span>\n         <span class=\"synSpecial\">(</span>singleton-stream frame<span class=\"synSpecial\">)</span>\n         the-empty-stream<span class=\"synSpecial\">))</span>\n   frame-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>lisp-value <span class=\"synSpecial\">'</span>qeval lisp-value<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> user-initial-environment<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>args <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>always-true ignore frame-stream<span class=\"synSpecial\">)</span> frame-stream<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>always-true <span class=\"synSpecial\">'</span>qeval always-true<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; パターンマッチにより表明を見つける</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-assertions pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>datum<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>check-an-assertion datum pattern frame<span class=\"synSpecial\">))</span>\n                  <span class=\"synComment\">;; patternの先頭を見て，それにマッチするassertionをストリームで返す．</span>\n                  <span class=\"synSpecial\">(</span>fetch-assertions pattern frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>check-an-assertion assertion query-pat query-frame<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;;パターンマッチされ，failedになったフレームか，拡張されたフレームが入っている．</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>match-result\n         <span class=\"synSpecial\">(</span>pattern-match query-pat assertion query-frame<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> match-result <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n        the-empty-stream                <span class=\"synComment\">;failedなら空のストリームを返す</span>\n        <span class=\"synSpecial\">(</span>singleton-stream match-result<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;フレームなら空ストリームとcons-streamしたストリームを返す</span>\n\n<span class=\"synComment\">;; パターンとデータが同じならフレームを返し，パターンが(? x)ならextendするか既にある値を返す．</span>\n<span class=\"synComment\">;; マッチしなければそのフレームをfailedにする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pattern-match pat dat frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> pat dat<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>var? pat<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;patternが(? x)のような形なら</span>\n         <span class=\"synSpecial\">(</span>extend-if-consistent pat dat frame<span class=\"synSpecial\">))</span> <span class=\"synComment\">;ここで値となって戻るか，拡張されて戻る</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> pat<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> dat<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pat<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> dat<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> dat<span class=\"synSpecial\">)</span>\n                                       frame<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; varは(? x)のような形で渡される．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-consistent var dat frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;assocでframeにvarがあるか探す</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n        <span class=\"synComment\">;; frameにすでにvarがあればそのvalueを返してパターンマッチにかける</span>\n        <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> dat frame<span class=\"synSpecial\">)</span>\n        <span class=\"synComment\">;; なければフレームを拡張する．</span>\n        <span class=\"synSpecial\">(</span>extend var dat frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 規則とユニフィケーション</span>\n<span class=\"synComment\">;; stream-flatmapはstream-carのストリームをマップしてからstream-cdrにいく</span>\n<span class=\"synComment\">;; interleave-delayedもしているのでcarがnullならばstream-cdrのcarを評価する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-rules pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-flatmap <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rule<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>apply-a-rule rule pattern frame<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>fetch-rules pattern frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;patternで使っているルールを引っ張ってくる</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-a-rule rule query-pattern query-frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>clean-rule <span class=\"synSpecial\">(</span>rename-variables-in rule<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;(? x)を(? id x)にしてclean-ruleに束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>unify-result\n           <span class=\"synSpecial\">(</span>unify-match query-pattern\n                        <span class=\"synSpecial\">(</span>conclusion clean-rule<span class=\"synSpecial\">)</span>\n                        query-frame<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> unify-result <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          the-empty-stream\n          <span class=\"synSpecial\">(</span>qeval <span class=\"synSpecial\">(</span>rule-body clean-rule<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>singleton-stream unify-result<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; ruleの中で(? x)となっている部分をすべて(? id x)にして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rename-variables-in rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rule-application-id <span class=\"synSpecial\">(</span>new-rule-application-id<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;rule-counterに１足してidに保存</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>var? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n             <span class=\"synComment\">;; (? x)=&gt;(? id x)</span>\n             <span class=\"synSpecial\">(</span>make-new-variable <span class=\"synIdentifier\">exp</span> rule-application-id<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>tree-walk rule<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; pattern-matchとほぼ同じ．</span>\n<span class=\"synComment\">;; ユニファイの場合はフレームに入っている値が(? x)の形の場合もあるのでそれに対応</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unify-match p1 p2 frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> frame <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> p1 p2<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>var? p1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>extend-if-possible p1 p2 frame<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>var? p2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>extend-if-possible p2 p1 frame<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> p1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> p2<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> p1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> p2<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p1<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p2<span class=\"synSpecial\">)</span>\n                                   frame<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; (? x)が値を指していればその値を返す．(? y)となっていれば，さらにその値を探す．</span>\n<span class=\"synComment\">;; varもvalも(? x)同じものを指していればfailedが返る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-possible var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;フレームからvarに対応するvalを探して束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>binding\n           <span class=\"synSpecial\">(</span>unify-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> val frame<span class=\"synSpecial\">))</span>\n          <span class=\"synComment\">;; 上のletで探してきたvalもまた(? y)という形だった場合は更にフレームから探してくる．</span>\n          <span class=\"synSpecial\">((</span>var? val<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame val frame<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n                 <span class=\"synSpecial\">(</span>unify-match var <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;見つからなければフレームを拡張</span>\n          <span class=\"synSpecial\">((</span>depends-on? val var frame<span class=\"synSpecial\">)</span>     <span class=\"synComment\">;valとvarが同じく(? x)だった場合はfailed</span>\n           <span class=\"synSpecial\">'</span>failed<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>extend var val frame<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synComment\">;; vatとexpが同じ(? x)の場合は#tを返す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>depends-on? <span class=\"synIdentifier\">exp</span> var frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk e<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>var? e<span class=\"synSpecial\">)</span>                     <span class=\"synComment\">;(? id x)という形</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">equal?</span> var e<span class=\"synSpecial\">)</span>           <span class=\"synComment\">;varもeも(? x)と同じだった場合</span>\n               <span class=\"synConstant\">#t</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>b <span class=\"synSpecial\">(</span>binding-in-frame e frame<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;eの値を更にフレームから探してくる</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> b\n                     <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span>binding-value b<span class=\"synSpecial\">))</span>\n                     <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> e<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> e<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> e<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>tree-walk <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; データベース</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> THE-ASSERTIONS the-empty-stream<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; patternの先頭に合うassertionをストリームにして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fetch-assertions pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>use-index? pattern<span class=\"synSpecial\">)</span>              <span class=\"synComment\">;patternの先頭がsymbolならtrue</span>\n      <span class=\"synComment\">;; (job ?x ?y)ならjobから始まるデータベースの表明すべてを取ってきてストリームにして返す</span>\n      <span class=\"synSpecial\">(</span>get-indexed-assertions pattern<span class=\"synSpecial\">)</span>\n      <span class=\"synComment\">;; データベースのTHE-ASSERTIONSを返す</span>\n      <span class=\"synSpecial\">(</span>get-all-assertions<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-all-assertions<span class=\"synSpecial\">)</span> THE-ASSERTIONS<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; patternの先頭にマッチするassertionを取ってきてストリームにして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-indexed-assertions pattern<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>get-stream <span class=\"synSpecial\">(</span>index-key-of pattern<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assertion-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 表の中からkey1 key2に対応するものを探す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-stream key1 key2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s <span class=\"synSpecial\">(</span>get key1 key2<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> s s the-empty-stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> THE-RULES the-empty-stream<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fetch-rules pattern frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>use-index? pattern<span class=\"synSpecial\">)</span>              <span class=\"synComment\">;patternの先頭がsymbolならtrue</span>\n      <span class=\"synComment\">;; patternと先頭の要素が同じruleと先頭が?のruleがstream-appendされて返ってくる．</span>\n      <span class=\"synSpecial\">(</span>get-indexed-rules pattern<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>get-all-rules<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-all-rules<span class=\"synSpecial\">)</span> THE-RULES<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; patternと先頭の要素が同じruleと先頭の要素が?のruleがstream-appendされる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-indexed-rules pattern<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-append\n   <span class=\"synSpecial\">(</span>get-stream <span class=\"synSpecial\">(</span>index-key-of pattern<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>rule-stream<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>get-stream <span class=\"synSpecial\">'</span>? <span class=\"synSpecial\">'</span>rule-stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; ruleならadd-rule!へ．ruleでなければadd-assertionへ．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-rule-or-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>rule? assertion<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>add-rule! assertion<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-assertions THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n          <span class=\"synSpecial\">(</span>cons-stream assertion old-assertions<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-rule! rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-rule-in-index rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-rules THE-RULES<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-RULES <span class=\"synSpecial\">(</span>cons-stream rule old-rules<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>indexable? assertion<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key <span class=\"synSpecial\">(</span>index-key-of assertion<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>current-assertion-stream\n               <span class=\"synSpecial\">(</span>get-stream key <span class=\"synSpecial\">'</span>assertion-stream<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>put key\n               <span class=\"synSpecial\">'</span>assertion-stream\n               <span class=\"synSpecial\">(</span>cons-stream assertion\n                            current-assertion-stream<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; ruleは(rule (some thing else))という形なので(conclusion rule)で(some thing else)という形にしてpatternに束縛する</span>\n<span class=\"synComment\">;; indexiableならrule-streamにkeyを登録する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>store-rule-in-index rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pattern <span class=\"synSpecial\">(</span>conclusion rule<span class=\"synSpecial\">)))</span>    <span class=\"synComment\">;rule本体をpatternに束縛</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>indexable? pattern<span class=\"synSpecial\">)</span>            <span class=\"synComment\">;symbol or ?xのような形で#t</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key <span class=\"synSpecial\">(</span>index-key-of pattern<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;(? key)なら?,(key)ならkeyをkeyに束縛</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>current-rule-stream\n                 <span class=\"synSpecial\">(</span>get-stream key <span class=\"synSpecial\">'</span>rule-stream<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;'rule-streamの中からkeyのストリームを探す</span>\n            <span class=\"synSpecial\">(</span>put key\n                 <span class=\"synSpecial\">'</span>rule-stream\n                 <span class=\"synSpecial\">(</span>cons-stream rule\n                              current-rule-stream<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; symbolか?xのような形ならtrueを返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>indexable? pat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>constant-symbol? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>var? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; リストの先頭が?か調べ，?なら?を．違っていれば先頭の要素をそのまま帰す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>index-key-of pat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>var? key<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>? key<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>use-index? pat<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; (symbol? (car pat))</span>\n  <span class=\"synSpecial\">(</span>constant-symbol? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pat<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; ストリーム演算</span>\n\n\n<span class=\"synComment\">;; carがnullならcdrをforceするstream-append</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-append-delayed s1 delayed-s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-s2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>cons-stream\n       <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>stream-append-delayed <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> delayed-s2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>interleave-delayed s1 delayed-s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-s2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>cons-stream\n       <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span>interleave-delayed <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-s2<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; stream-mapをした後にflatten-streamにかけられる．</span>\n<span class=\"synComment\">;; そこでstream-nullなら空ストリームが返る．</span>\n<span class=\"synComment\">;; そこからcdrをdelayしてinterleave-delayedに送られる．</span>\n<span class=\"synComment\">;; carがnullならcdrはforceされる．</span>\n<span class=\"synComment\">;; nullでなければ第一引数のcarをcons-streamし，</span>\n<span class=\"synComment\">;; delayed-s2,(cdr s2)をintegerleave-delayedで交互にconsしていく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-flatmap proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>flatten-stream <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>flatten-stream stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>interleave-delayed\n       <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>flatten-stream <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>singleton-stream x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream x the-empty-stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問の構文手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression TYPE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contents <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression CONTENTS&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; リストの先頭がassert!か判定する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assertion-to-be-added? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>assert!<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; assert!のbody部を返す．(assert! (some thing else))</span>\n<span class=\"synComment\">;; (contents exp)でcdrを返し，そのcarを返すので(some thing else)になる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>contents <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-conjunction? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-conjunct exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-conjuncts exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-disjunction? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-disjunct exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-disjuncts exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negated-query exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>predicate exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> exps<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>args exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> exps<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rule? statement<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? statement <span class=\"synSpecial\">'</span>rule<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>conclusion rule<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> rule<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rule-body rule<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> rule<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">'(</span>always-true<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> rule<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>query-syntax-process <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>map-over-symbols expand-question-mark <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; すべての?xとなっているシンボルを(? x)という形に変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>map-over-symbols proc <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>map-over-symbols proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>map-over-symbols proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proc <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; symbolの先頭の文字が?なら(? x)に変える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-question-mark symbol<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>chars <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> symbol<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string=?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">substring</span> chars <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;?&quot;</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>?\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-&gt;symbol</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">substring</span> chars <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-length</span> chars<span class=\"synSpecial\">))))</span>\n        symbol<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>var? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>?<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>constant-symbol? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rule-counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; rule-counterを1増やして返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>new-rule-application-id<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> rule-counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> rule-counter<span class=\"synSpecial\">))</span>\n  rule-counter<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; (? x)=&gt;(? id x)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-new-variable var rule-application-id<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> rule-application-id <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> var<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; (? 5 x)のような形なら&quot;?x-5&quot;にしてから?x-5にする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contract-question-mark variable<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-&gt;symbol</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-append</span> <span class=\"synConstant\">&quot;?&quot;</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> variable<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">string-append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> variable<span class=\"synSpecial\">))</span>\n                                     <span class=\"synConstant\">&quot;-&quot;</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number-&gt;string</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> variable<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol-&gt;string</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> variable<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; フレームと束縛</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-binding variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variable value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-variable binding<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> binding<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> binding<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; フレームからvariableに対応したvalueを取り出す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-in-frame variable frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> variable frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend variable value frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-binding variable value<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 4.4.4 質問システムの実装"},{"data":{"title":"継続を使ってフィボナッチ数列を求める","published":"2016/01/19","tags":["scheme"]},"content":"\n<p>call/ccの使い方はよくわかってないので自分で継続を渡します．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fib/cc n <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib/cc n func<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>func <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>func <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>func <span class=\"synSpecial\">(</span>fib/cc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> func<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>fib/cc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> func<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>テスト．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> fib <span class=\"synSpecial\">(</span>iota <span class=\"synConstant\">20</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">13</span> <span class=\"synConstant\">21</span> <span class=\"synConstant\">34</span> <span class=\"synConstant\">55</span> <span class=\"synConstant\">89</span> <span class=\"synConstant\">144</span> <span class=\"synConstant\">233</span> <span class=\"synConstant\">377</span> <span class=\"synConstant\">610</span> <span class=\"synConstant\">987</span> <span class=\"synConstant\">1597</span> <span class=\"synConstant\">2584</span> <span class=\"synConstant\">4181</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"継続を使ってフィボナッチ数列を求める"},{"data":{"title":"SICP 4.4.4 extend-if-consistentのエラー","published":"2016/01/19","tags":["scheme","SICP","gauche"]},"content":"\n<p>4.4.4の論理型プログラミングの実装を評価すると以下のエラーが出ます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synConstant\">***</span> ERROR: Compile Error: cannot <span class=\"synIdentifier\">find</span> <span class=\"synConstant\">&quot;var&quot;</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/site/lib&quot;</span> <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib&quot;</span> <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche/site/lib&quot;</span> <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche/0.9/lib&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">&quot;(standard input)&quot;</span>:1:<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-consistent var da ...\n\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n<p>これがextend-if-consistentのコードです．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-if-consistent var dat frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>binding <span class=\"synSpecial\">(</span>binding-in-frame var frame<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> binding\n        <span class=\"synSpecial\">(</span>pattern-match <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> dat frame<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>extend var dat frame<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>何も問題ないように思えます．\ndefineなのになぜvarを探しているのかわかりません．<br/>\n散々迷って，このコードのvarを１つずつ変更していったところ，<br/>\n最後の行のextendの次のvarを探しているようでした．<br/>\nelse節なのになぜこんなところが評価されているんだと思いながらも，<br/>\nこの評価機のextendの定義を先に評価したところ，extend-if-consistentの評価も通りました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>のextendを調べてみると以下で見つかりました．</p>\n\n<p><a href=\"http://practical-scheme.net/gauche/man/gauche-refj_34.html\">Gauche &#x30E6;&#x30FC;&#x30B6;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9;: 4.13 &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;</a></p>\n\n<p>モジュールの継承で使われるので優先的に評価されているのでしょう．<br/>\nなのでこの部分は本文中のextendの定義を先に評価してから書くようにします．</p>\n\n","slug":"SICP 4.4.4 extend-if-consistentのエラー"},{"data":{"title":"SICP 問題 4.70","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n<p>本文中のadd-assertion!とadd-rules!のletの目的は何か．\n問題文のadd-assertion!ではダメな理由を述べよ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文中のadd-assertion!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-assertions THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n          <span class=\"synSpecial\">(</span>cons-stream assertion old-assertions<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 問題文のadd-assertion!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-assertion! assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>store-assertion-in-index assertion<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> THE-ASSERTIONS\n        <span class=\"synSpecial\">(</span>cons-stream assertion THE-ASSERTIONS<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>cons-streamはcarは評価し，cdrはdelayしてconsしている．<br/>\nそのため，問題文のadd-assertion!ではset!した時にassertionは評価されているが，THE-ASSERTIONSは評価されていない．   <br/>\nそれがTHE-ASSERTIONSに代入されるのでもともとのTHE-ASSERTIONSにアクセスできなくなる．  <br/>\nそれを防ぐために本文中のadd-assertion!とadd-rule!ではset!する前にletで古い値を保存している．</p>\n\n","slug":"SICP 問題 4.70"},{"data":{"title":"SICP 問題 4.69","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n<p>((great great grandson) adam Irad)のような質問ができるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>greatson-end ?x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>append-to-form ?u <span class=\"synSpecial\">(</span>grandson<span class=\"synSpecial\">)</span> ?x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">((</span>grandson<span class=\"synSpecial\">)</span> ?x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>grandson ?x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">((</span>great <span class=\"synSpecial\">.</span> ?rel<span class=\"synSpecial\">)</span> ?x ?y<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>greatson-end ?rel<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>son-of ?x ?z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>?rel ?z ?y<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.69"},{"data":{"title":"SICP 問題 4.68","published":"2016/01/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-reverse lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>lst lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>append-to-form <span class=\"synSpecial\">()</span> ?y ?y<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>append-to-form <span class=\"synSpecial\">(</span>?u <span class=\"synSpecial\">.</span> ?v<span class=\"synSpecial\">)</span> ?y <span class=\"synSpecial\">(</span>?u <span class=\"synSpecial\">.</span> ?z<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>append-to-form ?v ?y ?z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">))</span><span class=\"synError\">は当然成り立つ．</span>\n<span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> <span class=\"synError\">?zの関係で考える．</span>\n<span class=\"synError\">?zの末尾は</span><span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> something <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n<span class=\"synError\">somethingは残った?yをreverseしたものなので</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> ?y something<span class=\"synSpecial\">)</span>\n<span class=\"synError\">規則として書いてみると</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>append-to-form ?something ?x ?z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> ?y ?something<span class=\"synSpecial\">)))</span>\n\n<span class=\"synError\">実際にリストを入れて確かめてみる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n<span class=\"synError\">まず，appendで</span><span class=\"synSpecial\">(</span>append-to-form ?something <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span><span class=\"synError\">となる．</span>\n<span class=\"synError\">次の行で</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?something<span class=\"synSpecial\">)</span>\n<span class=\"synError\">appendに進み</span><span class=\"synSpecial\">(</span>append-to-form ?something2 <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> ?something<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?something2<span class=\"synSpecial\">)</span>\n<span class=\"synError\">appendにいき</span><span class=\"synSpecial\">(</span>append-to-form ?something3 <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> ?something2<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> ?something3<span class=\"synSpecial\">)</span>\n<span class=\"synError\">ひとつ目の定義から</span>\n?something3 <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>append-to-form ?something3 <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> ?something2<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n?something2 <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>append-to-form ?something2 <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> ?something<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n?something <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span>append-to-form ?something <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span><span class=\"synError\">なので</span>\n?z <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synError\">これでうまくいくはず．</span>\n\n<span class=\"synError\">次は逆を考えてみる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>append-to-form ?something ?x ?z<span class=\"synSpecial\">))</span>\n<span class=\"synError\">候補は</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))(</span>append-to-form <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synError\">ここで?x</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">()</span><span class=\"synError\">とすると</span>\n<span class=\"synError\">?somethingは</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> ?y <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synError\">ここで?z</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span><span class=\"synError\">と同じになるので無限ループになる．</span>\n<span class=\"synError\">他のルートから進んでもかならずこのパターンもチェックするので無限ループは避けられない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.68"},{"data":{"title":"SICP 問題 4.67","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n<p>フレームに質問の履歴をつけていく．  <br/>\n入力ストリームと出力ストリームの間で同じ質問(4.64でいう(outranked-by ?staff-person Boss)のような)があれば<br/>\nループしていると判断して処理を中止するようにする．</p>\n\n","slug":"SICP 問題 4.67"},{"data":{"title":"SICP 問題 4.66","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n<p>重複したものをアキュムレートしてしまうのでこのままでは使えないことがわかった．<br/>\n重複を削除するように変更すればよい．</p>\n\n","slug":"SICP 問題 4.66"},{"data":{"title":"SICP 問題 4.65","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>wheel ?person<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>supervisor ?middle-manager ?person<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>supervisor ?x ?middle-manager<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>wheelはまず?personにデータベースの先頭から人を束縛して，and以下を満たすかを試していく．<br/>\nなので<br/>\nBen -> Oliver -> X<br/>\nalyssa -> Ben -> Oliver<br/>\nFect -> Ben -> Oliver<br/>\nLem -> Ben -> Oliver<br/>\nLouis -> Alyssa Ben<br/>\nOliver -> X<br/>\nEben -> Oliver -> X<br/>\nRobert -> Eben -> Oliver<br/>\nDewitt -> Oliver -> X<br/>\nとなり，Wawrbucks Oliverが４回出力される．</p>\n\n","slug":"SICP 問題 4.65"},{"data":{"title":"SICP 問題 4.64","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>outranked-by ?staff-person ?boss<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>supervisor ?staff-person ?boss<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>outranked-by ?middle-manager ?boss<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>supervisor ?staff-person ?middle-manager<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>outranked-by <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> ?who<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>まずoutranked-byの?staff-personにBitdiddle Benが束縛される．<br/>\n次に(supervisor ?staff-person ?boss)でBitdiddle Benの上司が?bossに束縛される．これを仮にAとする．<br/>\nそしてoutranked-byが?bossがAとして?middle-managerを探す．※<br/>\nここから二周目．<br/>\nsupervisor行で?bossをAとして部下Bが?staff-personに束縛される．<br/>\nandのoutranked-byで?bossをAとして?middle-managerを探す．<br/>\n※印をつけたところ同じところを探し始めているのでここで無限ループに陥る．<br/>\n正しいoutranked-byは以下の通り．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>outranked-by ?staff-person ?boss<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>supervisor ?staff-person ?boss<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>supervisor ?staff-person ?middle-manager<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>outranked-by ?middle-manager ?boss<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.64"},{"data":{"title":"SICP 問題 4.63","published":"2016/01/17","tags":["scheme","SICP"]},"content":"\n<p>SはGの孫であるという規則の形式化</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?son son-of ?dad<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>son ?dad ?son<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>wife ?dad ?mam<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>son ?mam ?son<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?grandson grandson-of ?granddad<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>?parent son-of ?grandson<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>?grandson son-of ?parent<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.63"},{"data":{"title":"SICP 問題 4.62","published":"2016/01/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; last-pairに該当するルールを作る</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>last-pair? <span class=\"synSpecial\">(</span>?x <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">)</span> ?z<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>last-pair? ?y ?z<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>?x<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; ひとつ目の質問にマッチして</span>\n<span class=\"synComment\">;; ?x=3となるので</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; と出力されるはず．</span>\n\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> ?x<span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; まずふたつ目の質問にマッチする．</span>\n<span class=\"synComment\">;; ?y=1, ?z=(2 3).二行目で(last-pair (2 3) ?x)となる．</span>\n<span class=\"synComment\">;; 次にまた二つ目の質問にマッチ．</span>\n<span class=\"synComment\">;; ?y=2,?z=(3).二行目で(last-pair (3) ?x)</span>\n<span class=\"synComment\">;; ひとつ目の質問にマッチ．(last-pair (3) (3))</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> ?x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; まず二つ目の質問にマッチする．</span>\n<span class=\"synComment\">;; ?y=2, ?z=?x, ?x=3.</span>\n<span class=\"synComment\">;; ２行目で(last-pair ?x (3))となる．</span>\n<span class=\"synComment\">;; 実装がわからないのでここから想像．</span>\n<span class=\"synComment\">;; まずひとつ目の質問を評価機は試す．</span>\n<span class=\"synComment\">;; すると(last-pair (3) (3))になる．</span>\n<span class=\"synComment\">;; 次に二つ目の質問を試す．</span>\n<span class=\"synComment\">;; すると(last-pair (?x . ?y) (3))かつ(last-pair ?y (3))</span>\n<span class=\"synComment\">;; なのでどの組み合わせを試しても成り立つ．</span>\n<span class=\"synComment\">;; ここで無限ループになる．</span>\n<span class=\"synComment\">;; 仮にすべての組み合わせを試して，それに対して</span>\n<span class=\"synComment\">;; 二行目の質問もさらにすべての組み合わせに対して成り立つ．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.62"},{"data":{"title":"SICP 問題 4.61","published":"2016/01/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 先頭の２つの隣接関係</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?x next-to ?y in <span class=\"synSpecial\">(</span>?x ?y <span class=\"synSpecial\">.</span> ?u<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; リストのcdrの隣接関係</span>\n<span class=\"synComment\">;; (1 2 3 4 5)だとvが1,zが(2 3 4 5).２行目で，zに対してもnext-toをやると読める．</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>?x next-to ?y in <span class=\"synSpecial\">(</span>?v <span class=\"synSpecial\">.</span> ?z<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>?x next-to ?y in ?z<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>?x next-to ?y in <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> next-to <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> next-to <span class=\"synConstant\">4</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 質問</span>\n<span class=\"synSpecial\">(</span>?x next-to <span class=\"synConstant\">1</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> next-to <span class=\"synConstant\">1</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> next-to <span class=\"synConstant\">1</span> in <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.61"},{"data":{"title":"SICP 問題 4.60","published":"2016/01/16","tags":["scheme","SICP"]},"content":"\n<p>最初の質問をすると近くに住む人の対になるので２つずつ表示される．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>lives-near ?person-1 ?person2<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 例</span>\n<span class=\"synSpecial\">(</span>lives-near <span class=\"synSpecial\">(</span>Hacker Alyssa P<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>Fect Cy D<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>lives-near <span class=\"synSpecial\">(</span>Fect Cy D<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>Hacker Alyssa P<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを防ぐために各人にIDを割り振る．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 例</span>\n<span class=\"synSpecial\">(</span>id <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; そしてlives-nearをidの若いほうから表示するように書き換える</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>lives-near? ?person-1 ?person-2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>address ?person-1 <span class=\"synSpecial\">(</span>?town <span class=\"synSpecial\">.</span> ?rest-1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>address ?person-2 <span class=\"synSpecial\">(</span>?town <span class=\"synSpecial\">.</span> ?rest-2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>same ?person-1 ?person-2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>id ?person1 ?id1<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>id ?person2 ?id2<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>lisp-value <span class=\"synIdentifier\">&lt;</span> ?id1 ?id2<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.60"},{"data":{"title":"SICP 問題 4.59","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>meeting accounting <span class=\"synSpecial\">(</span>Monday <span class=\"synError\">9am</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting administration <span class=\"synSpecial\">(</span>Monday <span class=\"synError\">10am</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting computer <span class=\"synSpecial\">(</span>Wednesday <span class=\"synError\">3pm</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting administration <span class=\"synSpecial\">(</span>Friday <span class=\"synError\">1pm</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>meeting whole-company <span class=\"synSpecial\">(</span>Wednesday <span class=\"synError\">4pm</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; a 金曜の朝に今日ある会議をすべて質問する</span>\n<span class=\"synSpecial\">(</span>meeting ?all <span class=\"synSpecial\">(</span>Friday ?time<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b ある人の会議は，全社会議とその人の部門会議をすべて含む</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>meeting-time ?person ?day-and-time<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>meeting whole-company ?day-and-time<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person <span class=\"synSpecial\">(</span>?division <span class=\"synSpecial\">.</span> ?rest<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>meeting ?division ?day-and-time<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; c Alyssaが水曜に会議の時間を質問する</span>\n<span class=\"synSpecial\">(</span>meeting-time <span class=\"synSpecial\">(</span>Hacker Alyssa P<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>Wednesday ?time<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.59"},{"data":{"title":"SICP 問題 4.58","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>ある人が，自分の勤める部署に勤める監督者がいない場合，その人をbig shotであるとする規則を定義する</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>big-shot ?person<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person <span class=\"synSpecial\">(</span>?division <span class=\"synSpecial\">.</span> rest<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>supervisor ?person ?boss<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>job ?boss <span class=\"synSpecial\">(</span>?boss-division <span class=\"synSpecial\">.</span> rest2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>same ?division ?boss-division<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.58"},{"data":{"title":"SICP 問題 4.57","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; jiroの仕事をtaroができるかどうか</span>\n<span class=\"synSpecial\">(</span>rule <span class=\"synSpecial\">(</span>replacible ?person1 ?person2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person2 ?job2<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>job ?person1 ?job2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;person2とperosn1の仕事が同じ</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person1 ?job1<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>can-do-job ?job1 ?job2<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;person1はperson2の仕事job2もできる</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>same ?person1 ?person2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; a Cy D. Fectに代われる人すべて</span>\n<span class=\"synSpecial\">(</span>replacible ?person <span class=\"synSpecial\">(</span>Fect Cy D<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>salary ?person ?salary<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>replacible ?person ?somebody<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>salary ?somebody ?somebody-salary<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>lisp-value <span class=\"synIdentifier\">&gt;</span> ?somebody-salary ?salary<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.57"},{"data":{"title":"SICP 問題 4.56","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 合成質問を形成する</span>\n<span class=\"synComment\">;; a Ben Bitdiddleが監督している人すべての名前とその住所</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>supervisor ?x <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>address ?x ?y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b Ben Bitdiddleより給料が少ない人と，Ben Bitdiddleの給料</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>salary <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">)</span> ?Ben-amount<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>salary ?person ?amount<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>lisp-value <span class=\"synIdentifier\">&gt;</span> ?Ben-amount ?amount<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; c 計算機部門にいない人が監督している人すべてと，その監督者の名前と担当．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>job ?person ?type<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>job ?person <span class=\"synSpecial\">(</span>computer <span class=\"synSpecial\">.</span> ?rest<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>supervisor ?person ?supervisor<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.56"},{"data":{"title":"SICP 問題 4.55","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>データベースへの単純質問を示せ</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a Ben Bitiddleに監督されているすべての人々</span>\n<span class=\"synSpecial\">(</span>supervisor ?x <span class=\"synSpecial\">(</span>Bitdiddle Ben<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b 経理部門のすべての人々の名前と担当</span>\n<span class=\"synSpecial\">(</span>job ?x <span class=\"synSpecial\">(</span>accounting <span class=\"synSpecial\">.</span> ?type<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; c Slumervilleに住む人すべての名前と住所</span>\n<span class=\"synSpecial\">(</span>address ?x <span class=\"synSpecial\">(</span>Slumerville <span class=\"synSpecial\">.</span> ?y<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.55"},{"data":{"title":"SICP 問題 4.54","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>requireを特殊形式で実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>require? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>require<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>require-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>require? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-require <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if-fail? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if-fail <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-require <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>require-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>pproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred-value fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>true? pred-value<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>fail2<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok fail2<span class=\"synSpecial\">)))</span>\n             fail<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>an-element-of items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">3</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; There are no more values of</span>\n<span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.54"},{"data":{"title":"SICP 問題 4.53","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>permanent-set!でpairsに成功する組み合わせを束縛するが，<br/>\n(amb)で必ず失敗するので全ての成功する組み合わせをpairsに束縛する．<br/>\n失敗継続が呼ばれ，if-failの第二引数のpairsが評価される．<br/>\nこの時permanent-set!で束縛されているのでバックトラックで戻らず，今まで代入した成功パターンすべてが表示される．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span>  <span class=\"synSpecial\">((</span>pairs <span class=\"synSpecial\">'()))</span>\n  <span class=\"synSpecial\">(</span>if-fail <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>p <span class=\"synSpecial\">(</span>prime-sum-pair <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">20</span> <span class=\"synConstant\">35</span> <span class=\"synConstant\">110</span><span class=\"synSpecial\">))))</span>\n             <span class=\"synSpecial\">(</span>permanent-set! pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> p pairs<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>amb<span class=\"synSpecial\">))</span>\n           pairs<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">8</span> <span class=\"synConstant\">35</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">110</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.53"},{"data":{"title":"SICP 問題 4.52","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>利用者が失敗を捉えることができるif-failを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if-fail? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if-fail <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-fail? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if-fail<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-if-fail <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>fail-proc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>proc env succeed\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n              <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>user-print <span class=\"synSpecial\">(</span>fail-proc env succeed fail<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>if-fail <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> x<span class=\"synSpecial\">))</span>\n           x<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">'</span>all-odd<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">'</span>all-odd\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>if-fail <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> x<span class=\"synSpecial\">))</span>\n           x<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">'</span>all-odd<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">8</span>\n</pre>\n\n\n","slug":"SICP 問題 4.52"},{"data":{"title":"SICP 問題 4.51","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>バックトラックで戻らないpermanent-set!の実装</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; permanent-set!</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>vproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>vproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val fail2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok\n                          fail2<span class=\"synSpecial\">))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>permanent-set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>permanent-assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-permanent-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>permanent-set! count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x y<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y count<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a c <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>b a <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>permanent-set!のかわりにset!を使うと</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x y<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y count<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>a c <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synSpecial\">(</span>b a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>バックトラックで代入が元に戻るのでカウントが増えていかなくなる．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.51"},{"data":{"title":"SICP 問題 4.50","published":"2016/01/15","tags":["scheme","SICP"]},"content":"\n<p>ランダムな順に探すrambを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use srfi-27<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>random-car lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list-ref</span> lst <span class=\"synSpecial\">(</span>random-integer <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rember item lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>rember item <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-next choices<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> choices<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fail<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> choices<span class=\"synSpecial\">)</span> env succeed <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                                         <span class=\"synSpecial\">(</span>try-next <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> choices<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">(</span>try-next cprocs<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-next choices<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> choices<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fail<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>random-car choices<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>first env succeed <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                                   <span class=\"synSpecial\">(</span>try-next <span class=\"synSpecial\">(</span>rember first choices<span class=\"synSpecial\">)))))))</span>\n      <span class=\"synSpecial\">(</span>try-next cprocs<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>ramb<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; Amb-Eval input:</span>\n<span class=\"synSpecial\">(</span>ramb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; Starting a new problem</span>\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">6</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">5</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; Amb-Eval input:</span>\ntry-again\n\n<span class=\"synComment\">;;; Amb-Eval value:</span>\n<span class=\"synConstant\">4</span>\n</pre>\n\n\n","slug":"SICP 問題 4.50"},{"data":{"title":"SICP 4.3 amb評価器","published":"2016/01/14","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; eval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ambeval <span class=\"synIdentifier\">exp</span> env succeed fail<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env succeed fail<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>ramb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-ramb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>amb? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>amb<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>succeed <span class=\"synIdentifier\">exp</span> fail<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>qval <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>succeed qval fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n             fail<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>vproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>vproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>old-value <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                            <span class=\"synSpecial\">(</span>set-variable-value! var\n                                                 old-value\n                                                 env<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>fail2<span class=\"synSpecial\">)))))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>var <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>vproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>vproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'</span>ok fail2<span class=\"synSpecial\">))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; (succeed (analyze exp) fail)という形になる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>cproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>aproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>pproc env\n             <span class=\"synComment\">;; pred-valueを得るための</span>\n             <span class=\"synComment\">;; 術後の評価の成功継続</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred-value fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? pred-value<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>cproc env succeed fail2<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>aproc env succeed fail2<span class=\"synSpecial\">)))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>vars <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>bproc <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span>make-procedure vars bproc env<span class=\"synSpecial\">)</span>\n               fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 本文のanalyze-sequence</span>\n<span class=\"synComment\">;; loopからsequentiallyの流れ．</span>\n<span class=\"synComment\">;; (lambda (env) (p1 env) (p2 env))</span>\n<span class=\"synComment\">;; (lambda (ENV) ((lambda (env) (p1 env) (p2 env)) ENV) (p3 env))</span>\n<span class=\"synComment\">;; (lambda (ENV) (p1 ENV) (p2 ENV) (p3 ENV))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-sequence exps<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequentially a b<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>a env\n         <span class=\"synComment\">;; aを呼び出すときの成功継続</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a-value fail2<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>b env succeed fail2<span class=\"synSpecial\">))</span>\n         <span class=\"synComment\">;; aを呼び出すときの失敗継続</span>\n         fail<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop first-proc rest-procs<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span>\n        first-proc\n        <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest-procs<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest-procs<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>procs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze exps<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> procs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Empty sequence: ANALYZE&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pproc <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>aprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>pproc env\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc fail2<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>get-args aprocs\n                         env\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>args fail3<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>execute-application\n                            proc args succeed fail3<span class=\"synSpecial\">))</span>\n                         fail2<span class=\"synSpecial\">))</span>\n             fail<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-args aprocs env succeed fail<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> aprocs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">'()</span> fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> aprocs<span class=\"synSpecial\">)</span> env\n       <span class=\"synComment\">;; このaprocの成功継続</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>arg fail2<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>get-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> aprocs<span class=\"synSpecial\">)</span>\n                   env\n                   <span class=\"synComment\">;; get-argsの再帰呼び出しの成功継続</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>args fail3<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> arg args<span class=\"synSpecial\">)</span>\n                              fail3<span class=\"synSpecial\">))</span>\n                   fail2<span class=\"synSpecial\">))</span>\n       fail<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute-application proc args succeed fail<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>succeed <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n                  fail<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? proc<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">((</span>procedure-body proc<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>procedure-parameters proc<span class=\"synSpecial\">)</span>\n                             args\n                             <span class=\"synSpecial\">(</span>procedure-environment proc<span class=\"synSpecial\">))</span>\n         succeed\n         fail<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synConstant\">&quot;Unknown procedure type -- EXECUTE-APPLICATION&quot;</span> proc<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-amb <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cprocs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze <span class=\"synSpecial\">(</span>amb-choices <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env succeed fail<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-next choices<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> choices<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>fail<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> choices<span class=\"synSpecial\">)</span> env succeed <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                                         <span class=\"synSpecial\">(</span>try-next <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> choices<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">(</span>try-next cprocs<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; 自己評価式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">string?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変数</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; クオート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>define<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮パラメタ</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;本体</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; (define (def-body-list proc-body)</span>\n<span class=\"synComment\">;;   (let iter ((proc-body proc-body)</span>\n<span class=\"synComment\">;;              (def '())</span>\n<span class=\"synComment\">;;              (body '()))</span>\n<span class=\"synComment\">;;     (cond ((null? proc-body) (cons (reverse def) (reverse body)))</span>\n<span class=\"synComment\">;;           ((definition? (car proc-body)) (iter (cdr proc-body)</span>\n<span class=\"synComment\">;;                                                (cons (car proc-body) def)</span>\n<span class=\"synComment\">;;                                                body))</span>\n<span class=\"synComment\">;;           (else (iter (cdr proc-body)</span>\n<span class=\"synComment\">;;                       def</span>\n<span class=\"synComment\">;;                       (cons (car proc-body) body))))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                                 body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                        def\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body body<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>def-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>body-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> def-list<span class=\"synSpecial\">)</span>\n        body\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                             def-list<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                       <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                     def-list<span class=\"synSpecial\">)</span>\n                                body-list<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; if</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-if predicate consequent alternative<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if predicate consequent alternative<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; begin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>begin<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-exp aseq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequence-&gt;exp seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">)</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>begin seq<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; 任意の合成式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-operands? ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-operand ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-operands ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 派生式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>cond<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-else-clause? clause<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>else<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clause<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-actions clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clause<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last -- COND-&gt;IF&quot;</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>action <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if predicate\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; named-let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 術後のテスト</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 手続きの表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters body env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-procedure? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>procedure<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-parameters p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-body p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-environment p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 環境に対する操作</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-environment <span class=\"synSpecial\">'())</span>\n\n<span class=\"synComment\">;; フレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> val <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変数を値に対応づける新しいフレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span> var<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable -- SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 環境</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>list <span class=\"synIdentifier\">list</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>not <span class=\"synIdentifier\">not</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>primitive<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> apply-in-underlying-scheme <span class=\"synIdentifier\">apply</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; Amb-Eval input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; Amb-Eval value:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>internal-loop try-again<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> input <span class=\"synSpecial\">'</span>try-again<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>try-again<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;;;; Starting a new problem &quot;</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>ambeval input\n                     the-global-environment\n                     <span class=\"synComment\">;; ambeval 成功</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>val next-alternative<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>user-print val<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>internal-loop next-alternative<span class=\"synSpecial\">))</span>\n                     <span class=\"synComment\">;; ambeval 失敗</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                       <span class=\"synSpecial\">(</span>announce-output <span class=\"synConstant\">&quot;;;; There are no more values of&quot;</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>user-print input<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)))))))</span>\n  <span class=\"synSpecial\">(</span>internal-loop\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;;;; There is no current problem&quot;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>announce-output <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>user-print object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>compound-procedure? object<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure\n                     <span class=\"synSpecial\">(</span>procedure-parameters object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>procedure-body object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">'</span><span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> object<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 4.3 amb評価器"},{"data":{"title":"SICP 問題 4.49","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%B8%C0%B8%EC\">自然言語</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>用プログラムを少し改造するだけで文章の生成ができる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>an-element-of items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-word word-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> word-list<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>an-element-of <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> word-list<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>generate-sentence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>parse-sentence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.49"},{"data":{"title":"SICP 問題 4.48","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p>adjectiveのみ追加する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 冠詞の解析をparse-article-phraseにしてそこでmaybe-extendに進めばadjectiveも解析されるようにする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-simple-noun-phrase<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>simple-noun-phrase\n        <span class=\"synSpecial\">(</span>parse-article-phrase<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>parse-word nouns<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-article-phrase<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>maybe-extend article-phrase<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>amb article-phrase\n         <span class=\"synSpecial\">(</span>maybe-extend <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>article-phrase\n                             article-phrase\n                             <span class=\"synSpecial\">(</span>parse-adjective-phrase<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>maybe-extend <span class=\"synSpecial\">(</span>parse articles<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.48"},{"data":{"title":"SICP 問題 4.47","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse-verb-phrase<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">(</span>parse-word verbs<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>verb-phrase\n             <span class=\"synSpecial\">(</span>parse-verb-phrase<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>parse-prepositional-phrase<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><code>(parse '(the student with the cat sleeps in the class))</code>これを例に考える．<br/>\nverbが問題なのでsleeps in the classだけに絞る．\nこれは</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>verb-phrase\n <span class=\"synSpecial\">(</span>verb sleeps<span class=\"synSpecial\">)</span>\n <span class=\"synSpecial\">(</span>prep-phrase <span class=\"synSpecial\">(</span>prep in<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>simple-noun-phrase\n               <span class=\"synSpecial\">(</span>article the<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>noun class<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>となってほしい．<br/>\nまず(parse-word verbs)が評価され<em>unparsed</em>はcdrがset!されて(list verb sleeps)が返る．<br/>\n<em>unparsed</em>はまだ残っているので(parse input)の(require (null? <em>unparsed</em>))で失敗して次にいく．<br/>\n次はparse-verb-phraseなのでまた(parse-word verbs)を評価する．  <br/>\nしかし，<em>unparsed</em>に入っているのはinなので失敗する．<br/>\nそうするとambの次の要素にいくのでまたparse-verb-phraseを評価する．<br/>\n同じく失敗する．このまま無限ループに入って終了しない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (parse input)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parse input<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*unparsed*</span> input<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>sent <span class=\"synSpecial\">(</span>parse-sentence<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synConstant\">*unparsed*</span><span class=\"synSpecial\">))</span>\n    sent<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.47"},{"data":{"title":"SICP 問題 4.46","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>器が右から左に非<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>を評価する時<br/>\nperse-noun-phrase中の</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>amb noun-phrase\n     <span class=\"synSpecial\">(</span>maybe-extend <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>noun-phrase noun-phrase\n                         <span class=\"synSpecial\">(</span>parse-prepositional-phrase<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>で，maybe-extendが先に評価されてしまう．<br/>\nすると，実際に名詞が先にきた場合はmaybe-extendは失敗する．<br/>\n次のnoun-phraseで成功して処理が終わる．<br/>\n名詞の後ろに前置詞がきてる場合はそこの解析は行われない．<br/>\n　<br/>\nそのためamb評価器は左から右へ評価していく必要が有る．</p>\n\n","slug":"SICP 問題 4.46"},{"data":{"title":"SICP 問題 4.45","published":"2016/01/13","tags":["scheme","SICP"]},"content":"\n<p>The professor lectures to the student in the class with the cat.</p>\n\n<p>これの５通りの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>結果を示す．\nまずはprofessor に in the class とwith the cat が掛かっている場合．\n次はprofessorにwith the cat , student にin the classがかかっている場合．\n次はstudentにin the classとwith the catがかかっている場合．\n次はprofessorにin the classがかかって，そのclassにwith the catがかかっている場合．\n最後はstudentにin the classがかかり，classにwith the catがかかっている場合．</p>\n\n","slug":"SICP 問題 4.45"},{"data":{"title":"OS X Yosemiteにswank-gaucheのインストール","published":"2016/01/13","tags":["emacs","gauche","scheme"]},"content":"\n<p>きっかけは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>．\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/wat_aro\">@wat_aro</a> どの処理系使ってるかわからないですが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>のswank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>みたいに対応されてたりしませんか？</p>&mdash; <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/lisp\">lisp</a>ドラッグ常習者 (@rayfill) <a href=\"https://twitter.com/rayfill/status/686955833373032449\">2016, 1月 12</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>早速インストール．\nREADMEに</p>\n\n<blockquote><ul>\n<li>設定方法</li>\n</ul>\n\n\n<p>`dot<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/.emacs\">.emacs</a>'の内容を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/.emacs\">.emacs</a>にコピーしてswank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>へのパスの情報を設定します。\n以下の二つの変数を設定してください。</p>\n\n<p> swank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-path:\n swank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>.scmが格納されているディレクトリへのパス</p>\n\n<p> swank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-source-path:\n <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>のソースを持っていて、かつ、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>済の場合、ソースのトップディレク\n トリへのパスを設定して下さい。マニュアルに定義されているオペレータの\n 引数の名前がルックアップ出来るようになります。</p></blockquote>\n\n<p>とあるので</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synComment\">;; swank-gaucheを使うためのSLIME設定</span>\n<span class=\"synComment\">;;</span>\n<span class=\"synComment\">;;(push &quot;&lt;path-to-slime-dir&gt;&quot; load-path)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">slime</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>slime-setup\n <span class=\"synSpecial\">'(</span>slime-fancy\n   slime-scheme<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; swank-gauche.scmが格納されているディレクトリへのパスを設定して下さい。</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> swank-gauche-path <span class=\"synConstant\">&quot;/usr/local/Cellar/swank-gauche-master&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; Gaucheのソースを持っていて、かつ、コンパイル済の場合、ソースのトップ</span>\n<span class=\"synComment\">;; ディレクトリへのパスを設定して下さい。Gaucheのマニュアルに記載されている</span>\n<span class=\"synComment\">;; オペレータの引数名がルックアップ出来るようになります。</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> swank-gauche-gauche-source-path <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/Gauche&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">push</span> swank-gauche-path load-path<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">swank-gauche</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> slime-lisp-implementations\n      <span class=\"synSpecial\">'((</span>gauche <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;gosh&quot;</span><span class=\"synSpecial\">)</span> :init gauche-init :coding-system utf-8-unix<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; バッファのモジュールを決定するための設定</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> slime-find-buffer-package-function <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">find-gauche-package</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; c-p-c補完に設定</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">setq</span> slime-complete-symbol-function <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">slime-complete-symbol*</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; web上のGaucheリファレンスマニュアルを引く設定</span>\n<span class=\"synSpecial\">(</span>define-key slime-mode-map <span class=\"synSpecial\">(</span>kbd <span class=\"synConstant\">&quot;C-c C-d H&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">gauche-ref-lookup</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>って感じにコピペ&amp;二箇所変数設定．<br/>\nslimeは既に導入しているので&lt;path-to slime-directory>は省略．  　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>のソースはどこにおけばいいのかわからなかったので<code>/usr/local/Cellar/gauche/</code>にgit clone．<br/>\n　<br/>\nいざ，<code>M-x gauche</code></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(begin (add-load-path &#34;/usr/local/Cellar/swank-gauche-master&#34;)\n(require &#34;swank-gauche&#34;) (with-module swank-gauche \n(load-gauche-operator-args &#34;/usr/local/Cellar/gauche/Gauche&#34;) (start-swank &#34;/var/folders/lf/bt7rfh5s1wxgfnmwhx755vtw0000gn/T/slime.2035&#34;)))\n\n*** SYSTEM-ERROR: couldn&#39;t open input file: \n&#34;/usr/local/Cellar/gauche/Gauche/doc/gauche-refe.texi&#34;: No such file or directory\nStack Trace:\n_______________________________________\n  0  (grep &#34;^@defun|^@defmac|^@defspec|^@deffn&#34; gauche-refe-path (lambd\n        At line 558 of &#34;/usr/local/Cellar/swank-gauche-master/swank-gauche.scm&#34;\n  1  (load-gauche-operator-args &#34;/usr/local/Cellar/gauche/Gauche&#34;)\n        At line 1 of &#34;(standard input)&#34;\n\nProcess inferior-lisp exited abnormally with code 70</pre>\n\n\n<p>エラーですね．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>のソースのファイル名を見てみると，<code>Gauche/doc/gauche-ref.texi</code>となっていました．<br/>\nswank-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>.scmの該当箇所を修正．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>load-gauche-operator-args gauche-source-path<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>when <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>elisp-false? gauche-source-path<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>load-operator-args <span class=\"synError\">#`</span><span class=\"synConstant\">&quot;,|gauche-source-path|/doc/gauche-ref.texi&quot;</span><span class=\"synSpecial\">)))</span>\n<span class=\"synComment\">;; (load-operator-args #`&quot;,|gauche-source-path|/doc/gauche-refe.texi&quot;) &lt;=変更前</span>\n</pre>\n\n\n<p>これで無事に動いた．</p>\n\n","slug":"OS X Yosemiteにswank-gaucheのインストール"},{"data":{"title":"SICP 問題 4.44","published":"2016/01/12","tags":["scheme","SICP"]},"content":"\n<p>eight-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/queen\">queen</a>をamb評価器を用いて解く．<br/>\nただし，まだamb評価器は実装していないのでコードだけ．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eight-queen<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cross? a b<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> b<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> b<span class=\"synSpecial\">))))</span>\n       <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>chess <span class=\"synSpecial\">(</span>iota <span class=\"synConstant\">8</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>two <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? two one<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>three <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distince <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? three x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>four <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">4</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? four x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>five <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? five x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>six <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">6</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? six x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>seven <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">7</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n                  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? seven x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>eight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">8</span> <span class=\"synSpecial\">(</span>amb chess<span class=\"synSpecial\">))))</span>\n                    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span>lsit one two three four five six seven eight<span class=\"synSpecial\">)))</span>\n                    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>cross? eight x<span class=\"synSpecial\">))</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven<span class=\"synSpecial\">)))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> one two three four five six seven eight<span class=\"synSpecial\">)))))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.44"},{"data":{"title":"SICP 問題 4.43","published":"2016/01/12","tags":["scheme","SICP"]},"content":"\n<p>まずは素直に問題文に出てくる通りに書いてみる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>kansas-state-enginner<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>moore <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>downing <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>hall <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>barnacle-hood <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>parker <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>daughter <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>yacht <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>father-list moore hall downing barnacle-hood parker<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? father-list<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>yacht x<span class=\"synSpecial\">)))</span> y<span class=\"synSpecial\">))</span>\n                     <span class=\"synConstant\">#t</span> father-list<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter moore<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>mary<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht barnacle-hood<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>gabrielle<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht moore<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>Lorna<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht hall<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>rosalind<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht downing<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter barnacle-hood<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter parker<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>yocht <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>gabrielle<span class=\"synSpecial\">))</span>\n                                        father-list<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>moore moore <span class=\"synSpecial\">'</span>downing downing <span class=\"synSpecial\">'</span>hall hall <span class=\"synSpecial\">'</span>barnacle-hood barnacle-hood <span class=\"synSpecial\">'</span>parker parker<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>次はこれを効率的になるように並び替える．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>kansas-state-enginner<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>moore <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>daughter <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>yacht <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter moore<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>mary<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht moore<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>Lorna<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>downing <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> moore downing<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht downing<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter downing<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>yocht downing<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>hall <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> moore downing hall<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter hall<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>yocht hall<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht hall<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>rosalind<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>barnacle-hood <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? moore downing hall barnacle-hood<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter barnacle-hood<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>yocht barnacle-hood<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter barnacle-hood<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>yocht barnacle-hood<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>gabrielle<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>parker <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>amb <span class=\"synSpecial\">'</span>mary <span class=\"synSpecial\">'</span>gabrielle <span class=\"synSpecial\">'</span>lorna <span class=\"synSpecial\">'</span>rosalind <span class=\"synSpecial\">'</span>melissa<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> moore downing hall barnacle-hood parker<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter parker<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>yocht parker<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter parker<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>yocht <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>daughter x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>gabrielle<span class=\"synSpecial\">))</span>\n                                        father-list<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>moore moore <span class=\"synSpecial\">'</span>downing downing <span class=\"synSpecial\">'</span>hall hall <span class=\"synSpecial\">'</span>barnacle-hood barnacle-hood <span class=\"synSpecial\">'</span>parker parker<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.43"},{"data":{"title":"SICP 問題 4.42","published":"2016/01/12","tags":["scheme","SICP"]},"content":"\n<p>どちらかが正しいってどうやればいいのか思いつけず，<br/>\nここを見たらヒントがあったのでその通り<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C7%D3%C2%BE%C5%AA%CF%C0%CD%FD%CF%C2\">排他的論理和</a>を作って解きました．</p>\n\n<p><a href=\"http://kinokoru.jp/archives/711\">SICP &#x7B2C;4&#x7AE0; Exercise &#x96E3;&#x6613;&#x5EA6;&#x30EA;&#x30B9;&#x30C8; ( 4.1 &#xFF5E; 4.79 ) | &#x304D;&#x306E;&#x3053;&#x308B;&#x5EAD;</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>xor x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> y<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>phillips1934<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>betty <span class=\"synSpecial\">(</span>first x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>ethel <span class=\"synSpecial\">(</span>second x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>joan <span class=\"synSpecial\">(</span>third x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>kitty <span class=\"synSpecial\">(</span>fourth x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>mary <span class=\"synSpecial\">(</span>fifth x<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span>\n               <span class=\"synSpecial\">(</span>xor <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> kitty <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> betty <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>xor <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> ethel <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> joan <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>xor <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> joan <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> ethel <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>xor <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> kitty <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> mary <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>xor <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> mary <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> betty <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>permutations <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>実行</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>phillips1934<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.42"},{"data":{"title":"SICP 問題 4.41","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n<p>多住居手続きを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>で実装．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use util.combinations<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>use srfi-1<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiple-dwelling<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>baker <span class=\"synSpecial\">(</span>first x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>cooper <span class=\"synSpecial\">(</span>second x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>fletcher <span class=\"synSpecial\">(</span>third x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>miller <span class=\"synSpecial\">(</span>fourth x<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>smith <span class=\"synSpecial\">(</span>fifth x<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> baker <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> cooper <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> fletcher <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> fletcher <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> cooper miller<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> smith fletcher<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> fletcher cooper<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n          <span class=\"synSpecial\">(</span>permutations <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.41"},{"data":{"title":"SICP 問題 4.40","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n<p>人の階への割り当ての組みは，相異なるという要求の前では5<sup>5</sup>通りある．  <br/>\n要求の後では5!通りになる．  <br/>\n　<br/>\nambで生成してすぐにテストすることで効率的な手続き</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiple-dwelling<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>baker <span class=\"synSpecial\">(</span>amb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> baker <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cooper <span class=\"synSpecial\">(</span>amb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> cooper <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> baker cooper<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>fletcher <span class=\"synSpecial\">(</span>amb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> fletcher <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> fletcher <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> fletcher cooper<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> baker cooper fletcher<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>miller <span class=\"synSpecial\">(</span>amb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> cooper miller<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> baker cooper fletcher miller<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smith <span class=\"synSpecial\">(</span>amb <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> smith fletcher<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span>distinct? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> baker cooper fletcher miller smith<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>baker baker<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cooper cooper<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>fletcher fletcher<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>miller miller<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>lsit <span class=\"synSpecial\">'</span>smith smith<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.40"},{"data":{"title":"SICP 問題 4.39","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n<p>制限の順番は解には影響しないが，その時間には影響する．<br/>\n失敗が多い制限ほど先にテストするほうが実行速度は速くなる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>;; 本来のmultiple-dwelling\n(define (multiple-dwelling)\n  (let ((baker (amb 1 2 3 4 5))\n        (cooper (amb 1 2 3 4 5))\n        (fletcher (amb 1 2 3 4 5))\n        (miller (amb 1 2 3 4 5))\n        (sith (amb 1 2 3 4 5)))\n    (require (distinct (list baker cooper fletcher miller smith)))\n    (require (not (= baker 5)))\n    (require (not (= cooper 1)))\n    (require (not (= fletcher 5)))\n    (require (not (= fletcher 1)))\n    (require (&lt; cooper miller))\n    (require (not (= (abs (- smith fletcher)) 1)))\n    (require (not (= (abs (- fletcher cooper)))))\n    (list (list &#39;baker baker)\n          (list &#39;cooper cooper)\n          (list &#39;fletcher fletcher)\n          (list &#39;miller miller)\n          (list &#39;smith smith))))\n\n;; 改良版\n(define (multiple-dwelling)\n  (let ((baker (amb 1 2 3 4 5))\n        (cooper (amb 1 2 3 4 5))\n        (fletcher (amb 1 2 3 4 5))\n        (miller (amb 1 2 3 4 5))\n        (sith (amb 1 2 3 4 5)))\n    (require (distinct (list baker cooper fletcher miller smith)))\n    (require (&lt; cooper miller))\n    (require (not (= (abs (- fletcher cooper)))))\n    (require (not (= (abs (- smith fletcher)) 1)))\n    (require (not (= fletcher 1)))\n    (require (not (= fletcher 5)))\n    (require (not (= baker 5)))\n    (require (not (= cooper 1)))\n    (list (list &#39;baker baker)\n          (list &#39;cooper cooper)\n          (list &#39;fletcher fletcher)\n          (list &#39;miller miller)\n          (list &#39;smith smith))))</pre>\n\n\n","slug":"SICP 問題 4.39"},{"data":{"title":"SICP 問題 4.38","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n<p>これを手で解けとな．．．<br/>\nB≠5<br/>\nC≠1<br/>\nF≠1<br/>\nF≠5<br/>\nC<M => C≠5<br/>\n|F-C| ≠ 1<br/>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20160111192206\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20160111/20160111192206.jpg\" alt=\"f:id:wat-aro:20160111192206j:image\" title=\"f:id:wat-aro:20160111192206j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span>\n答えは5通り．\n<div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.38"},{"data":{"title":"SICP 問題 4.37","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>a-pythagorean-triple-between low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>i <span class=\"synSpecial\">(</span>an-integer-between low high<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>hsq <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> high high<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>j <span class=\"synSpecial\">(</span>an-integer-between i high<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>ksq <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> i i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> j j<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> hsq ksq<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>k <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> ksq<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">integer?</span> k<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j k<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>これは元の手続きよりも効率的になっている．<br/>\ni,jについてはhigh以下の数について全数を探索するが，kはそれがないため探索数が減っている．</p>\n\n","slug":"SICP 問題 4.37"},{"data":{"title":"SICP 問題 4.36","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>a-pythagorean-triple-between low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>i <span class=\"synSpecial\">(</span>an-integer-between low high<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>j <span class=\"synSpecial\">(</span>an-integer-between i high<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>k <span class=\"synSpecial\">(</span>an-integer-between j high<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> i i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> j j<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k k<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j k<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; an-integer-stating-fromを使った場合</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>a-pythagorean-triple-from low<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>i <span class=\"synSpecial\">(</span>an-integer-starting-from low<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>j <span class=\"synSpecial\">(</span>an-integer-starting-from i<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>k <span class=\"synSpecial\">(</span>an-integer-starting-from j<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> i i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> j j<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k k<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j k<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>後者の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D4%A5%BF%A5%B4%A5%E9%A5%B9\">ピタゴラス</a>数の生成方法だとi->j->kの順番で整数が作られてrequireでテストされる．<br/>\nテストが失敗すれば直前の分岐に戻って別の道を選ぶのでこの場合kが変更され，+1される．  <br/>\n<code>(*k k)</code>の値が<code>(+ (* i i) (* j j))</code>の値をうわまった時，テストは常に失敗するが，新たなkが生成され続けこの手続きは止まらない．<br/>\n　<br/>\n前者であれば，kの値が増えていっても上限が決められているのでそこでjの値を変更する分岐に入ることができる．<br/>\nそのため後者のように止まらないという事態には陥らない．</p>\n\n","slug":"SICP 問題 4.36"},{"data":{"title":"SICP 問題 4.35","published":"2016/01/11","tags":["scheme","SICP"]},"content":"\n<p>二つの与えられた限界の間の整数を返す手続き</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>an-integer-between low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>require <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> low high<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>amb low <span class=\"synSpecial\">(</span>an-integer-between <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.35"},{"data":{"title":"SICP 問題 4.34","published":"2016/01/10","tags":["scheme","SICP"]},"content":"\n<p>遅延対とリストを正当に印字できるようにする．<br/>\nconsへのタグづけがどうしてもうまくいかなくてここを参考にしました．</p>\n\n<p><a href=\"https://wqzhang.wordpress.com/2010/04/21/sicp-exercise-4-34/\">SICP Exercise 4.34 | Weiqun Zhang&#39;s Blog</a></p>\n\n<p>前回からの変更箇所のみ</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>list-lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;list-lambda?とmake-list-procedureの追加</span>\n         <span class=\"synSpecial\">(</span>make-list-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                              env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 追加</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>list-lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-list-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>list-proc parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; list-procに対応</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-procedure? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>procedure<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>list-proc<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; cons,car,cdrを削除</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>newline <span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>display <span class=\"synIdentifier\">display</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n\n<span class=\"synComment\">;; list-procの時はlist-display</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>user-print object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>tagged-list? object <span class=\"synSpecial\">'</span>list-proc<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>list-display <span class=\"synSpecial\">(</span>match-to object<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? object<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure\n                        <span class=\"synSpecial\">(</span>procedure-parameters object<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>procedure-body object<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">'</span><span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> object<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 以下はlist-displayのための手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>match-to obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>match obj\n    <span class=\"synSpecial\">((</span>procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> body <span class=\"synSpecial\">((</span>parameters exp1 exp2<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> exp1 exp2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-list-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-display <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>list-display-iter <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-display-iter <span class=\"synIdentifier\">exp</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;...)&quot;</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>when <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;(&quot;</span><span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>continue-display <span class=\"synIdentifier\">exp</span> n<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>continue-display <span class=\"synIdentifier\">exp</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>first-list-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>second <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> second<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;)&quot;</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>self-evaluating? second<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> second<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; . &quot;</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> second<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;)&quot;</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; &quot;</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-display-iter <span class=\"synSpecial\">(</span>match-to second<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 遅延リスト用の手続き</span>\n<span class=\"synSpecial\">(</span>actual-value\n <span class=\"synSpecial\">'(</span>begin <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>cons x y<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>list-lambda <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>m x y<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>car z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>cdr z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> q<span class=\"synSpecial\">)))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>list-ref items n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>car items<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>list-ref <span class=\"synSpecial\">(</span>cdr items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>map proc items<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>null? items<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">'()</span>\n               <span class=\"synSpecial\">(</span>cons <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>car items<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>map proc <span class=\"synSpecial\">(</span>cdr items<span class=\"synSpecial\">)))))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>scale-list items factor<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>map <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* x factor<span class=\"synSpecial\">))</span>\n                items<span class=\"synSpecial\">))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>add-lists list1 list2<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>cond <span class=\"synSpecial\">((</span>null? list1<span class=\"synSpecial\">)</span> list2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">((</span>null? list2<span class=\"synSpecial\">)</span> list1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>else <span class=\"synSpecial\">(</span>cons <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>car list1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>car list2<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>add-lists <span class=\"synSpecial\">(</span>cdr list1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>cdr list2<span class=\"synSpecial\">))))))</span>\n         <span class=\"synSpecial\">(</span>define ones <span class=\"synSpecial\">(</span>cons <span class=\"synConstant\">1</span> ones<span class=\"synSpecial\">))</span>\n\n         <span class=\"synSpecial\">(</span>define integers <span class=\"synSpecial\">(</span>cons <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>add-lists ones integers<span class=\"synSpecial\">)))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>define int\n             <span class=\"synSpecial\">(</span>cons initial-value\n                   <span class=\"synSpecial\">(</span>add-lists <span class=\"synSpecial\">(</span>scale-list integrand dt<span class=\"synSpecial\">)</span>\n                              int<span class=\"synSpecial\">)))</span>\n           int<span class=\"synSpecial\">)</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>solve f y0 dt<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>define y <span class=\"synSpecial\">(</span>integral dy y0 dt<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>define dy <span class=\"synSpecial\">(</span>map f y<span class=\"synSpecial\">))</span>\n           y<span class=\"synSpecial\">)</span>\n\n\n         <span class=\"synSpecial\">)</span>\n the-global-environment<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\nones\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> ...<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>c <span class=\"synSpecial\">'</span>d<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c <span class=\"synSpecial\">.</span> d<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>c <span class=\"synSpecial\">'())))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\nintegers\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span> <span class=\"synConstant\">7</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">9</span> ...<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">'()</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">()</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(())</span>\n</pre>\n\n\n<p>以下がこの遅延評価器の全文</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use util.match<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>list-lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;list-lambda?とmake-list-procedureの追加</span>\n         <span class=\"synSpecial\">(</span>make-list-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                              env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; メモ化する評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;expをその値で置き換える</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>    <span class=\"synComment\">;;必要のなくなったenvを忘れる</span>\n           result<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-exp thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-env thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-value evaluated-thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> evaluated-thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foo bar<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>bar <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; apply</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-apply procedure arguments env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>primitive-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>apply-primitive-procedure\n          procedure\n          <span class=\"synSpecial\">(</span>list-of-arg-values arguments env<span class=\"synSpecial\">)))</span> <span class=\"synComment\">; changed</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence\n          <span class=\"synSpecial\">(</span>procedure-body procedure<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>procedure-parameters procedure<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>list-of-delayed-args arguments env<span class=\"synSpecial\">)</span> <span class=\"synComment\">; changed</span>\n                              <span class=\"synSpecial\">(</span>procedure-environment procedure<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown procedure type: APPLY&quot;</span> procedure<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-arg-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>list-of-arg-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-delayed-args exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>list-of-delayed-args <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 並び</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-variable-value! <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                       env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>define-variable!\n    <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n    env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 自己評価式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">string?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変数</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; クオート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quote obj<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>obj <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span>self-evaluating? obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>quote-&gt;cons obj<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-&gt;cons obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synSpecial\">(</span>make-quote <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> obj<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>quote-&gt;cons <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>define<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮パラメタ</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;本体</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>def-body-list proc-body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n             <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                               body<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                      def\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>list-lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-list-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>list-proc parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 4.17</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                                 body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                        def\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body body<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>def-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>body-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> def-list<span class=\"synSpecial\">)</span>\n        body\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-definition <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                    def-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                      def-list<span class=\"synSpecial\">)</span>\n                 body-list<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; if</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-if predicate consequent alternative<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if predicate consequent alternative<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; begin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>begin<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequence-&gt;exp seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">)</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>begin seq<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; 任意の合成式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-operands? ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-operand ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-operands ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 派生式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>cond<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-else-clause? clause<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>else<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clause<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-actions clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clause<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last -- COND-&gt;IF&quot;</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>action <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if predicate\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; and</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>and<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>true\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; or</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>or<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">'</span>true<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))))))))</span>\n\n\n<span class=\"synComment\">;; let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; named-let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 4.20</span>\n<span class=\"synComment\">;; 選択子</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 術後のテスト</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 手続きの表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-procedure? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>procedure<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>list-proc<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-parameters p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-body p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-environment p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 環境に対する操作</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-environment <span class=\"synSpecial\">'())</span>\n\n<span class=\"synComment\">;; フレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> val <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変数を値に対応づける新しいフレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span> var<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable -- SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>primitive<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>newline <span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>display <span class=\"synIdentifier\">display</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> apply-in-underlying-scheme <span class=\"synIdentifier\">apply</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 環境</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; M-Eval input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; M-Eval value:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>announce-output <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>user-print object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>tagged-list? object <span class=\"synSpecial\">'</span>list-proc<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>list-display <span class=\"synSpecial\">(</span>match-to object<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? object<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure\n                        <span class=\"synSpecial\">(</span>procedure-parameters object<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>procedure-body object<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">'</span><span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> object<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>match-to obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>match obj\n    <span class=\"synSpecial\">((</span>procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> body <span class=\"synSpecial\">((</span>parameters exp1 exp2<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> exp1 exp2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-list-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-display <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>list-display-iter <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-display-iter <span class=\"synIdentifier\">exp</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;...)&quot;</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>when <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;(&quot;</span><span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>continue-display <span class=\"synIdentifier\">exp</span> n<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>continue-display <span class=\"synIdentifier\">exp</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>first-list-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>second <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> second<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;)&quot;</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>self-evaluating? second<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> second<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; . &quot;</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> second<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;)&quot;</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; &quot;</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-display-iter <span class=\"synSpecial\">(</span>match-to second<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span>actual-value\n <span class=\"synSpecial\">'(</span>begin <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>cons x y<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>list-lambda <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>m x y<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>car z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>cdr z<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> q<span class=\"synSpecial\">)))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>list-ref items n<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>car items<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>list-ref <span class=\"synSpecial\">(</span>cdr items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>- n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>map proc items<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>null? items<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">'()</span>\n               <span class=\"synSpecial\">(</span>cons <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>car items<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>map proc <span class=\"synSpecial\">(</span>cdr items<span class=\"synSpecial\">)))))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>scale-list items factor<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>map <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>* x factor<span class=\"synSpecial\">))</span>\n                items<span class=\"synSpecial\">))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>add-lists list1 list2<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>cond <span class=\"synSpecial\">((</span>null? list1<span class=\"synSpecial\">)</span> list2<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">((</span>null? list2<span class=\"synSpecial\">)</span> list1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>else <span class=\"synSpecial\">(</span>cons <span class=\"synSpecial\">(</span>+ <span class=\"synSpecial\">(</span>car list1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>car list2<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>add-lists <span class=\"synSpecial\">(</span>cdr list1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>cdr list2<span class=\"synSpecial\">))))))</span>\n         <span class=\"synSpecial\">(</span>define ones <span class=\"synSpecial\">(</span>cons <span class=\"synConstant\">1</span> ones<span class=\"synSpecial\">))</span>\n\n         <span class=\"synSpecial\">(</span>define integers <span class=\"synSpecial\">(</span>cons <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>add-lists ones integers<span class=\"synSpecial\">)))</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>define int\n             <span class=\"synSpecial\">(</span>cons initial-value\n                   <span class=\"synSpecial\">(</span>add-lists <span class=\"synSpecial\">(</span>scale-list integrand dt<span class=\"synSpecial\">)</span>\n                              int<span class=\"synSpecial\">)))</span>\n           int<span class=\"synSpecial\">)</span>\n\n         <span class=\"synSpecial\">(</span>define <span class=\"synSpecial\">(</span>solve f y0 dt<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>define y <span class=\"synSpecial\">(</span>integral dy y0 dt<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>define dy <span class=\"synSpecial\">(</span>map f y<span class=\"synSpecial\">))</span>\n           y<span class=\"synSpecial\">)</span>\n\n\n         <span class=\"synSpecial\">)</span>\n the-global-environment<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 4.34"},{"data":{"title":"SICP 問題 4.33","published":"2016/01/10","tags":["scheme","SICP"]},"content":"\n<p>遅延リストの実装に合わせて，quoteを遅延リストに対応させる．<br/>\n<code>(car '(a b c))</code>で正しく<code>a</code>が表示できるようにする．</p>\n\n<p><s>make-lambdaの<code>(make-quote (car obj))</code>のところ，始め<code>(car obj)</code>だけにしていたら，<br/>\n数字ではうまくいくのに<code>'(a b c)</code>だとunbound variable: aとなる． <br/>\nそれならばと<code>(list 'quote (car obj))</code>とすると今度は<code>(car '(1 2 3))</code>が'1になってそれをさらにeval-quoteに渡すのでエラー．<br/>\nmake-quoteで数字とそれ以外を分けるようにしました．</s><br/>\n<code>(symbol? 1)</code>でtrueが返ると思ってたのが間違っていました．<br/>\npredicateを追加したらmake-quoteは(list 'quote obj)だけでよくなりました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;eval-quoteに変更</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>quote obj<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-quote <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>obj <span class=\"synSpecial\">(</span>quote-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> obj<span class=\"synSpecial\">)</span> obj<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>quote-&gt;cons obj<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quote-&gt;cons obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">symbol?</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-quote obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synSpecial\">(</span>make-quote <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> obj<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>quote-&gt;cons <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">2</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\na\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nb\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a b c<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\na\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">()</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">#t</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'(</span>a <span class=\"synSpecial\">.</span> b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nb\n</pre>\n\n\n","slug":"SICP 問題 4.33"},{"data":{"title":"SICP 問題 4.32","published":"2016/01/10","tags":["scheme","SICP"]},"content":"\n<p>遅延度の高い遅延リストではcar部も遅延されているので未定義の変数を使って構成するできる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> my-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\nmy-stream\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span>compound-procedure <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>car部もlazy-evaluateされるのでlazyなリスト（ストリーム）だけでなくlazyな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CC%DA%B9%BD%C2%A4\">木構造</a>も作ることができる．</p>\n\n","slug":"SICP 問題 4.32"},{"data":{"title":"特殊形式は高階手続きと一緒に使うことができない","published":"2016/01/09","tags":["scheme","gauche","SICP"]},"content":"\n<p>手続きは引数を全て評価してoperatorに渡す．<br/>\n特殊形式は引数を全て評価するとは限らない．<br/>\nここではdefineについて見てみる．<br/>\ndefineは第１引数は評価せず，第２引数を評価した値を第１引数に束縛する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nx\n<span class=\"synConstant\">3</span>\n</pre>\n\n\n<p>次のような高階手続きでdefineを使ってみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(define (test f a b) (f a b))\n(test define x 1)\n*** ERROR: unbound variable: x\nStack Trace:\n_______________________________________\n  0  x\n\n  1  (eval expr env)\n        At line 179 of &#34;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&#34;</pre>\n\n\n<p>まずtestの引数を全て評価する．<br/>\nxを評価した時点でunboundなのでエラーが返る．<br/>\n仮にxには2が束縛されていると，どうなるか．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\nx\n<span class=\"synSpecial\">(</span>test <span class=\"synStatement\">define</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">***</span> ERROR: invalid application: <span class=\"synSpecial\">(</span><span class=\"synError\">#&lt;syntax</span> define&gt; <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n<p>数字<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>の2に数字<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>の1を束縛しようとしてエラーが返る．<br/>\n変数xのまま扱うには評価しないようにしなくてはならないが，<br/>\n高階手続きはあくまで手続きなので引数を全て評価してしまう．<br/>\n他の特殊形式(ifやset!など)も同様に使えない．</p>\n\n","slug":"特殊形式は高階手続きと一緒に使うことができない"},{"data":{"title":"SICP 問題 4.31","published":"2016/01/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f a <span class=\"synSpecial\">(</span>b lazy<span class=\"synSpecial\">)</span> c <span class=\"synSpecial\">(</span>d lazy-memo<span class=\"synSpecial\">))</span>\n  ...<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>といった形で部分的に遅延評価やメモ化する遅延評価を実装する．<br/>\n　<br/>\n元となるのは4.30までで作っていた遅延評価器．<br/>\nまず変更した部分を書く．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; メモ化する評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;メモ化しない遅延</span>\n        <span class=\"synSpecial\">((</span>thunk-memo? obj<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;メモ化する遅延</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n           result<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>           <span class=\"synComment\">;;これはそのまま</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-memo-it <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-memo <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;thunk-memoにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-memo? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>thunk-memo<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;追加</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-exp thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-env thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; apply</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-apply procedure arguments env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>primitive-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>apply-primitive-procedure\n          procedure\n          <span class=\"synSpecial\">(</span>list-of-arg-values arguments env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence\n          <span class=\"synSpecial\">(</span>procedure-body procedure<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>procedure-parameters procedure<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values\n                               <span class=\"synSpecial\">(</span>origin-procedure-parameters procedure<span class=\"synSpecial\">)</span> arguments env<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮引数のリストも渡す</span>\n                              <span class=\"synSpecial\">(</span>procedure-environment procedure<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown procedure type: APPLY&quot;</span> procedure<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変更なし</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-arg-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>list-of-arg-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 一番目の仮引数を見て，pairならlazyかlazy-memoのどちらか調べてthunk or thunk-memoにする．</span>\n<span class=\"synComment\">;; pairでなければactual-valueして仮引数に束縛する．</span>\n<span class=\"synComment\">;; procedure-parametersではpairなら(a lazy)のような形をaに変えて渡す．</span>\n<span class=\"synComment\">;; origin-procedure-parametersはそのまま渡す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values parameters exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>first-parameter parameters<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> first<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>lazy? first<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">((</span>lazy-memo? first<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>delay-memo-it <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;遅延させてメモ化する</span>\n                            <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;require lazy or lazy-memo option, but get &quot;</span> first<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-parameter parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lazy? parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>lazy<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lazy-memo? parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>lazy-memo<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>origin-procedure-parameters procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> procedure<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-parameters p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; lazyとlazy-memoを基本手続きに追加してeq?で</span>\n<span class=\"synError\">マッチできるようにした．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>newline <span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>display <span class=\"synIdentifier\">display</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lazy <span class=\"synSpecial\">'</span>lazy<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lazy-memo <span class=\"synSpecial\">'</span>lazy-memo<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>テスト</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 遅延評価自体のテスト</span>\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try a <span class=\"synSpecial\">(</span>b lazy<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>try <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try <span class=\"synSpecial\">(</span>a lazy-memo<span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> a<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>try <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n</pre>\n\n\n<p>lazyもlazy-memoのどちらの評価も遅延されている．\n次にメモ化のテストをする．<br/>\nここでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%A3%A5%DC%A5%CA%A5%C3%A5%C1%BF%F4%CE%F3\">フィボナッチ数列</a>の計算をさせる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; まずは作用的順序の評価</span>\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.000</span>\n<span class=\"synComment\">; user   0.000</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">10000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.200</span>\n<span class=\"synComment\">; user   0.210</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875</span>\n\n<span class=\"synComment\">;; 次は遅延評価</span>\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib-lazy n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">(((</span>a lazy<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>b lazy<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>count lazy<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.000</span>\n<span class=\"synComment\">; user   0.000</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib-lazy <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   7.277</span>\n<span class=\"synComment\">; user   7.440</span>\n<span class=\"synComment\">; sys    0.020</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">832040</span>\n\n<span class=\"synComment\">;; メモ化された遅延評価のテスト</span>\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib-lazy-memo n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">(((</span>a lazy-memo<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>b lazy-memo<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>count lazy-memo<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.000</span>\n<span class=\"synComment\">; user   0.000</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib-lazy-memo <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.001</span>\n<span class=\"synComment\">; user   0.000</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">832040</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib-lazy-memo <span class=\"synConstant\">10000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.234</span>\n<span class=\"synComment\">; user   0.250</span>\n<span class=\"synComment\">; sys    0.010</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875</span>\n</pre>\n\n\n<p>遅延評価，メモ化ともに正常に働いている．<br/>\n最後にこの評価器のソースを貼っておく．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;letrecを追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; メモ化する評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;メモ化しない遅延</span>\n        <span class=\"synSpecial\">((</span>thunk-memo? obj<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;メモ化する遅延</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n           result<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>           <span class=\"synComment\">;;これはそのまま</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-memo-it <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk-memo <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;thunk-memoにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-memo? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>thunk-memo<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;追加</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-exp thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-env thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-value evaluated-thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> evaluated-thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; apply</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-apply procedure arguments env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>primitive-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>apply-primitive-procedure\n          procedure\n          <span class=\"synSpecial\">(</span>list-of-arg-values arguments env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence\n          <span class=\"synSpecial\">(</span>procedure-body procedure<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>procedure-parameters procedure<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values\n                               <span class=\"synSpecial\">(</span>origin-procedure-parameters procedure<span class=\"synSpecial\">)</span> arguments env<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮引数のリストも渡す</span>\n                              <span class=\"synSpecial\">(</span>procedure-environment procedure<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown procedure type: APPLY&quot;</span> procedure<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変更なし</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-arg-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>list-of-arg-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 一番目の仮引数を見て，pairならlazyかlazy-memoのどちらか調べてthunk or thunk-memoにする．</span>\n<span class=\"synComment\">;; pairでなければactual-valueして仮引数に束縛する．</span>\n<span class=\"synComment\">;; procedure-parametersではpairなら(a lazy)のような形をaに変えて渡す．</span>\n<span class=\"synComment\">;; origin-procedure-parametersはそのまま渡す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values parameters exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>first-parameter parameters<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> first<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>lazy? first<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">((</span>lazy-memo? first<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>delay-memo-it <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;遅延させてメモ化する</span>\n                            <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;require lazy or lazy-memo option, but get &quot;</span> first<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>list-of-args-thunk-or-values <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-parameter parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-parameters parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lazy? parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>lazy<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lazy-memo? parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> parameter<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>lazy-memo<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>origin-procedure-parameters procedure<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> procedure<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 条件式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 並び</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-variable-value! <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                       env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>define-variable!\n    <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n    env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 自己評価式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">string?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変数</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; クオート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>define<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮パラメタ</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;本体</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; if</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-if predicate consequent alternative<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if predicate consequent alternative<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; begin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>begin<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequence-&gt;exp seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">)</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>begin seq<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; 任意の合成式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-operands? ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-operand ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-operands ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 派生式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>cond<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-else-clause? clause<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>else<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clause<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-actions clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clause<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last -- COND-&gt;IF&quot;</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>action <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if predicate\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; and</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>and<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>true\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; or</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>or<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">'</span>true<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))))))))</span>\n\n\n<span class=\"synComment\">;; let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; named-let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; letrec</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 術後のテスト</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 手続きの表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-procedure? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>procedure<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-parameters p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> p<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-body p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-environment p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 環境に対する操作</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-environment <span class=\"synSpecial\">'())</span>\n\n<span class=\"synComment\">;; フレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> val <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変数を値に対応づける新しいフレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span> var<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable -- SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>primitive<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>newline <span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>display <span class=\"synIdentifier\">display</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lazy <span class=\"synSpecial\">'</span>lazy<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lazy-memo <span class=\"synSpecial\">'</span>lazy-memo<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> apply-in-underlying-scheme <span class=\"synIdentifier\">apply</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 環境</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; M-Eval input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; M-Eval value:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>announce-output <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>user-print object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>compound-procedure? object<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure\n                     <span class=\"synSpecial\">(</span>procedure-parameters object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>procedure-body object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">'</span><span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> object<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>def-body-list proc-body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n             <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                               body<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                      def\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                                 body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                        def\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body body<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>def-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>body-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> def-list<span class=\"synSpecial\">)</span>\n        body\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-definition <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                    def-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                      def-list<span class=\"synSpecial\">)</span>\n                 body-list<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.31"},{"data":{"title":"遅延評価と末尾再帰フィボナッチ","published":"2016/01/08","tags":["SICP","scheme"]},"content":"\n<p>前回の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>問題4.29で遅延評価する評価器でメモ化しない場合に，する場合と比べてはるかに遅くなるプログラムの例としてフィボナッチを書きました．<br/>\nただ，あまりに差が大きくてなぜそうなるのかがわからなかったので考えてみました．<br/>\n評価器は最後に載せておきます．<br/>\n　<br/>\nフィボナッチの定義は以下の通り，末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で書いています．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>メモ化した場合は</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">10000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.190</span>\n<span class=\"synComment\">; user   0.190</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875</span>\n</pre>\n\n\n<p>メモ化していない場合は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>;;; M-Eval input:\n(fib 30)\n;(time (actual-value input the-global-environment))\n; real   6.628\n; user   6.620\n; sys    0.010\n\n;;; M-Eval value:\n832040</pre>\n\n\n<p>メモ化していない場合になぜこれだけ遅いかを検証します．<br/>\n(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iter\">iter</a> 0 1 30)から考えます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n    a\n    <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>なのでまずa b countはそれぞれ(thunk 0) (thunk 1) (thunk 30)となります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>なのでpredicateが評価され，countは30となります．<br/>\n次の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iter\">iter</a>が呼ばれます．この時のa b countは(thunk 1) (thunk (+ (thunk 0) (thunk 1))) (thunk (- 30 1))です．<br/>\nこれがcountが0になるまで続けられます．<br/>\ncountが0になるとifのconsequentが評価されます．<br/>\nここで初めてaが評価されることになります．<br/>\nこの時にはaには二つ上のthunkとさらに一つ上のthunkを足したものが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的になったthunkが入っています．<br/>\nbには一つ上のthunkとさらに一つ上のthunkを足したものが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的になったthunkが入っています．<br/>\nつまり，(+ (fib (- n 1)) (fib (- n 2)))を計算するのと同じような計算が必要になります．<br/>\nメモ化していない場合はこれらをすべて計算していくことになります．<br/>\nメモ化している場合はそれぞれの階層の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iter\">iter</a>の環境にbindされている手続きがevaluated-thunkと値に置き換えられていくので無駄な計算が生じません．<br/>\n遅延評価だと引数は必要になるまで評価されないので末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で書いてもメモ化しない場合はあまり効率的にはなりません．</p>\n\n<p>[評価器]</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;letrecを追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   env<span class=\"synSpecial\">)</span>\n         <span class=\"synComment\">;; (my-apply (eval (operator exp) env)</span>\n         <span class=\"synComment\">;;           (list-of-values (operands exp) env))</span>\n         <span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; メモ化する評価器</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;expをその値で置き換える</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>    <span class=\"synComment\">;;必要のなくなったenvを忘れる</span>\n           result<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; メモ化しない評価器</span>\n<span class=\"synComment\">;; (define (force-it obj)</span>\n<span class=\"synComment\">;;   (if (thunk? obj)</span>\n<span class=\"synComment\">;;       (actual-value (thunk-exp obj) (thunk-env obj))</span>\n<span class=\"synComment\">;;       obj))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>thunk <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-exp thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-env thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>thunk-value evaluated-thunk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> evaluated-thunk<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>force-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foo bar<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>bar <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; apply</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-apply procedure arguments env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>primitive-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>apply-primitive-procedure\n          procedure\n          <span class=\"synSpecial\">(</span>list-of-arg-values arguments env<span class=\"synSpecial\">)))</span> <span class=\"synComment\">; changed</span>\n        <span class=\"synSpecial\">((</span>compound-procedure? procedure<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence\n          <span class=\"synSpecial\">(</span>procedure-body procedure<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>procedure-parameters procedure<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>list-of-delayed-args arguments env<span class=\"synSpecial\">)</span> <span class=\"synComment\">; changed</span>\n                              <span class=\"synSpecial\">(</span>procedure-environment procedure<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown procedure type: APPLY&quot;</span> procedure<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-arg-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>list-of-arg-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-delayed-args exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>delay-it <span class=\"synSpecial\">(</span>first-operand exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>list-of-delayed-args <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-variable-value! <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                       env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>define-variable!\n    <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n    env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 自己評価式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">string?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変数</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; クオート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 代入</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>set!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>define<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;;仮パラメタ</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;本体</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>def-body-list proc-body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n             <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                               body<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                      def\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; ((define u e1) (define v e2) e3 e4)</span>\n<span class=\"synComment\">;; =&gt; ((let ((u *unassigned*) (v *unassigned*)) (set! u e1) (set! v e2) e3 e4))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                                 body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                        def\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body body<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>def-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>body-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> def-list<span class=\"synSpecial\">)</span>\n        body\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                         def-list<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                   <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                 def-list<span class=\"synSpecial\">)</span>\n                            body-list<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; if</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>if<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-if predicate consequent alternative<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>if predicate consequent alternative<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; begin</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>begin<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seq<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-exps seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seq<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequence-&gt;exp seq<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> seq<span class=\"synSpecial\">)</span> seq<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>last-exp? seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-exp seq<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-begin seq<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>begin seq<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; 任意の合成式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>no-operands? ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-operand ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ops<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-operands ops<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ops<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 派生式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>cond<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-else-clause? clause<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>else<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-predicate clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clause<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-actions clause<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clause<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last -- COND-&gt;IF&quot;</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>action <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if predicate\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; and</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>and<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>true\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; or</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>or<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">'</span>true<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))))))))</span>\n\n\n<span class=\"synComment\">;; let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; named-let</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 術後のテスト</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 手続きの表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compound-procedure? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? p <span class=\"synSpecial\">'</span>procedure<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-parameters p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-body p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>procedure-environment p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 環境に対する操作</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> env<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-environment <span class=\"synSpecial\">'())</span>\n\n<span class=\"synComment\">;; フレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> val <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変数を値に対応づける新しいフレーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;*Unassigned* variable&quot;</span> var<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable -- SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure? proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tagged-list? proc <span class=\"synSpecial\">'</span>primitive<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>= <span class=\"synIdentifier\">=</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>- <span class=\"synIdentifier\">-</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ <span class=\"synIdentifier\">+</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* <span class=\"synIdentifier\">*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>/ <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-primitive-procedure proc args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-in-underlying-scheme\n   <span class=\"synSpecial\">(</span>primitive-implementation proc<span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> apply-in-underlying-scheme <span class=\"synIdentifier\">apply</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 環境</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> input-prompt <span class=\"synConstant\">&quot;;;; M-Eval input:&quot;</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> output-prompt <span class=\"synConstant\">&quot;;;; M-Eval value:&quot;</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;; test用にtimeマクロを入れている</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prompt-for-input <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>announce-output <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>user-print object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>compound-procedure? object<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>compound-procedure\n                     <span class=\"synSpecial\">(</span>procedure-parameters object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>procedure-body object<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">'</span><span class=\"synConstant\">&lt;procedure-env&gt;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> object<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; lambda式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>lambda<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-lambda parameters body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters body<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>def-body-list proc-body<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body proc-body<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n             <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span>\n                                               body<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body<span class=\"synSpecial\">)</span>\n                      def\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"遅延評価と末尾再帰フィボナッチ"},{"data":{"title":"SICP 問題 4.30","published":"2016/01/08","tags":["scheme","SICP"]},"content":"\n<p>並びの中の式は最後まで評価されないのではないかというCy D. Fectの心配に答える．</p>\n\n<p>a</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 元のeval-sequence</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; Cy D.Fectが提案したeval-sequence</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">'(</span><span class=\"synConstant\">57</span> <span class=\"synConstant\">321</span> <span class=\"synConstant\">88</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synConstant\">57</span>\n<span class=\"synConstant\">321</span>\n<span class=\"synConstant\">88</span>\n<span class=\"synComment\">;;; M-Eval value:</span>\ndone\n</pre>\n\n\n<p>初めのbeginで以下の式になる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">57</span><span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">'(</span><span class=\"synConstant\">321</span> <span class=\"synConstant\">88</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>beginの一つ目の式では(newline)はそのままevalされてM-Eval inputに空行が印字される．\n二つ目の式は(display x)で，このxに(thunk 57)が入るが，displayは基本式なのでforceされ57になる．\nそして57が印字される．\nこれを繰り返すのでfor-eachは正しく動く.\n　<br/>\nb</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p1 x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p2 x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p e<span class=\"synSpecial\">)</span>\n    e\n    x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p2 x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p e<span class=\"synSpecial\">)</span>\n    e\n    x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>p <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">'(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n</pre>\n\n\n<p>本文のeval-sequenceではp1のset!は基本手続きなので実行される．<br/>\np2のpは複合手続きなので遅延され実行されない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>Cyの提案するeval-sequenceの場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>p2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>c\naでやったfor-eachの振る舞いはCyのeval-sequenceでも変わらない．\naの式では基本手続きを使うために遅延されない．\nCyの式では強制的に評価するため遅延されない．</p>\n\n<p>d\nググってみた感じでは直列化して，最後の式が必要になったタイミングで他の式も強制的に評価するのがいいと思いました．\n読んだのはこちら↓</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fleque%2F20101202%2Fp1\" title=\" CSNagoya SICP 読書会: ex. 4.30 d., 4.31 - 月の塵\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://d.hatena.ne.jp/leque/20101202/p1\">d.hatena.ne.jp</a></cite></p>\n\n","slug":"SICP 問題 4.30"},{"data":{"title":"SICP 問題 4.29","published":"2016/01/08","tags":["scheme","SICP"]},"content":"\n<p>メモ化しないとはるかに遅くなるプログラムの例として<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%A3%A5%DC%A5%CA%A5%C3%A5%C1%BF%F4%CE%F3\">フィボナッチ数列</a>の第n項を求める手続きを定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; メモ化するforce-it</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>thunk? obj<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> obj <span class=\"synSpecial\">'</span>evaluated-thunk<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;expをその値で置き換える</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>    <span class=\"synComment\">;;必要のなくなったenvを忘れる</span>\n           result<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>evaluated-thunk? obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-value obj<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> obj<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; メモ化しないforce-it</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>force-it obj<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>thunk? obj<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>actual-value <span class=\"synSpecial\">(</span>thunk-exp obj<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>thunk-env obj<span class=\"synSpecial\">))</span>\n      obj<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; driver-loopにtimeマクロを仕込む</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;ここにtimeマクロ</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>メモ化する場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   0.001</span>\n<span class=\"synComment\">; user   0.000</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">832040</span>\n</pre>\n\n\n<p>メモ化しない場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">30</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (actual-value input the-global-environment))</span>\n<span class=\"synComment\">; real   6.559</span>\n<span class=\"synComment\">; user   6.540</span>\n<span class=\"synComment\">; sys    0.000</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">832040</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>id x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  x<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>メモ化する場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">100</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n</pre>\n\n\n<p>メモ化しない場合</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">100</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">2</span>\n</pre>\n\n\n<p>メモ化すると(* x x)を評価する時に初めのxは(thunk (id 10))となっているのでこれをforce-itしてcountを+1して10を返し，<br/>\nxの束縛を(evaluated-thunk 10)に変える．<br/>\n次のxをforce-itするとそのまま10が返る．</p>\n\n","slug":"SICP 問題 4.29"},{"data":{"title":"SICP 問題 4.28","published":"2016/01/07","tags":["scheme","SICP"]},"content":"\n<p>引数に手続きをとる手続きを考える．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foo bar<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>bar <span class=\"synSpecial\">'</span>a<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>引数はすべてthunkなので<code>(bar 'a)</code>でbarをevalしても手続きとならない．\napplyでoperatorをactual-valueを使わないと手続きを引数に取る場合に困る．</p>\n\n","slug":"SICP 問題 4.28"},{"data":{"title":"SICP 問題 4.27","published":"2016/01/07","tags":["scheme","SICP"]},"content":"\n<p>遅延評価</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>id x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> w <span class=\"synSpecial\">(</span>id <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\nok \n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">1</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\nw\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">10</span>\n\n<span class=\"synComment\">;;; M-Eval input:</span>\ncount\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">2</span>\n</pre>\n\n\n<p>wを定義する時に<code>(id (id 10))</code>がevalされる．<br/>\naplication?からmy-applyに送られる．<br/>\nこの時にoperatorはactual-valueされるがoperandsはされない．<br/>\nそこで<code>(set! count (+ count 1))</code>の行からcountが1になり，<code>(id (id 10))</code>の値は<code>(thunk (id 10))</code>として保存される．．<br/>\nその後，wを評価すると，<code>(actual-value w)</code>となるのでdelayしていた部分が全てforceされる．<br/>\nしかし，この時点で<code>(id (id 10))</code>の値は<code>(id 10)</code>であると保存されているので<code>(thunk (id 10))</code>が返されるだけでset!行は実行されない．<br/>\nそして<code>(thunk (id 10))</code>が評価されてcountが2になる．<br/>\n　<br/>\n環境の中身は以下のようになっている．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; the-global-environment\n<span class=\"synError\">#0=</span><span class=\"synSpecial\">(((</span>w id count driver-loop try false true <span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">null?</span> <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">+</span> <span class=\"synIdentifier\">*</span> <span class=\"synIdentifier\">/</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>thunk <span class=\"synSpecial\">(</span>id <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">set!</span> count <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synConstant\">1</span>\n     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">()</span>\n                <span class=\"synSpecial\">((</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>actual-value input the-global-environment<span class=\"synSpecial\">)))</span>\n                     <span class=\"synSpecial\">(</span>announce-output output<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>procedure <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> b<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#0#</span><span class=\"synSpecial\">)</span>\n     <span class=\"synConstant\">#f</span>\n     <span class=\"synConstant\">#t</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cdr&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> cons&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> null?&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synStatement\">=&gt;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">-&gt;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> <span class=\"synError\">+&gt;</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> *&gt;<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>primitive <span class=\"synError\">#&lt;subr</span> /&gt;<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>wの値は <code>(thunk (id 10))</code>になっている．</p>\n\n","slug":"SICP 問題 4.27"},{"data":{"title":"define-curryを書いてみた","published":"2016/01/06","tags":["scheme"]},"content":"\n<p>カリー化や部分適用の話が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>で流れてきたのでマクロの練習として書いてみました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; lambda式を引数に取り，カリー化されたlambda式を返す</span>\n<span class=\"synComment\">;; いらなかった</span>\n<span class=\"synComment\">;; (define-syntax curry</span>\n<span class=\"synComment\">;;   (syntax-rules (lambda) ;; 修正</span>\n<span class=\"synComment\">;;     [(_ (lambda (arg) body ...))</span>\n<span class=\"synComment\">;;      (lambda (arg) body ...)]</span>\n<span class=\"synComment\">;;     [(_ (lambda (first rest ...) body ...))</span>\n<span class=\"synComment\">;;      (lambda (first) (curry (lambda (rest ...) body ...)))]))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> lambda-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">()</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> body ...<span class=\"synSpecial\">)]</span> <span class=\"synComment\">;; 修正：引数が０個の手続きに対応</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>first rest ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>func <span class=\"synSpecial\">(</span>case-lambda\n                     <span class=\"synSpecial\">[()</span> func<span class=\"synSpecial\">]</span>\n                     <span class=\"synSpecial\">[(</span>arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">))</span> arg<span class=\"synSpecial\">)]</span>\n                     <span class=\"synSpecial\">[</span>args <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> args<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))])))</span>\n       func<span class=\"synSpecial\">)]))</span> <span class=\"synComment\">;;このfuncがなくてもなぜか動く．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> define-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synComment\">;; lambda-curryが0引数に対応したのでいらない</span>\n    <span class=\"synComment\">;; [(_ (func-name) body ...)</span>\n    <span class=\"synComment\">;;  (define (func-name) body ...)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>func-name args ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> func-name <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>args ...<span class=\"synSpecial\">)</span> body ...<span class=\"synSpecial\">))]</span>\n    <span class=\"synSpecial\">[(</span>_ var val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> var val<span class=\"synSpecial\">)]))</span>\n</pre>\n\n\n<p>　<br/>\n清書</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> lambda-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">()</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> b0 b1 ...<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>arg<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">(</span>first rest ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>func <span class=\"synSpecial\">(</span>case-lambda\n                     <span class=\"synSpecial\">(()</span> func<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">((</span>arg<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">))</span> arg<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>args <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>first<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>rest ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> args<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))))))</span>\n       func<span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;このfuncがなくてもなぜか動く．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> define-curry\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synSpecial\">(</span>func-name args ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> func-name <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>args ...<span class=\"synSpecial\">)</span> b0 b1 ...<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>_ var val<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> var val<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>test</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">)))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> g <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b c<span class=\"synSpecial\">)))</span>\ng\ngosh&gt; <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synError\">#&lt;undef&gt;</span>\ngosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">)))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synError\">#&lt;undef&gt;</span>\ngosh&gt; <span class=\"synSpecial\">(</span>define-curry <span class=\"synSpecial\">(</span>f a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\ngosh&gt; <span class=\"synSpecial\">((</span>f <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">(</span>define-curry <span class=\"synSpecial\">(</span>g a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b c<span class=\"synSpecial\">))</span>\ng\ngosh&gt; <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\ngosh&gt; <span class=\"synSpecial\">((</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\ngosh&gt; <span class=\"synSpecial\">(((</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">((</span>g <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">((</span>g <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\ngosh&gt; <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">6</span>\n</pre>\n\n\n<p>修正1\n<blockquote class=\"twitter-tweet\" lang=\"HASH(0xa7a3470)\"><p lang=\"ja\" dir=\"ltr\">curry の定義は (syntax-rules (lambda) ...) にしないと (curry (foo (x) x)) とかでも動いてしましそう&#10;<a href=\"https://t.co/DUJHFogOQg\">https://t.co/DUJHFogOQg</a></p>&mdash; でこれき (@dico_leque) <a href=\"https://twitter.com/dico_leque/status/684596402043813888\">January 6, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n　<br/>\n　<br/>\n修正2</p>\n\n<p><blockquote class=\"twitter-tweet\" lang=\"HASH(0xa7a3470)\"><p lang=\"ja\" dir=\"ltr\">引数がゼロ個の手続きはこのマクロでは作れないな。&#10;(lambda-curry () (* 1 2)) みたいなの。&#10;それができたからといって使いどころもないけど。</p>&mdash; 齊藤敦志 (@SaitoAtsushi) <a href=\"https://twitter.com/SaitoAtsushi/status/684595362833694720\">January 6, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synError\">#f&gt;</span>\ngosh&gt; <span class=\"synSpecial\">((</span>lambda-curry <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n<span class=\"synConstant\">3</span>\n</pre>\n\n\n<p>　<br/>\n修正3\n<blockquote class=\"twitter-tweet\" lang=\"HASH(0xa7a3470)\"><p lang=\"ja\" dir=\"ltr\">lambda-curryのletrecは要らない気がする。define-curryの最初のパターンもlambda-curryが0引数対応したなら要らない気がする。 <a href=\"https://t.co/h4ClDCC5ev\">https://t.co/h4ClDCC5ev</a></p>&mdash; Kei (@tk_riple) <a href=\"https://twitter.com/tk_riple/status/684665486274093056\">January 6, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f <span class=\"synSpecial\">(</span>lambda-curry <span class=\"synSpecial\">(</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> a b<span class=\"synSpecial\">)))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1/2</span>\ngosh&gt; <span class=\"synSpecial\">((</span>f <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3/4</span>\ngosh&gt; <span class=\"synSpecial\">(</span>define-curry <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\nf\ngosh&gt; <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">2</span>\n</pre>\n\n\n","slug":"define-curryを書いてみた"},{"data":{"title":"SICP 問題 4.26","published":"2016/01/03","tags":["scheme","SICP"]},"content":"\n<p>unlessを特殊形式で定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>unless? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>unless-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-condition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-usual-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-exceptional-value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>unless<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>unless-condition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>unless-exceptional-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>unless-usual-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>unlessが特殊形式だと困る理由はここで\n<iframe src=\"http://wat-aro.hatenablog.com/embed/2016/01/09/123933\" title=\"特殊形式は高階手続きと一緒に使うことができない - I affirm myself\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://wat-aro.hatenablog.com/entry/2016/01/09/123933\">wat-aro.hatenablog.com</a></cite></p>\n\n","slug":"SICP 問題 4.26"},{"data":{"title":"SICP 問題 4.25","published":"2016/01/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 作用的順序のschemeで本文中のunlessを使用してfactorialを定義した時，  </span>\n<span class=\"synSpecial\">``(</span>factorial <span class=\"synConstant\">5</span><span class=\"synSpecial\">)``</span><span class=\"synError\">を評価しようとすると何が起きるか.</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unless condition usual-value exceptional-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> condition exceptional-value usual-value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>unless <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 作用的順序なのでまず引数を評価しようとする．</span>\n<span class=\"synSpecial\">(</span>unless <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; を評価する時に(factorial (- n 1))の部分でループになる．</span>\n\n<span class=\"synComment\">;; 正規順序の言語では引数は必要になった時に初めて評価されるのでこの問題は起こらない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.25"},{"data":{"title":"SICP 問題 4.24","published":"2016/01/01","tags":["scheme","SICP"]},"content":"\n<p>driver-loopにtimeマクロをしかけて計測する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>prompt-for-input input-prompt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>input <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">read</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>output <span class=\"synSpecial\">(</span>time <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> input the-global-environment<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>announce-output output-prompt<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>user-print output<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter a b count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n count<span class=\"synSpecial\">)</span>\n        a\n        <span class=\"synSpecial\">(</span>iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを使って計算する．<br/>\n最初のeval</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">100000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (eval input the-global-environment))</span>\n<span class=\"synComment\">; real   1.846</span>\n<span class=\"synComment\">; user   2.010</span>\n<span class=\"synComment\">; sys    0.010</span>\n</pre>\n\n\n<p>解析と評価を分けたeval</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;; M-Eval input:</span>\n<span class=\"synSpecial\">(</span>fib <span class=\"synConstant\">100000</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;(time (eval input the-global-environment))</span>\n<span class=\"synComment\">; real   1.095</span>\n<span class=\"synComment\">; user   1.140</span>\n<span class=\"synComment\">; sys    0.010</span>\n</pre>\n\n\n<p>最初のevalのほうが評価のたびに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>をする分遅くなっている．</p>\n\n","slug":"SICP 問題 4.24"},{"data":{"title":"SICP 問題 4.23","published":"2015/12/31","tags":["scheme","SICP"]},"content":"\n<p>本文中のanalyze-sequenceと問題文のanalyze-sequenceの比較．<br/>\nリーダーマクロを使って実行する．<br/>\n本文のanalyze-sequence</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-sequence exps<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sequentially proc1 proc2<span class=\"synSpecial\">)</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>proc1 env<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>proc2 env<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop first-proc rest-procs<span class=\"synSpecial\">)</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span>\n           first-proc\n           <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest-procs<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest-procs<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>procs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze exps<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> procs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Empty sequence: ANALYZE&quot;</span><span class=\"synSpecial\">)</span>\n        <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>Alyssa P.Hacker版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-sequence exps<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">)</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>execute-sequence <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>procs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> analyze exps<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> procs<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Empty sequence -- ANALYZE&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><code>(analyze-sequcence '(+ 1 1))</code>を実行した結果<br/>\n本文版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3192:<span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3185:<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span> first-proc <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-p ...\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-application analyze-application<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-application analyze-application<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-application analyze-application<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>Alyssa版　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3215:<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>本文版は<code>(解析された (+ 1 1))</code>を返す．\nAlyssa版は<br/>\n<code>(lambda (env) (execute-sequence (解析された (+ 1 1) env))</code>を返す．\n　　　　<br/>\n次に<code>(analyze-sequence '((+ 1 1) (+ 2 2)))</code>を実行する．</p>\n\n<p>本文版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">2</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3258:<span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> procs<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> procs<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3251:<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span> first-proc <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-p ...\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3247:<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proc1 env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>proc2 env<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3251:<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest-procs<span class=\"synSpecial\">)</span> first-proc <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span>sequentially first-p ...\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">((</span>analyze-sequence loop<span class=\"synSpecial\">)</span> sequentially<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>Alyssa版</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">'((</span>+ <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>+ <span class=\"synConstant\">2</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n<span class=\"synError\">#?=</span><span class=\"synConstant\">&quot;(standard input)&quot;</span>:3269:<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>execute-sequence procs env<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#?-</span>    <span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synError\">#&lt;closure</span> <span class=\"synSpecial\">(</span>analyze-sequence analyze-sequence<span class=\"synSpecial\">)</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n\n\n<p>本文版は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(lambda (env) ((解析された (+ 1 1)) env) ((解析された (+ 2 2)) env))</pre>\n\n\n<p>を返す．<br/>\n　<br/>\nAlyssa版は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(execute-sequence ((解析された (+ 1 1)) (解析された (+ 2 2))) env)</pre>\n\n\n<p>を返す．<br/>\n　<br/>\n本文版は並びが解析されenvを受け取って評価するlambdaが返される．\nAlyssa版では並びが解析されていない．execute-sequenceが解析の外で並びを表している．<br/>\n解析と評価を分けるという趣旨に反するのでこれではいけない．</p>\n\n","slug":"SICP 問題 4.23"},{"data":{"title":"SICP 問題 4.22","published":"2015/12/29","tags":["scheme","SICP"]},"content":"\n<p>letを使えるようにする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-self-evaluating <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-quoted <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-assignment <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-definition <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>analyze-application <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: ANALYZE&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; make-procedureのbodyのところについていたscan-out-definesのせいでエラー．</span>\n<span class=\"synComment\">;; make-proceduren渡される時点でbodyはanalyzeした後のclosureになっているので</span>\n<span class=\"synComment\">;; analyze-lambdaの中で内部定義をletに吐き出す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters body env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>analyze-lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>vars <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>bproc <span class=\"synSpecial\">(</span>analyze-sequence <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>make-procedure vars bproc env<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.22"},{"data":{"title":"SICP 問題 4.21","published":"2015/12/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synError\">以下の式が階乗を計算すること確かめた後，フィボナッチ数を計算する手続きを作る．</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n         <span class=\"synConstant\">1</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n               <span class=\"synConstant\">1</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n       <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; フィボナッチ数</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))))))</span>\n <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 確認用の手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-map-list n start proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span>iota n start <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>make-map-list <span class=\"synConstant\">10</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>fact<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span>fact fact n<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ft k<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span>ft ft <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))))))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">13</span> <span class=\"synConstant\">21</span> <span class=\"synConstant\">34</span> <span class=\"synConstant\">55</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; b</span>\n<span class=\"synError\">以下の式をaと同じように内部定義もletrecも使わずに定義する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 答え</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span> x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ev? od? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span>od? od? ev? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>od? ev? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span>ev? ev? od? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\n</pre>\n\n\n<p>問題文と引数の順序が違っていたので書き直し．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">odd?</span> x<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ev? od? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span>od? ev? od? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>ev? od? n<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span>ev? ev? od? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#t</span>\ngosh&gt; <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">#f</span>\n</pre>\n\n\n","slug":"SICP 問題 4.21"},{"data":{"title":"SICP 問題 4.20","published":"2015/12/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synComment\">;; letrecをlet式に変換すし，導出された式として実装する．</span>\n\n<span class=\"synComment\">;; eval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;letrecを追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type --EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 選択子</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>letrec<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>letrec-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>letrec-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">''</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set! x y<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span>letrec-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>letrec-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>letrec-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; M-Eval input:</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>fact\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synConstant\">1</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>fact <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span>\n        <span class=\"synSpecial\">(</span>fact <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;;; M-Eval value:</span>\n<span class=\"synConstant\">3628800</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; 環境図はパス</span>\n\n<span class=\"synComment\">;; Louiの言うことを素直に書いてみると以下の通りになる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> true <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> false <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">even?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n    body ...<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; これだと相互再帰部分でeven?を評価するときにはまだodd?が評価されていないためエラーになる．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.20"},{"data":{"title":"SICP 問題 4.19","published":"2015/12/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a x<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> a <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>f <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>これを同時定義する方法．<br/>\ndelayとforceを使えばできそうだけどと考えました．<br/>\n内部定義が変数を定義しているときは値をdelayで包んで，<br/>\nって考えたんですけど，評価する段階で今の実装じゃ無理だと思い諦めました．<br/>\nその後<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%B0%A4%EB\">ググる</a>と下でも同じような考察が．</p>\n\n<p><a href=\"http://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E5%86%85%E9%83%A8define%E3%81%AE%E8%A9%95%E4%BE%A1%E9%A0%86\">http://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E5%86%85%E9%83%A8define%E3%81%AE%E8%A9%95%E4%BE%A1%E9%A0%86</a></p>\n\n","slug":"SICP 問題 4.19"},{"data":{"title":"SICP4章　真理値のせいではまった．","published":"2015/12/25","tags":["SICP","scheme"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n      y\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>これが動かなかったんですよ．<br/>\nはじめはeval-sequenceで(first-exp exp)をevalしていなかったとかそういうのだったんですけど，<br/>\nどうしても動かなくて．<br/>\ndebug printでも(null? x)が#fになってるのになぜかyが返ってくるんです．</p>\n\n<p>eval-ifはtrue?で真偽が決まります．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true true initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false false initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>散々迷ってここが原因だとわかりました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>では#tや#fじゃなくてtrue,falseになっています．<br/>\n他のコードも統一するために</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> true <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> false <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>としていたのが裏目にでました．<br/>\nここで作ったdebug printで#fとなっていてもこの評価器はtrueを返しているというややこしいことになっていました．<br/>\neval-ifも間違っていない．選択子も正しくできている．<br/>\nnull?も問題ない．(null? x)のxはきちんと'(a b c)に束縛されている．<br/>\n可能性を全部潰してやっとここに行き着きました．<br/>\n全部を#tと#fに統一してやっと解決しました．<br/>\nこれは辛かった．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>true? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>false? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> x <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span><span class=\"synConstant\">#t</span> <span class=\"synConstant\">#t</span> initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">#f</span> initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>超循環評価器はこういう時厳しいですね．</p>\n\n","slug":"SICP4章　真理値のせいではまった．"},{"data":{"title":"SICP 問題 4.18","published":"2015/12/25","tags":["scheme","SICP"]},"content":"\n<p>本文中の変形であればうごく．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>\n<span class=\"synComment\">;; ３章で定義した手続きとマクロ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> int\n    <span class=\"synSpecial\">(</span>cons-stream initial-value\n                 <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream integrand dt<span class=\"synSpecial\">)</span>\n                              int<span class=\"synSpecial\">)))</span>\n  int<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>solve f y0 dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dy <span class=\"synSpecial\">(</span>stream-map f y<span class=\"synSpecial\">))</span>\n  y<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; 問題文の通りに変形すると，</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>y <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>dy <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>b <span class=\"synSpecial\">(</span>stream-map f y<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> y a<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> dy b<span class=\"synSpecial\">))</span>\n    y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; まずはじめのletでyとvは``*unassigned*``に束縛される．</span>\n<span class=\"synComment\">;; 次にaを束縛する．(integral ..)が評価される．dyはまだ*unassigned*だが，initial-valueだけcosされ，のこりの評価は遅れる．(delay dy)となっているのでdyもまだ評価されない．</span>\n<span class=\"synComment\">;; 次にbを束縛する．(stream-map f y)を評価しようとするがこの時yはまだ'*unassigned*なのでエラー．</span>\n\n<span class=\"synComment\">;; 本文中の変換をすると，</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>y <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>dy <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> dy <span class=\"synSpecial\">(</span>stream-map f y<span class=\"synSpecial\">))</span>\n    y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; まずはじめに最初の式と同じようにyとdyを束縛する．</span>\n<span class=\"synComment\">;; 次にyに(integral (delay dy) y0 dt)を代入する．</span>\n<span class=\"synComment\">;; (integral ..)が評価される．dyはまだ*unassigned*だが，initial-valueだけcosされ，のこりの評価は遅れる．</span>\n<span class=\"synComment\">;; (delay dy)となっているのでdyもまだ評価されない．</span>\n<span class=\"synComment\">;; 次にdyに(stream-map f y)を代入する．この時点でyの値は(integral (delay dy) y0 dt).</span>\n<span class=\"synComment\">;; stream-mapもはじめに必要なのはyの先頭の要素だけで，それはinitial-valueになっている．</span>\n<span class=\"synComment\">;; その相互に呼び出しあいながらストリームが作られる．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.18"},{"data":{"title":"SICP 問題 4.17","published":"2015/12/25","tags":["scheme","SICP"]},"content":"\n<p>lambdaを評価すると新しくフレームが作られます．<br/>\nこれを防ぐためにletで<em>unassignment</em>を束縛するのではなくdefineで内部定義します．<br/>\ndefine-variable!はフレームに新たな変数を追加する手続きなので余計なフレームは作られません．<br/>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151225194001\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151225/20151225194001.jpg\" alt=\"f:id:wat-aro:20151225194001j:image\" title=\"f:id:wat-aro:20151225194001j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>scheme\n(define (scan-out-defines body)\n  (define (split-def-body proc-body)\n    (let iter ((proc-body proc-body)\n               (def &#39;())\n               (body &#39;()))\n      (cond ((null? proc-body) (cons (reverse def) (reverse body)))\n            ((definition? (car proc-body)) (iter (cdr proc-body)\n                                                 (cons (car proc-body) def)\n                                                 body))\n            (else (iter (cdr proc-body)\n                        def\n                        (cons (car proc-body) body))))))\n  (let* ((def-body-list (split-def-body body))\n         (def-list (car def-body-list))\n         (body-list (cdr def-body-list)))\n    (if (null? def-list)\n        body\n        (append  (map (lambda (x) (make-definition (definition-variable x) &#39;&#39;*unassigned*))\n                    def-list)\n                 (map (lambda (x) (list &#39;set! (definition-variable x)\n                                        (definition-value x)))\n                      def-list)\n                 body-list))))</pre>\n\n\n","slug":"SICP 問題 4.17"},{"data":{"title":"varとvalを間違えてはまった話","published":"2015/12/23","tags":["scheme","SICP"]},"content":"\n<p>ちょっとしたミスにかなり時間取られました．<br/>\nスコープがどうなってるか調べようと色々手続き作ろうしていたらよくわからないエラーが出てしまい．<br/>\nはじめはappって名前のlambda式をdefineするとエラーが出るっていうよくわからない症状で．<br/>\n途中でmy-applyからのエラーだとわかり，その後，何度か環境を評価し直したりしていて，\n同じ変数名でdefineした時に正しくvalueが環境に保存されていないことに気付きました．<br/>\n下に書いたようにvarとvalの違いが原因でした．<br/>\nこれのせいで二時間くらい取られました．<br/>\n環境の中を覗いても，何が期待した状態なのかをなかなか読み取れなかったのも時間がかかった原因の一つですね．<br/>\n自分のために残しておきます．<br/>\nでもまだこの段階で気付けてよかったです．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> target var<span class=\"synSpecial\">)</span>  <span class=\"synComment\">;;ここのvarが間違い</span>\n          <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> target val<span class=\"synSpecial\">)</span> <span class=\"synComment\">;; valに修正</span>\n          <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"varとvalを間違えてはまった話"},{"data":{"title":"SICP 問題 4.16","published":"2015/12/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>env-loop var env <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> target <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unassigned variable&quot;</span> var<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>target target<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan-out-defines proc<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; 選択子</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> def-body-list<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>body-list def-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> def-body-list<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; lambda式の本体を受け取って，内部でdefineを使ってる式と使ってない式のリストを返す</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-def-body proc-body-list<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>proc-body-list proc-body-list<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>def <span class=\"synSpecial\">'())</span>\n               <span class=\"synSpecial\">(</span>body <span class=\"synSpecial\">'()))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> proc-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> def<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> body<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span>definition? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body-list<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body-list<span class=\"synSpecial\">)</span> def<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> proc-body-list<span class=\"synSpecial\">)</span> def <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> proc-body-list<span class=\"synSpecial\">)</span> body<span class=\"synSpecial\">))))))</span>\n  <span class=\"synComment\">;; 本体</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>def-body-list <span class=\"synSpecial\">(</span>split-def-body <span class=\"synSpecial\">(</span>lambda-body proc<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">))</span>\n        proc\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span>lambda-parameters proc<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>set!\n                                                       <span class=\"synSpecial\">(</span>definition-variable x<span class=\"synSpecial\">)</span>\n                                                       <span class=\"synSpecial\">(</span>definition-value x<span class=\"synSpecial\">)))</span>\n                                     <span class=\"synSpecial\">(</span>def-list def-body-list<span class=\"synSpecial\">))</span>\n                                <span class=\"synSpecial\">(</span>body-list def-body-list<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>scan-out-defines <span class=\"synSpecial\">'(</span>lambda <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>define u e1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>define v e2<span class=\"synSpecial\">)</span>\n                           e3<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>u <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>v <span class=\"synConstant\">*unassigned*</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">set!</span> u e1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> v e2<span class=\"synSpecial\">)</span> e3<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; c</span>\n<span class=\"synComment\">;; どちらに組み込んだでも同じが，procedure-bodyは二箇所で呼ばれているので一箇所でしか呼ばれていないmake-procedureに組み込んだ方が良い．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-procedure parameters body env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>procedure parameters <span class=\"synSpecial\">(</span>scan-out-defines body<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.16"},{"data":{"title":"SICP 問題 4.15","published":"2015/12/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 引数の手続きpとオブジェクトaについて，式(p a)停止するかどうかを正確に判断するような手続きhalts?</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>run-forever<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>run-forever<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>halts? p p<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>run-forever<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>halted<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>try try<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; まずこれが停止すると仮定する．すると(halts? try try)はtrueを返し，then節(run-forever)を実行するので停止しない．</span>\n<span class=\"synComment\">;; 次にこれが停止しないと仮定する．(halts? try try)がfalseなのでelse節'haltsが実行されるので停止する．</span>\n<span class=\"synComment\">;; 矛盾するのでhalts?は定義できない．</span>\n</pre>\n\n\n","slug":"SICP 問題 4.15"},{"data":{"title":"SICP 問題 4.14","published":"2015/12/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; M-EVAL中の手続きは先頭に'procedureがついたリスト．</span>\n<span class=\"synComment\">;; 基層のLispのmapを使うとただのリストとして受け取ってしまうためにうまくいかない．</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>map <span class=\"synIdentifier\">map</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>primitive <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> proc<span class=\"synSpecial\">)))</span>\n       primitive-procedures<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>initial-env\n         <span class=\"synSpecial\">(</span>extend-environment <span class=\"synSpecial\">(</span>primitive-procedure-names<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>primitive-procedure-objects<span class=\"synSpecial\">)</span>\n                             the-empty-environment<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>true true initial-env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">'</span>false false initial-env<span class=\"synSpecial\">)</span>\n    initial-env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-global-environment <span class=\"synSpecial\">(</span>setup-environment<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; M-EVAL input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>c <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>d <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n<span class=\"synConstant\">***</span> ERROR: invalid application: <span class=\"synSpecial\">((</span>primitive <span class=\"synError\">#&lt;subr</span> car&gt;<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\nStack Trace:\n_______________________________________\n  <span class=\"synConstant\">0</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> input the-global-environment<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">961</span> of <span class=\"synConstant\">&quot;/Users/home/work/scheme/SICP/4.1.scm&quot;</span>\n  <span class=\"synConstant\">1</span>  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> expr env<span class=\"synSpecial\">)</span>\n        At line <span class=\"synConstant\">179</span> of <span class=\"synConstant\">&quot;/usr/local/Cellar/gauche/0.9.4/share/gauche-0.9/0.9.4/lib/gauche/interactive.scm&quot;</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> primitive-procedures\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>car <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cdr <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>cons <span class=\"synIdentifier\">cons</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>null? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>driver-loop<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;;; M-EVAL input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;; M-EVAL value</span>\nok\n\n<span class=\"synComment\">;;; M-EVAL input:</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>c <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>d <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;; M-EVAL value</span>\n<span class=\"synSpecial\">(</span>a b c d<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 4.14"},{"data":{"title":"SICP 問題 4.13","published":"2015/12/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan var vars vals proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>proc var vars vals<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)</span> proc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 束縛された変数を解放するmake-unbound!</span>\n<span class=\"synComment\">;; first-frameだけでに限定しないと</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-unbound! var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span>\n                                                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> vars <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">))</span>\n                                                             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> vals <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">))</span>\n                                                             <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          target\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.13"},{"data":{"title":"SICP 問題 4.12","published":"2015/12/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; scanとenv-loopを抜き出す．</span>\n<span class=\"synComment\">;; 見つかった時の手続きをprocで渡す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan var vars vals proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>proc var vars vals<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)</span> proc<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop var env proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">#f</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span>scan var\n                         <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                         proc<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> val <span class=\"synSpecial\">(</span>env-loop var <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)</span> proc<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>env-loop var env <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> target<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>env-loop var env <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span>\n                                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n        target\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable: SET!&quot;</span> var<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 見つかればtargetにvalsが束縛される．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span>scan var <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var vars vals<span class=\"synSpecial\">)</span> vals<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> target val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.12"},{"data":{"title":"SICP 問題 4.11","published":"2015/12/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; フレームを束縛のリストとして表現</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cons</span> variables <span class=\"synIdentifier\">values</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-binding frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-bindings frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-variable binding<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> binding<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>binding-value binding<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> binding<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-binding var val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> var val<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-binding-to-frame! var val fram<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> frame <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-binding var val<span class=\"synSpecial\">)</span> frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 変更無し</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extend-environment vars vals base-env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-frame vars vals<span class=\"synSpecial\">)</span> base-env<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> vals<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too many arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Too few arguments supplied&quot;</span> vars vals<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 変更無し</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-variable-value var env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vals<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; frame-variablesとframe-valuesを作ればset-variable-value!とdefine-variable!は変更なし</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> frame<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> env the-empty-environment<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unbound variable: SET!&quot;</span> var<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scan vars vals<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> vars<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> var <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> vars<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> vals val<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vars<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> vals<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span>scan <span class=\"synSpecial\">(</span>frame-variables frame<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>frame-values frame<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 作らない場合はassqで走査する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-variable-value var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> var <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> target val<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>env-loop <span class=\"synSpecial\">(</span>enclosing-environment env<span class=\"synSpecial\">))))))</span>\n<span class=\"synSpecial\">(</span>env-loop env<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>define-variable! var val env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>frame <span class=\"synSpecial\">(</span>first-frame env<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>target <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> var frame<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> target\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> target val<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>add-binding-to-frame! var val frame<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.11"},{"data":{"title":"SICP 問題 4.10","published":"2015/12/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 後置式にする</span>\n<span class=\"synComment\">;; 全部はめんどうなのでquoteだけ．</span>\n<span class=\"synComment\">;; リストの最後の項か尋ねるlast?</span>\n<span class=\"synComment\">;; 空リストは#fを返す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last? lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">#f</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; リストの最後の項を取る選択子last</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>last? lst<span class=\"synSpecial\">)</span>\n      lst\n      <span class=\"synSpecial\">(</span>lst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; cdrの逆で最後の項を取り除いたリストを返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rid-last lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>lst lst<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>result <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;pair required, but got&quot;</span> lst<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span>last? lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> result<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; クオート式</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>quote<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rid-last <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; リストが指定sれた記号から始まるかどうかを確認する手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> tag<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>last <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> tag<span class=\"synSpecial\">)</span>\n      false<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.10"},{"data":{"title":"SICP 問題 4.09","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; iteratorの実装</span>\n<span class=\"synComment\">;; whileの使用例</span>\n<span class=\"synSpecial\">(</span>while <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> i <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> i<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> while <span class=\"synSpecial\">()</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> i <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> i<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>while<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 破壊的です．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>while<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>while-&gt;let <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-named-let <span class=\"synSpecial\">'</span>my-while <span class=\"synSpecial\">'()</span>\n                  <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>while-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>meke-begin\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>while-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">'(</span>my-while<span class=\"synSpecial\">)))</span>\n                           <span class=\"synSpecial\">'())))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.09"},{"data":{"title":"SICP 問題 4.08","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n<p>let->combinationの変更ですんでいるのでevalは変更しなくていい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>named-let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-definition variable value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>define variable value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>named-let-&gt;define func-name variables expressions bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-begin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-definition func-name <span class=\"synSpecial\">(</span>make-lambda variables bodys<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> func-name expressions<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 2番目の要素がシンボルならnamed-let</span>\n      <span class=\"synSpecial\">(</span>named-let-&gt;define <span class=\"synSpecial\">(</span>named-let-func-name <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>named-let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synSpecial\">'(</span>let fib-iter <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                                        <span class=\"synSpecial\">(</span>count n<span class=\"synSpecial\">))</span>\n                           <span class=\"synSpecial\">(</span>= <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>if <span class=\"synSpecial\">(</span>= count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                               b\n                               <span class=\"synSpecial\">(</span>fib-iter <span class=\"synSpecial\">(</span>+ a b<span class=\"synSpecial\">)</span> a <span class=\"synSpecial\">(</span>- count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">((</span><span class=\"synStatement\">define</span> fib-iter\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a b count<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n               b\n               <span class=\"synSpecial\">(</span>fib-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n       <span class=\"synSpecial\">(</span>fib-iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span> n<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.08"},{"data":{"title":"SICP 問題 4.07","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n<p>let*をネストしたletで置き換える．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (let* ((x 3)</span>\n<span class=\"synComment\">;;        (y (+ x 2))</span>\n<span class=\"synComment\">;;        (z (+ x y 5)))</span>\n<span class=\"synComment\">;;   (* x z))</span>\n\n<span class=\"synComment\">;; (let ((x 3))</span>\n<span class=\"synComment\">;;   (let ((y (+ x 2)))</span>\n<span class=\"synComment\">;;     (let ((z (+ x y 5)))</span>\n<span class=\"synComment\">;;       (* x z))))</span>\n\n<span class=\"synComment\">;; let*</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let*<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let*-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-let parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> parameters bodys<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-lets parameters bodys<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> parameters<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;EXPAND-LETS required pair, but &quot;</span> parameters<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                   bodys<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>make-let <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> parameters<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>expand-lets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> parameters<span class=\"synSpecial\">)</span> bodys<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-variable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;combination <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let*? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;let*を追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>my-apply <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>let*-&gt;nested-lets <span class=\"synSpecial\">'(</span>let* <span class=\"synSpecial\">((</span>x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                                 <span class=\"synSpecial\">(</span>y <span class=\"synSpecial\">(</span>+ x x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span>* x y<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span>+ x y z<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>* x y z<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x y<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x y z<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x y z<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.07"},{"data":{"title":"SICP 問題 4.06","published":"2015/12/19","tags":["scheme","SICP"]},"content":"\n<p>letを導入．<br/>\nlambdaに変形することで定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; (let ((a 1) (b 2) (c 3))</span>\n<span class=\"synComment\">;;   (+ a b c))</span>\n\n<span class=\"synComment\">;; ((lambda (a b c)</span>\n<span class=\"synComment\">;;    (+ a b c)) 1 2 3)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>let<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">(</span>let-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>make-lambda <span class=\"synSpecial\">(</span>let-variables <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>let-bodys <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>let-expressions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>gosh&gt; <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synSpecial\">'(</span>let <span class=\"synSpecial\">((</span>var1 exp1<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>var2 exp2<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>var3 exp3<span class=\"synSpecial\">))</span>\n                          body1\n                          body2<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>var1 var2 var3<span class=\"synSpecial\">)</span>\n   body1\n   body2<span class=\"synSpecial\">)</span>\n exp1 exp2 exp3<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>let? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>let-&gt;lambda <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;letを追加</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.06"},{"data":{"title":"SICP 問題 4.05","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n<p>make-ifに渡す前にclauseをpredicateとactionにわかる．\n(car action)に'=>があれば(cadr action)にpredicateを適用する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false <span class=\"synComment\">;; else 説は無い</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last: COND-&gt;IF&quot;</span>\n                       clauses<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>predicate <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>action <span class=\"synSpecial\">(</span>cond-action first<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> action<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>=&gt;<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">cadr</span> action<span class=\"synSpecial\">)</span> predicate<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>sequence-&gt;exp action<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.05"},{"data":{"title":"SICP 問題 4.04","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; and</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>and<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>true\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synComment\">;; or</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>or<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>clauses <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>first <span class=\"synSpecial\">'</span>true<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-and <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-or <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 派生式としてのandとor</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>expand-and-clause <span class=\"synSpecial\">(</span>and-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-and-clause clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>true\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>lst-exp? clauses<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>first-exp clauses<span class=\"synSpecial\">)</span> <span class=\"synComment\">;;最後の式の値を返す.</span>\n          <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>first-exp clauses<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>expand-and-clause <span class=\"synSpecial\">(</span>rest-exps clauses<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">'</span>false<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>expand-or-clause <span class=\"synSpecial\">(</span>or-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-or-clause clauses<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span>first-exp clauses<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>make-if first\n                 first\n                 <span class=\"synSpecial\">(</span>expand-or-clause <span class=\"synSpecial\">(</span>rest-exps clauses<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>and? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>and-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>or? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>or-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.04"},{"data":{"title":"SICP 問題 4.03","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; evalをデータ主導スタイルに書き換える．</span>\n<span class=\"synComment\">;; 本文で定義されたeval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; opを持つexpと持たないexpで分ける．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>op <span class=\"synSpecial\">(</span>get <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;opが見付からなければfalseが束縛</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>op\n                 <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                 <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-1 key-2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> record<span class=\"synSpecial\">)</span>\n                  false<span class=\"synSpecial\">))</span>\n            false<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-1 key-2 value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> record value<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> subtable\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> local-table\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> key-1\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- TABLE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> operation-table <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> get <span class=\"synSpecial\">(</span>operation-table <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> put <span class=\"synSpecial\">(</span>operation-table <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-eval-package<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; クオート式</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 代入</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>set-variable-value! <span class=\"synSpecial\">(</span>assignment-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>assignment-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                         env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; 定義</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>define-variable! <span class=\"synSpecial\">(</span>definition-variable <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>definition-value <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n      env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; 条件式</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>true? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-predicate <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-consequent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>if-alternative <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n  <span class=\"synComment\">;; lambda</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 列</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eval-sequence exps env<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>last-exp? exps<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-exp exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>rest-exps exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>expand-clauses <span class=\"synSpecial\">(</span>cond-clauses <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand-clauses clauses<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> clauses<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>false <span class=\"synComment\">;; else 説は無い</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> clauses<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> clauses<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cond-else-clause? first<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ELSE clause isn't last: COND-&gt;IF&quot;</span>\n                         clauses<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>make-if <span class=\"synSpecial\">(</span>cond-predicate first<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>sequence-&gt;exp <span class=\"synSpecial\">(</span>cond-actions first<span class=\"synSpecial\">))</span>\n                       <span class=\"synSpecial\">(</span>expand-clauses rest<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>quote text-of-quotation<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>set! eval-assignment<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>define eval-definition<span class=\"synSpecial\">)</span>v\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>if eval-if<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>lambda <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                                       env<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>begin <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>eval <span class=\"synSpecial\">'</span>cond <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 4.03"},{"data":{"title":"SICP 問題 4.02","published":"2015/12/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 本文のeval</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; evalのcondの順番を変えてapplyをassignmentより前にしようとしている</span>\n<span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; (application? exp)は(pair? exp)なので(define x 3)もapplyされる．</span>\n<span class=\"synComment\">;; applyの節はすべてのリストにマッチするので最後でないといけない．</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; 手続き適用がcallで始まるように構文を変える．</span>\n<span class=\"synComment\">;; Louisの希望通り，assignmentよりも前にapplyをもってくる．</span>\n<span class=\"synComment\">;; 後はselectorとapplication?を変更すればよい．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>self-evaluating? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lookup-valiable-value <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>quoted? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>text-of-quotation <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>assignment? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-assignment <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>definition? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-definition <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>if? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>eval-if <span class=\"synIdentifier\">exp</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>lambda? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-procedure <span class=\"synSpecial\">(</span>lambda-parameters <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>lambda-body <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                       env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>begin? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>eval-sequence <span class=\"synSpecial\">(</span>begin-actions <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>cond? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>cond-&gt;if <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown expression type: EVAL&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>application? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tagged-list? <span class=\"synIdentifier\">exp</span> <span class=\"synSpecial\">'</span>call<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>csdr <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 4.02"},{"data":{"title":"gauche-modeでシングルクオートを補完されないようにする","published":"2015/12/17","tags":["emacs","elisp","Gauche"]},"content":"\n<p>smartparens-modeをアップデートしたら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeでシングルクオート<code>'</code>が補完されて<code>''</code>になってしまいました．<br/>\n以前はsmartparens.elの該当箇所，</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n                           clojure-mode\n                           clojurec-mode\n                           clojurescript-mode\n                           clojurex-mode\n                           common-lisp-mode\n                           emacs-lisp-mode\n                           eshell-mode\n                           geiser-repl-mode\n                           inf-clojure-mode\n                           inferior-emacs-lisp-mode\n                           inferior-lisp-mode\n                           inferior-scheme-mode\n                           lisp-interaction-mode\n                           lisp-mode\n                           monroe-mode\n                           scheme-interaction-mode\n                           scheme-mode\n                           slime-repl-mode\n                           racket-mode\n                           racket-repl-mode<span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">&quot;List of Lisp modes.&quot;</span>\n  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>これに</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span>defcustom sp-lisp-modes <span class=\"synSpecial\">'(</span>cider-repl-mode\n                           clojure-mode\n                           clojurec-mode\n                           clojurescript-mode\n                           clojurex-mode\n                           common-lisp-mode\n                           emacs-lisp-mode\n                           eshell-mode\n                           geiser-repl-mode\n                           inf-clojure-mode\n                           inferior-emacs-lisp-mode\n                           inferior-lisp-mode\n                           inferior-scheme-mode\n                           lisp-interaction-mode\n                           lisp-mode\n                           monroe-mode\n                           scheme-interaction-mode\n                           scheme-mode\n                           slime-repl-mode\n                           racket-mode\n                           racket-repl-mode\n                           gauche-mode<span class=\"synSpecial\">)</span>\n  <span class=\"synConstant\">&quot;List of Lisp modes.&quot;</span>\n  <span class=\"synType\">:type</span> <span class=\"synSpecial\">'(</span>repeat <span class=\"synStatement\">symbol</span><span class=\"synSpecial\">)</span>\n  :group <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>-modeを付け足していたのですが，今回のようにsmartprensを新しいものにした時に消えてしまうのでinit.elに書くことにしました．</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">sp-lisp-modes</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">gauche-mode</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>通常smartparensを使う時には</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">smartparens-config</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>smartparens-global-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>でいいのですが，sp-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/lisp\">lisp</a>-modesにアクセスするために始めにsmartparensをrequireしています．</p>\n\n","slug":"gauche-modeでシングルクオートを補完されないようにする"},{"data":{"title":"SICP 問題 4.01","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 評価順によらず，左から右に評価するlist-of-values</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-eval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-operand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> first-eval\n              <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; 右から左に評価するlist-of-values</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>list-of-values exps env<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>no-operands? exps<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-eval <span class=\"synSpecial\">(</span>list-of-values <span class=\"synSpecial\">(</span>rest-operands exps<span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eval</span> <span class=\"synSpecial\">(</span>first-operand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> env<span class=\"synSpecial\">)</span>\n              first-eval<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 4.01"},{"data":{"title":"SICP 問題 3.82","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>random-in-range x1 x2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x1 <span class=\"synSpecial\">(</span>random-integer <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x2 x1<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>estimate-integral p x1 x2 y1 y2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x2 x1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> y2 y1<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span>monte-carlo\n               <span class=\"synSpecial\">(</span>stream-map p\n                           <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>random-in-range x1 x2<span class=\"synSpecial\">))</span> integers<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>random-in-range y1 y2<span class=\"synSpecial\">))</span> integers<span class=\"synSpecial\">))</span>\n               <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.82"},{"data":{"title":"SICP 問題 3.81","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use srfi-19<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rand-update x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x <span class=\"synConstant\">1103515245</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">12345</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2147483647</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 命令のストリームを引数にとる</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rand stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>randoming s<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> s<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>random-update <span class=\"synSpecial\">(</span>time-nanosecond <span class=\"synSpecial\">(</span>current-time<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>random-update s<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> random-stream\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n        the-empty-stream\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> s1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>rand-update s1<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>rand-update <span class=\"synSpecial\">(</span>time-nanosecond <span class=\"synSpecial\">(</span>current-time<span class=\"synSpecial\">))))</span>\n                       <span class=\"synSpecial\">(</span>stream-map randoming\n                                   random-stream<span class=\"synSpecial\">)))))</span>\n  random-stream<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.81"},{"data":{"title":"SICP 問題 3.80","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>なかなかテスト通らなくて困りました．<br/>\n結局iLを書く位置をvCの次にしたら動きました．<br/>\n元々そこにはdvCがあって，<br/>\n<code>(scale-stream iL (/ -1 C)))</code>がiLの初期化前に行われたのが原因でした．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>RLC R L C dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>vC0 iL0<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> vC <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dvC<span class=\"synSpecial\">)</span> vC0 dt<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> iL <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> diL<span class=\"synSpecial\">)</span> iL0 dt<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dvC <span class=\"synSpecial\">(</span>scale-stream iL <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">-1</span> C<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> diL <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream iL <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> R L<span class=\"synSpecial\">)))</span>\n                             <span class=\"synSpecial\">(</span>scale-stream vC <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> L<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span> vC iL<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> RLC1 <span class=\"synSpecial\">(</span>RLC <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0.2</span> <span class=\"synConstant\">0.1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head (RLC1 10 0) 10)\n(10 . 0)\n(10.0 . 1.0)\n(9.5 . 1.9)\n(8.55 . 2.66)\n(7.220000000000001 . 3.249)\n(5.5955 . 3.6461)\n(3.77245 . 3.84104)\n(1.8519299999999999 . 3.834181)\n(-0.0651605000000004 . 3.6359559)\n(-1.8831384500000004 . 3.2658442599999997)\ndone</pre>\n\n\n","slug":"SICP 問題 3.80"},{"data":{"title":"SICP 問題 3.79","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>solve-2nd f dt h0 dy0<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dy <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> ddy<span class=\"synSpecial\">)</span> dy0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ddy <span class=\"synSpecial\">(</span>stream-map f y dy<span class=\"synSpecial\">))</span>\n  y<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈 第2版\" title=\"計算機プログラムの構造と解釈 第2版\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈 第2版</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題 3.79"},{"data":{"title":"SICP 問題 3.78","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>問題文のまま</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>solve-2nd a b dt y0 dy0<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> dy<span class=\"synSpecial\">)</span> y0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> dy <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> ddy<span class=\"synSpecial\">)</span> dy0 dt<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ddy <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream dy a<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>scale-stream y b<span class=\"synSpecial\">)))</span>\n  y<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.78"},{"data":{"title":"SICP 問題 3.77","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>ループのあるシステムで使えるようにintegrandをdelayed-integrandにする．<br/>\nintegralを呼び出す時の第一引数にはdelayをつける</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream initial-value\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? integrand<span class=\"synSpecial\">)</span>\n                   the-empty-stream\n                   <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span>stream-cdr integrand<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> dt <span class=\"synSpecial\">(</span>stream-car integrand<span class=\"synSpecial\">))</span>\n                                initial-value<span class=\"synSpecial\">)</span>\n                             dt<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral delayed-integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream initial-value\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>integrand <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-integrand<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? integrand<span class=\"synSpecial\">)</span>\n                     the-empty-stream\n                     <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>stream-cdr integrand<span class=\"synSpecial\">))</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> dt <span class=\"synSpecial\">(</span>stream-car integrand<span class=\"synSpecial\">))</span>\n                                  initial-value<span class=\"synSpecial\">)</span>\n                               dt<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.77"},{"data":{"title":"SICP 問題 3.76","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>前回のデータと比べて平均化する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>smooth stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>average <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>stream-map average\n                           <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span>\n                           stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings sense-data<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smooth-data <span class=\"synSpecial\">(</span>smooth sense-data<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>stream-map sign-change-detector\n                smooth-data\n                <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span> smooth-data<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.76"},{"data":{"title":"SICP 問題 3.75","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>バグを探す問題</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings input-stream last-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>avpt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">)</span> last-value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>sign-change-detector avpt last-value<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>make-zero-crossings <span class=\"synSpecial\">(</span>stream-cdr input-stream<span class=\"synSpecial\">)</span>\n                                      avpt<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; s1 s2 s3という順番でストリームが流れてくる時，この手続きでは</span>\n<span class=\"synComment\">;; s1とs2の平均a1をとし，次のs3のところでa1とs3の平均a2とする．</span>\n<span class=\"synComment\">;; ここではs2とs3の平均をとってa2として欲しいので引数を一つ増やす．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings input-stream last-value last-avpt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>avpt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> s1 last-value<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>sign-change-detector avpt last-avpt<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>make-zero-crossings <span class=\"synSpecial\">(</span>stream-cdr input-stream<span class=\"synSpecial\">)</span>\n                                      s1 avpt<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.75"},{"data":{"title":"SICP 問題 3.74","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>last-valueを取る代わりにmapのargstreamsの二つ目に一回分遅らせたsense-dataをとればいい．<br/>\nそうすれば今の値と前回の値を比べて零交差だったかをsign-change-detectorで判定できる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-zero-crossings input-stream last-value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span>sign-change-detector <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">)</span> last-value<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>make-zero-crossings <span class=\"synSpecial\">(</span>stream-cdr input-stream<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>stream-car input-stream<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> zero-crossings <span class=\"synSpecial\">(</span>make-zero-crossings sense-data <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> zero-crossings\n  <span class=\"synSpecial\">(</span>stream-map sign-change-detector sense-data\n              <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span>\n                           sense-data<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.74"},{"data":{"title":"SICP 問題 3.73","published":"2015/12/17","tags":["scheme","SICP"]},"content":"\n<p>問題文と図の通りに．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral integrand initial-value dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> int\n    <span class=\"synSpecial\">(</span>cons-stream initial-value\n                 <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream integrand dt<span class=\"synSpecial\">)</span>\n                              int<span class=\"synSpecial\">)))</span>\n  int<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>RC R C dt<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i v0<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>scale-stream i R<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>integral <span class=\"synSpecial\">(</span>scale-stream i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1</span> C<span class=\"synSpecial\">))</span>\n                           vo dt<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.73"},{"data":{"title":"SICP 問題 3.72","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n<p>sum-squareのところで間違えて立方数をたしていたせいで，<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-ref triple-way-sum-square-number 0)\n87539319</pre>\n\n\n<p>って出てきて驚きました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-square x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>triple-way-sum-square stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>s2 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>s3 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>w1 <span class=\"synSpecial\">(</span>sum-square s1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>sum-square s2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>w3 <span class=\"synSpecial\">(</span>sum-square s3<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> w1 w2 w3<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>cons-stream w1\n                          <span class=\"synSpecial\">(</span>triple-way-sum-square\n                           <span class=\"synSpecial\">(</span>stream-cdr <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>triple-way-sum-square <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> triple-way-sum-square-number\n  <span class=\"synSpecial\">(</span>triple-way-sum-square <span class=\"synSpecial\">(</span>weighted-pairs integers integers sum-square<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>gosh> (stream-head triple-way-sum-square-number 20)\n325\n425\n650\n725\n845\n850\n925\n1025\n1105\n1250\n1300\n1325\n1445\n1450\n1525\n1625\n1690\n1700\n1825\n1850\ndone</p>\n\n","slug":"SICP 問題 3.72"},{"data":{"title":"SICP 問題 3.71","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n<p>問題文通りに．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%DE%A5%CC%A5%B8%A5%E3%A5%F3\">ラマヌジャン</a>数のストリームを作る．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-cube x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a a a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b b b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ramanujan stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>s2 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>weight1 <span class=\"synSpecial\">(</span>sum-cube s1<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>weight2 <span class=\"synSpecial\">(</span>sum-cube s2<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> weight1 weight2<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>cons-stream weight1\n                          <span class=\"synSpecial\">(</span>ramanujan <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>ramanujan <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ramanujan-number\n  <span class=\"synSpecial\">(</span>ramanujan <span class=\"synSpecial\">(</span>weighted-pairs integers integers sum-cube<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head ramanujan-number 6)\n1729\n4104\n13832\n20683\n32832\n39312\ndone</pre>\n\n\n","slug":"SICP 問題 3.71"},{"data":{"title":"SICP 問題 3.70","published":"2015/12/16","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; mergeを参考にして重みをつけてmerge-weightedを定義する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s2car\n                                    <span class=\"synSpecial\">(</span>merge s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span>\n                                           <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge-weighted s1 s2 weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>w1 <span class=\"synSpecial\">(</span>weight s1car<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>weight s2car<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n                   <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> w1 w2<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>cons-stream s1car\n                                 <span class=\"synSpecial\">(</span>merge-weighted <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2 weight<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                    <span class=\"synSpecial\">(</span>cons-stream s2car\n                                 <span class=\"synSpecial\">(</span>merge-weighted s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synComment\">;; pairsを参考にweighted-pairsを定義する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weighted-pairs s t weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>merge-weighted\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>weighted-pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)</span> weight<span class=\"synSpecial\">)</span>\n    weight<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> i+j <span class=\"synSpecial\">(</span>weighted-pairs integers integers <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synError\">2i+3j+5ij</span>\n  <span class=\"synSpecial\">(</span>weighted-pairs integers integers\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 重みづけがちゃんと機能しているかを確認する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-head-weight s n weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>s s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>n n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>done\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; : &quot;</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head-weight i+j 20 (lambda (x) (+ (car x) (cadr x))))\n(1 1) : 2\n(1 2) : 3\n(2 2) : 4\n(1 3) : 4\n(2 3) : 5\n(1 4) : 5\n(3 3) : 6\n(2 4) : 6\n(1 5) : 6\n(3 4) : 7\n(2 5) : 7\n(1 6) : 7\n(4 4) : 8\n(3 5) : 8\n(2 6) : 8\n(1 7) : 8\n(4 5) : 9\n(3 6) : 9\n(2 7) : 9\n(1 8) : 9\ndone\ngosh&gt; (stream-head-weight 2i+3j+5ij 20 (lambda (x) (+ (* 2 (car x))\n                                                      (* 3 (cadr x))\n                                                      (* 5 (car x) (cadr x)))))\n(1 1) : 10\n(1 2) : 18\n(1 3) : 26\n(2 2) : 30\n(1 4) : 34\n(1 5) : 42\n(2 3) : 43\n(1 6) : 50\n(2 4) : 56\n(1 7) : 58\n(3 3) : 60\n(1 8) : 66\n(2 5) : 69\n(1 9) : 74\n(3 4) : 78\n(2 6) : 82\n(1 10) : 82\n(1 11) : 90\n(2 7) : 95\n(3 5) : 96\ndone</pre>\n\n\n","slug":"SICP 問題 3.70"},{"data":{"title":"SICP 問題 3.68","published":"2015/12/15","tags":["scheme","SICP"]},"content":"\n<p>元のpairsと違ってcons-streamを使っていないためdelayされないので無限ループになる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>interleave\n   <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n               t<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.68"},{"data":{"title":"SICP 問題 3.67","published":"2015/12/15","tags":["scheme","SICP"]},"content":"\n<p>二通りやってみました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; interleave</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave\n    <span class=\"synSpecial\">(</span>interleave <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                            <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n                            <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head (pairs integers integers) 20)\n(1 1)\n(1 2)\n(2 2)\n(2 1)\n(2 3)\n(1 3)\n(3 3)\n(3 1)\n(3 2)\n(1 4)\n(3 4)\n(4 1)\n(2 4)\n(1 5)\n(4 4)\n(5 1)\n(4 2)\n(1 6)\n(4 3)\n(6 1)\ndone</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 三つのストリームを混ぜるinterleave</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>interleave3 s1 s2 s3<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>interleave s2 s3<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>interleave3 s2 s3 <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; interleave3を使う</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pairs s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car t<span class=\"synSpecial\">))</span>\n   <span class=\"synSpecial\">(</span>interleave3\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span>pairs <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-cdr t<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head (pairs integers integers) 20)\n(1 1)\n(1 2)\n(2 1)\n(2 2)\n(1 3)\n(3 1)\n(2 3)\n(1 4)\n(4 1)\n(3 2)\n(1 5)\n(5 1)\n(3 3)\n(1 6)\n(6 1)\n(2 4)\n(1 7)\n(7 1)\n(4 2)\n(1 8)\ndone</pre>\n\n\n","slug":"SICP 問題 3.67"},{"data":{"title":"EmacsのインストールとCommandとOptionの設定","published":"2015/12/15","tags":["Emacs","mac"]},"content":"\n<p>これの通りにインストール<br/>\n<a href=\"http://wikemacs.org/wiki/Installing_Emacs_on_OS_X\">Installing Emacs on OS X - WikEmacs</a></p>\n\n<p><a href=\"https://www.naney.org/diki/d/2015-07-24-Emacs.html\">Homebrew &#x3067; IME &#x30A4;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x30D1;&#x30C3;&#x30C1;&#x3092;&#x5F53;&#x3066;&#x305F; Emacs 24.5.1 &#x3092;&#x5165;&#x308C;&#x308B; | nDiki</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>をaliasするときに-nwをつけて端末で動くようにする．</p>\n\n<p>iterm2で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>を使うときはここの設定に合わせる．</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fhayamiz%2Fitems%2F0f0b7a012ec730351678\" title=\"MacのiTerm/Emacsでメタキーを快適に使いたい - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/hayamiz/items/0f0b7a012ec730351678\">qiita.com</a></cite></p>\n\n<p>command+spaceもiterm2に補足されないようにするといい．</p>\n\n","slug":"EmacsのインストールとCommandとOptionの設定"},{"data":{"title":"SICP 問題 3.65","published":"2015/12/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ln2-summands n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synConstant\">1.0</span> n<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>ln2-summands <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> ln2-stream\n  <span class=\"synSpecial\">(</span>partial-sums <span class=\"synSpecial\">(</span>ln2-summands <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head ln2-stream 20)\n1.0\n0.5\n0.8333333333333333\n0.5833333333333333\n0.7833333333333332\n0.6166666666666666\n0.7595238095238095\n0.6345238095238095\n0.7456349206349207\n0.6456349206349207\n0.7365440115440116\n0.6532106782106782\n0.7301337551337552\n0.6587051837051838\n0.7253718503718505\n0.6628718503718505\n0.7216953797836152\n0.6661398242280596\n0.718771403175428\n0.6687714031754279\ndone\ngosh&gt; (stream-head (euler-transform ln2-stream) 20)\n0.7\n0.6904761904761905\n0.6944444444444444\n0.6924242424242424\n0.6935897435897436\n0.6928571428571428\n0.6933473389355742\n0.6930033416875522\n0.6932539682539683\n0.6930657506744464\n0.6932106782106783\n0.6930967180967181\n0.6931879423258734\n0.6931137858557215\n0.6931748806748808\n0.6931239512121866\n0.6931668512550866\n0.6931303775344023\n0.693161647077867\n0.6931346368409872\ndone\ngosh&gt; (stream-head (accelerated-sequence euler-transform ln2-stream) 20)\n1.0\n0.7\n0.6932773109243697\n0.6931488693329254\n0.6931471960735491\n0.6931471806635636\n0.6931471805604039\n0.6931471805599445\n0.6931471805599427\n0.6931471805599454\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\n+nan.0\ndone</pre>\n\n\n<p>3.66はパス</p>\n\n","slug":"SICP 問題 3.65"},{"data":{"title":"SICP 問題 3.64","published":"2015/12/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-improve guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>average guess <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x guess<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>average x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x y<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-limit s tolerance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1 <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>s2 <span class=\"synSpecial\">(</span>stream-car <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> tolerance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> s1 s2<span class=\"synSpecial\">)))</span>\n        s2\n        <span class=\"synSpecial\">(</span>stream-limit <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> tolerance<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x tolerance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-limit <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">)</span> tolerance<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>1.4142156862745097\ngosh&gt; (sqrt 2 0.0001)\n1.4142135623746899</pre>\n\n\n","slug":"SICP 問題 3.64"},{"data":{"title":"SICP 問題 3.63","published":"2015/12/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> guesses\n    <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1.0</span>\n                 <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>guess<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span>sqrt-improve guess x<span class=\"synSpecial\">))</span>\n                             guesses<span class=\"synSpecial\">)))</span>\n  guesses<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1.0</span>\n               <span class=\"synSpecial\">(</span>stream-map <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>guess<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>sqrt-improve guess x<span class=\"synSpecial\">))</span>\n                           <span class=\"synSpecial\">(</span>sqrt-stream x<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>後者は毎回ストリームを作る．\n前者はメモ化されているので一度作られたストリームを使い回す．</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%E2%A5%E9%A5%A4%A5%BA\">メモライズ</a>をやめると両者の効率は同じになる．</p>\n\n","slug":"SICP 問題 3.63"},{"data":{"title":"SICP 問題 3.62","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n<p>二つのべき<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%E9%BF%F4\">級数</a>を割る手続きdiv-stream</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-stream s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> s2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;ZERO-DIVISOR&quot;</span> s2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>mul-streams s1\n                   <span class=\"synSpecial\">(</span>invert-unit-series s2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.62"},{"data":{"title":"SICP 問題 3.61","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n<p>べき<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%E9%BF%F4\">級数</a>Sの逆数を求める手続きinvert-unit-seriesを定義する．<br/>\n問題文の通りですね．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>invert-unit-series stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span>\n               <span class=\"synSpecial\">(</span>mul-series <span class=\"synSpecial\">(</span>scale-stream <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">-1</span><span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>invert-unit-series stream<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.61"},{"data":{"title":"SICP 問題 3.60","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-head s n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>s s<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>n n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">zero?</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'</span>done\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; &quot;</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-series s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>add-streams\n                <span class=\"synSpecial\">(</span>scale-stream <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>mul-series <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> circles <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>mul-series sine-series sine-series<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>mul-series cosine-series cosine-series<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-head circles 10)\n1 0 0 0 0 0 0 0 0 0 done</pre>\n\n\n","slug":"SICP 問題 3.60"},{"data":{"title":"SICP 問題 3.59","published":"2015/12/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synComment\">;; 引数としてべき級数を表現するストリームをとり，級数の積分の定数項を除いた項の係数のストリーム</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integrate-series stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">/</span> stream integers<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> exp-series\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>integrate-series exp-series<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 余弦の微分は正弦なので</span>\n<span class=\"synComment\">;; cos xの微分は-sin x</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> cosine-series\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>integrate-series sine-series<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 正弦の微分は余弦</span>\n<span class=\"synComment\">;; sin xの微分は cos x</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> sine-series\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>integrate-series cosine-series<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.59"},{"data":{"title":"SICP 問題 3.58","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expand num den radix<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">quotient</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> num radix<span class=\"synSpecial\">)</span> den<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span>expand <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> num radix<span class=\"synSpecial\">)</span> den<span class=\"synSpecial\">)</span> den radix<span class=\"synSpecial\">)))</span>\n\n<span class=\"synError\">#|</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> num den<span class=\"synSpecial\">)</span><span class=\"synError\">を表す少数を生成する．</span>\n<span class=\"synSpecial\">(</span>expand <span class=\"synConstant\">1</span> <span class=\"synConstant\">7</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span><span class=\"synError\">は</span>\n<span class=\"synConstant\">1</span>\n<span class=\"synConstant\">4</span>\n<span class=\"synConstant\">2</span>\n<span class=\"synConstant\">8</span>\n<span class=\"synConstant\">5</span>\n<span class=\"synConstant\">7</span>\n\n<span class=\"synSpecial\">(</span>expand <span class=\"synConstant\">3</span> <span class=\"synConstant\">8</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span><span class=\"synError\">は</span>\n<span class=\"synConstant\">3</span>\n<span class=\"synConstant\">7</span>\n<span class=\"synConstant\">5</span>\n<span class=\"synConstant\">0</span>\n\n<span class=\"synError\">つまり0.375で割り切れる．</span>\n<span class=\"synError\">|#</span>\n</pre>\n\n\n","slug":"SICP 問題 3.58"},{"data":{"title":"SICP 問題 3.57","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>メモ化しているので(add-streams (stream-cdr fibs) fibs)の部分で加算が一回行われるだけで済んでいる．<br/>\nこれがメモ化していない場合はfibsの値も(stream-cdr fibs)の値も0番目と1番目の値から加算して求めなくてはならない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fibs\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">0</span>\n               <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span>\n                            <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>stream-cdr fibs<span class=\"synSpecial\">)</span>\n                                         fibs<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.57"},{"data":{"title":"SICP 問題 3.56","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>stream-null? s2<span class=\"synSpecial\">)</span> s1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s1car <span class=\"synSpecial\">(</span>stream-car s1<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>s2car <span class=\"synSpecial\">(</span>stream-car s2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span> s2<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> s1car s2car<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s2car\n                                    <span class=\"synSpecial\">(</span>merge s1 <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                       <span class=\"synSpecial\">(</span>cons-stream s1car\n                                    <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>stream-cdr s1<span class=\"synSpecial\">)</span>\n                                           <span class=\"synSpecial\">(</span>stream-cdr s2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> S <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>scale-stream S <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>scale-stream S <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n                                       <span class=\"synSpecial\">(</span>scale-stream S <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-ref S 0)\n1\ngosh&gt; (stream-ref S 1)\n2\ngosh&gt; (stream-ref S 2)\n3\ngosh&gt; (stream-ref S 3)\n4\ngosh&gt; (stream-ref S 4)\n5\ngosh&gt; (stream-ref S 5)\n6\ngosh&gt; (stream-ref S 6)\n8\ngosh&gt; (stream-ref S 7)\n9\ngosh&gt; (stream-ref S 8)\n10</pre>\n\n\n","slug":"SICP 問題 3.56"},{"data":{"title":"SICP 問題 3.55","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>s0, s0 + s1, s0 + s1 + s2, ...<br/>\nという要素なのでstreamの次の要素とsum-integersの今の要素を足したものがsum-integersの次の要素となる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>partial-sums stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>add-streams <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span>\n                            sum-integers<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> sum-integers\n  <span class=\"synSpecial\">(</span>partial-sums integers<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (stream-ref sum-integers 0)\n1\ngosh&gt; (stream-ref sum-integers 1)\n3\ngosh&gt; (stream-ref sum-integers 2)\n6\ngosh&gt; (stream-ref sum-integers 3)\n10\ngosh&gt; (stream-ref sum-integers 4)\n15</pre>\n\n\n","slug":"SICP 問題 3.55"},{"data":{"title":"SICP 問題 3.54","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>mul-streamsを定義して，0から始まるn番目の階乗，factorialsを定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-streams s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">*</span> s1 s2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorials <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>mul-streams factorials\n                                               <span class=\"synSpecial\">(</span>integers-starting-from <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.54"},{"data":{"title":"SICP 問題 3.53","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-streams s1 s2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-map <span class=\"synIdentifier\">+</span> s1 s2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> s <span class=\"synSpecial\">(</span>cons-stream <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>add-streams s s<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>sは2のn乗のストリームを作る．</p>\n\n","slug":"SICP 問題 3.53"},{"data":{"title":"SICP 問題 3.52","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>sum:210\nメモ化しているためにseqを何回呼び出してもsumに何度も加算されることがない．\nメモ化していない場合はseqを参照するたびにsumに加算されていく．</p>\n\n","slug":"SICP 問題 3.52"},{"data":{"title":"SICP 3.5章のstreamについて","published":"2015/12/09","tags":["scheme","SICP"]},"content":"\n<p>整理しなおす．<br/>\n環境は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a> 0.9.4.<br/>\nstreamを本文通りに実装するとうまくいかない．<br/>\n遅延リストになっていない．<br/>\nstream-mapの挙動からそれがわかる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> low high<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream\n       low\n       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>show x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>ここでREPLには</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0x</pre>\n\n\n<p>と表示されてほしい．<br/>\nstream-mapのifのelse節の一行目．  <br/>\n<code>(apply proc (map stream-car angstreams))</code>となっているので(show 0)となり改行してから0を印字して<br/>\n次に(define x ...)なのでxと印字することを期待したい．</p>\n\n<p>ここで以下のようにstreamを実装したとする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>           \n  <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n                 result<span class=\"synSpecial\">)</span>\n          result<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n</pre>\n\n\n<p>ここで先ほどの</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を実行すると</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10x</pre>\n\n\n<p>となる．<br/>\nリストの先頭の要素以降の評価は遅延してほしいのにすべて評価してしまっている．<br/>\nここでマクロが必要となる．<br/>\ndelayとstream-cdrをマクロで実装する.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p><a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x554F;&#x984C;3.50-3.51 - nrvct&#x306E;&#x65E5;&#x8A18;</a></p>\n\n<p>ここでふたたび</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を実行する．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map show (stream-enumerate-interval 0 10)))\n\n0x</pre>\n\n\n<p>期待通りに動いている．<br/>\nではなぜdefineでdelayとcons-streamを実装した場合に期待通りに動かなかったのかを考える．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>でまはず引数を評価する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> s <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>として考えやすくする．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; ①</span>\n<span class=\"synSpecial\">(</span>stream-map show s<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; stream-mapの定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; cons-streamの定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cons-stream a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; ここでは前の引数から順に評価すると考える．</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car s<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; -&gt; 0</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> show <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr s<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>①の式のsが(stream-cdr s)に変わっただけの式となった．<br/>\nつまりここからsが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a>になるまですべての要素が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的に評価されてしまう．<br/>\nほしいのは遅延リストなのでこれは困る.<br/>\n手続きをsquareに変えると一見遅延リストのように見える．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define x (stream-map square (stream-enumerate-interval 0 10)))\nx\ngosh&gt; x\n(0 . #&lt;closure (memo-proc memo-proc)&gt;)</pre>\n\n\n<p>ただしshowで見たように内部ではリストの末尾までmapで評価され，その評価された値がdelayで包まれている．\ndefineだとdelayの引数とcons-streamの第二引数が先に評価されてしまうので意味がない．\n評価順序を変えるためにここではマクロが必要になる．</p>\n\n<p>今の理解はこんなところです．<br/>\n突っ込みどころがあればお願いします．</p>\n\n","slug":"SICP 3.5章のstreamについて"},{"data":{"title":"SICP 問題 3.51","published":"2015/12/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>show x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span>stream-map show <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synConstant\">0</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>\n0x</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>stream-ref x <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>\n1\n2\n3\n4\n55</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>stream-ref x <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>\n6\n77</pre>\n\n\n<p>memo-procのおかげで<code>(stream-ref x 7)</code>では<code>(stream-ref x 5)</code>の計算は行っていない．\nそのため6と77しか表示されない．</p>\n\n","slug":"SICP 問題 3.51"},{"data":{"title":"SICP 問題 3.50","published":"2015/12/07","tags":["scheme","SICP"]},"content":"\n<p>マクロを使ってる部分は<br/>\n<a href=\"http://d.hatena.ne.jp/nrvct/20091223/1261518527\">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x554F;&#x984C;3.50-3.51 - nrvct&#x306E;&#x65E5;&#x8A18;</a><br/>\nここから引用．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 次の二つは引用元から</span>\n<span class=\"synComment\">;; cons-streamは評価順序を変えたいのでマクロ</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> cons-stream\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> b<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; delayもマクロ．マクロよくわかってない．</span>\n<span class=\"synComment\">;; メモ化する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> <span class=\"synStatement\">delay</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">((</span>_ <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>memo-proc <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> stream<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> stream<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-ref s n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>stream-ref <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-for-each proc s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span>stream-car s<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>stream-for-each proc <span class=\"synSpecial\">(</span>stream-cdr s<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-stream s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>stream-for-each display-line s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>display-line x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> x<span class=\"synSpecial\">))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-null? stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> stream<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> the-empty-stream <span class=\"synSpecial\">'())</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-enumerate-interval low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> low high<span class=\"synSpecial\">)</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span>cons-stream\n       low\n       <span class=\"synSpecial\">(</span>stream-enumerate-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> high<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-filter pred stream<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>stream-null? stream<span class=\"synSpecial\">)</span> the-empty-stream<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>pred <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span>stream-car stream<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>stream-filter pred\n                                     <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>stream-filter pred <span class=\"synSpecial\">(</span>stream-cdr stream<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">force</span> delayed-object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>delayed-object<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>memo-proc proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>already-run? false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>result false<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> already-run?<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> result <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> already-run? true<span class=\"synSpecial\">)</span>\n                 result<span class=\"synSpecial\">)</span>\n          result<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; 3.50</span>\n<span class=\"synComment\">;; stream-map</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>stream-map proc <span class=\"synSpecial\">.</span> argstreams<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>stream-null? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> argstreams<span class=\"synSpecial\">))</span>\n      the-empty-stream\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span>\n        <span class=\"synSpecial\">(</span>cons-stream <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-car argstreams<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> stream-map\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> stream-cdr argstreams<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.50"},{"data":{"title":"SICP 問題 3.49","published":"2015/12/06","tags":["scheme","SICP"]},"content":"\n<p>ある口座の内容によって次にアクセスする口座の内容がかわるような状況．\n具体的な状況は思い浮かばず．</p>\n\n","slug":"SICP 問題 3.49"},{"data":{"title":"SICP 問題 3.48","published":"2015/12/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; make-accountの引数にidを追加．</span>\n<span class=\"synComment\">;; dispatchの引数に'numberで口座番号を参照できる．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account-and-serializer balance id<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n               balance<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n    balance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>balance-serializer <span class=\"synSpecial\">(</span>make-serializer<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> withdraw<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> deposit<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>balance<span class=\"synSpecial\">)</span> balance<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">)</span> id<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">)</span> balance-serializer<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exchange account1 account2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>difference <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>account1 <span class=\"synSpecial\">'</span>balance<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>account2 <span class=\"synSpecial\">'</span>balance<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">((</span>account1 <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> difference<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>account2 <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> difference<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 口座番号の小さいほうから先にserialize.</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>serialized-exchange account1 account2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>id1 <span class=\"synSpecial\">(</span>account1 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>id2 <span class=\"synSpecial\">(</span>account2 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smaller <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> id1 id2<span class=\"synSpecial\">)</span> account1 account2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>bigger <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> id1 id2<span class=\"synSpecial\">))</span> account2 account1<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>serializer1 <span class=\"synSpecial\">(</span>smaller <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>serializer2 <span class=\"synSpecial\">(</span>bigger <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>serializer2 <span class=\"synSpecial\">(</span>serializer1 exchange<span class=\"synSpecial\">))</span>\n         account1 account2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>smallerとbiggerへの束縛のいい方法がわからず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>で聞いたところ，</p>\n\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">R7RS (というか let-values が使える環境) ならこんな感じかなぁ。&#10;(let-values (((x y) (if (&lt; a b) (values a b) (values b a))))&#10;  body ...)</p>&mdash; 齊藤敦志 (@SaitoAtsushi) <a href=\"https://twitter.com/SaitoAtsushi/status/673495343506448384\">December 6, 2015</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><cite class=\"hatena-citation\"><a href=\"https://t.co/GfONknuk5e\">t.co</a></cite></p>\n\n<p>と教えていただいたので書き換えました．<br/>\n二回比較するのが嫌だったんですよね．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 口座番号の小さいほうから先にserialize.</span>\n<span class=\"synSpecial\">(</span>use srfi-11<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>serialized-exchange account1 account2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>id1 <span class=\"synSpecial\">(</span>account1 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>id2 <span class=\"synSpecial\">(</span>account2 <span class=\"synSpecial\">'</span>id<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>let-values <span class=\"synSpecial\">(</span>smaller bigger<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> id1 id2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">values</span> id1 id2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">values</span> id2 id1<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>serializer1 <span class=\"synSpecial\">(</span>smaller <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>serializer2 <span class=\"synSpecial\">(</span>bigger <span class=\"synSpecial\">'</span>serializer<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>serializer2 <span class=\"synSpecial\">(</span>serializer1 exchange<span class=\"synSpecial\">))</span>\n         account1 account2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.48"},{"data":{"title":"SICP 問題 3.47","published":"2015/12/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synError\">#|</span>\n<span class=\"synError\">このような形でmake-semaphoreは使われる．</span>\n<span class=\"synError\">|#</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-serializer<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>semaphore <span class=\"synSpecial\">(</span>make-semaphore <span class=\"synConstant\">6</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>serialized-p <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>semaphore <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> p args<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>semaphore <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span>\n          val<span class=\"synSpecial\">))</span>\n      serialized-p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-mutex<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cell <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> false<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>the-mutex m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>test-and-set! cell<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>the-mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;retry</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>release <span class=\"synSpecial\">(</span>clear! cell<span class=\"synSpecial\">)))))</span>\n    the-mutex<span class=\"synSpecial\">))</span>\n<span class=\"synError\">#|</span>\n<span class=\"synError\">上を見ればわかるように評価した手続きをした後はかならずreleaseしている．</span>\n<span class=\"synError\">それを踏まえてmake-semaphoreを実装する．</span>\n\n<span class=\"synError\">・release</span>\n<span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span><span class=\"synError\">をするとcellがクリアされる．</span>\n<span class=\"synError\">何度clear!しても問題はないのでsemaphoreがreleaseするたびに</span><span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span><span class=\"synError\">を実行して次の処理が行えるようにする．</span>\n<span class=\"synError\">releaseした後にはcounterから1引いておく.</span>\n\n<span class=\"synError\">・acquire</span>\n<span class=\"synError\">releaseはmake-serializerのようにセマフォを使う手続きから行うのでacquire内では行わない．</span>\n<span class=\"synError\">counterがnと同じならば</span><span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span><span class=\"synError\">でロックし，カウンターを１増やす．</span>\n<span class=\"synError\">counterがnより大きければ</span><span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span><span class=\"synError\">内でretryする．</span>\n<span class=\"synError\">ここでカウンターを１増やさないとreleaseと数が合わなくなり，counterが負になるので1増やす．</span>\n<span class=\"synError\">counterがnよりも小さければcounterを１増やす．処理が終われば呼び出し元からreleaseが呼ばれる．</span>\n<span class=\"synError\">|#</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-semaphore n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">(</span>make-mutex<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>acquire<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;=</span> counter n<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> counter n<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>release<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>mutex <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>acquire<span class=\"synSpecial\">)</span> acquire<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>release<span class=\"synSpecial\">)</span> release<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MAKE-SEMAPHORE&quot;</span> m<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.47"},{"data":{"title":"SICP 問題 3.46","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n<p>cellがfalseの時に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のプロセスが同時にcellにアクセスすればmutexは破られる</p>\n\n","slug":"SICP 問題 3.46"},{"data":{"title":"SICP 問題 3.45","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n<p>serializerが入れ子になるために無限ループする</p>\n\n","slug":"SICP 問題 3.45"},{"data":{"title":"SICP 問題 3.44","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>transfer from-account to-account amount<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>from-account <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> amount<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>to-account <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> amount<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>交換と違い，残高の差を計算する必要がないので問題はおきない</p>\n\n","slug":"SICP 問題 3.44"},{"data":{"title":"SICP 問題 3.43","published":"2015/12/05","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151205012804\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151205/20151205012804.jpg\" alt=\"f:id:wat-aro:20151205012804j:image\" title=\"f:id:wat-aro:20151205012804j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p>deposit，withdrawが直列化されてない場合，<br/>\n書き換えられる前の値を参照したまま変更後の値をsetしてしまうために残高の合計が保存されない場合が有る．</p>\n\n","slug":"SICP 問題 3.43"},{"data":{"title":"SICP 問題 3.42","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n<p>安全な変更．並列性の間に違いはない．</p>\n\n","slug":"SICP 問題 3.42"},{"data":{"title":"SICP 問題 3.41","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n<p>変更箇所は書き換えによる変更を行わないのでそのままでも害はないので賛成しない．</p>\n\n","slug":"SICP 問題 3.41"},{"data":{"title":"SICP 問題 3.40","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code\" data-lang=\"\" data-unlink>10^2,10^3,10^4,10^5,10^6が取り得る値となる．  \n直列かするとこのうち，10^6のみが残る．</pre>\n\n\n","slug":"SICP 問題 3.40"},{"data":{"title":"SICP 問題 3.39","published":"2015/12/04","tags":["scheme","SICP"]},"content":"\n<p>101:P1がxに100をセットしてから，P2がxに101をセットする<br/>\n121:P2がxに11をセットしてから，P1がxに121をセットする<br/>\n100:P1がxから10をとってきて，そこでP2がxに11をセット，P1が続きの(* 10 10)を計算してxに100をセットする</p>\n\n","slug":"SICP 問題 3.39"},{"data":{"title":"SICP 問題 3.38","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> balance <span class=\"synConstant\">100</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; Peter</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance <span class=\"synConstant\">10</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Paul</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; Mary</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> balance <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;;a ３つのプロセスがある順序で逐次的に実行された場合のbalanceの取り得る値</span>\n<span class=\"synComment\">;;35,40,45,50</span>\n\n<span class=\"synComment\">;;b プロセスが混ざり合った場合</span>\n<span class=\"synComment\">;; 参照した後に上書きする前に他のプロセスによって値を上書きされる事がある．</span>\n<span class=\"synComment\">;; そのために実質的に一つのプロセスしか走ってない時や二つのプロセスしか走ってない場合が起き得る</span>\n<span class=\"synComment\">;; 新たに55,80,90,110といった値を取る事がある．</span>\n<span class=\"synComment\">;; 90を取る例</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151203214533\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151203/20151203214533.jpg\" alt=\"f:id:wat-aro:20151203214533j:image\" title=\"f:id:wat-aro:20151203214533j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.38"},{"data":{"title":"SICP 問題 3.37","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c+ x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>adder x y z<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c- x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>adder x z y<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c* x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>multiplier x y z<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>c/ x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>multiplier x z y<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cv x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>z <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>constant x z<span class=\"synSpecial\">)</span>\n    z<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.37"},{"data":{"title":"SICP 問題 3.36","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> a <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> b <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>set-value! a <span class=\"synConstant\">10</span> <span class=\"synSpecial\">'</span>user<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>set-value!を評価している間で</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>foreach-except setter inform-about-value constraints<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>が評価される環境を示す環境図を書け．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151203003621\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151203/20151203003621.jpg\" alt=\"f:id:wat-aro:20151203003621j:image\" title=\"f:id:wat-aro:20151203003621j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.36"},{"data":{"title":"SICP 問題 3.35","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n<p>平方器を新しい基本制約として定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>squarer a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>has-value? b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>get-value b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;square less than 0 -- SQUARER&quot;</span> <span class=\"synSpecial\">(</span>get-balue b<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>set-value! a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> b<span class=\"synSpecial\">)</span> me<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>set-value! b <span class=\"synSpecial\">(</span>square a<span class=\"synSpecial\">)</span> me<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! a me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! b me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>me request<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-have-a-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-lost-my-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- SQUARER&quot;</span> request<span class=\"synSpecial\">))))</span>\n  me<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.35"},{"data":{"title":"SICP 問題 3.34","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n<p>平方器をmultiplierを使って実装する時の問題点</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>value false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>informant false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>constraints <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-my-value newval setter<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>has-value? me<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> value newval<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> informant setter<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>for-each-except setter\n                              inform-about-value\n                              constraints<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> value newval<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Contradiction&quot;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> value newval<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">'</span>ignored<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>forget-my-value retractor<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> retractor informant<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> informant false<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>for-each-except retractor\n                                  inform-about-no-value\n                                  constraints<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">'</span>ignored<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>connect new-constraint<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> new-constraint constraints<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> constraints\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> new-constraint constraints<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>has-value? me<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>inform-about-value new-constraint<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>me request<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>has-value?<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> informant true false<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>value<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>set-value!<span class=\"synSpecial\">)</span> set-my-value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>forget<span class=\"synSpecial\">)</span> forget-my-value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>connect<span class=\"synSpecial\">)</span> connect<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- CONNECTOR&quot;</span> request<span class=\"synSpecial\">))))</span>\n    me<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier m1 m2 product<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>get-value m1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? m2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>get-value m2<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span>set-value! product <span class=\"synConstant\">0</span> me<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>has-value? m2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-value! product\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>get-value m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-value m2<span class=\"synSpecial\">))</span>\n                       me<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>has-value? m1<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-value! m2\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>get-value product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-value m1<span class=\"synSpecial\">))</span>\n                       me<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>has-value? product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>has-value? m2<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-value! m1\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>get-value product<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-value m2<span class=\"synSpecial\">))</span>\n                       me<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! product me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! m1 me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>forget-value! m2 me<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>me request<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-have-a-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-new-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> request <span class=\"synSpecial\">'</span>I-lost-my-value<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>process-forget-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request -- MULTIPLIER&quot;</span> request<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>connect m1 me<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>connect m2 me<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>connect product me<span class=\"synSpecial\">)</span>\n  me<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>squarer a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>multiplier a a b<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; bを求める場合はうまく動く．aが定まれば(* a a)の値がbに伝わる．</span>\n<span class=\"synComment\">;; aを求める時にはこれは動かない．</span>\n<span class=\"synComment\">;; multiplierは第一引数を求める時に(/ 第三引数 第二引数)を計算するが，</span>\n<span class=\"synComment\">;; 今の場合は第二引数がわからない．</span>\n<span class=\"synComment\">;; 同様に第二引数も求められない．</span>\n</pre>\n\n\n","slug":"SICP 問題 3.34"},{"data":{"title":"SICP 問題 3.33","published":"2015/12/03","tags":["scheme","SICP"]},"content":"\n<p>入力として三つの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%CD%A5%AF%A5%BF\">コネクタ</a>a,b,cをとり，cの値がaとbの値の平均であるような制約を達成する手続きaverager.<br/>\nadderとmultiplierを繋ぐ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%CD%A5%AF%A5%BF\">コネクタ</a>をp.<br/>\n定数2に繋がる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%CD%A5%AF%A5%BF\">コネクタ</a>をxとした．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>averager a b c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>p <span class=\"synSpecial\">(</span>make-connector<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>adder a b p<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>multiplier c x p<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>constant <span class=\"synConstant\">2</span> x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.33"},{"data":{"title":"SICP 3.4.2 parallel-executeの実装","published":"2015/12/03","tags":["Gauche","scheme","SICP"]},"content":"\n<p>これ以降やるための準備です．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>.threadsの使い方がわからなかったのでリファレンス見ながらググって見つけたコードを理解しました．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use gauche.threads<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> time proc<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">(</span>thread-sleep! time<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delay-print time name<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">delay</span> time <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                <span class=\"synSpecial\">(</span>print name<span class=\"synSpecial\">)</span>\n                name<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(let ((t1 (make-thread (delay-print 4 &#34;First thread&#34;)))\n            (t2 (make-thread (delay-print 2  &#34;Secound thread&#34;))))\n        (thread-start! t1)\n        (thread-start! t2)\n        (print &#34;Main thread&#34;)\n        (thread-join! t1)\n        (thread-join! t2))\nMain thread\nSecound thread\nFirst thread\n&#34;Secound thread&#34;</pre>\n\n\n<p><code>procs</code>にある手続きに対して全て<code>make-thread</code>して<code>threads</code>に保存．<br/>\n<code>threads</code>に保存したスレッドを全てスタートし，ジョインで値を取る．<br/>\nスレッドをスタートしているので値を得る前に次のスレッドをスタートできるので並列に実行していることになる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>parallel-execute <span class=\"synSpecial\">.</span> procs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>i <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>threads <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> i <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span>make-thread proc i<span class=\"synSpecial\">))</span> procs<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> thread-start! threads<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> thread-join! threads<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (parallel-execute\n       (delay-print 4 &#34;A&#34;)\n       (delay-print 2 &#34;B&#34;)\n       (delay-print 1 &#34;C&#34;))\nC\nB\nA\n(&#34;A&#34; &#34;B&#34; &#34;C&#34;)</pre>\n\n\n<p>　<br/>\n　<br/>\n　<br/>\n参考</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fsicp.g.hatena.ne.jp%2Ftkmr2000%2F20090212%2F1234456834\" title=\" 3.4.2 並列性の制御機構 - SICP読書メモ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://sicp.g.hatena.ne.jp/tkmr2000/20090212/1234456834\">sicp.g.hatena.ne.jp</a></cite></p>\n\n","slug":"SICP 3.4.2 parallel-executeの実装"},{"data":{"title":"schemeでクイックソートとマージソート","published":"2015/11/29","tags":["scheme"]},"content":"\n<p>こういうのを書いてなかったので．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; クイックソート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>quick-sort lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      lst\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>quick-sort <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> x first<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> first<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>quick-sort <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> x first<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; マージソート</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge-sort lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>merge l m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> m<span class=\"synSpecial\">)</span> l<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> m<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>merge l <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> m<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>divide lst<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n        lst\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>list-size <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> lst<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>half <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">floor</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> list-size <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>merge <span class=\"synSpecial\">(</span>divide <span class=\"synSpecial\">(</span>take lst half<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>divide <span class=\"synSpecial\">(</span>drop lst <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> list-size half<span class=\"synSpecial\">)))))))</span>\n  <span class=\"synSpecial\">(</span>divide lst<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"schemeでクイックソートとマージソート"},{"data":{"title":"Gaucheの組み込み手続きの戻し方","published":"2015/11/29","tags":["gauche"]},"content":"\n<p>何回も忘れてその都度ググったりプログライング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>見るのでダメですね．\nここに書いておきます．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> func-name <span class=\"synSpecial\">(</span>with-module gauche func-name<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"Gaucheの組み込み手続きの戻し方"},{"data":{"title":"SICP 問題 3.32","published":"2015/11/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; A-&gt;B-&gt;Cという順に並んだ回線があったとする．</span>\n<span class=\"synComment\">;; FIFOの場合Aが変化するとそれがBに伝わり，次のactionが実行されCに伝わる．</span>\n<span class=\"synComment\">;; FILOの場合Aが変化してもまずB-C間のactionが実行されCは変化しない．</span>\n<span class=\"synComment\">;; そのあとA-B間のactionが実行されるAの変化がBに伝わる．</span>\n<span class=\"synComment\">;; FILOの場合は最後まで変化が伝わらないためFIFOが使われている．</span>\n</pre>\n\n\n","slug":"SICP 問題 3.32"},{"data":{"title":"SICP 問題 3.31","published":"2015/11/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; accept-action-procedure!でprocを実行して初期化している部分で初期化しないとどうなるか．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>signal-value <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>action-procedures <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-my-signal! new-value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> signal-value new-value<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> signal-value new-value<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>call-each action-procedures<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accept-action-procedure! proc<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> action-procedures <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> proc action-procedures<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>proc<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;この(proc)がないとどうなるか</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>get-signal<span class=\"synSpecial\">)</span> signal-value<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>set-signal!<span class=\"synSpecial\">)</span> set-my-signal!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>add-action!<span class=\"synSpecial\">)</span> accept-action-procedure!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- WIRE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; and-gate手続きをつかって述べる．</span>\n<span class=\"synComment\">;; ここでprocがないとここの内部定義and-action-procedureを登録しているだけで実行しない．</span>\n<span class=\"synComment\">;; つまりafter-delayも実行しない．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>and-action-procedure<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-value\n           <span class=\"synSpecial\">(</span>logical-and <span class=\"synSpecial\">(</span>get-signal a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-signal a2<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>after-delay and-gate-delay\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                     <span class=\"synSpecial\">(</span>set-signal! output new-value<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>add-action! a1 and-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-action! a2 and-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; after-delay手続きでthe-agendaに登録している．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>after-delay <span class=\"synStatement\">delay</span> action<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-to-agenda! <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synStatement\">delay</span> <span class=\"synSpecial\">(</span>current-time the-agenda<span class=\"synSpecial\">))</span>\n                  action\n                  the-agenda<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; propagateはthe-agendaに登録されたactionを一つずつ実行する．</span>\n<span class=\"synComment\">;; after-delayが呼ばれていないので何も登録されていないため何も実行できない．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>propagate<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-agenda? the-agenda<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'</span>done\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>first-item <span class=\"synSpecial\">(</span>first-agenda-item the-agenda<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>first-item<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>remove-first-agenda-item! the-agenda<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>propagate<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.31"},{"data":{"title":"SICP 問題 3.30","published":"2015/11/25","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 最後のfull-adderのc-inは0．</span>\n<span class=\"synComment\">;; (make-wire)の初期値は0と仮定してます．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ripple-carry-adder Ak Bk Sk C<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>c-in <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Ak<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>full-adder <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Ak<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Bk<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Sk<span class=\"synSpecial\">)</span> C<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>full-adder <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Ak<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Bk<span class=\"synSpecial\">)</span> c-in <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> Sk<span class=\"synSpecial\">)</span> C<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>ripple-carry-adder <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Ak<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Bk<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> Sk<span class=\"synSpecial\">)</span> c-in<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.30"},{"data":{"title":"SICP 問題 3.29","published":"2015/11/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>b1 <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>b2 <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>c <span class=\"synSpecial\">(</span>make-wire<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>inverter a1 b1<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>inverter a2 b2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>and-gate b1 b2 c<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>inverter c output<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 遅延時間は(+ and-gate-delay (* 2 inverter-delay))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.29"},{"data":{"title":"SICP 問題 3.28","published":"2015/11/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-gate a1 a2 output<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>or-action-procedure<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-value\n           <span class=\"synSpecial\">(</span>logical-or <span class=\"synSpecial\">(</span>get-signal a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-signal a2<span class=\"synSpecial\">))))</span>\n      <span class=\"synSpecial\">(</span>after-delay or-gate-delay\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                     <span class=\"synSpecial\">(</span>set-signal! output new-value<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>add-action! a1 or-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>add-action! a2 or-action-procedure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.28"},{"data":{"title":"SICP 問題 3.26","published":"2015/11/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; tree</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-tree key value left-branch right-branch<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> key value left-branch right-branch<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; 選択子</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>key-tree tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>value-tree tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> tree<span class=\"synSpecial\">))</span>\n  <span class=\"synComment\">;; set</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-value! value tree<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-left-branch! left tree<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> tree<span class=\"synSpecial\">)</span> left<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-right-branch! right tree<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> tree<span class=\"synSpecial\">)</span> right<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span>make-tree <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-list<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> table<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n                   table\n                   <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>value-tree table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>left-branch table<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>right-branch table<span class=\"synSpecial\">))))))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-list value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>key-tree local-table<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span><span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> local-table <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>set-value! <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span> table<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>left-branch table<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>set-left-branch! <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span> table<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>left-branch table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>key-tree table<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>right-branch table<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>set-right-branch! <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span> table<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>iter key-list <span class=\"synSpecial\">(</span>right-branch table<span class=\"synSpecial\">))))))</span>\n      <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-iter! key-list value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>make-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> value <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())</span>\n          <span class=\"synSpecial\">(</span>make-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>insert-iter! <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'())))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> local-table<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>printing<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">((</span>error <span class=\"synConstant\">&quot;Unknown operation --TABLE&quot;</span> m<span class=\"synSpecial\">)))))</span>\n  dispatch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup table key-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>table <span class=\"synSpecial\">'</span>lookup<span class=\"synSpecial\">)</span> key-list<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! table key-list value<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>table <span class=\"synSpecial\">'</span>insert!<span class=\"synSpecial\">)</span> key-list value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing table<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>table <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define t1 (make-table))\nt1\ngosh&gt; (insert! t1 &#39;(1 3) &#39;a)\ndone\ngosh&gt; (printing t1)\n(1 (3 a () ()) () ())\n#&lt;undef&gt;\ngosh&gt; (lookup t1 &#39;(1 3))\n(3 a () ())</pre>\n\n\n","slug":"SICP 問題 3.26"},{"data":{"title":"SICP 問題 3.25","published":"2015/11/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; keyではなくkey-listを'(x y z)という形で渡す</span>\n<span class=\"synComment\">;; key-listのcdrがnullになるまで再帰すればkeyの数がいくつでも対応できる</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*local-table*</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-list<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> key-list<span class=\"synSpecial\">)</span>\n            false\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> record\n                   <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n                       record\n                       <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span> recordf<span class=\"synSpecial\">)))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-list value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>key-list key-list<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>table local-table<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> key-list<span class=\"synSpecial\">)</span>\n            false\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> table<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> record value<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> key-list<span class=\"synSpecial\">)</span>\n                            record<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> table\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> key-list<span class=\"synSpecial\">)</span> value<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> table<span class=\"synSpecial\">)))))))</span>\n      <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- TABLE&quot;</span> m<span class=\"synSpecial\">)))))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 3.25"},{"data":{"title":"SICP 問題 3.24","published":"2015/11/22","tags":["scheme","SICP"]},"content":"\n<p>assocをequal?以外を使ってテストできるようにする．\nmake-table手続きはキーの等価性に使うsame-key?手続きを引数にとる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-table same-key?<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key value records<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> records<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span>same-key? key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> records<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> records<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> records<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>local-table <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">*table*</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup key-1 key-2<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> record<span class=\"synSpecial\">)</span>\n                  false<span class=\"synSpecial\">))</span>\n            false<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert! key-1 key-2 value<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>subtable <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> subtable\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>record <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assoc</span> key-2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> record\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> record value<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> subtable\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">)</span>\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> subtable<span class=\"synSpecial\">)))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> local-table\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> key-1\n                                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> key-2 value<span class=\"synSpecial\">))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> local-table<span class=\"synSpecial\">)))))</span>\n      <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>lookup-proc<span class=\"synSpecial\">)</span> lookup<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-proc!<span class=\"synSpecial\">)</span> insert!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown operation -- TABLE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.24"},{"data":{"title":"SICP 問題 3.23","published":"2015/11/20","tags":["scheme","SICP"]},"content":"\n<p>対を使って前後へのポインタを持ったdequeを実装する．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151120/20151120224817.jpg\" alt=\"f:id:wat-aro:20151120224817j:plain\" title=\"f:id:wat-aro:20151120224817j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; dequeの実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>value-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caar</span> ptr<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prev-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdar</span> ptr<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next-ptr ptr<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> ptr<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; ((value))というリストを作る</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-ptr value<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> value<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>set-front-ptr! queue <span class=\"synSpecial\">'())</span>\n  <span class=\"synSpecial\">(</span>set-rear-ptr! queue <span class=\"synSpecial\">'())</span>\n  queue<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>printing queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>deque <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> deque<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>value-ptr deque<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>next-ptr deque<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-front-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> queue item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-rear-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> queue item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-prev-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> ptr<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-next-ptr! ptr item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> ptr item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>set-prev-ptr! <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)</span>\n                          new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-next-ptr! new-item\n                          <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span>make-ptr item<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>set-next-ptr! <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">)</span>\n                          new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-prev-ptr! new-item\n                          <span class=\"synSpecial\">(</span>rear-queue queue<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-item<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">'</span>ok<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;FRONT-DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>old-front-ptr <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span>new-front-ptr <span class=\"synSpecial\">(</span>next-ptr old-front-ptr<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-front-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>set-next-ptr! old-front-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-prev-ptr! new-front-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-front-ptr! queue new-front-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-front-ptr<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;REAR-DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-rear-ptr <span class=\"synSpecial\">(</span>prev-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">(</span>old-rear-ptr <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> new-rear-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>make-empty-queue queue<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-rear<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>set-prev-ptr! old-rear-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-next-ptr! new-rear-ptr\n                                 <span class=\"synSpecial\">'())</span>\n                  <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-rear-ptr<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>value-ptr old-rear-ptr<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (printing q1)\n()\ngosh&gt; (front-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(c b a)\ngosh&gt; (front-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-delete-queue! q1)\nb\ngosh&gt; (front-delete-queue! q1)\nok\ngosh&gt; (printing q1)\n()\ngosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (printing q1)\n()\ngosh&gt; (front-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(c b a)\ngosh&gt; (front-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(b a)\ngosh&gt; (front-delete-queue! q1)\nb\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (front-delete-queue! q1)\na\ngosh&gt; (printing q1)\n()\ngosh&gt; (rear-insert-queue! q1 &#39;a)\nok\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (rear-insert-queue! q1 &#39;b)\nok\ngosh&gt; (printing q1)\n(a b)\ngosh&gt; (rear-insert-queue! q1 &#39;c)\nok\ngosh&gt; (printing q1)\n(a b c)\ngosh&gt; (rear-delete-queue! q1)\nc\ngosh&gt; (printing q1)\n(a b)\ngosh&gt; (rear-delete-queue! q1)\nb\ngosh&gt; (printing q1)\n(a)\ngosh&gt; (rear-delete-queue! q1)\na\ngosh&gt; (printing q1)\n()</pre>\n\n\n","slug":"SICP 問題 3.23"},{"data":{"title":"SICP 問題 3.22","published":"2015/11/20","tags":["scheme","SICP"]},"content":"\n<p>局所状態を持つ手続きとしてキューを定義する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>queue <span class=\"synSpecial\">'</span>insert-queue!<span class=\"synSpecial\">)</span> item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>queue <span class=\"synSpecial\">'</span>delete-queue!<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>front-ptr <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">(</span>rear-ptr <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue?<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> front-ptr<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-queue! item<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-item <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> item<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue?<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> front-ptr new-item<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> rear-ptr new-item<span class=\"synSpecial\">)</span>\n               front-ptr<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> rear-ptr new-item<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> rear-ptr new-item<span class=\"synSpecial\">)</span>\n               front-ptr<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-queue!<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue?<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;DELETE called with an empty queue&quot;</span> front-ptr<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> front-ptr <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> front-ptr<span class=\"synSpecial\">))</span>\n             front-ptr<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>insert-queue!<span class=\"synSpecial\">)</span>\n             insert-queue!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>delete-queue!<span class=\"synSpecial\">)</span>\n             delete-queue!<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Undefined operation -- MAKE-QUEUE&quot;</span> m<span class=\"synSpecial\">))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q1 (make-queue))\nq1\ngosh&gt; (insert-queue! q1 &#39;a)\n(a)\ngosh&gt; (insert-queue! q1 &#39;b)\n(a b)\ngosh&gt; (delete-queue! q1)\n(b)</pre>\n\n\n","slug":"SICP 問題 3.22"},{"data":{"title":"SICP 問題 3.21","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> queue<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-front-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> queue item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-rear-ptr! queue item<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> queue item<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-queue<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'()</span> <span class=\"synSpecial\">'()))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>front-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;FRONT called with an empty queue&quot;</span> queue<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>insert-queue! queue item<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> item <span class=\"synSpecial\">'())))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-front-ptr! queue new-pair<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-pair<span class=\"synSpecial\">)</span>\n           queue<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>rear-ptr queue<span class=\"synSpecial\">)</span> new-pair<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>set-rear-ptr! queue new-pair<span class=\"synSpecial\">)</span>\n           queue<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-queue! queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-queue? queue<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;DELETE! called with an empty queue&quot;</span> queue<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>set-front-ptr! queue <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">)))</span>\n         queue<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>項目がキューに二度挿入されているのではなく，最後に挿入した項目へ向いたポインタが二つある．\nfront-ptrの最後のポインタとrear-ptrがそう．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; print-queue</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>print-queue queue<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>front-ptr queue<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.21"},{"data":{"title":"SICP 問題 3.19","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>答え見た．<br/>\n<a href=\"https://github.com/nomnel/SICP/blob/master/3/19.scm\">https://github.com/nomnel/SICP/blob/master/3/19.scm</a><br/>\n一歩ずつ進むポインタと二歩ずつ進むポインタが同じになれば循環している．<br/>\nうまいこと考えてるな.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>look-check x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>check x0 x1<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> x0 x1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x1<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x1<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>check <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x1<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>check <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x<span class=\"synSpecial\">))</span>\n      <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.19"},{"data":{"title":"SICP 問題 3.18","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 循環するリストを見つける手続き</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cycle? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> recur <span class=\"synSpecial\">((</span>x x<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>record <span class=\"synSpecial\">'()))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> x record<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x record<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x record<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.18"},{"data":{"title":"SICP 問題 3.17","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>任意の構造の異なる対の個数を返すcount-pairsを完成させる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-pairs x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> pair-list <span class=\"synSpecial\">'())</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur s<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> s pair-list<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> pair-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> s pair-list<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n              <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>recur s<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.17"},{"data":{"title":"SICP 問題 3.16","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>ポインタが同じ構造を指していた場合に重複して数えてしまう．<br/>\nさらに，循環リストの場合は結果が返ってこない．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-pairs x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">))</span>\n      <span class=\"synConstant\">0</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>count-pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>count-pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n         <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119232255\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119232255.jpg\" alt=\"f:id:wat-aro:20151119232255j:image\" title=\"f:id:wat-aro:20151119232255j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.16"},{"data":{"title":"SICP 問題 3.15","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> z1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> z2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>set-to-wow! x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-car!</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>wow<span class=\"synSpecial\">)</span>\n  x<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>(set-to-wow! z1)と(set-to-wow! z2)の結果の箱とポインタ図</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119231205\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119231205.jpg\" alt=\"f:id:wat-aro:20151119231205j:image\" title=\"f:id:wat-aro:20151119231205j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.15"},{"data":{"title":"SICP 問題 3.14","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>mysteryはreverseと同じ結果を返し，xを先頭の要素だけを取り出したリストに置き換える．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mystery x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop x y<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span>\n        y\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>temp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> x y<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>loop temp x<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>loop x <span class=\"synSpecial\">'()))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119230908\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119230908.jpg\" alt=\"f:id:wat-aro:20151119230908j:image\" title=\"f:id:wat-aro:20151119230908j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.14"},{"data":{"title":"SICP 問題 3.13","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-cycle x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">set-cdr!</span> <span class=\"synSpecial\">(</span>last-pair x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span>\n  s<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> z <span class=\"synSpecial\">(</span>make-cycle <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b <span class=\"synSpecial\">'</span>c<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>zのポインタ図．</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119224757\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119224757.jpg\" alt=\"f:id:wat-aro:20151119224757j:image\" title=\"f:id:wat-aro:20151119224757j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n<p><code>(last-pair z)</code>を計算しようとするとlast-pair?が#tになることがないので終わらない．</p>\n\n","slug":"SICP 問題 3.13"},{"data":{"title":"SICP 問題 3.12","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/wat-aro/20151119223928\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119223928.jpg\" alt=\"f:id:wat-aro:20151119223928j:image\" title=\"f:id:wat-aro:20151119223928j:image\" class=\"hatena-fotolife\" itemprop=\"image\"></a></span></p>\n\n","slug":"SICP 問題 3.12"},{"data":{"title":"SICP 問題 3.10","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> w1 <span class=\"synSpecial\">(</span>make-withdraw <span class=\"synConstant\">100</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; E2(balance:100)-&gt;E1(initial-amount:100)-&gt;global</span>\n\n<span class=\"synSpecial\">(</span>w1 <span class=\"synConstant\">50</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; E3-&gt;(amount:50)-&gt;E2(balance:50)-&gt;E1(initial-amount:100)-&gt;global</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>w2 <span class=\"synSpecial\">(</span>make-withdraw <span class=\"synConstant\">100</span><span class=\"synSpecial\">)))</span>\n<span class=\"synComment\">;; E5(balance:100)-&gt;E4(initial-amount:100)-&gt;global</span>\n</pre>\n\n\n","slug":"SICP 問題 3.10"},{"data":{"title":"SICP 問題 3.09","published":"2015/11/19","tags":["scheme","SICP"]},"content":"\n<p>階乗を計算する手続き<code>(factorial 6)</code>の環境構造を示す．</p>\n\n<p> </p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">1</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> n <span class=\"synSpecial\">(</span>factorial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119211757.jpg\" alt=\"f:id:wat-aro:20151119211757j:plain\" title=\"f:id:wat-aro:20151119211757j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p> \n \n反復</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> factorial\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>fact-iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> fact-iter\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>product counter max-count<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> counter max-count<span class=\"synSpecial\">)</span>\nproduct\n<span class=\"synSpecial\">(</span>fact-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> counter product<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> counter <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\nmax-count<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151119/20151119211800.jpg\" alt=\"f:id:wat-aro:20151119211800j:plain\" title=\"f:id:wat-aro:20151119211800j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n","slug":"SICP 問題 3.09"},{"data":{"title":"SICP 問題 3.08","published":"2015/11/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a x<span class=\"synSpecial\">))</span>\n      a<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>(f 0) (f 1)の順に評価したら0,0が返り，(f 1) (f 0)の順に評価すると1, 0 が返ってくれば題意を満たしたことになる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define f\n  (let ((a 1))\n    (lambda (x)\n      (set! a (* a x))\n      a)))\nf\ngosh&gt; (f 0)\n0\ngosh&gt; (f 1)\n0\ngosh&gt; (define f\n  (let ((a 1))\n    (lambda (x)\n      (set! a (* a x))\n      a)))\nf\ngosh&gt; (f 1)\n1\ngosh&gt; (f 0)\n0</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; letをlambdaで書き換えてみた</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> f\n  <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a x<span class=\"synSpecial\">))</span>\n      a<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.08"},{"data":{"title":"SICP 問題 3.07","published":"2015/11/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account balance password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n               balance<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n    balance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>login-error amount<span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch pass m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> pass password<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> withdraw<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> deposit<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span>\n                           m<span class=\"synSpecial\">)))</span>\n        login-error<span class=\"synSpecial\">))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-joint account password new-account-password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch entered-pass m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> entered-pass new-account-password<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>account password m<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define peter-acc\n  (make-account 100 &#39;open-sesame))\npeter-acc\ngosh&gt; (define paul-acc\n  (make-joint peter-acc &#39;open-sesame &#39;rosebud))\npaul-acc\ngosh&gt; ((paul-acc &#39;rosebud &#39;deposit) 30)\n130\ngosh&gt; ((paul-acc &#39;rosebud &#39;withdraw) 50)\n80\ngosh&gt; ((peter-acc &#39;open-sesame &#39;withdraw) 50)\n30</pre>\n\n\n<p>意図したように動いてくれてます．<br/>\npaul-accで 80まで減らしてpeterが50引き出すと残り30ってことは両方のアカウントが同じものを指してるってことですからね．<br/>\nただdefineで口座の指定をすると参照先のアカウントのパスワードが間違ってた場合に,make-jointする時点でエラー返したいですよね．<br/>\nこのやりかたじゃそれができないっていうのが気になります．</p>\n\n","slug":"SICP 問題 3.07"},{"data":{"title":"SICP 問題 3.5","published":"2015/11/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>use srfi-27<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>random-in-range low high<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>range <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> high low<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> low <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>random-real<span class=\"synSpecial\">)</span> range<span class=\"synSpecial\">))))</span>\n<span class=\"synComment\">;; 問題分には(+ low (random range))となっている．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>estimate-integral P x1 x2 y1 y2 trials<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x-length <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x2 x1<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>y-length <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> y2 y1<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>square-area <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x-length y-length<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> square-area <span class=\"synSpecial\">(</span>monte-carlo trials\n                                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span> <span class=\"synSpecial\">(</span>P <span class=\"synSpecial\">(</span>random-in-range x1 x2<span class=\"synSpecial\">)</span>\n                                                <span class=\"synSpecial\">(</span>random-in-range y1 y2<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span>estimate-integral <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n                   <span class=\"synConstant\">-1.0</span> <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">-1.0</span> <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">10000</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; 3.1436</pre>\n\n\n<p><code>estimate-integral</code>の中で<code>(random-in-range x1 x2)</code>と<code>(random-in-range x1 x2)</code>をletで束縛して<code>monte-carlo</code>に渡していたためなかなかうまくいきまんでした．</p>\n\n","slug":"SICP 問題 3.5"},{"data":{"title":"SICP 問題 3.4","published":"2015/11/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account balance password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n                 balance<span class=\"synSpecial\">)</span>\n          <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n      balance<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>login-error amount<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> counter<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> counter <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>coll-the-cop<span class=\"synSpecial\">)</span>\n          <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>call-the-cops<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">&quot;110&quot;</span><span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch pass m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> pass password<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                 withdraw<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> counter <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n                 deposit<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span>\n                             m<span class=\"synSpecial\">)))</span>\n          login-error<span class=\"synSpecial\">))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.4"},{"data":{"title":"SICP 問題 3.06","published":"2015/11/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; オリジナルのrand</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rand <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x random-init<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">()</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span>rand-update x<span class=\"synSpecial\">))</span>\n                 x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; 'generateで乱数生成，'resetで引数の数字で初期化するrand</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> rand\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x random-init<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>reset new-rand<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x new-rand<span class=\"synSpecial\">)</span>\n      x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>generate<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> x <span class=\"synSpecial\">(</span>rand-update x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch m<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>reset<span class=\"synSpecial\">)</span>\n             reset<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>generate<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>generate<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown argument -- RAND&quot;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> m<span class=\"synSpecial\">)))))</span>\n    dispatch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 3.06"},{"data":{"title":"SICP 問題 3.3","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-account balance password<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>withdraw amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;=</span> balance amount<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> balance amount<span class=\"synSpecial\">))</span>\n               balance<span class=\"synSpecial\">)</span>\n        <span class=\"synConstant\">&quot;Insufficient funds&quot;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deposit amount<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> balance <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> balance amount<span class=\"synSpecial\">))</span>\n    balance<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>login-error amount<span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;Incorrect password&quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch pass m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> pass password<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>withdraw<span class=\"synSpecial\">)</span> withdraw<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> m <span class=\"synSpecial\">'</span>deposit<span class=\"synSpecial\">)</span> deposit<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown request: MAKE-ACCOUNT&quot;</span>\n                           m<span class=\"synSpecial\">)))</span>\n        login-error<span class=\"synSpecial\">))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define acc (make-account 100 &#39;secret-password))\nacc\ngosh&gt; ((acc &#39;secret-password &#39;withdraw) 50)\n50\ngosh&gt; ((acc &#39;some-password &#39;deposit) 40)\n&#34;Incorrect password&#34;</pre>\n\n\n","slug":"SICP 問題 3.3"},{"data":{"title":"SICP 問題 3.2","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-monitored f<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>in<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>how-many-calls?<span class=\"synSpecial\">)</span> mf<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> in <span class=\"synSpecial\">'</span>reset-count<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> mf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> mf<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>f in<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define s (make-monitored sqrt))\ns\ngosh&gt; (s 100)\n10\ngosh&gt; (s &#39;how-many-calls?)\n1\ngosh&gt; (s &#39;reset-count)\n0\ngosh&gt; (s &#39;how-many-calls?)\n0</pre>\n\n\n","slug":"SICP 問題 3.2"},{"data":{"title":"SICP 問題 3.1","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-accumulator n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>sum n<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>num<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> sum <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> sum num<span class=\"synSpecial\">))</span>\n      sum<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define A (make-accumulator 5))\nA\ngosh&gt; (A 10)\n15\ngosh&gt; (A 10)\n25</pre>\n\n\n","slug":"SICP 問題 3.1"},{"data":{"title":"SICP 問題 2.91","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-termlist? L1<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-c <span class=\"synSpecial\">(</span>div <span class=\"synSpecial\">(</span>coeff t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>coeff t2<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span>new-o <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rest-of-result\n                     <span class=\"synSpecial\">(</span>div-terms <span class=\"synSpecial\">(</span>sub-terms L1\n                                           <span class=\"synSpecial\">(</span>mul-terms L2\n                                                      <span class=\"synSpecial\">(</span>make-term new-o\n                                                                 new-c<span class=\"synSpecial\">)))</span>\n                                L2<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>add-terms <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-term new-o new-c<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest-of-result<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> rest-of-result<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-poly p1 p2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>same-variable? <span class=\"synSpecial\">(</span>variable p1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>variable p2<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>make-poly <span class=\"synSpecial\">(</span>variable p1<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>div <span class=\"synSpecial\">(</span>term-list p1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>term-list p2<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Polys not in same var -- DIV POLY&quot;</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> p1 p2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.91"},{"data":{"title":"SICP 問題 2.89","published":"2015/11/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 2.89</span>\n<span class=\"synComment\">;; 濃い多項式に適している実装</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-polynomial valiable term-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> valiable term-list<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>valiable p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>term-list p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>valiable? v<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">symbol?</span> v<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-valiable? v1 v2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>valiable? v1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>valiable? v2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> v1 v2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero-term? L<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>L1 <span class=\"synSpecial\">(</span>term-list L<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>empty-termlist? L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>=zero? <span class=\"synSpecial\">(</span>coeff <span class=\"synSpecial\">(</span>first L1<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span>=zero-term? <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-term term term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> term term-list<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-termlist<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>first-term term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> term-list<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rest-terms term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> term-list<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>empty-termlist? term-list<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> term-list<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-term order coeff<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> coeff <span class=\"synSpecial\">(</span>iota order <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>order term<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synSpecial\">(</span>rest-terms term<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>coeff term<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-term term<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-terms L<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-termlist? L<span class=\"synSpecial\">)</span>\n      empty-termlist\n      <span class=\"synSpecial\">(</span>addjoin-term <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span>first term<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>negative-terms <span class=\"synSpecial\">(</span>rest-terms L<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o1 <span class=\"synSpecial\">(</span>order L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o2 <span class=\"synSpecial\">(</span>order L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term t1 <span class=\"synSpecial\">(</span>add-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term t2 <span class=\"synSpecial\">(</span>add-terms L1 <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n            <span class=\"synSpecial\">(</span>addjoin-term <span class=\"synSpecial\">(</span>add t1 t2<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span>add-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-terms L1<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o1 <span class=\"synSpecial\">(</span>order L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>o2 <span class=\"synSpecial\">(</span>order L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term t1\n                         <span class=\"synSpecial\">(</span>sub-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> o1 o2<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>adjoin-term <span class=\"synSpecial\">(</span>negative t2<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>sub-terms L1 <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n            <span class=\"synSpecial\">(</span>adjoin-term <span class=\"synSpecial\">(</span>sub t1 t2<span class=\"synSpecial\">)</span>\n                         <span class=\"synSpecial\">(</span>sub-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>rest-terms L2<span class=\"synSpecial\">))))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>the-empty-termlist<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>add-terms\n          <span class=\"synSpecial\">(</span>mul-term-by-all-terms\n           <span class=\"synSpecial\">(</span>make-term <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>iota <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n           L2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>mul-terms <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>mul-term-by-all-terms t L<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>empty-termlist L<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>rest-terms t<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>add-join-term <span class=\"synSpecial\">(</span>mul <span class=\"synSpecial\">(</span>first-term t<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>first-term L<span class=\"synSpecial\">))</span>\n                     <span class=\"synSpecial\">(</span>mul-term-by-all-terms t <span class=\"synSpecial\">(</span>rest-terms L<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.89"},{"data":{"title":"SICP 問題 2.88","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; polynominal-package</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>coeff p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>polynominal<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; 2.88</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>negative x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-number</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-integer x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-integer x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rational</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-rational x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-rational <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-raitonal x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; real</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-real x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-real x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complex</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rect-angler</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-rectangler x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-complex-from-mag-ang <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> x<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">180</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">angle</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>rectangler<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-rectangler x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; real-imag</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-polar x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                               <span class=\"synSpecial\">(</span>negative <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>polar<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-polar x<span class=\"synSpecial\">)))</span>\n\n\n<span class=\"synComment\">;; polynomial</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>negative-term p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>mul-term <span class=\"synSpecial\">(</span>make-term <span class=\"synConstant\">0</span> <span class=\"synConstant\">-1</span><span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-terms L1 L2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>empty-termlist? L2<span class=\"synSpecial\">)</span> L1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>empty-termlist? L1<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>negative-term L2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1 <span class=\"synSpecial\">(</span>first-term L1<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>t2 <span class=\"synSpecial\">(</span>first-term L2<span class=\"synSpecial\">)))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>adjoin-term\n                   t1 <span class=\"synSpecial\">(</span>sub-term <span class=\"synSpecial\">(</span>rest-terms L1<span class=\"synSpecial\">)</span> L2<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>order t2<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>adjoin-term\n                   <span class=\"synSpecial\">(</span>negative-term L2<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>sub-term L1 <span class=\"synSpecial\">(</span>rest-term L2<span class=\"synSpecial\">))))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                  <span class=\"synSpecial\">(</span>adjoin-term\n                   <span class=\"synSpecial\">(</span>make-term <span class=\"synSpecial\">(</span>order t1<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>sub <span class=\"synSpecial\">(</span>coeff t1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>coeff t2<span class=\"synSpecial\">)))</span>\n                   <span class=\"synSpecial\">(</span>sub-term <span class=\"synSpecial\">(</span>rest-term L1<span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span>rest-term L2<span class=\"synSpecial\">)))))))))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>negative <span class=\"synSpecial\">'(</span>polynomil<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>negative-term x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sub <span class=\"synSpecial\">'(</span>polynomiial <span class=\"synSpecial\">(</span>lambda <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>sub-terms L1 L2<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.88"},{"data":{"title":"SICP 問題 2.87","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; polynominal-package</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>coeff p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>polynominal<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>=zero? p<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.87"},{"data":{"title":"SICP 問題 2.86","published":"2015/11/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-root x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>square-root x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>sine x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cosine x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>cosine x<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>atangent x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>atangent x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-number</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rational</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-rat <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span>\n                                               <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)))))</span> <span class=\"synComment\">;;real</span>\n\n<span class=\"synComment\">;; real</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>real<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complex</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                                 <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>imag<span class=\"synSpecial\">)))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>square-root <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-mag-ang <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> x<span class=\"synSpecial\">))</span>\n                                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">angle</span> x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>sine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>cosine <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>atangent <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-complex-from-real-imag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                                              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">atan</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n\n</pre>\n\n\n","slug":"SICP 問題 2.86"},{"data":{"title":"SICP 問題 2.85","published":"2015/11/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-project-packege<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>project x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>project x<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">'</span>complex <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>make-real <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">'</span>real <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rational <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">inexact-&gt;exact</span> x<span class=\"synSpecial\">)))</span>\n                          <span class=\"synSpecial\">(</span>make-rational <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">numerator</span> rational<span class=\"synSpecial\">)</span>\n                                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">denominator</span> rational<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">'</span>rational <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>make-scheme-number <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">round</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">)</span>\n                                                          <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>drop x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>projected <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>project <span class=\"synSpecial\">(</span>type-tag x<span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>raised <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag projected<span class=\"synSpecial\">))</span> projected<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>equ? x raised<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>drop projected<span class=\"synSpecial\">)</span>\n        x<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tower <span class=\"synSpecial\">'(</span>complex real rational scheme-number<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-type? a b<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type-&lt; a b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>same-type? a b<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>type-&lt; <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">))</span> a<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">))</span> b<span class=\"synSpecial\">)))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>highest-type lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span>type-&lt; result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span>iter result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-highest-type high lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>target x<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> high target<span class=\"synSpecial\">)</span>\n                             target\n                             <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag target<span class=\"synSpecial\">))</span>\n                                    target<span class=\"synSpecial\">)))))</span>\n           lst<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op types<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span>drop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;drop</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-args <span class=\"synSpecial\">(</span>same-highest-type <span class=\"synSpecial\">(</span>highest-type args<span class=\"synSpecial\">)</span>\n                                             args<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op <span class=\"synSpecial\">(</span>type-tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> new-args<span class=\"synSpecial\">)))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n                  <span class=\"synSpecial\">(</span>dorp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents new-args<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;drop</span>\n                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.85"},{"data":{"title":"SICP 問題 2.84","published":"2015/11/02","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>tower <span class=\"synSpecial\">'(</span>complex real rational scheme-number<span class=\"synSpecial\">)))</span>\n    <span class=\"synComment\">;; 同じタイプか調べる述語</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-type? a b<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)))</span>\n    <span class=\"synComment\">;; aよりもbのほうが階層が高いか調べる述語</span>\n    <span class=\"synComment\">;; 両方をraiseしながらcomplexに先になったほうが階層が高い</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type-&lt; a b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>same-type? a b<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tower<span class=\"synSpecial\">))</span> false<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>type-&lt; <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag a<span class=\"synSpecial\">))</span> a<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag b<span class=\"synSpecial\">))</span> b<span class=\"synSpecial\">)))))</span>\n    <span class=\"synComment\">;; リストの中でもっとも高い階層の型を調べる</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>highest-type lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">((</span>type-&lt; result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n               <span class=\"synSpecial\">(</span>iter result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))))</span>\n    <span class=\"synComment\">;; リストの要素すべてを最も階層の高い型highまでraiseする</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-highest-type high lst<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> iter <span class=\"synSpecial\">((</span>target x<span class=\"synSpecial\">))</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> high target<span class=\"synSpecial\">)</span>\n                             target\n                             <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">(</span>type-tag target<span class=\"synSpecial\">))</span>\n                                    target<span class=\"synSpecial\">)))))</span>\n           lst<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op types<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-args <span class=\"synSpecial\">(</span>same-highest-type <span class=\"synSpecial\">(</span>highest-type args<span class=\"synSpecial\">)</span>\n                                             args<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op <span class=\"synSpecial\">(</span>type-tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> new-args<span class=\"synSpecial\">)))))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n                  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents new-args<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.84"},{"data":{"title":"SICP 問題 2.83","published":"2015/11/01","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>raise x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>raise x<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-numberパッケージで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scheme-number-&gt;rational n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-rational n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">'</span>scheme-number scheme-number-&gt;rational<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; rationalパッケージで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rational-&gt;real x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">1.0</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">'</span>rational rational-&gt;real<span class=\"synSpecial\">)</span>\n\n<span class=\"synComment\">;; real-numberパッケージで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>real-&gt;complex<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-complex-from-real-imag x <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>raise <span class=\"synSpecial\">'</span>real-number real-&gt;complex<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 2.83"},{"data":{"title":"SICP 問題 2.82","published":"2015/11/01","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-coercion args tags<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> tags<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>get-coercion <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tags<span class=\"synSpecial\">)</span>\n                                                         <span class=\"synSpecial\">(</span>type-tag x<span class=\"synSpecial\">)))</span>\n                               args<span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>new-type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag new-args<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>peroc <span class=\"synSpecial\">(</span>get op <span class=\"synSpecial\">(</span>new-type-tags<span class=\"synSpecial\">))))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span>contents new-args<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>try-coercion new-args <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tags<span class=\"synSpecial\">))))))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pero <span class=\"synSpecial\">(</span>get op types<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>try-coercion args typep-tags<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.82"},{"data":{"title":"SICP 問題 2.81","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op type-tags<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc <span class=\"synComment\">;;false</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> args<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>type2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1-&gt;t2 <span class=\"synSpecial\">(</span>get-coercion type1 type2<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>t2-&gt;t1 <span class=\"synSpecial\">(</span>get-coercion type2 type1<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>t1-&gt;t2 <span class=\"synComment\">;;true</span>\n                         <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">(</span>t1-&gt;t2 a1<span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;;complex-&gt;complex</span>\n                        <span class=\"synSpecial\">(</span>t2-&gt;t1\n                         <span class=\"synSpecial\">(</span>apply-generic op a1 <span class=\"synSpecial\">(</span>t2-&gt;t1 a2<span class=\"synSpecial\">)))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;No method for these types&quot;</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">))))))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synComment\">;; 引数に二つの複素数を持ってexpを呼び出すと，</span>\n<span class=\"synComment\">;; procがfalseになり，complexからcomplexへの変換を無限ループする</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; 無限ループに陥るのでLouisはまちがっている</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">.</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type-tags <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> type-tag args<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>proc <span class=\"synSpecial\">(</span>get op type-tags<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> proc\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> contents args<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> args<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> type-tags<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> type-tags<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;同じtype-tagならエラーになる</span>\n              <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>type1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>type2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> type-tags<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> args<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>a2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> args<span class=\"synSpecial\">)))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>t1-&gt;t2 <span class=\"synSpecial\">(</span>get-coercion type1 type2<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>t2-&gt;t1 <span class=\"synSpecial\">(</span>get-coercion type2 type1<span class=\"synSpecial\">)))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span>t1-&gt;t2\n                         <span class=\"synSpecial\">(</span>apply-generic op <span class=\"synSpecial\">(</span>t1-&gt;t2 a1<span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span>t2-&gt;t1\n                         <span class=\"synSpecial\">(</span>apply-generic op a1 <span class=\"synSpecial\">(</span>t2-&gt;t1 a2<span class=\"synSpecial\">)))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;No method for these types&quot;</span>\n                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">))))))</span>\n              <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Nomethod for these types&quot;</span>\n                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> op type-tags<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.81"},{"data":{"title":"SICP 問題 2.80","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>=zero? x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>=zero? x y<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; scheme-numberパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>scheme-number<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; rationalパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>rational<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; complexパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>=zero? <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.80"},{"data":{"title":"SICP 問題 2.79","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; scheme-numberパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>equ? <span class=\"synSpecial\">'(</span>scheme-number scheme-number<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>tag <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x y<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; rationalパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>equ? <span class=\"synSpecial\">'(</span>rational rational<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>numer x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>numer y<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>denom x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>denom y<span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;; complexパッケージに追加</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>equ <span class=\"synSpecial\">'(</span>complex complex<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">real-part</span> y<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">imag-part</span> y<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>equ? x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>apply-generic <span class=\"synSpecial\">'</span>equ? x y<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.79"},{"data":{"title":"SICP 問題 2.78","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>attach-tag type-tag contents<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> type-tag <span class=\"synSpecial\">'</span>scheme-number<span class=\"synSpecial\">)</span>\n      contents\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> type-tag contents<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>type-tag datum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> datum<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>scheme-number<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> datum<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> datum<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Bad tagged datum -- TYPE-TAG&quot;</span> datum<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contents datum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> datum<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'</span>scheme-number<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> datum<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> datum<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Bad tagged datum -- CONTENTS&quot;</span> datum<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.78"},{"data":{"title":"SICP 問題 2.77","published":"2015/10/31","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>real-part <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">real-part</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>imag-part <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">imag-part</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>magnitude <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">magnitude</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>angle <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">angle</span><span class=\"synSpecial\">)</span>\n\n\n<span class=\"synComment\">;; magnitudeはcomplex型を知らないのでerrorを返す．</span>\n<span class=\"synComment\">;; なので表にcomplex型を追加すれば動く．</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> z<span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>complex ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span>apply-generic <span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>complex ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>magnitude <span class=\"synSpecial\">'(</span>complex<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span>apply-generic <span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span>ractangular <span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>magnitude <span class=\"synSpecial\">'(</span>ractangular<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">magnitude</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">.</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n<span class=\"synComment\">;=&gt;</span>\n<span class=\"synConstant\">5</span>\n</pre>\n\n\n","slug":"SICP 問題 2.77"},{"data":{"title":"SICP 問題 2.76","published":"2015/10/30","tags":["scheme","SICP"]},"content":"\n<p>;; 明示的ディスパッチによる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>演算\nデータの型が追加されるたびに各演算にその型用の演算を追加していく．\n新しい演算が追加されたときはそれを追加するだけ．</p>\n\n<p>;; データ主導スタイル\nデータの型が追加されると，それらをパッケージを作ってputする．\n各型パッケージにその演算を追加する．</p>\n\n<p>;; メッセージパッシングスタイル\nデータが追加されたときは特になし\n新しい演算が追加されたときは，各データ型に演算を追加する．</p>\n\n<p>データ新しい型がよく追加されるならメッセージパッシングスタイルが向いている．\n新しい演算が追加されるときには明示的ディスパッチが向いている．</p>\n\n","slug":"SICP 問題 2.76"},{"data":{"title":"SICP 問題 2.75","published":"2015/10/30","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-from-mag-ang r a<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dispatch op<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>magnitude<span class=\"synSpecial\">)</span> r<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>angle<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>real-part<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> r <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cos</span> a<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> op <span class=\"synSpecial\">'</span>imag-part<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> r <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sin</span> a<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unknown op -- MAKE-FROM-MAG-ANG&quot;</span> op<span class=\"synSpecial\">))))</span>\n  dispatch<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 2.75"},{"data":{"title":"SICP 問題 2.74","published":"2015/10/30","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synComment\">;; 各事業所ごとに従業員ファイルを作っていると考え，person-fileのcar部に</span>\n<span class=\"synComment\">;; 従業所を識別するコードを入れるようにする．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-record name  person-file<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>get-record <span class=\"synSpecial\">(</span>division person-file<span class=\"synSpecial\">))</span> name file<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>division file<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> file<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">;; ここではrecordが(name salary age)となってると考える．</span>\n<span class=\"synComment\">;; この事業所のrecordからsalaryを取り出すにはcadrを取れば良い</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>get-salary name record<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>get-salary <span class=\"synSpecial\">(</span>identifying person-file<span class=\"synSpecial\">))</span> record<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-employee-record name division-list<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> division-list<span class=\"synSpecial\">)</span>\n      false\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>serch <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>get-record <span class=\"synSpecial\">(</span>division x<span class=\"synSpecial\">))</span> name x<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>serch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> division-list<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>serch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> division-list<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>find-employee-record name <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> division-list<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; d</span>\n<span class=\"synComment\">;; その新しく合併した会社の従業員レコードから情報を得るget-recordとget-salaryなどの</span>\n<span class=\"synComment\">;; 必要な手続きを作りパッケージを作成し，本社の表にputすればよい．</span>\n</pre>\n\n\n","slug":"SICP 問題 2.74"},{"data":{"title":"エラトステネスの篩","published":"2015/10/28","tags":["scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eratosthenes n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>recur\n                       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n                        lis<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span>iota <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">round</span> n<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>繰り返しで</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>eratosthenes n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n                      lis<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))))))</span>\n   <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>iota <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'()))</span>\n</pre>\n\n\n<p>できるだけ元の論理通りにやってみました．<br/>\nあの斜線つけるやつね．</p>\n\n","slug":"エラトステネスの篩"},{"data":{"title":"SICP 問題 2.73","published":"2015/10/28","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>same-variable? <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>get <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operator <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>operands <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>;; a\n元のプログラムと違うのはelseの行．<br/>\noperatorの型に合わせたderivが呼ばれ残りの要素を処理する．<br/>\nnumberとvariableはリストでないので型を持たないため，データ主導の振り分けに吸収できない．</p>\n\n<p>;; b</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-deriv-sum-package<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv-sum <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>make-sum <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>addend <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>augend <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-sum a1 a2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> a1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> a2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> a1<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> a2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a1 a2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>+ a1 a2<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>addend x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>augend x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>+ <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">'</span>+ deriv-sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>make <span class=\"synSpecial\">'</span>+ make-sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-deriv-product-package<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv-product <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>get <span class=\"synSpecial\">'</span>make-sum <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>multiplier <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>multiplicand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>multiplicand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>multiplier <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-product m1 m2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> m1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> m2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> m1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m2<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> m2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m1<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> m2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> m1 m2<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>* m1 m2<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplicand x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>* <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> x<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">'</span>* deriv-product<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>make <span class=\"synSpecial\">'</span>* make-product<span class=\"synSpecial\">)</span>\n\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>;; c</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>install-exponent-package<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv-exponent <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>make-product <span class=\"synSpecial\">(</span>get make <span class=\"synSpecial\">'</span>*<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>make-product\n       <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-exponentiation <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span>\n                                          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n       <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-exponent b e<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> e <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> e <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>** b e<span class=\"synSpecial\">))))</span>\n\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>deriv <span class=\"synSpecial\">'</span>** deriv-exponent<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>put <span class=\"synSpecial\">'</span>make <span class=\"synSpecial\">'</span>** make-exponent<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>;; d\nputの演算と型を入れ替える</p>\n\n","slug":"SICP 問題 2.73"},{"data":{"title":"SICP 問題 2.71","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151027/20151027213831.jpg\" alt=\"f:id:wat-aro:20151027213831j:plain\" title=\"f:id:wat-aro:20151027213831j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151027/20151027213854.jpg\" alt=\"f:id:wat-aro:20151027213854j:plain\" title=\"f:id:wat-aro:20151027213854j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>n = 5のとき，最高頻度の記号には4bit.最低頻度の記号には1bit必要．\nn = 10のとき，最高頻度の記号には9bit.最低頻度の記号には1bit必要．</p>\n\n","slug":"SICP 問題 2.71"},{"data":{"title":"SICP 問題 2.70","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define q-pairs &#39;((A 2) (BOOM 1) (GET 2) (JOB 2) (NA 16) (SHA 3)\n                       (YIP 9) (WAH 1)))\nq-pairs\ngosh&gt; (define q-tree\n  (successive-merge (make-leaf-set q-pairs)))\nq-tree\ngosh&gt; (define message\n  &#39;(GET A JOB\n    SHA NA NA NA NA NA NA NA NA\n    GET A JOB\n    SHA NA NA NA NA NA NA NA NA\n    WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP\n    SHA BOOM))\nmessage\ngosh&gt; (encode message q-tree)\n(1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 \n 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1)\ngosh&gt; (length (encode message q-tree))\n84\ngosh&gt; (decode (encode message q-tree) q-tree)\n(GET A JOB SHA NA NA NA NA NA NA NA NA GET A JOB \n SHA NA NA NA NA NA NA NA NA WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP SHA BOOM)</pre>\n\n\n<p>符号化には84bit必要．\n八記号アルファベットの固定長符号の場合は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt;(length message)\n36</pre>\n\n\n<p>36 * (log2 8) = 108\nなので108bit必要．</p>\n\n","slug":"SICP 問題 2.70"},{"data":{"title":"SICP 問題 2.69","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>generate-huffman-tree pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>successive-merge <span class=\"synSpecial\">(</span>make-leaf-set pairs<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; pairsは昇順に並んでいるので先頭の2要素をmake-code-pairsする．</span>\n<span class=\"synComment\">;; それを(cddr pairs)にadjoin-setすればまた昇順に並んだpairsができるのでそれを繰り返す．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>successive-merge pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pairs<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>successive-merge <span class=\"synSpecial\">(</span>adjoin-set <span class=\"synSpecial\">(</span>make-code-pairs <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)</span>\n                                                     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> pairs<span class=\"synSpecial\">))</span>\n                                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> pairs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.69"},{"data":{"title":"SICP 問題 2.68","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode message tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> message<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>encode-symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>encode <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> message<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>encode-symbol msg tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">0</span>\n              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">memq</span> msg <span class=\"synSpecial\">(</span>symbols <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synConstant\">1</span>\n              <span class=\"synSpecial\">(</span>encode-symbol msg <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error symbol <span class=\"synConstant\">&quot;is not Found&quot;</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (encode &#39;(A D A B B C A) sample-tree)\n(0 1 1 0 0 1 0 1 0 1 1 1 0)\ngosh&gt; (decode (encode &#39;(A D A B B C A) sample-tree) sample-tree)\n(A D A B B C A)</pre>\n\n\n","slug":"SICP 問題 2.68"},{"data":{"title":"SICP 問題 2.67","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; Huffman木</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf symbol weight<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>leaf symbol weight<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>leaf? object<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> object<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>leaf<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbol-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight-leaf x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-code-tree left right<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> left\n        right\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>symbols left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>symbols right<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>weight left<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight right<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>symbols tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>symbol-leaf tree<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> tree<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>weight tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>weight-leaf tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadddr</span> tree<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; bitが0なら左，1なら右の枝をたどっていき，leafにたどり着くと，そのシンボルをconsして次にいく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode bits tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>decode-1 bits current-branch<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> bits<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">'()</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next-branch\n               <span class=\"synSpecial\">(</span>choose-branch <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> bits<span class=\"synSpecial\">)</span> current-branch<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>leaf? next-branch<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>symbol-leaf next-branch<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> tree<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>decode-1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> bits<span class=\"synSpecial\">)</span> next-branch<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>decode-1 bits tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; bitが左ならleft-branch,bitが右ならright-branchを選択</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>choose-branch bit branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>left-branch branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> bit <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>right-branch branch<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;bad bit -- CHOOSE-BRANCH&quot;</span> bit<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; weightで昇順に順序づけられた集合に要素を追加する</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-set x set<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span>weight x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>weight <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x set<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>adjoin-set x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> set<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; pairsからweightの昇順にleafの集合を作る．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-leaf-set pairs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> pairs<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pairs<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span>adjoin-set <span class=\"synSpecial\">(</span>make-leaf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> pair<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> pair<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>make-leaf-set <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> pairs<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define sample-tree\n        (make-code-tree (make-leaf &#39;A 4)\n                        (make-code-tree\n                         (make-leaf &#39;B 2)\n                         (make-code-tree (make-leaf &#39;D 1)\n                                         (make-leaf &#39;C 1)))))\nsample-tree\ngosh&gt; (define sample-message\n        &#39;(0 1 1 0 0 1 0 1 0 1 1 1 0))\nsample-message\ngosh&gt; (decode sample-message sample-tree)\n(A D A B B C A)</pre>\n\n\n","slug":"SICP 問題 2.67"},{"data":{"title":"SICP 問題 2.66","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lookup-tree given-key set-of-records<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>key-record <span class=\"synSpecial\">(</span>key <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set-of-records<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set-of-records<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> given-key key-record<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set-of-records<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> given-key key-record<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>lookup-tree given-key <span class=\"synSpecial\">(</span>left-branch set-of-records<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> key-record given-key<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>lookup-tree given-key <span class=\"synSpecial\">(</span>right-branch set-of-records<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.66"},{"data":{"title":"SICP 問題 2.65","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>union-tree s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>list-&gt;tree\n   <span class=\"synSpecial\">(</span>union-set <span class=\"synSpecial\">(</span>tree-&gt;list-2 s<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span>tree-&gt;list-2 t<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>intersection-tree s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>list-&gt;tree\n   <span class=\"synSpecial\">(</span>intersection-set-local <span class=\"synSpecial\">(</span>tree-&gt;list-2 s<span class=\"synSpecial\">)</span>\n                           <span class=\"synSpecial\">(</span>tree-&gt;list-2 t<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.65"},{"data":{"title":"SICP 問題 2.64","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n<p>;a\n先頭から(n-1)/2番目までをleft-treeとしてpartial-treeにかける．<br/>\n残ったリストの先頭をthis-entryとしてこの木の分岐点におく．<br/>\nそのcdrをright-treeとしてpartial-treeにかける．<br/>\nこれを繰り返して木を作る．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>      5\n   /     \\\n1         9\n  \\       /   \\\n   3    7    11</pre>\n\n\n<p>;b\nO(n)</p>\n\n","slug":"SICP 問題 2.64"},{"data":{"title":"SICP 問題 2.58b","published":"2015/10/27","tags":["scheme","SICP"]},"content":"\n<p>2.58b は解けそうになかったので解答を見てできるかぎり解説を入れてみました．<br/>\n一部修正しています．\n解答は↓から</p>\n\n<p><a href=\"https://github.com/sarabander/p2pu-sicp/blob/master/2.3/2.58.scm\">p2pu-sicp/2.58.scm at master &middot; sarabander/p2pu-sicp &middot; GitHub</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; partには'beforeか'afterが入り，symbolの位置でexpを前後に分ける．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>extract part symbol <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter subexp remaining<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> remaining<span class=\"synSpecial\">)</span> remaining<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> remaining<span class=\"synSpecial\">)</span> symbol<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> part <span class=\"synSpecial\">'</span>before<span class=\"synSpecial\">)</span> subexp<span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> part <span class=\"synSpecial\">'</span>after<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> remaining<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;Unclear, do you mean 'before or after?&quot;</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n           <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> subexp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> remaining<span class=\"synSpecial\">)))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> remaining<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>result <span class=\"synSpecial\">(</span>iter nil <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> result<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> result<span class=\"synSpecial\">)</span>\n        result<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; リストにシンボルが入っているかを問う述語</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>contains? symbol lis<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> lis<span class=\"synSpecial\">)))</span> false<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>contains? symbol <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; sum</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>contains? <span class=\"synSpecial\">'</span>+ x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>addend s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before <span class=\"synSpecial\">'</span>+ s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>augend s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after <span class=\"synSpecial\">'</span>+ s<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; product</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>product? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>contains? <span class=\"synSpecial\">'</span>* x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before <span class=\"synSpecial\">'</span>* p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplicand p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after <span class=\"synSpecial\">'</span>* p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; exponentiation</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponentiation? e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>contains? <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>base e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponent e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))</span>\n\n\n\n<span class=\"synComment\">;; 簡約</span>\n\n<span class=\"synComment\">;; かっこを外す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fringe tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> tree<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 演算子で分けられたリストに分ける．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split-by op polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> polynome<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> polynome<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span>contains? op polynome<span class=\"synSpecial\">)))</span> <span class=\"synComment\">;;追加．これがないと最後の項がシングルトン以外の場合空リストになる．</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> polynome<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>before op polynome<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>split-by op <span class=\"synSpecial\">(</span>extract <span class=\"synSpecial\">'</span>after op polynome<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>summands polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>split-by <span class=\"synSpecial\">'</span>+ polynome<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factors polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>split-by <span class=\"synSpecial\">'</span>* polynome<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; リストの要素の間にopを入れる</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>infix op lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span> lst<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> op\n                            <span class=\"synSpecial\">(</span>infix op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>infix-add s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>infix <span class=\"synSpecial\">'</span>+ s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>infix-multiply p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>infix <span class=\"synSpecial\">'</span>* p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; リストの先頭のリストにだけopを適用する．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-car op lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> lst<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-car+ s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-car <span class=\"synIdentifier\">+</span> s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>apply-car* p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>apply-car <span class=\"synIdentifier\">*</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; (6)を6といった具合に数一つだけのリストをnumberにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>release-singleton e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> e<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> e<span class=\"synSpecial\">)</span>\n      e<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 数だけを先頭にあつめてリストにする</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>group lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lst<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> n<span class=\"synSpecial\">)))</span>\n                      lst<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; リストの先頭を最後にもっていく．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>shift-left lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; まずfringeでかっこを外し，summandsを使い，＋の位置で分けたリストに変換する．</span>\n<span class=\"synComment\">;; そのリストに対してmapで各要素にfactors,group,apply-car*,release-singletonの順に手続きを適用する．</span>\n<span class=\"synComment\">;; つまり，*でわけたリストに変換し，数字のみのリストをcarにもってきて，それに*を適用し，要素の間に＊をいれ，シングルトンがあれば，それを数字にする．</span>\n<span class=\"synComment\">;; これが全要素に完了した後に出来たリストに対して，group,apply-car+,shift-left,infix-add,fringeを順に適用する．</span>\n<span class=\"synComment\">;; 先頭に数字のみでできたリストを作り，それらを足し，リストの最後に移す．このリストの要素の間に＋を挿入し，かっこを取り払う．</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>simplify polynome<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>compose fringe\n            infix-add\n            shift-left\n            apply-car+\n            group<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span>compose release-singleton\n                 infix-multiply\n                 apply-car*\n                 group\n                 factors<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>summands <span class=\"synSpecial\">(</span>fringe polynome<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.58b"},{"data":{"title":"SICP 問題 2.95","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>element-of-set? x set<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> set<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">equal?</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> set<span class=\"synSpecial\">))</span> true<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>element-of-set? x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> set<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unionset s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)</span> t<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>element-of-set? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> t<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>unionset <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">)</span> t<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>unionset <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">)</span> t<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.95"},{"data":{"title":"SICP 問題 2.63","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-&gt;list-1 tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">'()</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>tree-&gt;list-1 <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>entry tree<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span>tree-&gt;list-1 <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-&gt;list-2 tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>copy-to-list tree result-list<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span>\n        result-list\n        <span class=\"synSpecial\">(</span>copy-to-list <span class=\"synSpecial\">(</span>left-branch tree<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>entry tree<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span>copy-to-list <span class=\"synSpecial\">(</span>right-branch tree<span class=\"synSpecial\">)</span>\n                                          result-list<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>copy-to-list tree <span class=\"synSpecial\">'()))</span>\n</pre>\n\n\n<p>この二つの手続きは同じリストを生じる．<br/>\n　<br/>\nステップ数も同じ．appendとconsの差で2のほうが遅く増加する．</p>\n\n","slug":"SICP 問題 2.63"},{"data":{"title":"SICP 問題 2.62","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>union-set s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)</span> t<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> t<span class=\"synSpecial\">)</span> s<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> t<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>union-set <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> t<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> t<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>union-set <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">)</span> t<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> t<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> t<span class=\"synSpecial\">)</span>\n               <span class=\"synSpecial\">(</span>union-set s <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> t<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.62"},{"data":{"title":"SICP 問題 2.61","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-set x s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">))</span> s<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&lt;</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x s<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>adjoin-set x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 同じ数字，またはxより大きい数字が出てきた時点で計算が終わるので順序付けられない表現に比べ半分のステップ数ですむ．</span>\n</pre>\n\n\n","slug":"SICP 問題 2.61"},{"data":{"title":"SICP 問題 2.60","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; element-of-set? intersection-setはそのまま</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-set x s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>union-set s t<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> s t<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; element-of-set?やintersection-setについてはsetの中身が増えることで比較回数が増えて効率は下がる．</span>\n<span class=\"synComment\">;; adjoin-set union-setについては条件分岐がなくなるので効率がよくなる．</span>\n</pre>\n\n\n","slug":"SICP 問題 2.60"},{"data":{"title":"SICP 問題 2.58","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-sum a1 a2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>=number? a1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> a2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>=number? a2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> a1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> a1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> a2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a1 a2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> a1 <span class=\"synSpecial\">'</span>+ a2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-product m1 m2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>=number? m1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>=number? m2 <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>=number? m1 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m2<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>=number? m2 <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m1<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> m1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> m2<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> m1 m2<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> m1 <span class=\"synSpecial\">'</span>* m2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>+<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>addend s<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>product? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>*<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplier p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponentiation? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>**<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-exponentiation b e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>=number? e <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>=number? e <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b e<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> b <span class=\"synSpecial\">'</span>** e<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synComment\">; パス</span>\n</pre>\n\n\n","slug":"SICP 問題 2.58"},{"data":{"title":"SICP 問題 2.57","published":"2015/10/26","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>augend s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> s<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>+ <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> s<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>multiplicand p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdddr</span> p<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> p<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>* <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> p<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>これ作るので精一杯でした．<br/>\nmake-sumやmake-productを可変長引数に対応できるように変更するのは難しい．．．</p>\n\n","slug":"SICP 問題 2.57"},{"data":{"title":"SICP 問題 2.56","published":"2015/10/25","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deriv <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">number?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>variable? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>same-variable? <span class=\"synIdentifier\">exp</span> var<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span>sum? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-sum <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>addend <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>augend <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">((</span>product? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-sum\n          <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>multiplier <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>multiplicand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>multiplier <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>multiplicand <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">((</span>exponentiation? <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>make-product\n          <span class=\"synSpecial\">(</span>make-product <span class=\"synSpecial\">(</span>exponent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>make-exponentiation <span class=\"synSpecial\">(</span>base <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n                                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>exponent <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>deriv <span class=\"synSpecial\">(</span>base <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> var<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;unknown expression type -- DERIV&quot;</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponentiation? x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>**<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>base x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>exponent x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-exponentiation b e<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span>=number? e <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>=number? e <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">number?</span> e<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> b e<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>** b e<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.56"},{"data":{"title":"SICP 問題 2.55","published":"2015/10/25","tags":["scheme","SICP"]},"content":"\n<p><code>''abracadabra</code>は<code>'abracadabra</code>を返す．<br/>\n<code>(car ''abracadabra)</code>は<code>quote</code>を返す．<br/>\n<code>(cdr ''abracadabra)</code>は<code>(abracadabra)</code>を返す．<br/>\nつまり<code>'abracadabra</code>は<code>(quote abracadabra)</code>のことで，<br/>\n<code>''abracadabra</code>は<code>'(quote abracadabra)</code>のことである．<br/>\nそのため<code>(car ''abracadabra)</code>は<code>quote</code>を返す．</p>\n\n","slug":"SICP 問題 2.55"},{"data":{"title":"SICP 問題 2.54","published":"2015/10/25","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">equal?</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> a<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> b<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> a b<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> a<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> b<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">equal?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> b<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">equal?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> b<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (equal? &#39;(this is a list) &#39;(this is a list))\n#t\ngosh&gt; (equal? &#39;(this is a list) &#39;(this (is a) list))\n#f</pre>\n\n\n","slug":"SICP 問題 2.54"},{"data":{"title":"SICP 問題 2.53","published":"2015/10/25","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>a <span class=\"synSpecial\">'</span>b <span class=\"synSpecial\">'</span>c<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>a b c<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">'</span>george<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span>george<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">'((</span>x1 x2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>y1 y2<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">((</span>y1 y2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> <span class=\"synSpecial\">'((</span>x1 x2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>y1 y2<span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>y1 y2<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">'(</span>a short list<span class=\"synSpecial\">)))</span>\n<span class=\"synConstant\">#f</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">'</span>red <span class=\"synSpecial\">'((</span>red shoes<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>blue socks<span class=\"synSpecial\">)))</span>\n<span class=\"synConstant\">#f</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">memq</span> <span class=\"synSpecial\">'</span>red <span class=\"synSpecial\">'(</span>red shoes blue socks<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>red shoes blue socks<span class=\"synSpecial\">)</span>\n</pre>\n\n\n","slug":"SICP 問題 2.53"},{"data":{"title":"SICP 問題2.48の訳が変","published":"2015/10/24","tags":["scheme","SICP"]},"content":"\n<p>線分を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vector\">vector</a>で定義して構成子と選択子を定義するって問題やっていた．<br/>\n問題文には</p>\n\n<blockquote><p>平面上の有向線分は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D9%A5%AF%A5%BF\">ベクタ</a>の対ーー原点から線分の始点へ向かう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D9%A5%AF%A5%BF\">ベクタ</a>と，始点から線分の終点へ向かう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D9%A5%AF%A5%BF%A1%BC\">ベクター</a>ーで表現される．\n[中略]\nこの線分の表現をmake-segmentと選択子start-segmentおよびend-segmentとして定義せよ．</p></blockquote>\n\n<p>となっていた．<br/>\n始点から終点への<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D9%A5%AF%A5%BF\">ベクタ</a>をend-segmentってするのはおかしくかと思い原書にあたってみた．</p>\n\n<blockquote><p>A directed line segment in the plane can be represented as a pair of vectors -- the <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vector\">vector</a> running from the origin to the start-point of the segment, and the <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vector\">vector</a> running from the origin to the end-point of the segment.\n...</p></blockquote>\n\n<p>ってなっている．<br/>\n両方原点から(from the origin)じゃないですかー<br/>\n選択子end-segmentが始点から終点への<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D9%A5%AF%A5%BF\">ベクタ</a>なのはおかしいって思ってたらそういうことですか．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈[第2版]\" title=\"計算機プログラムの構造と解釈[第2版]\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈[第2版]</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題2.48の訳が変"},{"data":{"title":"SICP 問題 2.52","published":"2015/10/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink>         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.582</span> <span class=\"synConstant\">0.657</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.640</span> <span class=\"synConstant\">0.857</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.640</span> <span class=\"synConstant\">0.857</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.575</span> <span class=\"synConstant\">1.000</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.419</span> <span class=\"synConstant\">1.000</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.354</span> <span class=\"synConstant\">0.857</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.354</span> <span class=\"synConstant\">0.857</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.411</span> <span class=\"synConstant\">0.657</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.411</span> <span class=\"synConstant\">0.657</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.285</span> <span class=\"synConstant\">0.657</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.285</span> <span class=\"synConstant\">0.657</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.154</span> <span class=\"synConstant\">0.605</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>make-segment <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.154</span> <span class=\"synConstant\">0.605</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.000</span> <span class=\"synConstant\">0.857</span><span class=\"synSpecial\">))</span><span class=\"synError\">)))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>corner-split painter n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      painter\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>up <span class=\"synSpecial\">(</span>up-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>right <span class=\"synSpecial\">(</span>right-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>corner <span class=\"synSpecial\">(</span>corner-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>beside <span class=\"synSpecial\">(</span>below painter up<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>below painter right corner<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>corner-split painter n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>flip-horiz painter<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>up <span class=\"synSpecial\">(</span>up-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n            <span class=\"synSpecial\">(</span>right <span class=\"synSpecial\">(</span>right-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>top-left <span class=\"synSpecial\">(</span>beside up up<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>bottom-right <span class=\"synSpecial\">(</span>below right right<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span>corner-split <span class=\"synSpecial\">(</span>painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>beside <span class=\"synSpecial\">(</span>below painter top-left<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span>below bottom-right corner<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.52"},{"data":{"title":"SICP 問題 2.51","published":"2015/10/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>below painter1 painter2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>split-point <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">0.5</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>paint-bottom <span class=\"synSpecial\">(</span>transform-painter painter1\n                                          <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)</span>\n                                          <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)</span>\n                                          split-point<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>paint-upper <span class=\"synSpecial\">(</span>transform-painter painter2\n                                         split-point\n                                         <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">0.5</span><span class=\"synSpecial\">)</span>\n                                         <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>paint-bottom<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>paint-upper<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>below painter1 painter2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>frame<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>rotate270 <span class=\"synSpecial\">(</span>beside <span class=\"synSpecial\">(</span>rotate90 painter2<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>rotate90 painter1<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.51"},{"data":{"title":"SICP 問題 2.50","published":"2015/10/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>flip-horiz painter<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>transform-painter painter\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rotate180 painter<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>transform-painter painter\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>rotate270 paitner<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>transform-painter painter\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.0</span> <span class=\"synConstant\">0.0</span><span class=\"synSpecial\">)</span>\n                     <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1.0</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)))</span>\n\n</pre>\n\n\n","slug":"SICP 問題 2.50"},{"data":{"title":"SICP 問題 2.49","published":"2015/10/24","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>outline-painter frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>v00 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>v01 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>v10 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>v11 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>segments-&gt;painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-segment v00 v01<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment v00 v10<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment v10 v01<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment v01 v10<span class=\"synSpecial\">)))</span>\n     frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>x-painter frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>v00 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>v01 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>v11 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>v10 <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>segments-&gt;painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-segment v00 v11<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment v01 v10<span class=\"synSpecial\">)))</span>\n     frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>Rhombus-painter frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>va <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.5</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>vb <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">1</span> <span class=\"synConstant\">0.5</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>vc <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0.5</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>vd <span class=\"synSpecial\">(</span>make-vect <span class=\"synConstant\">0</span> <span class=\"synConstant\">0.5</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">((</span>segments-&gt;painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>make-segment va vb<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment vb vc<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment vc vd<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>make-segment vd va<span class=\"synSpecial\">)))</span>\n     frame<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; d</span>\n<span class=\"synComment\">;;  パス</span>\n</pre>\n\n\n","slug":"SICP 問題 2.49"},{"data":{"title":"SICP 問題 2.48","published":"2015/10/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-segment v1 v2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-vect v1 v2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-segment seg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seg<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>end-segment seg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seg<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.48"},{"data":{"title":"SICP 問題 2.47","published":"2015/10/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; listでmake</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame origin edge1 edge2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> origin edge1 edge2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>origin-frame frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>edge1-frame frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>edge2-frame frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; consでmake</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-frame origin edge1 edge2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> origin <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> edge1 edge2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>origin-frame frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>edge1-frame frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> frame<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>edge2-frame frame<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cddr</span> frame<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.47"},{"data":{"title":"SICP 問題 2.46","published":"2015/10/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-vect x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>xcor-vect v<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> v<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>ycor-vect v<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> v<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-vect v1 v2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-vect <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>xcor-vect v1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>xcor-vect v2<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>ycor-vect v1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>ycor-vect v2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-vect v1 v2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-vect <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>xcor-vect v1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>xcor-vect v2<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>ycor-vect v1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>ycor-vect v2<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>scale-vect s v<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-vect <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> s <span class=\"synSpecial\">(</span>xcor-vect v<span class=\"synSpecial\">))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> s <span class=\"synSpecial\">(</span>ycor-vect v<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.46"},{"data":{"title":"SICP 問題 2.45","published":"2015/10/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>split first second<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>painter n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        painter\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smaller <span class=\"synSpecial\">((</span>split first second<span class=\"synSpecial\">)</span> painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>first painter <span class=\"synSpecial\">((</span>second smaller smaller<span class=\"synSpecial\">)))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.45"},{"data":{"title":"SICP 問題 2.44","published":"2015/10/23","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>up-split painter n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      painter\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>smaller <span class=\"synSpecial\">(</span>up-split painter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span>below painter <span class=\"synSpecial\">(</span>beside smaller smaller<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.44"},{"data":{"title":"SICP 問題 2.43","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queens board-size<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queen-cols k<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> empty-board<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>flatmap\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rest-of-queens<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>new-row<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> board-size<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>queen-cols <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>queen-cols board-size<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>l-queens board-size<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queen-cols k<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> empty-board<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>flatmap\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>new-row<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rest-of-queens<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>queen-cols <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> board-size<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>queen-cols board-size<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>元のqueensでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/queen\">queen</a>-colsはboard-size回呼ばれている．<br/>\nそれがLouisのqueensでは(new-row k)一個につき1回呼ばれている．<br/>\nつまり　border-size = xとして<br/>\n<code>1 + x^1 + x^2 + ... x^(x-1) = (x^x - 1)/ (x - 1)</code>回呼ばれている．<br/>\nよってLouisのqueensがかかる時間は　<code>T * ((x^x - 1/ (x * (x - 1)))</code>．</p>\n\n","slug":"SICP 問題 2.43"},{"data":{"title":"SICP 問題 2.42","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queens board-size<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>queen-cols k<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> empty-board<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>flatmap\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>rest-of-queens<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>new-row<span class=\"synSpecial\">)</span>\n                   <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> board-size<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span>queen-cols <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>queen-cols board-size<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> empty-board nil<span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>adjoin-position new-row k rest-of-queens<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> new-row k<span class=\"synSpecial\">)</span> rest-of-queens<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>safe? k positions<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> positions<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadar</span> positions<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadar</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> positions<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)))))</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> positions<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (queens 5)\n(((4 5) (2 4) (5 3) (3 2) (1 1)) ((3 5) (5 4) (2 3) (4 2) (1 1)) ((5 5) (3 4) (1 3) (4 2) (2 1)) ((4 5) (1 4) (3 3) (5 2) (2 1)) ((5 5) (2 4) (4 3) (1 2) (3 1)) ((1 5) (4 4) (2 3) (5 2) (3 1)) ((2 5) (5 4) (3 3) (1 2) (4 1)) ((1 5) (3 4) (5 3) (2 2) (4 1)) ((3 5) (1 4) (4 3) (2 2) (5 1)) ((2 5) (4 4) (1 3) (3 2) (5 1)))\n</pre>\n\n\n","slug":"SICP 問題 2.42"},{"data":{"title":"SICP 問題 2.41","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>equal-sum-of-unique-trio n s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> s <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cadr</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">caddr</span> l<span class=\"synSpecial\">))))</span>\n          <span class=\"synSpecial\">(</span>flatmap\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>flatmap <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>j<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>k<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j k<span class=\"synSpecial\">))</span>\n                             <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> j <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n                      <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (equal-sum-of-unique-trio 10 20)\n((8 7 5) (9 6 5) (9 7 4) (9 8 3) (10 6 4) (10 7 3) (10 8 2) (10 9 1))</pre>\n\n\n","slug":"SICP 問題 2.41"},{"data":{"title":"SICP 問題 2.40","published":"2015/10/22","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>unique-pairs n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>flatmap\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>j<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> i j<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n   <span class=\"synSpecial\">(</span>enumerate-interval <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>prime-sum-pairs n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> make-pair-sum\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> prime-sum?\n               <span class=\"synSpecial\">(</span>unique-pairs n<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.40"},{"data":{"title":"schemeでmapを書いてみた","published":"2015/10/21","tags":["scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SICP\">SICP</a>の問題 2.37をやろうとしたところ，この本で定義した一つのリストのみに対応したmapではなく<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のリストに対応したmapが必要だったので自分で書いてみました．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>foldr op init lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span>\n      init\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>foldr op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> op <span class=\"synSpecial\">.</span> lst<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>map1 op lst<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>op x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">'()</span> lst<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lst<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lst<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>map1 op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lst<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>rest lst<span class=\"synSpecial\">))</span>\n                <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                      <span class=\"synSpecial\">((</span>foldr <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span> rest<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> x<span class=\"synSpecial\">)))</span> rest<span class=\"synSpecial\">)))</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">apply</span> op <span class=\"synSpecial\">(</span>map1 <span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n                                  <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">)))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (map + &#39;(1 2 3) &#39;(4 5 6))\n(5 7 9)</pre>\n\n\n<p>うまく動いてくれてるようです．<br/>\n可変長引数を省略した時にはrestに空リストが入るので(null? rest)で分岐することにしました．</p>\n\n","slug":"schemeでmapを書いてみた"},{"data":{"title":"SICP 問題 2.39","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter result rest<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>op result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter initial sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x<span class=\"synSpecial\">)))</span> nil sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> y x<span class=\"synSpecial\">))</span> nil sequence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.39"},{"data":{"title":"SICP 問題 2.38","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-left</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter result rest<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> rest<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>op result <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rest<span class=\"synSpecial\">))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rest<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter initial sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">fold-right</span> op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (fold-right / 1 (list 1 2 3))\n3/2\ngosh&gt; (fold-left / 1 (list 1 2 3))\n1/6\ngosh&gt; (fold-right list nil (list 1 2 3))\n(1 (2 (3 ())))\ngosh&gt; (fold-left list nil (list 1 2 3))\n(((() 1) 2) 3)</pre>\n\n\n<p>fold-rightとfold-leftによってopが満たすべき条件は＋や×のように順番に影響されない手続きであること．</p>\n\n","slug":"SICP 問題 2.38"},{"data":{"title":"SICP 問題 2.37","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>dot-product v w<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">*</span> v w<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-vector m v<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>dot-product x v<span class=\"synSpecial\">))</span> m<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>transpose mat<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate-n <span class=\"synIdentifier\">cons</span> nil mat<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>matrix-*-matrix m n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>cols <span class=\"synSpecial\">(</span>transpose n<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span>matrix-*-vector cols x<span class=\"synSpecial\">))</span>\n         m<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (matrix-*-vector &#39;((1 2)\n                        (3 4))\n                      &#39;(5 6))\n(17 39)\ngosh&gt; (dot-product &#39;(1 2) &#39;(3 4))\n11\ngosh&gt; (matrix-*-vector &#39;((1 2)\n                        (3 4))\n                      &#39;(5 6))\n(17 39)\ngosh&gt; (matrix-*-matrix &#39;((1 2 3)\n                         (4 5 6))\n                       &#39;((7 10)\n                         (8 11)\n                         (9 12)))\n((50 68) (122 167))</pre>\n\n\n","slug":"SICP 問題 2.37"},{"data":{"title":"SICP 問題 2.36","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; accumulate</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; accumulate-n</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate-n op init seqs<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seqs<span class=\"synSpecial\">))</span>\n             nil\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>accumulate op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">car</span> seqs<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>accumulate-n op init <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synIdentifier\">cdr</span> seqs<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (accumulate-n + 0 &#39;((1 2 3) (4 5 6) (7 8 9) (10 11 12)))\n(22 26 30)</pre>\n\n\n","slug":"SICP 問題 2.36"},{"data":{"title":"SICP 問題 2.35","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;accumulate</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;enumerate-tree</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>enumerate-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> tree<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>enumerate-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                      <span class=\"synSpecial\">(</span>enumerate-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;;count-leaves</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>count-leaves tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>enumerate-tree tree<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (count-leaves (list 1 2 (list 3) (list 4 5 (list 6)) 7))\n7</pre>\n\n\n","slug":"SICP 問題 2.35"},{"data":{"title":"SICP 問題 2.34","published":"2015/10/21","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>horner-eval x coefficient-sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis res<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> res<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x res<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> coefficient-sequence<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (horner-eval 2 (list 1 3 0 5 0 1))\n79</pre>\n\n\n","slug":"SICP 問題 2.34"},{"data":{"title":"SICP 問題 2.33","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n<p>accumulateを使ってmap,append,lengthを実装する．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate op initial sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> sequence<span class=\"synSpecial\">)</span>\n      initial\n      <span class=\"synSpecial\">(</span>op <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> sequence<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>accumulate op initial <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> sequence<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> p sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>p x<span class=\"synSpecial\">)</span> y<span class=\"synSpecial\">))</span> nil sequence<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> seq1 seq2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synIdentifier\">cons</span> seq2 seq1<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">length</span> sequence<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>accumulate <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> y<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span> sequence<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.33"},{"data":{"title":"SICP 問題 2.32","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>subsets s<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> s<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> nil<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>rest <span class=\"synSpecial\">(</span>subsets <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> s<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> rest <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span>\n                          rest<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;;この式はまず最後まで再帰し，そこでrestに空リストを持って返ってくる．</span>\n<span class=\"synComment\">;;mapでcarとrestをconsして新しいリストを作りそれが返ったところでrestに入る．</span>\n<span class=\"synComment\">;;その繰り返しですべての部分集合が返される．</span>\n\ns <span class=\"synIdentifier\">=</span> nil\n<span class=\"synSpecial\">()</span>\n\ns <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nrest <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">()</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\ns <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nrest <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\ns <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\nrest <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> s<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> <span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(()</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.32"},{"data":{"title":"SICP 問題 2.31","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-map fn tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sub-tree<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>tree-map fn sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>fn sub-tree<span class=\"synSpecial\">)))</span>\n       tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqaure x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>tree-map square tree<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.31"},{"data":{"title":"SICP 問題 2.30","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> tree<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">not</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> tree<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> tree tree<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>square-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> tree<span class=\"synSpecial\">))</span>\n                    <span class=\"synSpecial\">(</span>square-tree <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> tree<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-tree tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>sub-tree<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>square-tree sub-tree<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> sub-tree sub-tree<span class=\"synSpecial\">)))</span>\n       tree<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.30"},{"data":{"title":"SICP 問題 2.29","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-mobile left right<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> left right<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-branch <span class=\"synIdentifier\">length</span> structure<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synIdentifier\">length</span> structure<span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; a</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>left-branch mobile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> mobile<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch mobile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> mobile<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>branch-length branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> branch<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>branch-structure branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> branch<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; b</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>total-weight mob<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> mob<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>branch-structure <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>branch-structure <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; c</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>balanced? mob<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">pair?</span> mob<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>branch-length <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">)))</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>branch-length <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span>total-weight <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span>balanced? <span class=\"synSpecial\">(</span>left-branch mob<span class=\"synSpecial\">))</span>\n           <span class=\"synSpecial\">(</span>balanced? <span class=\"synSpecial\">(</span>right-branch mob<span class=\"synSpecial\">)))</span>\n      <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; d</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>right-branch mobile<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> mobile<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>branch-structure branch<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> branch<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.29"},{"data":{"title":"SICP 問題 2.28","published":"2015/10/20","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fringe l<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> l<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">))</span>\n                                 <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> l<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>fringe <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> l<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (fringe x)\n(1 2 3 4)\ngosh&gt; (fringe (list x x))\n(1 2 3 4 1 2 3 4)</pre>\n\n\n","slug":"SICP 問題 2.28"},{"data":{"title":"SICP 問題2.25","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">5</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">9</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">7</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">5</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">6</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">))))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">))))))))))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (car (cdr (car (cdr (cdr &#39;(1 3 (5 7) 9))))))\n7\ngosh&gt; (car (car &#39;((7))))\n7\ngosh&gt; (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr &#39;(1 (2 (3 (4 (5 (6 7))))))))))))))))))\n7</pre>\n\n\n","slug":"SICP 問題2.25"},{"data":{"title":"SICP 問題 2.27","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n      items\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>deep-reverse items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">pair?</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> <span class=\"synSpecial\">(</span>deep-reverse <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))</span>\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">(</span>deep-reverse <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> items<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (deep-reverse x)\n((4 3) (2 1))\ngosh&gt; (define y (list (list 1 2) (list 3 4 (list 5 6 7))))\ny\ngosh&gt; (deep-reverse y)\n(((7 6 5) 4 3) (2 1))</pre>\n\n\n","slug":"SICP 問題 2.27"},{"data":{"title":"SICP 問題 2.26","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">append</span> x y<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> x y<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">((</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.26"},{"data":{"title":"SICP 問題 2.24","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n<p><img class=\"hatena-fotolife\" title=\"f:id:wat-aro:20151019214403j:image\" src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151019/20151019214403.jpg\" alt=\"f:id:wat-aro:20151019214403j:image\" /></p>\n","slug":"SICP 問題 2.24"},{"data":{"title":"SICP 問題 2.23","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n   <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span>done<span class=\"synSpecial\">)</span>\n   <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n    <span class=\"synSpecial\">(</span>proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (for-each (lambda (x) (newline) (display x))\n                (list 57 321 88))\n\n57\n321\n88done</pre>\n\n\n","slug":"SICP 問題 2.23"},{"data":{"title":"SICP 問題 2.22","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter things answer<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> things<span class=\"synSpecial\">)</span>\n        answer\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> things<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> things<span class=\"synSpecial\">))</span>\n                    answer<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter items nil<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; iter内でのconsで(square (car things))とanswerを引数として取っている．</span>\n<span class=\"synComment\">;; この場，次のcdrでconsされるのは(square (car (cdr things))) と((square (car things)) answer)．</span>\n<span class=\"synComment\">;; ここで順番が逆になっている．</span>\n<span class=\"synComment\">;; このまま続けていくと欲しかったリストの逆順が返される．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter things answer<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> things<span class=\"synSpecial\">)</span>\n        answer\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> things<span class=\"synSpecial\">)</span>\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> answer\n                    <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> things<span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>iter items nil<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; 始めのconsで作られるのは(() . 1)．</span>\n<span class=\"synComment\">;; 次の繰り返しでconsすると((() . 1) . 2)ができる．</span>\n<span class=\"synComment\">;; 始めのconsで作られたドット対を要素としたドット対ができる．</span>\n<span class=\"synComment\">;; これを繰り返すのでうまくいかない．</span>\n</pre>\n\n\n","slug":"SICP 問題 2.22"},{"data":{"title":"SICP 問題 2.21","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> items<span class=\"synSpecial\">)</span>\n      nil\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> items<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>square-list <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>square-list items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> x x<span class=\"synSpecial\">))</span>\n       items<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.21"},{"data":{"title":"SICP 問題 2.20","published":"2015/10/19","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>same-parity x <span class=\"synSpecial\">.</span> y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur lis pred?<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> nil<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">((</span>pred? <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> pred?<span class=\"synSpecial\">)))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n      <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> pred?<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x <span class=\"synSpecial\">(</span>recur y <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> x<span class=\"synSpecial\">)</span>\n                       <span class=\"synIdentifier\">odd?</span>\n                       <span class=\"synIdentifier\">even?</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (same-parity 1 2 3 4 5 6 7)\n(1 3 5 7)\ngosh&gt; (same-parity 2 3 4 5 6 7)\n(2 4 6)</pre>\n\n\n<p>　<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%B0%A4%EB\">ググる</a>といろんなやり方でみんな解いてますね．</p>\n\n","slug":"SICP 問題 2.20"},{"data":{"title":"SICP 問題 2.19","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cc amount coin-values<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> amount <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> amount <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>no-more? coin-values<span class=\"synSpecial\">))</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>cc amount\n                <span class=\"synSpecial\">(</span>except-first-denomination coin-values<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>cc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> amount\n                   <span class=\"synSpecial\">(</span>first-denomination coin-values<span class=\"synSpecial\">))</span>\n                coin-values<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> first-denomination <span class=\"synIdentifier\">car</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> except-first-denomination <span class=\"synIdentifier\">cdr</span><span class=\"synSpecial\">)</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> no-more? <span class=\"synIdentifier\">null?</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p>coins-valueの順番は答えに関係ない．<br/>\nlist内のすべての組み合わせを行っているためである．<br/>\nただし，降順にしたほうが繰り返しが少なくなるため効率がよくなる．<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define us-coins (list 50 25 10 5 1))\nus-coins\ngosh&gt; (cc 100 us-coins)\n292\ngosh&gt; (cc 100 (list 25 50 10 5 1))\n292\ngosh&gt; (cc 100 (list 25 10 5 1 50))\n292\ngosh&gt; (cc 51 (list 25 10 5 1 50))\n50\ngosh&gt; (cc 51 us-coins)\n50</pre>\n\n\n","slug":"SICP 問題 2.19"},{"data":{"title":"SICP 問題 2.18","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">reverse</span> items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter lis result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter items nil<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.18"},{"data":{"title":"SICP 問題 2.17","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>last-pair items<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">null?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))</span>\n      items\n      <span class=\"synSpecial\">(</span>last-pair <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> items<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.17"},{"data":{"title":"SICP 問題 2.15","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par1 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>div-interval <span class=\"synSpecial\">(</span>mul-interval r1 r2<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>add-interval r1 r2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par2 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span>make-interval <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>div-interval one\n                  <span class=\"synSpecial\">(</span>add-interval <span class=\"synSpecial\">(</span>div-interval one r1<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span>div-interval one r2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n<code>par1</code>には不確かな数(r1,r2)が４回出てきている．　<br/>\n<code>par2</code>には不確かな数が２回．　<br/>\nそのため<code>par2</code>のほうが誤差が小さい．<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define r1 (make-center-percent 5 5))\nr1\ngosh&gt; (define r2 (make-center-percent 20 5))\nr2\ngosh&gt; (define p1 (par1 r1 r2))\np1\ngosh&gt; (define p2 (par2 r1 r2))\nP2\ngosh&gt; (center p1)\n4.040100250626566\ngosh&gt; (percent p1)\n14.900744416873444\ngosh&gt; (center p2)\n4.0\ngosh&gt; (percent p2)\n4.999999999999999</pre>\n\n\n","slug":"SICP 問題 2.15"},{"data":{"title":"SICP 問題 2.14","published":"2015/10/18","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par1 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>div-interval <span class=\"synSpecial\">(</span>mul-interval r1 r2<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>add-interval r1 r2<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>par2 r1 r2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>one <span class=\"synSpecial\">(</span>make-interval <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>div-interval one\n                  <span class=\"synSpecial\">(</span>add-interval <span class=\"synSpecial\">(</span>div-interval one r1<span class=\"synSpecial\">)</span>\n                                <span class=\"synSpecial\">(</span>div-interval one r2<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define small (make-center-percent 10 1.0))\nsmall\ngosh&gt; small\n(9.9 . 10.1)\ngosh&gt; (define lerge (make-center-percent 20.0 20))\nlerge\ngosh&gt; lerge\n(16.0 . 24.0)\ngosh&gt; (par1 small lerge)\n(4.645161290322581 . 9.359073359073358)\ngosh&gt; (par2 small lerge)\n(6.115830115830116 . 7.108504398826979)</pre>\n\n\n","slug":"SICP 問題 2.14"},{"data":{"title":"SICP 問題 2.12","published":"2015/10/13","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-center-width c w<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> c w<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> c w<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>center i<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>lower-bound i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>upper-bound i<span class=\"synSpecial\">))</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>width i<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>upper-bound i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lower-bound i<span class=\"synSpecial\">))</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-center-percent c p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-interval c <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> c <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> w <span class=\"synConstant\">100</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>percent i<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>width i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>center i<span class=\"synSpecial\">))</span> <span class=\"synConstant\">100</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.12"},{"data":{"title":"SICP 問題 2.11","published":"2015/10/13","tags":["scheme","SICP"]},"content":"\n<p>(define (div-interval x y)\n  (let <a href=\"#f-162e29d7\" name=\"fn-162e29d7\" title=\"lowx (lower-bound x\">*1</a>\n        (upx (upper-bound x))\n        (lowy (lower-bound y))\n        (upy (upper-bound y)))\n    (cond <a href=\"#f-d05df02c\" name=\"fn-d05df02c\" title=\"> lowx 0)        ;;xは正\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval ( lowx lowy)\n                                 ( upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval ( upx upy)\n                                 ( lowx lowy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval ( upx lowy)\n                                 ( upx upy)))))\n          ((&lt; upx 0) ;;xは負\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval ( upx upy)\n                                 ( lowx lowy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval ( lowx lowy)\n                                 ( upx upy)))\n                 (else ;;yは０を跨ぐ\n                  (maek-interval ( upx upy)\n                                 ( upx lowy)))))\n          (else ;;xは０を跨ぐ\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval ( lowx upy)\n                                 ( upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval ( upx upy)\n                                 ( lowx upy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval (if (&lt; ( lowx loxy) ( upx upy\">*2</a>\n                                     (<em> upx upy)\n                                     (</em> lowx lowy))\n                                 (if (&lt; (<em> lowx upy) (</em> upx lowy))\n                                     (<em> lowx upy)\n                                     (</em> upx lowy)))))))))</p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-162e29d7\" name=\"f-162e29d7\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">lowx (lower-bound x</span></p>\n<p class=\"footnote\"><a href=\"#fn-d05df02c\" name=\"f-d05df02c\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">> lowx 0)        ;;xは正\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval (<em> lowx lowy)\n                                 (</em> upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval (<em> upx upy)\n                                 (</em> lowx lowy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval (<em> upx lowy)\n                                 (</em> upx upy)))))\n          ((&lt; upx 0) ;;xは負\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval (<em> upx upy)\n                                 (</em> lowx lowy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval (<em> lowx lowy)\n                                 (</em> upx upy)))\n                 (else ;;yは０を跨ぐ\n                  (maek-interval (<em> upx upy)\n                                 (</em> upx lowy)))))\n          (else ;;xは０を跨ぐ\n           (cond ((> lowy 0) ;;yは正\n                  (make-interval (<em> lowx upy)\n                                 (</em> upx upy)))\n                 ((&lt; upy 0) ;;yは負\n                  (make-interval (<em> upx upy)\n                                 (</em> lowx upy)))\n                 (else ;;yは０を跨ぐ\n                  (make-interval (if (&lt; (<em> lowx loxy) (</em> upx upy</span></p>\n</div>\n","slug":"SICP 問題 2.11"},{"data":{"title":"SICP 問題 2.10","published":"2015/10/13","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; y が0をまたがる区間の時はエラーを返す</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div-interval x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>upper-bound y<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span>error <span class=\"synConstant\">&quot;error&quot;</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>mul-interval x\n                    <span class=\"synSpecial\">(</span>make-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>upper-bound y<span class=\"synSpecial\">))</span>\n                                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.10"},{"data":{"title":"SICP 問題 2.8","published":"2015/10/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>upper-bound x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lower-bound x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sub-interval x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>make-interval <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>upper-bound x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">))</span>\n                 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>upper-bound y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>lower-bound x<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.8"},{"data":{"title":"SICP 問題 2.7","published":"2015/10/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-interval a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a b<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>upper-bound x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>lower-bound y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> y<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> y<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> y<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.7"},{"data":{"title":"SICP 問題 2.6","published":"2015/10/11","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> zero <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>add-1 n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">((</span>n f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span>add-1 zero<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))</span> f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> one <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>add-1 one<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span> f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> two <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>a f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>b f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))))</span>\n<span class=\"synComment\">;; 始めにa,b両方にfを適用すると((lambda (f) ...) f)なので(f ... x))の形がそのまま残る．</span>\n<span class=\"synComment\">;; この時前者は(lambda (x) (f ... x)) 後者も同じく(lambda (x) (f ... x))の形になる．</span>\n<span class=\"synComment\">;; 後者にはxも適用すると(f ... x)だけになる．</span>\n<span class=\"synComment\">;; これを前者に適用すれば(f ...x)のxが(f ... x)に置き換わるので(f ... (f ... x))の形になる．</span>\n<span class=\"synComment\">;; zero や one の最初に(lambda (f) (lambda (x) ...))となっているので形を揃えて上記の手続きとなる．</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> one two<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span> f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span> f<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))</span> x<span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>f<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.6"},{"data":{"title":"[SICP]SICP 問題 2.1","published":"2015/10/10","tags":["scheme"]},"content":"\n<p>負の引数に対応したmake-rat</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-rat n d<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>g <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">gcd</span> n d<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>n1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n g<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>d1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> d g<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> d1 <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">-1</span> n1<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">-1</span> d1<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> n1 d1<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"[SICP]SICP 問題 2.1"},{"data":{"title":"SICP 問題 2.5","published":"2015/10/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> <span class=\"synConstant\">2</span> a<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> <span class=\"synConstant\">3</span> b<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        count\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter c <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n        count\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter c <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n始め算術演算を使えって条件を見逃してlogを使って書いたのでそれも．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>iter c<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>iter c<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.5"},{"data":{"title":"SICP 問題 2.4","published":"2015/10/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>m x y<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> z<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>z <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">)))</span>\n\n<span class=\"synComment\">;; (car (cons x y)) </span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>m x y<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">((</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> p<span class=\"synSpecial\">)</span> x y<span class=\"synSpecial\">)</span>\nx\n\n<span class=\"synComment\">;; cdr</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> z<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>p q<span class=\"synSpecial\">)</span> q<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題 2.4"},{"data":{"title":"SICP 問題 2.3","published":"2015/10/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 長方形を高さと幅で定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-rectangle height width<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> height width<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>perimeter-rect rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>height-rect rect<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>width-rect rect<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>area-rect rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>height-rect rect<span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>width-rect rect<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>height-rect rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rect<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>width-rect rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rect<span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define r1 (make-rectangle 10 5))\nr1\ngosh&gt; (perimeter-rect r1)\n30\ngosh&gt; (area-rect r1)\n50</pre>\n\n\n<p>　<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 長方形を対角の二点によって定義</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-rect p1 p2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> p1 p2<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>point-1 rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> rect<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>point-2 rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> rect<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>height-rect rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>y-point <span class=\"synSpecial\">(</span>point-1 rect<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>y-point <span class=\"synSpecial\">(</span>point-2 rect<span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>width-rect rect<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>x-point <span class=\"synSpecial\">(</span>point-1 rect<span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">(</span>x-point <span class=\"synSpecial\">(</span>point-2 rect<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define r2 (make-rect (make-point 0 0) (make-point 10 5)))\nr2\ngosh&gt; (perimeter-rect r2)\n30\ngosh&gt; (area-rect r2)\n50</pre>\n\n\n","slug":"SICP 問題 2.3"},{"data":{"title":"SICP 問題 2.2","published":"2015/10/10","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-segment start end<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> start end<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-segment seg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> seg<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>end-segment seg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> seg<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>make-point x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> x y<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>x-point point<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> point<span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>y-point point<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> point<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>midpoint-segment seg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>s-seg <span class=\"synSpecial\">(</span>start-segment seg<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span>e-seg <span class=\"synSpecial\">(</span>end-segment seg<span class=\"synSpecial\">)))</span>\n    <span class=\"synSpecial\">(</span>make-point <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>x-point s-seg<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>x-point e-seg<span class=\"synSpecial\">))</span>\n                   <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>y-point s-seg<span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span>y-point e-seg<span class=\"synSpecial\">))</span>\n                   <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>　  <br/>\n　　　<br/>\n　　　<br/>\n印字用手続きで確かめてみる.</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>print-point p<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;(&quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>x-point p<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;,&quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synSpecial\">(</span>y-point p<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot;)&quot;</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (define my-segment (make-segment &#39;(0 . 0) &#39;(2 . 2)))\nmy-segment\ngosh&gt; (cdr my-segment)\n(2 . 2)\ngosh&gt; (car my-segment)\n(0 . 0)\ngosh&gt; (print-point my-segment)\n\n((0 . 0),(2 . 2))#&lt;undef&gt;\ngosh&gt; (print-point (midpoint-segment my-segment))\n\n(1,1)#&lt;undef&gt;</pre>\n\n\n","slug":"SICP 問題 2.2"},{"data":{"title":"SICP 問題1.46","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iterative-improve enough? improve<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter guess<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>enough? guess<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>improve guess<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>improve guess<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>iter guess<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">sqrt</span> x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>improve guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>average guess <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x guess<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>good-enough? guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> guess <span class=\"synSpecial\">(</span>improve guess<span class=\"synSpecial\">))))</span> <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">((</span>iterative-improve good-enough? improve<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fixed-point f first-guess<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>improve guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>f guess<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>close-enough? guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> guess <span class=\"synSpecial\">(</span>improve guess<span class=\"synSpecial\">)))</span> <span class=\"synConstant\">0.00001</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">((</span>iterative-improve close-enough? improve<span class=\"synSpecial\">)</span> first-guess<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.46"},{"data":{"title":"SICP 問題1.45","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;;実験用に作った手続き</span>\n<span class=\"synComment\">;; x^n k回平均緩和</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>test x n k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fixed-point-of-transform <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>y<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> y <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>z<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span>repeated average-damp k<span class=\"synSpecial\">)</span> z<span class=\"synSpecial\">))</span>\n                            <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>実験の結果，<br/>\n2 ≦ n &lt; 4 の時 k=1<br/>\n4 ≦ n &lt; 8 の時 k=2<br/>\n8 ≦ n &lt; 16 の時 k=3<br/>\n16 ≦ n &lt; 32 の時 k=4<br/>\n32 ≦ n &lt; 64 の時 k=5<br/>\nn乗根に必要な平均緩和の回数は(log2 n) 回(小数部分切り捨て)．<br/>\nn√xを求めるnth-rootを実装する．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>nth-root x n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>k <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">floor</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>fixed-point <span class=\"synSpecial\">((</span>repeated average-damp k<span class=\"synSpecial\">)</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>y<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">expt</span> y\n                               <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n                 <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題1.45"},{"data":{"title":"SICP 問題1.44","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n<p>平滑化関数とn重平滑化関数</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>smooth f<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>dx <span class=\"synConstant\">0.0001</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x dx<span class=\"synSpecial\">))</span>\n            <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> x dx<span class=\"synSpecial\">)))</span>\n         <span class=\"synConstant\">3</span><span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>n-fold-smooth f n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">((</span>repeated smooth n<span class=\"synSpecial\">)</span> x<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題1.44"},{"data":{"title":"SICP 問題1.43","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n<p>関数fをn回作用を計算する手続きrepeated</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>repeated f n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter fn count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count n<span class=\"synSpecial\">)</span>\n        fn\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>compose f fn<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter f <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; ((repeated inc 5) 0)\n5</pre>\n\n\n","slug":"SICP 問題1.43"},{"data":{"title":"SICP 問題1.42","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n<p>合成関数を実装する手続きcompose</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>compose f g<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>g x<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; ((compose square inc) 6)\n49</pre>\n\n\n","slug":"SICP 問題1.42"},{"data":{"title":"SICP 問題1.41","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>inc n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>double f<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span>f x<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(define D double)\n(define DD (D D))\n\n(((D (D D)) inc) 5)\n(((D DD) inc) 5)\n((DD (DD inc)) 5)\n((DD (D (D inc))))\n((D (D (D (D inc)))) 5)\n((D (D (D (lambda (x) (+ 2 x))))) 5)\n((D (D (lambda (x) (+ 4 x)))) 5)\n((D (lambda (x) (+ 8 x))) 5)\n((lambda (x) (+ 16 x)) 5)\n(+ 16 5)\n21\n\n\ngosh&gt; (((double (double double)) inc) 5)\n21</pre>\n\n\n","slug":"SICP 問題1.41"},{"data":{"title":"SICP 問題1.40","published":"2015/10/09","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cubic a b c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>cube x<span class=\"synSpecial\">)</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b x<span class=\"synSpecial\">)</span> c<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (newtons-method (cubic 3 3 1) 1)\n-0.9999755158323895</pre>\n\n\n","slug":"SICP 問題1.40"},{"data":{"title":"SICP 問題1.39","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tan-cf x k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cont-frac <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>square x<span class=\"synSpecial\">))))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2.0</span> i<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n             k<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.39"},{"data":{"title":"SICP 問題1.38","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>e-2 k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cont-frac <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">modulo</span> i <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">quotient</span> i <span class=\"synConstant\">3</span><span class=\"synSpecial\">)))</span>\n                             <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n             k<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.38"},{"data":{"title":"SICP 問題1.37","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n<p>無限連分数の近似値</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的プロセス</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cont-frac n d k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>recur i<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> i k<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>n i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>d i<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>n i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>d i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>recur <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n  <span class=\"synSpecial\">(</span>recur <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synComment\">;; 反復的プロセス</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cont-frac n d k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter i res<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> i <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        res\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>n i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>d i<span class=\"synSpecial\">)</span> res<span class=\"synSpecial\">)))))</span>\n  <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span>n k<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>d k<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; \n1 -&gt; 1.0\n2 -&gt; 0.5\n3 -&gt; 0.6666666666666666\n4 -&gt; 0.6000000000000001\n5 -&gt; 0.625\n6 -&gt; 0.6153846153846154\n7 -&gt; 0.6190476190476191\n8 -&gt; 0.6176470588235294\n9 -&gt; 0.6181818181818182\n10 -&gt; 0.6179775280898876\n11 -&gt; 0.6180555555555556\n12 -&gt; 0.6180257510729613\n13 -&gt; 0.6180371352785146\n14 -&gt; 0.6180327868852459\n15 -&gt; 0.6180344478216819\n16 -&gt; 0.6180338134001252\n17 -&gt; 0.6180340557275542\n18 -&gt; 0.6180339631667064\n19 -&gt; 0.6180339985218034\n20 -&gt; 0.6180339850173578</pre>\n\n\n<p>k = 11以上で有効桁数４桁となる．</p>\n\n","slug":"SICP 問題1.37"},{"data":{"title":"SICP 問題1.36","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fixed-point2 f first-guess<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>close-enough? v1 v2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> v1 v2<span class=\"synSpecial\">))</span> tolerance<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next <span class=\"synSpecial\">(</span>f guess<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> guess<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>close-enough? guess next<span class=\"synSpecial\">)</span>\n          next\n          <span class=\"synSpecial\">(</span>try next<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>try first-guess<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-exp<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fixed-point2 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> <span class=\"synConstant\">1000</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> x<span class=\"synSpecial\">)))</span>\n                <span class=\"synConstant\">2.0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>my-exp2<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fixed-point2 <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>average x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> <span class=\"synConstant\">1000</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">log</span> x<span class=\"synSpecial\">))))</span>\n                <span class=\"synConstant\">2.0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (my-exp)\n2.0\n9.965784284662087\n3.004472209841214\n6.279195757507157\n3.759850702401539\n5.215843784925895\n4.182207192401397\n4.8277650983445906\n4.387593384662677\n4.671250085763899\n4.481403616895052\n4.6053657460929\n4.5230849678718865\n4.577114682047341\n4.541382480151454\n4.564903245230833\n4.549372679303342\n4.559606491913287\n4.552853875788271\n4.557305529748263\n4.554369064436181\n4.556305311532999\n4.555028263573554\n4.555870396702851\n4.555315001192079\n4.5556812635433275\n4.555439715736846\n4.555599009998291\n4.555493957531389\n4.555563237292884\n4.555517548417651\n4.555547679306398\n4.555527808516254\n4.555540912917957\n4.555532270803653\ngosh&gt; (my-exp2)\n2.0\n5.9828921423310435\n4.922168721308343\n4.628224318195455\n4.568346513136242\n4.5577305909237005\n4.555909809045131\n4.555599411610624\n4.5555465521473675\n4.555537551999825</pre>\n\n\n<p>平均緩和を使わなかった時は35ステップ．\n使った場合は10ステップ．</p>\n\n","slug":"SICP 問題1.36"},{"data":{"title":"SICP 問題1.35","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151008/20151008050935.jpg\" alt=\"f:id:wat-aro:20151008050935j:plain\" title=\"f:id:wat-aro:20151008050935j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>x → 1 + 1/xを使い，fixed-point手続きにより<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%AB%B6%E2%C8%E6\">黄金比</a>を計算する</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fixed-point f first-guess<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>close-enough? v1 v2<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> v1 v2<span class=\"synSpecial\">))</span> tolerance<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try guess<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>next <span class=\"synSpecial\">(</span>f guess<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>close-enough? guess next<span class=\"synSpecial\">)</span>\n          next\n          <span class=\"synSpecial\">(</span>try next<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>try first-guess<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> golden-ratio\n  <span class=\"synSpecial\">(</span>fixed-point <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x<span class=\"synSpecial\">)))</span>\n               <span class=\"synConstant\">1.0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt;golden-ratio\n1.6180327868852458</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/511qf4jdYjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"計算機プログラムの構造と解釈[第2版]\" title=\"計算機プログラムの構造と解釈[第2版]\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4798135984/wataro-22/\">計算機プログラムの構造と解釈[第2版]</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> ハロルド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%D6%A5%EB\">エイブル</a>ソン,ジュリーサスマン,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%E9%A5%EB%A5%C9%A1%A6%A5%B8%A5%A7%A5%A4%A5%B5%A5%B9%A5%DE%A5%F3\">ジェラルド・ジェイサスマン</a>,Harold Abelson,Julie Sussman,Gerald Jay Sussman,和田英一</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/05/17</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4798135984/wataro-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"SICP 問題1.35"},{"data":{"title":"SICP 問題1.34","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f g<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>g <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a>に<code>(f f)</code>を評価させるとどうなるか．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>f f<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>f <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synConstant\">2</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n<p><code>(f f)</code>のfに引数を適用し，<code>(f 2)</code>となる．<br/>\nこのfに引数を適用すると<code>(2 2)</code>となる．\n<code>(2 2)</code>を評価しようとするが2は手続きでないためエラーとなり終了する．</p>\n\n","slug":"SICP 問題1.34"},{"data":{"title":"SICP 問題1.33","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的プロセスで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>filtered-accumulate <span class=\"synIdentifier\">filter</span> combiner null-value term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span> null-value<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">filter</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>combiner <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span>\n                              <span class=\"synSpecial\">(</span>filtered-accumulate <span class=\"synIdentifier\">filter</span> combiner null-value\n                                                   term <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> next b<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>filterd-accumulate <span class=\"synIdentifier\">filter</span> combiner null-value term <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> next b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 反復的プロセスで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>filtered-accumulate <span class=\"synIdentifier\">filter</span> combiner null-value term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter a result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">filter</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>combiner <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter a null-value<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-prime-square a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>filtered-accumulate prime? <span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square a<span class=\"synSpecial\">))</span> a <span class=\"synConstant\">1+</span> b<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>product-disjoint-n n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>disjoint-n? a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">gcd</span> a b<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n          a\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">gcd</span> b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> a b<span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">gcd</span> a n<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span>filtered-accumulate disjoint-n? <span class=\"synIdentifier\">*</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1+</span> n<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.33"},{"data":{"title":"SICP 問題1.32","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的プロセスで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate combiner null-value term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span>\n      null-value\n      <span class=\"synSpecial\">(</span>combiner <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>accumulate combiner null-value term <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> next b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 反復的プロセスで</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>accumulate combiner null-value term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter a result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>combiner <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter a null-value<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.32"},{"data":{"title":"SICP 問題1.31","published":"2015/10/08","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的プロセスでproduct</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>product term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">0</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>product term <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> next b<span class=\"synSpecial\">))))</span>\n\n<span class=\"synComment\">;; 反復的プロセスでproduct</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>product term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter a result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter a <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>factorial n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>product identity <span class=\"synConstant\">1</span> <span class=\"synConstant\">1+</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pi-product n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>term i<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> i<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n    <span class=\"synSpecial\">(</span>product term <span class=\"synConstant\">1</span> <span class=\"synConstant\">1+</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pi n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">4</span> <span class=\"synSpecial\">(</span>pi-product n<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"SICP 問題1.31"},{"data":{"title":"SICP 問題1.30","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n<p>sumを末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で書き直す</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum term a next b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter a result<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> a b<span class=\"synSpecial\">)</span>\n        result\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span>next a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>term a<span class=\"synSpecial\">)</span> result<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span>iter a <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.30"},{"data":{"title":"SICP 問題1.29","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>integral-simpson f a b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> h <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b a<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>y k<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> k h<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next i<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>term i<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> i <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> i n<span class=\"synSpecial\">))</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> i<span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>\n       <span class=\"synSpecial\">(</span>y i<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> h <span class=\"synConstant\">3.0</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span>sum term\n          a\n          next\n          n<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (integral-simpson cube 0 1 100)\n0.25\ngosh&gt; (integral-simpson cube 0 1 1000)\n0.25</pre>\n\n\n","slug":"SICP 問題1.29"},{"data":{"title":"SICP 問題1.28","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>miller-rabin-test n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expmod base <span class=\"synIdentifier\">exp</span> m<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>tmp <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span>tmp2 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span>square tmp<span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)))</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synConstant\">1</span> tmp <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span> <span class=\"synComment\">;; 1でも(n-1)でもなく，かつ</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> tmp2<span class=\"synSpecial\">))</span> <span class=\"synComment\">;; nを法として１の自明でない平方根の時は０を返す</span>\n                 <span class=\"synConstant\">0</span>\n                 tmp2<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> base <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span> m<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-it a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>expmod a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>try-it <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">(</span>random-integer <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (miller-rabin-test 561)\n#f\ngosh&gt; (miller-rabin-test 1105)\n#t\ngosh&gt; (miller-rabin-test 1105)\n#f\ngosh&gt; (miller-rabin-test 1729)\n#f\ngosh&gt; (miller-rabin-test 2465)\n#f\ngosh&gt; (miller-rabin-test 2821)\n#f\ngosh&gt; (miller-rabin-test 6601)\n#f</pre>\n\n\n","slug":"SICP 問題1.28"},{"data":{"title":"SICP 問題1.27","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>carmichael-test n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>try-loop a<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> a n<span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span>expmod a n n<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>try-loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> false<span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>try-loop <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (carmichael-test 561)\n#t\ngosh&gt; (prime? 561)\n#f\ngosh&gt; (carmichael-test 1105)\n#t\ngosh&gt; (prime? 1105)\n#f\ngosh&gt; (carmichael-test 1729)\n#t\ngosh&gt; (prime? 1729)\n#f\ngosh&gt; (carmichael-test 2465)\n#t\ngosh&gt; (prime? 2465)\n#f\ngosh&gt; (carmichael-test 2821)\n#t\ngosh&gt; (prime? 2821)\n#f\ngosh&gt; (carmichael-test 6601)\n#t\ngosh&gt; (prime? 6601)\n#f</pre>\n\n\n","slug":"SICP 問題1.27"},{"data":{"title":"SICP 問題1.26","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expmod base <span class=\"synIdentifier\">exp</span> m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">)</span>\n                       <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                    m<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> base <span class=\"synSpecial\">(</span>expmod base <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synIdentifier\">exp</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                         m<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>square を使わないことで * の部分で <code>(expomd base (/ exp 2) m)</code> が二回呼ばれているため．<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E0%BC%A1\">逐次</a>平方になっていない．</p>\n\n","slug":"SICP 問題1.26"},{"data":{"title":"SICP 問題1.25","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>expmod b e m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> e <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> e<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span>square <span class=\"synSpecial\">(</span>expmod b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> e <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                    m<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b <span class=\"synSpecial\">(</span>expmod b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> e <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n                         m<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>new-expmod base <span class=\"synIdentifier\">exp</span> m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> <span class=\"synSpecial\">(</span>fast-expt base <span class=\"synIdentifier\">exp</span><span class=\"synSpecial\">)</span> m<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>time手続きを使って比較してみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (time (new-expmod 5 1000000 7))\n;(time (new-expmod 5 1000000 7))\n; real   5.010\n; user   5.000\n; sys    0.010\n2\ngosh&gt; (time (expmod 5 1000000 7))\n;(time (expmod 5 1000000 7))\n; real   0.000\n; user   0.000\n; sys    0.000\n2</pre>\n\n\n<p>expmodが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E0%BC%A1\">逐次</a>平方によって，その都度remainder手続きを適用することによって常に剰余を計算対象にしている．<br/>\nnew-expmodは5<sup>1000000</sup>を計算するところまでのステップ数はべきに対して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C2%D0%BF%F4\">対数</a>的に増加しているが，その後<code>(remainder 5^1000000 7)</code>の計算がO(n)となる．<br/>\n途中計算の手間が大きいため高速<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>テストと同じようには使えない．</p>\n\n","slug":"SICP 問題1.25"},{"data":{"title":"SICP 問題1.23","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>next n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">3</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> n<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-divisor n test-divisor<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>square test-divisor<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>divides? test-divisor n<span class=\"synSpecial\">)</span> test-divisor<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>find-divisor n <span class=\"synSpecial\">(</span>next test-divisor<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (search-for-primes 1000 1100)\n\n1009 *** 4\n1013 *** 4\n1019 *** 4\n1021 *** 3\n1031 *** 4\n1033 *** 3\n1039 *** 3\n1049 *** 3\n1051 *** 4\n1061 *** 4\n1063 *** 4\n1069 *** 4\n1087 *** 4\n1091 *** 4\n1093 *** 4\n1097 *** 4\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 10000 10100)\n\n10007 *** 12\n10009 *** 11\n10037 *** 11\n10039 *** 10\n10061 *** 11\n10067 *** 11\n10069 *** 11\n10079 *** 10\n10091 *** 11\n10093 *** 11\n10099 *** 10\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 100000 100100)\n\n100003 *** 35\n100019 *** 34\n100043 *** 33\n100049 *** 33\n100057 *** 34\n100069 *** 33\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 1000000 1000100)\n\n1000003 *** 160\n1000033 *** 104\n1000037 *** 104\n1000039 *** 104\n1000081 *** 105\n1000099 *** 105\n#&lt;undef&gt;</pre>\n\n\n<p>だいたい1.6倍になってる．ちょうど二倍にならないのは<code>next</code>で<code>if</code>を使っているためだと考えられる</p>\n\n","slug":"SICP 問題1.23"},{"data":{"title":"SICP 問題1.22","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>timed-prime-test n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>start-prime-test n <span class=\"synSpecial\">(</span>runtime<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>start-prime-test n start-time<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>prime? n<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>report-prime <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synSpecial\">(</span>runtime<span class=\"synSpecial\">)</span> start-time<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>report-prime elapsed-time<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> <span class=\"synConstant\">&quot; *** &quot;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">display</span> elapsed-time<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>runtime<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>use srfi-11<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>let-values <span class=\"synSpecial\">(((</span>a b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>sys-gettimeofday<span class=\"synSpecial\">)))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a <span class=\"synConstant\">1000000</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>以上を使って指定範囲の連続する奇数について<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>性を調べる手続き手続きを書く．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>search-for-primes start end<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter start end<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> start end<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">newline</span><span class=\"synSpecial\">))</span>\n          <span class=\"synSpecial\">((</span>prime? start<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>timed-prime-test start<span class=\"synSpecial\">)</span>\n                               <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> start<span class=\"synSpecial\">)</span> end<span class=\"synSpecial\">)))</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> start<span class=\"synSpecial\">)</span> end<span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">odd?</span> start<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>iter start end<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> start<span class=\"synSpecial\">)</span> end<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (search-for-primes 1000 1100)\n\n1009 *** 6\n1013 *** 6\n1019 *** 5\n1021 *** 5\n1031 *** 6\n1033 *** 6\n1039 *** 6\n1049 *** 6\n1051 *** 5\n1061 *** 6\n1063 *** 6\n1069 *** 5\n1087 *** 6\n1091 *** 6\n1093 *** 6\n1097 *** 6\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 10000 10100)\n\n10007 *** 28\n10009 *** 17\n10037 *** 17\n10039 *** 17\n10061 *** 17\n10067 *** 17\n10069 *** 17\n10079 *** 18\n10091 *** 17\n10093 *** 17\n10099 *** 18\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 100000 100100)\n\n100003 *** 85\n100019 *** 55\n100043 *** 55\n100049 *** 55\n100057 *** 54\n100069 *** 54\n#&lt;undef&gt;\ngosh&gt; (search-for-primes 1000000 1000100)\n\n1000003 *** 195\n1000033 *** 172\n1000037 *** 172\n1000039 *** 172\n1000081 *** 176\n1000099 *** 176\n#&lt;undef&gt;</pre>\n\n\n<p>nが100倍になると処理時間は概ね10倍となっているので予想通りと言える．</p>\n\n","slug":"SICP 問題1.22"},{"data":{"title":"SICP 問題1.21","published":"2015/10/07","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>smallest-divisor n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>find-divisor n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-divisor n test-divisor<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">&gt;</span> <span class=\"synSpecial\">(</span>square test-divisor<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span> n<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span>divides? test-divisor n<span class=\"synSpecial\">)</span> test-divisor<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>find-divisor n <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> test-divisor <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>divides? a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">remainder</span> b a<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (smallest-divisor 199)\n199\ngosh&gt; (smallest-divisor 1999)\n1999\ngosh&gt;(smallest-divisor 19999)\n7</pre>\n\n\n","slug":"SICP 問題1.21"},{"data":{"title":"SICP 問題1.19","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20151006/20151006041637.jpg\" alt=\"f:id:wat-aro:20151006041637j:plain\" title=\"f:id:wat-aro:20151006041637j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fib-iter <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fib-iter a b p q count<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> count<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>fib-iter a\n                   b\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>square q<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>square q<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> p q<span class=\"synSpecial\">))</span>\n                   <span class=\"synSpecial\">(</span>halve count<span class=\"synSpecial\">)))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>fib-iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b q<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a q<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a p<span class=\"synSpecial\">))</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a q<span class=\"synSpecial\">))</span>\n                        p\n                        q\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.19"},{"data":{"title":"SICP 問題1.18","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C2%D0%BF%F4\">対数</a>的ステップ数の，二つの整数の乗算の反復的プロセスを生成する手続き</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-* a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fast-*-iter a b <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-*-iter a b sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> sum<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> b<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>fast-*-iter <span class=\"synSpecial\">(</span>double a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>halve b<span class=\"synSpecial\">)</span> sum<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>fast-*-iter a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a sum<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.18"},{"data":{"title":"SICP 問題1.17","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">0</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))</span>\n\n<span class=\"synComment\">;; 末尾再帰にしてみた</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>*iter a b <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>*iter a b sum<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> b <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      sum\n      <span class=\"synSpecial\">(</span>*iter a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> b <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a sum<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>double n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> n<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>halve n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))</span>\n\n\n<span class=\"synComment\">;; fast-exptのように</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-* n m<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> m <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> m<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>double <span class=\"synSpecial\">(</span>fast-* n <span class=\"synSpecial\">(</span>halve m<span class=\"synSpecial\">))))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n <span class=\"synSpecial\">(</span>fast-* n <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> m <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.17"},{"data":{"title":"SICP 問題1.16","published":"2015/10/06","tags":["scheme","SICP"]},"content":"\n<p>反復的べき上プロセスを生成する手続き</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-expt b n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>fast-expt-iter b n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>fast-expt-iter b count product<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> product<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">even?</span> count<span class=\"synSpecial\">)</span>\n         <span class=\"synSpecial\">(</span>fast-expt-iter <span class=\"synSpecial\">(</span>square b<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> count <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n                        product<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>fast-expt-iter b <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> b product<span class=\"synSpecial\">)))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.16"},{"data":{"title":"SICP 問題1.12","published":"2015/10/05","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%B9%A5%AB%A5%EB\">パスカル</a>の三角形のn行目のk番目を求める手続き<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>pascals-triangle n k<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n k<span class=\"synSpecial\">))</span>\n      <span class=\"synConstant\">1</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>pascals-triangle <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> k <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>pascals-triangle <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> k<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.12"},{"data":{"title":"SICP 問題1.11","published":"2015/10/05","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 再帰的プロセス</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f n<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">)))</span>\n         <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span>f <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synComment\">;; 反復的プロセス</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g n<span class=\"synSpecial\">)</span>\n  <span class=\"synComment\">;; iterでは3 ≦ nの時のみの処理．n1 はf(n-1),n2はf(n-2),n3はf(n-3)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>iter n1 n2 n3 count<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> count <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        n1\n        <span class=\"synSpecial\">(</span>iter <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> n1 <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> n2<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">3</span> n3<span class=\"synSpecial\">))</span>\n              n1\n              n2\n              <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> count <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> n <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n      n\n      <span class=\"synSpecial\">(</span>iter <span class=\"synConstant\">2</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">2</span><span class=\"synSpecial\">))))</span> <span class=\"synComment\">;;3≦nの時iter．n=1,2の時はn1,n2に渡してあるのでcountに渡す引数は(- n 2)</span>\n</pre>\n\n\n","slug":"SICP 問題1.11"},{"data":{"title":"SICP 問題1.9","published":"2015/10/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      b\n      <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>dec a<span class=\"synSpecial\">)</span> b<span class=\"synSpecial\">))))</span>\n<span class=\"synComment\">;; 再帰的</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">0</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">5</span><span class=\"synSpecial\">))))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">6</span><span class=\"synSpecial\">)))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">7</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span>inc <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">9</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> a <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      b\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span>dec a<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>inc b<span class=\"synSpecial\">))))</span>\n<span class=\"synComment\">;; 反復的</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">3</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span>\n<span class=\"synConstant\">9</span>\n</pre>\n\n\n","slug":"SICP 問題1.9"},{"data":{"title":"SICP 問題1.10","published":"2015/10/04","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>A x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> y <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> x <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> y<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">=</span> y <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>A <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> x <span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span>\n                 <span class=\"synSpecial\">(</span>A x <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> y <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span>A <span class=\"synConstant\">1</span> <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; gosh&gt; 1024</span>\n\n<span class=\"synSpecial\">(</span>A <span class=\"synConstant\">2</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; gosh&gt; 65536</span>\n\n<span class=\"synSpecial\">(</span>A <span class=\"synConstant\">3</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span>\n<span class=\"synComment\">;; gosh&gt; 65536</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>f n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>A <span class=\"synConstant\">0</span> n<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt; f(n) = 2n</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>g n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>A <span class=\"synConstant\">1</span> n<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt; g(n) = 2^n</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>h n<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>A <span class=\"synConstant\">2</span> n<span class=\"synSpecial\">))</span>\n<span class=\"synComment\">;; =&gt; h(1) = 2</span>\n<span class=\"synComment\">;; =&gt; h(2) = 2^2</span>\n<span class=\"synComment\">;; =&gt; h(3) = 2^(2^2)</span>\n<span class=\"synComment\">;; =&gt; h(4) = 2^(2^(2^2))</span>\n<span class=\"synComment\">;; 2の2乗をn回繰り返したもの？</span>\n</pre>\n\n\n","slug":"SICP 問題1.10"},{"data":{"title":"SICP 問題1.8","published":"2015/10/03","tags":["scheme","SICP"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CB%A5%E5%A1%BC%A5%C8%A5%F3%CB%A1\">ニュートン法</a>で立方根を求める　<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cube-root-iter guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n      guess\n      <span class=\"synSpecial\">(</span>cube-root-iter <span class=\"synSpecial\">(</span>cube-improve guess x<span class=\"synSpecial\">)</span>\n                 x<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cube-improve guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> x\n           <span class=\"synSpecial\">(</span>square guess<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synConstant\">2</span> guess<span class=\"synSpecial\">))</span>\n     <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">abs</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> <span class=\"synConstant\">1.0</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> guess <span class=\"synSpecial\">(</span>cube-improve guess x<span class=\"synSpecial\">))))</span> <span class=\"synConstant\">0.001</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>cube-root x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>cube-root-iter <span class=\"synConstant\">1.0</span> x<span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"SICP 問題1.8"},{"data":{"title":"SICP 問題1.7","published":"2015/10/03","tags":["scheme","SICP"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sqrt-iter guess x<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>new-if <span class=\"synSpecial\">(</span>good-enough? guess x<span class=\"synSpecial\">)</span>\n      guess\n      <span class=\"synSpecial\">(</span>sqrt-iter <span class=\"synSpecial\">(</span>improve guess x<span class=\"synSpecial\">)</span>\n                 x<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>を動かすと値が返ってこない．new-ifは通常の手続きであるので作用的順序の評価に従って引数がまず評価される．<br/>\nそのため(sqrt-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iter\">iter</a> (improve guess x) x)が評価され続けるループに入っている．</p>\n\n","slug":"SICP 問題1.7"},{"data":{"title":"SICP 問題1.5","published":"2015/10/03","tags":["scheme","SICP"]},"content":"\n<p>問題１．５</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>test x y<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> x <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synConstant\">0</span>\n      y<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>test <span class=\"synConstant\">0</span> <span class=\"synSpecial\">(</span>p<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>を実行した時，作用的順序の評価を使う解釈系と正規順序の評価を使う解釈系それぞれでどういう仏舞を見るか説明せよ．</p>\n\n<p>作用的順序を使う解釈系ではまず(test 0 (p))を\n(if (= 0 0)\n    0\n    (p))\nと評価し，(= 0 0)が#tなのでthenが評価され0が返る．\n正規順序の評価を使う解釈系では\n(if (= 0 0)\n    0\n    (p))\nと評価するところまでは同じだが，この後基本的<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>だけになるまで評価を繰り返す．\nそのため(p)を評価し，その結果(p)が返り，それをまた評価しようとするので\n演算が終わらない．</p>\n\n","slug":"SICP 問題1.5"},{"data":{"title":"SICP 問題1.3","published":"2015/10/03","tags":["scheme"]},"content":"\n<p>1.3  三つの数を引数としてとり，大きい二つの数の事情の話を返す手続きを書け<br/>\n　<br/>\n答えはa<sup>2</sup> + b<sup>2</sup>, b<sup>2</sup> + c<sup>2</sup>, c<sup>2</sup> + a<sup>2</sup>の３通りがあるのでその分け方をもとに書く</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>sum-of-squares-large2 a b c<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> a b c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> a c b<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>sum-of-squares b c<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">((</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> b a c<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&lt;=</span> b c a<span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>sum-of-squares a c<span class=\"synSpecial\">))</span>\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span>sum-of-squares a c<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n","slug":"SICP 問題1.3"},{"data":{"title":"プログラミングGauche読了","published":"2015/09/29","tags":["scheme","gauche"]},"content":"\n<p>ちょっと時間かかったけどプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>読み終わりました．<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>手習い程度の知識しかなかったので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gauche\">Gauche</a>には便利な機能がたくさんあるなと思いました．<br/>\n特に<code>#?=</code>で<code>debug-print</code>が呼び出せるのはいいですね．<br/>\n　<br/>\n継続，マクロは難しかったです．<br/>\nパターンマッチに慣れてないのもあって，マクロがなかなか読み解けず，<br/>\nさらにそこに継続が加わると，確かにそう動くんだけどなぜ？となって苦戦しました．<br/>\nまだ使いこなせそうにないですが，継続はすごいですね．<br/>\nキューと継続を使ったREPLや，ハッシュと継続でWebアプリケーションを書くところが面白かったです．<br/>\n　<br/>\n　<br/>\n次は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>夜曲をやります．<br/>\n計算が多そうで面白そうで楽しみです．</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51Exg14b4uL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"プログラミングGauche\" title=\"プログラミングGauche\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873113482/wataro-22/\">プログラミングGauche</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Kahua\">Kahua</a>プロジェクト,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%EE%B9%E7%BB%CB%CF%AF\">川合史朗</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3\">オライリージャパン</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2008/03/14</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 22人 <span class=\"hatena-asin-detail-label\">クリック</span>: 713回</li><li><a href=\"http://d.hatena.ne.jp/asin/4873113482/wataro-22\" target=\"_blank\">この商品を含むブログ (272件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4486019245/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51qK5xMkoxL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"素数夜曲―女王陛下のLISP\" title=\"素数夜曲―女王陛下のLISP\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4486019245/wataro-22/\">素数夜曲―女王陛下のLISP</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> 吉田武</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%EC%B3%A4%C2%E7%B3%D8\">東海大学</a>出版会</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2012/06</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 6人 <span class=\"hatena-asin-detail-label\">クリック</span>: 266回</li><li><a href=\"http://d.hatena.ne.jp/asin/4486019245/wataro-22\" target=\"_blank\">この商品を含むブログ (16件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"プログラミングGauche読了"},{"data":{"title":"プログラミングGauche 19.7 簡易な例外機構のまとめ","published":"2015/09/25","tags":["scheme","gauche"]},"content":"\n<p>マクロと<code>call/cc</code>を使った<code>catch</code>と<code>throw</code>の実装の解説を備忘録として残します．<br/>\n　</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; 簡易例外機構</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">'())</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> catch\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally follow ...<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">let*</span> <span class=\"synSpecial\">((</span>signals-backup <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span>val <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">call/cc</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>k<span class=\"synSpecial\">)</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">'</span>sig k<span class=\"synSpecial\">)</span> <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span>\n                            body ...<span class=\"synSpecial\">))))</span>\n       <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synConstant\">*signals*</span> signals-backup<span class=\"synSpecial\">)</span>\n       follow ...\n       val<span class=\"synSpecial\">)]</span>\n    <span class=\"synSpecial\">[(</span>_ <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">))</span>\n     <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>sig body ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>finally<span class=\"synSpecial\">))]))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define-syntax</span> throw\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">syntax-rules</span> <span class=\"synSpecial\">()</span>\n    <span class=\"synSpecial\">[(</span>_ sig val<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">cdr</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">assq</span> <span class=\"synSpecial\">'</span>sig <span class=\"synConstant\">*signals*</span><span class=\"synSpecial\">))</span> val<span class=\"synSpecial\">)]))</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synComment\">;; サンプルコード</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>div n d<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> d <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span>throw DivedeZeroError\n             <span class=\"synSpecial\">(</span>print <span class=\"synError\">#`</span><span class=\"synConstant\">&quot;ERROR: Divide Zero Error Occured...\\n divide ,n by ZERO!\\n--------------------&quot;</span><span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">/</span> n d<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>percentage a b<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>catch <span class=\"synSpecial\">(</span>DivedeZeroError\n          <span class=\"synSpecial\">(</span>print <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">*</span> <span class=\"synSpecial\">(</span>div a b<span class=\"synSpecial\">)</span> <span class=\"synConstant\">100.0</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">))</span>\n         <span class=\"synSpecial\">(</span>finally\n          <span class=\"synSpecial\">(</span>print <span class=\"synConstant\">&quot;follow ...&quot;</span><span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>　<br/>\n　<br/>\n処理の流れを説明します．<br/>\n<code>*signal*</code>の初期値を<code>signals-backup</code>に束縛します．<br/>\nその後<code>*signal*</code>には<code>(set! *signal* ...)</code>の行で<code>car</code>にシグナル，<code>cdr</code>に継続を渡すk，というペアのリストが束縛されます．<br/>\n<code>((sig . k))</code>という形になります．<br/>\nサンプルコードでは<code>((DivisedZeroError . k))</code>が入ります．<br/>\nその後<code>body</code>が実行されます．<br/>\nサンプルコードでは<code>percentage</code>の最初の<code>print</code>行．<br/>\nここで<code>div</code>が呼ばれます．<br/>\n<code>(= d 0)</code>のが真の時に<code>throw</code>が呼ばれます．<br/>\n<code>(cdr (assq 'sig *signals*))</code>が評価され継続を表す<code>k</code>が返され，<code>(k val)</code>で<code>throw</code>の<code>print</code> 行を実行し，戻り値が<code>catch</code>のvalに束縛されます．<br/>\n（※　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>でkeenさん(@blackenedgold)さんから，継続を渡す<code>k</code>ではなく，継続を表す<code>k</code>と教えていただいたので訂正しました．）<br/>\nここではまってたのですが，<code>(= d 0)</code>なのにシグナルが違っていた場合は<code>(cdr #f)</code>となりエラーが返ります.<br/>\nシグナルを間違えるなって話ですね．<br/>\n<code>(= d 0)</code>が<code>#f</code>の時は<code>(/ n d)</code>が実行され値が返ります．<br/>\n　<br/>\n<code>catch</code>に返ってくると<code>*signals*</code>にシグナルの初期値を戻します．<br/>\nそして<code>finally ...</code>を実行します．<br/>\n最後にvalに束縛した値を返して終了です．\nここでは<code>percentage</code>は<code>print</code>してるので<code>#&lt;undef&gt;</code>が返ります．<br/>\n　<br/>\nこうして一つ一つ追えばそんなに難しくないですね．<br/>\nでも理解するのに時間かかりました．．．<br/>\n最後に実行例紹介して終わります．<br/>\n　　<br/>\n　</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (percentage 1 40)\n2.5%\nfollow ...\n#&lt;undef&gt;\ngosh&gt; (percentage 10 0)\nERROR: Divide Zero Error Occured...\n divide 10 by ZERO!\n--------------------\nfollow ...\n#&lt;undef&gt;</pre>\n\n\n<p>　<br/>\nマクロもcall/ccも難しい</p>\n\n","slug":"プログラミングGauche 19.7 簡易な例外機構のまとめ"},{"data":{"title":"プログラミングGauche 17.5.3練習問題","published":"2015/09/24","tags":["scheme","gauche"]},"content":"\n<ul>\n<li><code>&lt;logger-generic&gt;</code>のログ出力のon/offを切り替えられるようにする.<br/>\n<code>&lt;logger-generic&gt;</code>クラスに<code>printing</code>スロットを追加してその真偽で処理を分ければよい．\n<code>printing</code>スロットの値を後で変えられるように<code>printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>と<code>not-printing!</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>も追加した．</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>define-class <span class=\"synConstant\">&lt;logger-generic&gt;</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">&lt;generic&gt;</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">((</span>printing :init-value <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>define-method apply-generic <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">)</span> args<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">begin</span> <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;args: ~s\\n&quot;</span> args<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>return-value <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n               <span class=\"synSpecial\">(</span>format <span class=\"synConstant\">#t</span> <span class=\"synConstant\">&quot;result: ~s\\n&quot;</span> return-value<span class=\"synSpecial\">)</span>\n               return-value<span class=\"synSpecial\">))</span>\n      <span class=\"synSpecial\">(</span>next-method<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span>define-method not-printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#f</span><span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span>define-method printing! <span class=\"synSpecial\">((</span>gf <span class=\"synConstant\">&lt;logger-generic&gt;</span><span class=\"synSpecial\">))</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">set!</span> <span class=\"synSpecial\">(</span>ref gf <span class=\"synSpecial\">'</span>printing<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 17.5.3練習問題"},{"data":{"title":"プログラミングGauche 14.3.2練習問題","published":"2015/09/22","tags":["scheme","gauche","scheme","gauche"]},"content":"\n<p><code>call-with-input-string</code>と<code>call-with-output-string</code>を使って<code>write-to-string</code>と<code>read-drom-string</code>を実装する．<br/>\nポートの挙動がよくわかってなかったので苦戦した．<br/>\nこういう時にREPLはありがたい．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>write-to-string arg<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>call-with-output-string <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>port<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">write</span> arg port<span class=\"synSpecial\">))))</span>\n\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>read-from-string <span class=\"synIdentifier\">string</span><span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>call-with-input-string <span class=\"synIdentifier\">string</span> <span class=\"synIdentifier\">read</span><span class=\"synSpecial\">))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 14.3.2練習問題"},{"data":{"title":"プログラミングGauche 9.1練習問題","published":"2015/09/21","tags":["scheme","gauche"]},"content":"\n<p><code>delete-1</code>は見つからなかった場合もcond式のelse節でconsしているためにコピーしたリストを返す．<br/>\n元のリストを返すように実装する．\n以下が元の<code>delete-1</code></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">[(</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">()]</span>\n            <span class=\"synSpecial\">[(</span>cmp-fn <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> elt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)]</span>\n            <span class=\"synSpecial\">[</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))]))</span>\n    <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<ul>\n<li><code>cond</code>をつかった実装．</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; 見つけた場合の処理</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">[(</span>cmp-fn <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> elt<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)]</span>\n            <span class=\"synSpecial\">[</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span>\n                        <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))]))</span>\n    <span class=\"synComment\">;; member関数で要素があるか探す</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">[(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">member</span> elt lis cmp-fn<span class=\"synSpecial\">)</span> <span class=\"synConstant\">#t</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)]</span>\n          <span class=\"synSpecial\">[</span><span class=\"synStatement\">else</span> lis<span class=\"synSpecial\">])))</span>\n</pre>\n\n\n<p>見つからない場合の処理はすでに<code>member</code>で行ってるので<code>null?</code>は省略．<br/>\n<code>(cond [(and (member elt lis cmp-fn) #t)　(loop lis)]</code>の部分が少しわかりにくい．<br/>\n<code>member</code>は要素が見つからなかった場合に元のリストを返すので<code>and</code>に入れてリストが返って来た場合は<code>#t</code>を，<code>#f</code>が返ってきた場合は<code>#f</code>を返すようにした．</p>\n\n<ul>\n<li><code>if</code>をつかった実装</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n    <span class=\"synComment\">;; 見つけた場合の処理</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n      <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>cmp-fn <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> elt<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))</span>\n    <span class=\"synComment\">;; member関数で要素があるか探す</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">member</span> elt lis cmp-fn<span class=\"synSpecial\">)</span>\n        <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n        lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><code>if</code>ならリストが返って来た場合も<code>then</code>節を実行してくれる．</p>\n\n<p><code>member</code>で末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で探した後に<code>delete-1</code>で非末尾<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>で削除するのは無駄が多い気も．\nもっといい書き方あるかな．</p>\n\n<p>[追記]<br/>\nググったらもっといい書き方ありました．</p>\n\n<p><a href=\"http://www.serendip.ws/archives/1953\">&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;Gauche 9.1 &#x96C6;&#x5408; &#x7DF4;&#x7FD2;&#x554F;&#x984C; : Serendip - Web&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;</a></p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                          <span class=\"synSpecial\">((</span>cmp-fn elt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> lis<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n                                lis\n                                <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">)))))))</span>\n                  <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p><code>eq?</code>で比較しろって書かれていたのはこういうことだったのか．<br/>\n重複している部分があるので<code>if</code>の分岐を削除して書き換えます</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>delete-1 elt lis <span class=\"synSpecial\">.</span> options<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>let-optionals* options <span class=\"synSpecial\">((</span>cmp-fn <span class=\"synIdentifier\">equal?</span><span class=\"synSpecial\">))</span>\n                  <span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)</span>\n                    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n                          <span class=\"synSpecial\">((</span>cmp-fn elt <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span>\n                          <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))</span> lis<span class=\"synSpecial\">)</span>\n                          <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n                           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))))</span>\n                  <span class=\"synSpecial\">(</span>loop lis<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>元のコードに一行足すだけだったとは・・・</p>\n\n","slug":"プログラミングGauche 9.1練習問題"},{"data":{"title":"プログラミングGauche 8.3.3練習問題","published":"2015/09/21","tags":["scheme","gauche"]},"content":"\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>any-pred <span class=\"synSpecial\">.</span> preds<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred false<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span>pred x<span class=\"synSpecial\">)</span> false<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#f</span> preds<span class=\"synSpecial\">)))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>every-pred <span class=\"synSpecial\">.</span> preds<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>fold <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred true<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">and</span> <span class=\"synSpecial\">(</span>pred x<span class=\"synSpecial\">)</span> true<span class=\"synSpecial\">))</span> <span class=\"synConstant\">#t</span> preds<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n","slug":"プログラミングGauche 8.3.3練習問題"},{"data":{"title":"プログラミングGauche ７.４練習問題","published":"2015/09/20","tags":["scheme","gauche"]},"content":"\n<p>可変長の引数を受け取り，リストにして返す手続き<code>list</code>を書く．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synIdentifier\">list</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> ls\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p>または</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list</span> <span class=\"synSpecial\">.</span> ls<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> ls<span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>実行してみる．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>(list)\n()\n(list 1 2 )\n(1 2)\n(list &#39;(1 2) &#39;(3 4))\n((1 2) (3 4))</pre>\n\n\n<p>引数をそのまま返すだけ.<br/>\nこれ以外の書き方ってあるのかな．</p>\n\n","slug":"プログラミングGauche ７.４練習問題"},{"data":{"title":"プログラミングGauche ７.２練習問題","published":"2015/09/20","tags":["scheme","gauche"]},"content":"\n<ul>\n<li>for-each-numbersを書く</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> for-each-numbers\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<ul>\n<li>map-numbersを書く</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> map-number\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">map</span> proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<ul>\n<li>numbers-onlyを書く</li>\n</ul>\n\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>numbers-only walker<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>walker proc <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<ul>\n<li>「数値とそれ以外が混じっている入れ子のリスト」の数値だけについて<code>(numbers-only for-each)</code>や<code>(numbers-only map)</code>を<code>tree-walk</code>に渡して処理ができるか．できないならなぜできないか．</li>\n</ul>\n\n\n<p><code>tree-walk</code>のコードは以下の通り</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk walker proc tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>walker <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>elt<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list?</span> elt<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>tree-walk walker proc elt<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>proc elt<span class=\"synSpecial\">)))</span>\n          tree<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>以下を例に考えてみた．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span>numbers-only <span class=\"synIdentifier\">map</span><span class=\"synSpecial\">)</span> print  <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>  <span class=\"synSpecial\">(</span><span class=\"synConstant\">#t</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>実行結果は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>1\n2\n(#&lt;undef&gt; #&lt;undef&gt;)</pre>\n\n\n<p>入れ子になった部分の処理が出来ていない．\n<code>numbers-only</code>と<code>tree-walk</code>にリストがどう渡されているのか調べてみる．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>tree-walk walker proc tree<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>walker <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>elt<span class=\"synSpecial\">)</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">list?</span> <span class=\"synError\">#?=elt</span><span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>tree-walk walker proc elt<span class=\"synSpecial\">)</span>\n                <span class=\"synSpecial\">(</span>proc elt<span class=\"synSpecial\">)))</span>\n          tree<span class=\"synSpecial\">))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>numbers-only walker<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>walker proc <span class=\"synError\">#?=</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n\n<span class=\"synSpecial\">(</span>tree-walk <span class=\"synSpecial\">(</span>numbers-only <span class=\"synIdentifier\">map</span><span class=\"synSpecial\">)</span> print  <span class=\"synSpecial\">'(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">#f</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">))</span>  <span class=\"synSpecial\">(</span><span class=\"synConstant\">#t</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)))</span>\n</pre>\n\n\n<p>結果は</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>#?=&#34;(standard input)&#34;:262:(filter number? lis)\n#?-    (1 2)\n#?=elt\n#?-    1\n1\n#?=elt\n#?-    2\n2\n(#&lt;undef&gt; #&lt;undef&gt;)</pre>\n\n\n<p>これを見ると<code>tree-walk</code>にリストが渡される前に<code>numbers-only</code>の<code>filter</code>が先に評価されている．<br/>\nここを改善して入れ子に対応した<code>filter</code>を書いて，<code>numbers-only-for-tree</code>を書く．<br/>\n<code>(car lis)</code>がリストならそこに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>して<code>filter</code>をかける．</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> filter-for-tree\n        <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>pred lis<span class=\"synSpecial\">)</span>\n          <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lis<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'())</span>\n           <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">list?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>filter-for-tree pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span>\n                                    <span class=\"synSpecial\">(</span>filter-for-tree pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">((</span>pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">))</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lis<span class=\"synSpecial\">)</span>\n                                   <span class=\"synSpecial\">(</span>filter-for-tree pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))</span>\n           <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">filter</span> pred <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lis<span class=\"synSpecial\">))))))</span>\n\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>numbers-only-for-tree walker<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>proc lis<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span>walker proc <span class=\"synSpecial\">(</span>filter-for-tree <span class=\"synIdentifier\">number?</span> lis<span class=\"synSpecial\">))))</span>\n</pre>\n\n\n<p><code>numbers-only</code>と同じように実行してみます．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>gosh&gt; (tree-walk (numbers-only-for-tree map) print  &#39;(1 2 (3 (#f 4))  (#t 5)))\n1\n2\n3\n4\n5\n(#&lt;undef&gt; #&lt;undef&gt; (#&lt;undef&gt; (#&lt;undef&gt;)) (#&lt;undef&gt;))</pre>\n\n\n<p>入れ子なったリストに対応した<code>numbers-only-for-map</code>が書けました．</p>\n\n","slug":"プログラミングGauche ７.２練習問題"},{"data":{"title":"もくもくEmacs#1に参加しました．","published":"2015/09/20"},"content":"\n<p>初めて勉強会なるものに参加してきました．<br/>\n自分でも参加できそうなものを探していると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1\">もくもく会</a>が！<br/>\nEmacsLispは書けないから本を買って向こうで勉強しようと参加を決意．</p>\n\n<p>今まで一人で勉強してたので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scheme\">Scheme</a>の話を聞けたり，実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>のパッケージ開発してる人の話を聞けて興奮しました．<br/>\nやる気をたくさんもらったので頑張ろう．</p>\n\n","slug":"もくもくEmacs#1に参加しました．"},{"data":{"title":"Control+Comand+Spaceの変更","published":"2015/09/20","tags":["mac"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Mac\">Mac</a>でControl+Comand+Spaceを押すと次のような絵文字や記号の挿入画面が開きます．<br/>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/w/wat-aro/20150920/20150920003500.jpg\" alt=\"f:id:wat-aro:20150920003500j:plain\" title=\"f:id:wat-aro:20150920003500j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><br/>\nこれが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AD%A1%BC%A5%D0%A5%A4%A5%F3%A5%C9\">キーバインド</a>C-M-SPC（S式をマーク）と競合してしまっていました．</p>\n\n<p>これをControl+Comand+Shift+Spaceに変更します．</p>\n\n<p><code>システム環境設定 / キーボード / ショートカット</code>を開きます．<br/>\n左のPanelから<code>アプリケーション</code>を選択し，すべてのアプリケーションのプルダウンを開きます．<br/>\nここで<code>絵文字と記号</code>という項目があればそれを選択し，編集します．<br/>\n無い場合は<code>+</code>を選択し，<code>メニュータイトル</code>に<code>絵文字と記号</code>と入力し，<code>キーボードショートカット</code>の欄で<code>Control+Comand+Shift+Space</code>を押せば入力されます．<br/>\nこれは他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AD%A1%BC%A5%D0%A5%A4%A5%F3%A5%C9\">キーバインド</a>でもOKです．<br/>\nシステムの言語を英語にしている場合は参考のサイトで書かれている通り，<code>Emoji &amp; Symbols</code>と入力すればOKです．</p>\n\n<p>[参考]</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F20245652%2Fhow-to-unbind-command-control-space-key-from-mac-os-x-10-9\" title=\"How to unbind Command-Control-Space key from Mac OS X 10.9?\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://stackoverflow.com/questions/20245652/how-to-unbind-command-control-space-key-from-mac-os-x-10-9\">stackoverflow.com</a></cite></p>\n\n<p>※<code>Emoji &amp; Symbols</code>が日本語環境で何になるか迷いました．</p>\n\n","slug":"Control+Comand+Spaceの変更"},{"data":{"title":"ruby: No such file or directory -- xmpfilter (LoadError)","published":"2015/06/27"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">xmpfilter</a>を使おうとするとこのエラーが出て困っていました。</p>\n\n<p>原因はshellと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>でパスが違うことだったようです。</p>\n\n<p>まず.bashrcの末尾に以下を追加します。</p>\n\n<pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synComment\">## create emacs env file</span>\nperl -wle \\\n    <span class=\"synConstant\">'do { print qq/(setenv &quot;$_&quot; &quot;$ENV{$_}&quot;)/ if exists $ENV{$_} } for @ARGV'</span> \\\n    PATH &gt; ~<span class=\"synStatement\">/</span><span class=\"synSpecial\">.</span><span class=\"synConstant\">emacs</span><span class=\"synSpecial\">.</span><span class=\"synConstant\">d</span><span class=\"synStatement\">/s</span>hellenv.el\n</pre>\n\n\n<p>そしてinit.elに以下を記述すれば完成です。</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synComment\">;; load environment value</span>\n<span class=\"synSpecial\">(</span>load-file <span class=\"synSpecial\">(</span>expand-file-name <span class=\"synConstant\">&quot;~/.emacs.d/shellenv.el&quot;</span><span class=\"synSpecial\">))</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">dolist</span> <span class=\"synSpecial\">(</span>path <span class=\"synSpecial\">(</span><span class=\"synStatement\">reverse</span> <span class=\"synSpecial\">(</span>split-string <span class=\"synSpecial\">(</span>getenv <span class=\"synConstant\">&quot;PATH&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">&quot;:&quot;</span><span class=\"synSpecial\">)))</span>\n  <span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">exec-path</span> path<span class=\"synSpecial\">))</span>\n</pre>\n\n\n<p>うまく動いてくれてるようです。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>a = <span class=\"synConstant\">1</span> + <span class=\"synConstant\">1</span>                       <span class=\"synComment\"># =&gt; 2</span>\np a + <span class=\"synConstant\">1</span>\n<span class=\"synComment\"># &gt;&gt; 3</span>\n</pre>\n\n\n<p>[追記]\nついでにauto-complete.elをenf-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>-modeで使う時の設定も</p>\n\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink><span class=\"synComment\">;; auto-complete</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">auto-complete</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span><span class=\"synStatement\">require</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">auto-complete-config</span><span class=\"synSpecial\">)</span>    <span class=\"synComment\">; 必須ではないですが一応</span>\n<span class=\"synSpecial\">(</span>global-auto-complete-mode <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>define-key ac-completing-map <span class=\"synSpecial\">(</span>kbd <span class=\"synConstant\">&quot;C-n&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">ac-next</span><span class=\"synSpecial\">)</span>      <span class=\"synComment\">; M-nで次候補選択</span>\n<span class=\"synSpecial\">(</span>define-key ac-completing-map <span class=\"synSpecial\">(</span>kbd <span class=\"synConstant\">&quot;C-p&quot;</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">ac-previous</span><span class=\"synSpecial\">)</span>  <span class=\"synComment\">; C-p で前候補選択</span>\n<span class=\"synSpecial\">(</span>ac-config-default<span class=\"synSpecial\">)</span>\n<span class=\"synSpecial\">(</span>add-to-list <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">ac-modes</span> <span class=\"synSpecial\">'</span><span class=\"synIdentifier\">enh-ruby-mode</span><span class=\"synSpecial\">)</span>\n</pre>\n\n\n\n\n","slug":"ruby: No such file or directory -- xmpfilter (LoadError)"},{"data":{"title":"再帰で数を数える","published":"2015/05/24","tags":["scheme"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/scheme\">scheme</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>でリスト処理してる時に数を数えるには別に変数つけなくちゃいけないのかなって考えてました。<br/>\nThe Little Schemer読んでたら以下のようなコードが出てきました。<br/>\nnull?で0を返せばよかったのね。<br/>\nそして数を数えたい処理が来るたびに１加算していけば数えられると。<br/>\n面白いなー</p>\n\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> occur\n  <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>a lat<span class=\"synSpecial\">)</span>\n    <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n     <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">null?</span> lat<span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span>\n     <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n            <span class=\"synSpecial\">((</span><span class=\"synIdentifier\">eq?</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">car</span> lat<span class=\"synSpecial\">)</span> a<span class=\"synSpecial\">)</span>\n             <span class=\"synSpecial\">(</span>add1 <span class=\"synSpecial\">(</span>occur a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lat<span class=\"synSpecial\">))))</span>\n            <span class=\"synSpecial\">(</span><span class=\"synStatement\">else</span>\n             <span class=\"synSpecial\">(</span>occur a <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cdr</span> lat<span class=\"synSpecial\">))))))))</span>\n</pre>\n\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/0262560992/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41vFTwjzvbL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"The Little Schemer\" title=\"The Little Schemer\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/0262560992/wataro-22/\">The Little Schemer</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> Daniel P. Friedman,Matthias Felleisen</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> The MIT Press</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 1995/12/21</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> ペーパーバック</li><li><span class=\"hatena-asin-detail-label\">購入</span>: 10人 <span class=\"hatena-asin-detail-label\">クリック</span>: 137回</li><li><a href=\"http://d.hatena.ne.jp/asin/0262560992/wataro-22\" target=\"_blank\">この商品を含むブログ (91件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"再帰で数を数える"},{"data":{"title":"spring備忘録","published":"2015/05/17","tags":["Ruby on Rails"]},"content":"\n<p>Rails4.1から標準で付属するようになったspringの備忘録。</p>\n\n<p>springを使える状態にする。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bundle exec bin/spring binstub --all</pre>\n\n\n<p>springが起動しているか確認。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bin/spring status</pre>\n\n\n<p>springを停止する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bin/spring stop</pre>\n\n\n<p>springはrakeや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/rails\">rails</a>コマンドで再起動する。\nここがわからなくていつの間にか起動しているけど、どうやって起動するのか調べてた。</p>\n\n<p>私の環境ではこれくらい時間が短縮できた。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bin/spring stop\nSpring stopped.\n\n$ time bundle exec rails runner &#39;puts &#34;hello&#34;&#39;\nhello\n\nreal    0m2.450s\nuser    0m0.548s\nsys 0m0.086s</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bin/spring status\nSpring is running:\n\n79921 spring server | study_app | started 39 secs ago\n79922 spring app    | study_app | started 39 secs ago | development mode\n\n$ time bundle exec rails runner &#39;&#34;puts hello&#34;&#39;\n\nreal    0m0.766s\nuser    0m0.546s\nsys 0m0.082s</pre>\n\n\n<p>これくらい短縮されると嬉しいですね。</p>\n\n<p>[参考]</p>\n\n<p><a href=\"http://qiita.com/bibio/items/58806063bd2365a9832a\">Rails - spring &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C6;&#x30B9;&#x30C8;&#x9AD8;&#x901F;&#x5316; - Qiita</a></p>\n\n","slug":"spring備忘録"},{"data":{"title":"NoMethodError: undefined method `visit&#39;","published":"2015/05/17","tags":["Ruby on Rails","Rspec","Capybara"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails\">Ruby on Rails</a> 4.2.1で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rspec\">Rspec</a> + Capybaraでタイトルのエラーが出た時の対策。\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails\">Ruby on Rails</a> Tutorialではspec_helper.rbに</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>config.include Capybara::DSL</pre>\n\n\n<p>と記述しろと書かれているが、そうすると</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>/vendor/bundle/gems/capybara-2.4.4/lib/capybara/rails.rb:6:in `block (2 levels) in &lt;top (required)&gt;&#39;: uninitialized constant Rails (NameError)</pre>\n\n\n<p>とエラーが起こる。\n<a href=\"http://railstutorial.jp/chapters/static-pages?version=4.0#top\">&#x7B2C;3&#x7AE0; &#x307B;&#x307C;&#x9759;&#x7684;&#x306A;&#x30DA;&#x30FC;&#x30B8;&#x306E;&#x4F5C;&#x6210; | Rails &#x30C1;&#x30E5;&#x30FC;&#x30C8;&#x30EA;&#x30A2;&#x30EB;</a></p>\n\n<p>capybaraが動いていないのだからcapybaraの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/github\">github</a>を見てみると</p>\n\n<hr />\n\n<p>Using Capybara with <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSpec\">RSpec</a></p>\n\n<p>Load <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSpec\">RSpec</a> 2.x support by adding the following line (typically to your spec_helper.rb file):</p>\n\n<p>require 'capybara/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/rspec\">rspec</a>'</p>\n\n<hr />\n\n<p>と書かれていたのでこれを冒頭に記述。\n先の</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>config.include Capybara::DSL</pre>\n\n\n<p>と合わせればうまくテストが動いた。</p>\n\n","slug":"NoMethodError: undefined method `visit&#39;"},{"data":{"title":"cd, dvdが認識されない。","published":"2015/04/21","tags":["Ubuntu14.10"]},"content":"\n<p>Ｕｂｕｎｔｕ１４．０４ＬＴＳのＬｉｖｅ DVDを作ろうとしたところブランクＤＶＤが認識されませんでした。<br />\n試しにCDやCD、ＤＶＤビデオなど試してみるもすべてダメ。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/BIOS\">BIOS</a>を見てみるもちゃんと認識している。<br />\ndmesgで探してみてもそれらしきものはみつからない。</p><p><a href=\"http://www.kinryokai.net/modules/news/article.php?storyid=98\">&#x9326;&#x7A1C;&#x4F1A; KINRYOKAI - &#x30CB;&#x30E5;&#x30FC;&#x30B9;</a></p><p>ここを見てＩＤＥでなくＡＨＣＩに変更。<br />\n無事にドライブは認識されました。<br />\nこんなはまりどころがあるとはなー</p>\n\n","slug":"cd, dvdが認識されない。"},{"data":{"title":"Array#slice","published":"2015/03/25","tags":["ruby"]},"content":"\n<p>slice<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>には</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>ary.slice(<span class=\"synConstant\">0</span>,<span class=\"synConstant\">3</span>)\nary.slice(<span class=\"synConstant\">0</span>..<span class=\"synConstant\">3</span>)\n</pre><p>のように２つの書き方があります。</p><p>ひとつ目はary[0]から３つの要素を取り出して部分配列を作ります。<br />\nこの場合は</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>[ary[<span class=\"synConstant\">0</span>], ary[<span class=\"synConstant\">1</span>], ary[<span class=\"synConstant\">2</span>]]\n</pre><p>となります。</p><p>ふたつ目はary[0]からary[3]までの要素を取り出して部分配列を作ります。</p>\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>[ary[<span class=\"synConstant\">0</span>], ary[<span class=\"synConstant\">1</span>], ary[<span class=\"synConstant\">2</span>], ary[<span class=\"synConstant\">3</span>]]\n</pre>\n","slug":"Array#slice"},{"data":{"title":"BLUE GIANT","published":"2015/03/24"},"content":"\n<p>３巻の帯に書かれていた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%E5%B8%B6%A4%D2%A4%ED%A4%DF\">上原ひろみ</a>さんのコメントに惹かれて購入。</p><p>「無音なはずの漫画から、音が聞こえてくる。心の何かを突き動かす音が。」<br />\nガツンと響いてきます。<br />\n胸をかきむしって叫びたくなるような何かが奥の方からこみ上げてきます。</p><p>何かをしないと。<br />\n何ができるかじゃなくて何かをしないといけない。<br />\nそんな気にさせられました。</p><p>ジャズ漫画だと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%E4%C6%BB%A4%CE%A5%A2%A5%DD%A5%ED%A5%F3\">坂道のアポロン</a>を持ってるけどＢＬＵＥ GIANTのほうがジャズの熱さがストレートに伝わってきていいです。<br />\nなんだか頑張れそうです。</p><p>今日は３巻までしか買ってないので明日の残りを買ってきます。<br />\n楽しみですわー</p><p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091856780/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/415BUO0ccjL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"BLUE GIANT 1 (ビッグコミックススペシャル)\" title=\"BLUE GIANT 1 (ビッグコミックススペシャル)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091856780/wataro-22/\">BLUE GIANT 1 (ビッグコミックススペシャル)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%D0%C4%CD%BF%BF%B0%EC\">石塚真一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%AE%B3%D8%B4%DB\">小学館</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2013/11/29</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> コミック</li><li><a href=\"http://d.hatena.ne.jp/asin/4091856780/wataro-22\" target=\"_blank\">この商品を含むブログ (13件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091862454/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51BTKdvLSQL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"BLUE GIANT 2 (ビッグコミックススペシャル)\" title=\"BLUE GIANT 2 (ビッグコミックススペシャル)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091862454/wataro-22/\">BLUE GIANT 2 (ビッグコミックススペシャル)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%D0%C4%CD%BF%BF%B0%EC\">石塚真一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%AE%B3%D8%B4%DB\">小学館</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/03/28</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> コミック</li><li><a href=\"http://d.hatena.ne.jp/asin/4091862454/wataro-22\" target=\"_blank\">この商品を含むブログ (8件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091864600/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/516feQkH2VL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"BLUE GIANT 3 (ビッグコミックススペシャル)\" title=\"BLUE GIANT 3 (ビッグコミックススペシャル)\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4091864600/wataro-22/\">BLUE GIANT 3 (ビッグコミックススペシャル)</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%D0%C4%CD%BF%BF%B0%EC\">石塚真一</a></li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%AE%B3%D8%B4%DB\">小学館</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/07/30</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> コミック</li><li><a href=\"http://d.hatena.ne.jp/asin/4091864600/wataro-22\" target=\"_blank\">この商品を含むブログ (3件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n","slug":"BLUE GIANT"},{"data":{"title":"THE WORLD IS MINE","published":"2015/02/08"},"content":"\n<p>久々にTHE WORLD IS MINE一気読み。<br />\nあとがきの前半がこの物語の締めに本当にふさわしい。<br />\n以下引用します。</p>\n\n    <blockquote>\n        <p>愛　平和　正義　夢　努力　感動　共感　エコ　真実　未来　希望　青空　涙　汗　つながり　平等　協力　仲間　ありがとう　友情　サポート　成長　便利　役立つ　限定　先着　最先端　ＮＥＷ　カワイイ　キレイ　ハッピー　ステキ　ヘルシー　痩せる　流行　光る　輝く　明日　本当の私　自由　翼　改革　革命　一瞬　永遠　姓名<br />\nそれから…「世界「などなど<br />\n十歳になる娘に「疑え」と教えている言葉です<br />\n神さまにつきましては幼少期にその存在を「有り」と植え付けてから今「無いかも」と壊しにかかっています…最低の父親です</p>\n\n    </blockquote>\n<p><br />\nこういう物語です。<br />\n二人の爆弾魔とヒグマドンと名付けられた怪獣が暴れまわる物語です。<br />\n緻密な背景リアリティを高め、登場人物のセリフによって価値観を振り回しにかかってきます。<br />\n過剰に生々しく描かれた登場人物があっけなく死んでいく一方で、希望を見出した人々が絶望の中死んでいきます。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%C8%A5%D4%A5%A2\">ユートピア</a>を要求する殺人鬼に、人の命に平等に価値はなく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%C8%A5%D4%A5%A2\">ユートピア</a>は実現できないと断ずる総理が、それでも目指さなくてはならないと演説するシーンには心が揺さぶられます。<br />\n少女が使命感に突き動かされ処女を捧げ泣き帰るシーン、その少女が親友とその子供を殺され心が壊れてしまうシーンでは、自分が刺されているかのような痛みを覚えます。<br />\n善良な一般市民からの悪意と息子の悪行によって母親が自殺するシーン、自殺できなかった父親がテレビの前で息子を殺してくれと嘆願するシーン、個人と社会を天秤に載せ人質もろとも犯人を射殺しろと命令した警察官が記者会見の場で自害するシーン、いくらでもおもしろい場面があります。<br />\n何度も読みました。<br />\nこれから先も何度も読むでしょう。<br />\nまた一度本棚の奥にしまって次に読む時を楽しみにします。</p>\n\n","slug":"THE WORLD IS MINE"},{"data":{"title":"Ubuntu14.10にVMWare Player 7をインストールする時に起こったエラー","published":"2015/02/02"},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ubuntu\">Ubuntu</a> 14.10に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VMware\">VMware</a> Player 7をインストールしようとしていたら</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>~/Downloads/VMware-Player-7.0.0-2305329.x86_64.bundle </pre><p>を実行した際に</p>\n\n    <blockquote>\n        <p>(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vmware\">vmware</a>-installer.py:12935): <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gtk\">Gtk</a>-WARNING **: module_path にはテーマ・エンジンがありません: \"murrine\"<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gtk\">Gtk</a>-Message: Failed to load module \"canberra-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gtk\">gtk</a>-module\": libcanberra-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gtk\">gtk</a>-module.so: 共有オブジェクトファイルを開けません: そのようなファイルやディレクトリはありません</p>\n\n    </blockquote>\n<p>とエラーが出ました。<br />\nググッて検索したところ１つ目のエラーはgtk2-engines-muriineをインストールすれば良いとのことだったのですが</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sudo apt-get install gtk2-engines-murrine</pre><p>としても既に最新版だと言われてしまいます。</p><p><a href=\"http://ubuntuforums.org/archive/index.php/t-2061142.html\">[ubuntu] Gtk-WARNING: Unable to locate theme engine in module_path &quot;murrine&quot; [Archive] - Ubuntu Forums</a><br />\nここを見る限り、32bit版のgtk2-engines-murrineを求められているようです。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sudo apt-get install --reinstall gtk2-engines-murrine:i386</pre><p>で再インストールしたところ通りました。</p><p>２つ目は解決できませんでした。<br />\nどうすればいいんでしょうね。</p>\n\n","slug":"Ubuntu14.10にVMWare Player 7をインストールする時に起こったエラー"},{"data":{"title":"smartparrensとweb-modeを使う時の設定","published":"2015/01/29","tags":["emacs","elisp"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>でerbファイルを扱う時にsmartparrensとweb-modeがどちらも補完してしまいます。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% %&gt;</pre><p>としたいのに</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% %&gt;&gt;</pre><p>と<がひとつ多くなってしまいます。</p><p>まずsmartparensが</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;</pre><p>と入力された時点で</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt; &gt;</pre><p>と補完します。<br />\nその後に</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% &gt;</pre><p>と%を入力し、スペースや=を入力すると</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;% %&gt;&gt;</pre><p>と%>を補完してしまい、>がひとつ多くなるのです。</p><p>一応web-mode.elの844行目から847行目の</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>    <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;erb&quot;</span>        <span class=\"synStatement\"> . </span><span class=\"synSpecial\">((</span><span class=\"synConstant\">&quot;&lt;% &quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot; %&gt;&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%=&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&gt;&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%#&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&gt;&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%-&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&gt;&quot;</span><span class=\"synSpecial\">)))</span>\n</pre><p>を</p>\n<pre class=\"code lang-lisp\" data-lang=\"lisp\" data-unlink>    <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;erb&quot;</span>        <span class=\"synStatement\"> . </span><span class=\"synSpecial\">((</span><span class=\"synConstant\">&quot;&lt;% &quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot; %&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%=&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%#&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">)</span>\n                      <span class=\"synSpecial\">(</span><span class=\"synConstant\">&quot;&lt;%-&quot;</span><span class=\"synStatement\"> . </span><span class=\"synConstant\">&quot;%&quot;</span><span class=\"synSpecial\">)))</span>\n</pre><p>と置き換えることで正常な補完となるのですが、init.elへの設定などでこれを解決できませんかね。</p><p>スタックオーバーフローでも質問してみました。<br />\ntab=answers<a href=\"http://ja.stackoverflow.com/questions/5573/smartparens%E3%81%A8web-mode%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E4%BD%BF%E3%81%86%E9%9A%9B%E3%81%AE%E8%A8%AD%E5%AE%9A\">emacs - smartparens&#x3068;web-mode&#x3092;&#x540C;&#x6642;&#x306B;&#x4F7F;&#x3046;&#x969B;&#x306E;&#x8A2D;&#x5B9A; - &#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30FB;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30D5;&#x30ED;&#x30FC;</a></p>\n\n","slug":"smartparrensとweb-modeを使う時の設定"},{"data":{"title":"複数のシステムのＥｍａｃｓ上でｇａｕｃｈｅを使う時のinit.elの設定","published":"2015/01/19","tags":["emacs","gauche","ubuntu","mac"]},"content":"\n<p>現在Ｍａｃｂｏｏｋ　ＰｒｏとＵｂｕｎｔｕを使っています。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/emacs\">emacs</a>上で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>を使おうとする時にｍａｃとｕｂｕｎｔｕで設定を統一したかったので調べました。</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span>when <span class=\"synSpecial\">(</span>eq system-type <span class=\"synSpecial\">'</span>system-type<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>setq ...<span class=\"synSpecial\">))</span>\n</pre><p>とすれば良いようです。<br />\nsystem-typeですが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/linux\">linux</a>では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gnu/linux\">gnu/linux</a>,、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mac\">mac</a>では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/darwin\">darwin</a>となっています。<br />\n私の場合は以下のように記述しました。</p>\n<pre class=\"code lang-scheme\" data-lang=\"scheme\" data-unlink><span class=\"synSpecial\">(</span><span class=\"synStatement\">cond</span>\n <span class=\"synSpecial\">((</span>eq system-type <span class=\"synSpecial\">'</span>gnu/linux<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>setq scheme-program-name <span class=\"synConstant\">&quot;gosh -i&quot;</span><span class=\"synSpecial\">))</span>\n <span class=\"synSpecial\">((</span>eq system-type <span class=\"synSpecial\">'</span>darwin<span class=\"synSpecial\">)</span>\n  <span class=\"synSpecial\">(</span>setq scheme-program-name <span class=\"synConstant\">&quot;/usr/local/bin/gosh -i&quot;</span><span class=\"synSpecial\">)))</span>\n</pre><p>条件を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>指定するのでwhenではなくcondを使用しました。<br />\nこれでｕｂｕｎｔｕでもｍａｃでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>が走ります。</p><br />\n<br />\n<p>そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mac\">mac</a>にもパスを通してあるはずなのになぜ\"gosh -i\"で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gauche\">gauche</a>が走らないんだろう</p><p>[参考]<br />\n<a href=\"http://d.hatena.ne.jp/kenbeese/20120212/title\">emacs&#x306E;&#x8A2D;&#x5B9A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;.emacs&#x3092;&#x8907;&#x6570;&#x306E;&#x74B0;&#x5883;(&#x7570;&#x306A;&#x308B;PC&#x3001;OS)&#x3067;&#x7D71;&#x4E00;&#x3059;&#x308B;&#x65B9;&#x6CD5; - Linux, Mac, Emacs&#x306B;&#x3064;&#x3044;&#x3066;&#x306E;&#x8A2D;&#x5B9A;&#x3001;&#x899A;&#x3048;&#x66F8;&#x304D;</a></p>\n\n","slug":"複数のシステムのＥｍａｃｓ上でｇａｕｃｈｅを使う時のinit.elの設定"},{"data":{"title":"ＵｂｕｎｔｕでＥｍａｃｓ使用時にＣ－ｆなどで勝手にマークされてしまう","published":"2015/01/14","tags":["Ubuntu","emacs"]},"content":"\n\n<div class=\"section\">\n    <h3>症状</h3>\n    <p>C-f C-b C-n C-p で勝手にmark setされる</p>\n\n</div>\n<div class=\"section\">\n    <h3>原因</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ubuntu\">Ubuntu</a>のシステム設定でＣｔｒｌキーの位置をＣｔｒｌとして扱うにしているとこの症状が起こるみたい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>解決策</h3>\n    <p>Ctrlキーの位置を Ctrl と Caps Lock を入れ替えるに変更する。<br />\nCaps Lock を使わないので両方Ctrlとして使いたかったのだけれどいろいろ弄っても無理でした。<br />\nCtrl を押さないように気をつけます。</p>\n\n</div>\n","slug":"ＵｂｕｎｔｕでＥｍａｃｓ使用時にＣ－ｆなどで勝手にマークされてしまう"},{"data":{"title":"ＵｂｕｎｔｕにK750 for macを導入しました。","published":"2015/01/11","tags":["Ubuntu","キーボード"]},"content":"\n<p>Ｕｎｉｆｙｉｎｇとの接続はＭＢＰで。<br />\nタッチ感は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C8%A5%ED%A1%BC%A5%AF\">ストローク</a>が浅めでＭＢＰに近い感じ。<br />\nなかなか使いやすくていいです。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%E9%A1%BC%A5%D1%A5%CD%A5%EB\">ソーラーパネル</a>なので充電の心配がいらないってのが素晴らしい。<br />\n以下に私がやった初期設定を書きます。</p><p>私の環境でははじめ日本語キーボードと認識されていたので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%D1%B8%EC%A5%AD%A1%BC%A5%DC%A1%BC%A5%C9\">英語キーボード</a>と認識させるところから。</p>\n\n<div class=\"section\">\n    <h3>ＵＳ配列キーボードと認識させる</h3>\n    <pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>sudo dpkg-reconfigure keyboard-configuration\n</pre><p>ここで使用しているキーボードのモデルを選択。<br />\n次にＥｎｇｌｉｓｈ（ＵＳ）を選択。<br />\nその次もEnglish(US)を選択。<br />\nその後は好みでＡｌｔＧｒやコンポーズキーを選択し、Ｘサーバの強制終了にＣｔｒ + Alt + Backspaceを割り当てる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>標準でファンクションキーを使う</h3>\n    <p>Ｓｏｌａａｒをインストールする。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>sudo apt-add-repository <span class=\"synStatement\">'</span><span class=\"synConstant\">deb http://ppa.launchpad.net/daniel.pavel/solaar/ubuntu trusty main</span><span class=\"synStatement\">'</span>\nsudo apt-get update\nsudo apt-get <span class=\"synStatement\">install</span> solaar-gnome3\n</pre><p>solaarを起動しK750のswap Fx functionをオフにする。</p>\n\n</div>\n<div class=\"section\">\n    <h3>キーの割当を変更</h3>\n    <p>tweak toolを使う</p>\n\n<div class=\"section\">\n    <h4>Caps lockをＣｏｎｔｒｏｌ</h4>\n    <p>タイピング欄からＣｔｒｌの位置をクリックし、Caps Lock を Ctrl として使うを選択</p>\n\n</div>\n<div class=\"section\">\n    <h4>option と ｃｍｄ を交換</h4>\n    <p>タイピング欄からAlt/Win キーの動作をクリックし、Alt と Win を入れ替えるを選択<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>fcitx の変換を Cmd + Space にする</h3>\n    <p>fcitx の設定を起動<br />\n全体の設定から入力<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>のオンオフで Cmd + Space を押す。<br />\n入力<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>でMozcを一番上にする。</p><p>システム設定からキーボード、ショートカットと選択し、ＬａｕｎｃｈｅｒのＨＵＤを表示するキーでＤｅｌｅｔｅを押し無効にする。</p><br />\n<br />\n<br />\n<br />\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B005L38VRU/wataro-22/\"><img src=\"http://ecx.images-amazon.com/images/I/414UrIJf2-L._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Logitech ワイヤレス ソーラー 英語 キーボード K750 for Mac - Silver　【並行輸入品】\" title=\"Logitech ワイヤレス ソーラー 英語 キーボード K750 for Mac - Silver　【並行輸入品】\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B005L38VRU/wataro-22/\">Logitech ワイヤレス ソーラー 英語 キーボード K750 for Mac - Silver　【並行輸入品】</a></p><ul><li><span class=\"hatena-asin-detail-label\">メディア:</span> Personal Computers</li><li><a href=\"http://d.hatena.ne.jp/asin/B005L38VRU/wataro-22\" target=\"_blank\">この商品を含むブログを見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n</div>\n","slug":"ＵｂｕｎｔｕにK750 for macを導入しました。"},{"data":{"title":"Ubuntu入れました。","published":"2015/01/02","tags":["Ubuntu"]},"content":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Windows7\">Windows7</a>が入っていたPCにubuntu14.10をインストールしました。<br />\n入れてからやっぱり14.04LTSのほうがよかったかなーと思ったり。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Windows7\">Windows7</a>よりも使い勝手はよさそうです。<br />\nはまったところをメモしておきます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Emacs24.4のインストール</h3>\n    <p>./configureを実行しようとしてもlibgtk+が足りないって怒られます。<br />\nこれをインストールすると今度はlibXpmなどの画像系libraryが足りないと怒られます。<br />\n順に足りないライブラリを入れていったのですが、<br />\nsudo apt-get  lib○○-dev　で見つからないライブラリもあったり。<br />\nなのになぜかmakeが通るようになりました。<br />\nよくわからない。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>mozcインストール後に日本語入力ができなくなる</h3>\n    <p>原因不明。<br />\n諦めて再インストールしました。<br />\nなんだったんだろう</p>\n\n</div>\n<div class=\"section\">\n    <h3>ブルーレイが再生できない</h3>\n    <p>どうもゴニョゴニョしないとだめみたい？<br />\nレコーダーが別にあるからわざわざPCで再生しなくてもってことでゴニョゴニョはしませんでした。</p><br />\n<br />\n<p>こんなところですね。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/itunes\">itunes</a>の代わりをどうするかはまた検討する予定です。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VM\">VM</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/win7\">win7</a>を入れるか、それともMBPを母艦にしてしまうか。<br />\n新しい環境の構築は楽しいですなー</p>\n\n</div>\n","slug":"Ubuntu入れました。"},{"data":{"title":"【ターミナル】基本的なコマンド","published":"2014/12/21","tags":["ターミナル"]},"content":"\n\n<div class=\"section\">\n    <h3>ls</h3>\n    <p>ディレクトリの内容を表示する</p>\n\n<ul>\n<li>ls </li>\n<li>ls -l       詳細情報を表示する</li>\n<li>ls -a      隠しファイルも含めてすべて表示する</li>\n<li>ls -t      更新日時順にソートして表示する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>cd</h3>\n    <p>ディレクトリの移動</p>\n\n<ul>\n<li>cd to     |toへ移動</li>\n<li>cd ~      |homeディレクトリへ移動する</li>\n<li>cd ..      一つ上のディレクトリへ移動する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>pwd</h3>\n    <p>現在のディレクトリを表示する</p>\n\n<ul>\n<li>pwd</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>mkdir</h3>\n    <p>ディレクトリの作成</p>\n\n<ul>\n<li>mkdir etc     現在のディレクトリの中にetcディレクトリを作成する</li>\n<li>mkdir -p etc/foo     中間ディレクトリも同時に作成する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>rm</h3>\n    <p>ファイルを削除する</p>\n\n<ul>\n<li>rm sample.txt     sample.txtを削除する</li>\n<li>rm -r etc     etcディレクトリを削除する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>mv</h3>\n    <p>ファイルを移動する/ファイル名を変更する</p>\n\n<ul>\n<li>mv sample.txt etc     sample.txtをetcディレクトリへ移動する</li>\n<li>mv sample0.txt sample1.txt     ファイル名を変更する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>cp</h3>\n    <p>ファイルをコピーする</p>\n\n<ul>\n<li>cp sample1.txt sample2.txt</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>cat</h3>\n    <p>ファイルを表示する/連結して表示する</p>\n\n<ul>\n<li>cat foo.txt</li>\n<li>cat foo.txt bar.txt</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>less</h3>\n    <p>ファイルを閲覧する</p>\n\n<ul>\n<li>j １行進む</li>\n<li>k １行戻る</li>\n<li>SPACE １ページ進む</li>\n<li>b １ページ戻る</li>\n<li>/ 検索</li>\n<li>n 次の検索結果</li>\n<li>q 終了する</li>\n</ul><p></p><br />\n<p>参考書籍：WEB+BD PRESS Vol.80<div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4774163988/hatena-blog-22/\"><img src=\"http://ecx.images-amazon.com/images/I/61um883SRiL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"WEB+DB PRESS Vol.80\" title=\"WEB+DB PRESS Vol.80\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4774163988/hatena-blog-22/\">WEB+DB PRESS Vol.80</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> 鶴長鎮一,宮下剛輔,縣俊貴,中村知成,西尾泰和,新井俊一,南川毅文,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B0%CB%C6%A3%C4%BE%CC%E9\">伊藤直也</a>,石垣憲一,浅木朗,渡邊恵太,中島聡,はまちや2,竹原,川添貴生,河合宜文,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/WEB%2BDB%20PRESS\">WEB+DB PRESS</a>編集部</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2\">技術評論社</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/04/24</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4774163988/hatena-blog-22\" target=\"_blank\">この商品を含むブログ (6件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n</div>\n","slug":"【ターミナル】基本的なコマンド"}]},"__N_SSG":true}